[
  {
    "id": "https://docs.crossmint.com/api-reference/admin/get-usage#chunk_0",
    "url": "https://docs.crossmint.com/api-reference/admin/get-usage",
    "title": "Get Usage - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Admin Get Usage Documentation API Reference SDK Reference CLI Solution Guides Changelog API Reference Introduction Wallets POST Create Wallet GET Get Wallet By Locator GET Get Wallet Balance POST Fund Wallet GET Get NFTs from Wallet POST Create Transaction GET Get Transaction GET Get Wallet Transactions POST Approve Transaction POST Create Signature GET Get All Signatures GET Get Signature POST Approve Signature POST Create Delegated Signer GET Get Delegated Signer POST Transfer Token NFTs POST Mint NFT PUT Mint NFT with ID POST Mint SFT GET Get All NFTs GET Mint Status PATCH Edit NFT DEL Burn NFT IP POST Create IP Collection PUT Create IP Collection (Idempotent) GET Get IP Collection GET Get All IP Collections GET Get IP Assets in Collection GET Get IP Asset POST Create IP Asset PUT Create IP Asset (Idempotent) PATCH Update IP Asset GET Get IP Action GET Get IP Asset License GET Get IP Asset Graph NFT Collections POST Create Collection PUT Create Collection (Idempotent) GET Get All Collections GET Get Collection Info PATCH Update Collection PUT Set Royalties GET Get Royalties Configuration DEL Remove Royalties PUT Set Base URI GET Get Base URI PUT Set Transferability GET Get Transferability NFT Templates POST Create Template PUT Create Template with ID GET Get Template GET Get All Templates PATCH Edit Template DEL Delete Template Verifiable Credentials POST Create Credential template POST Issue Credential GET Get Credential by Credential ID GET Get Credential by NFT ID GET Get Credential by NFT Locator GET Retrieve credential nfts POST Verify Credential DEL Revoke Credential Verifiable Credential Types POST Create Credential Type PUT Create Credential Type with Name GET Get a Credential Type Headless Checkout POST Create Order GET Get Order PATCH Edit Order GET Check Token Support Action Status GET Get Action Status Admin GET Get Usage Get Usage cURL Copy Ask AI curl --request GET \\ --url https://staging.crossmint.com/api/v1-alpha1/projects/{projectId}/usage \\ --header 'X-API-KEY: <api-key>' 200 400 403 503 Copy Ask AI { \"data\" : { \"dimension\" : \"<string>\" , \"usage\" : { \"month\" : \"<string>\" , \"activeWallets\" : 123 } } } GET https://staging.crossmint.com/api https://www.crossmint.com/api / v1-alpha1 / projects / {projectId} / usage Try it Get Usage cURL Copy Ask AI curl --request GET \\ --url https://staging.crossmint.com/api/v1-alpha1/projects/{projectId}/usage \\ --header 'X-API-KEY: <api-key>' 200 400 403 503 Copy Ask AI { \"data\" : { \"dimension\" : \"<string>\" , \"usage\" : { \"month\" : \"<string>\" , \"activeWallets\" : 123 } } } This is an alpha API and subject to change. Authorizations ​ X-API-KEY string header required Path Parameters ​ projectId string default: default required You can find your project ID in the Crossmint console. Query Parameters ​ dimension enum<string> default: monthly_active_wallets required The dimension you want to query, for example monthly_active_wallets . Available options: monthly_active_wallets ​ startDate string required The startDate you want to query in YYYY-MM format, for example 2023-11 for November 2023. ​ endDate string The endDate you want to query in YYYY-MM format, for example 2023-12 for December 2023. Response 200 200 400 403 503 application/json Success. The response is of type object . Was this page helpful? Yes No Get Action Status Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 538
  },
  {
    "id": "https://docs.crossmint.com/api-reference/common/get-action-status#chunk_0",
    "url": "https://docs.crossmint.com/api-reference/common/get-action-status",
    "title": "Get Action Status - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Action Status Get Action Status Documentation API Reference SDK Reference CLI Solution Guides Changelog API Reference Introduction Wallets POST Create Wallet GET Get Wallet By Locator GET Get Wallet Balance POST Fund Wallet GET Get NFTs from Wallet POST Create Transaction GET Get Transaction GET Get Wallet Transactions POST Approve Transaction POST Create Signature GET Get All Signatures GET Get Signature POST Approve Signature POST Create Delegated Signer GET Get Delegated Signer POST Transfer Token NFTs POST Mint NFT PUT Mint NFT with ID POST Mint SFT GET Get All NFTs GET Mint Status PATCH Edit NFT DEL Burn NFT IP POST Create IP Collection PUT Create IP Collection (Idempotent) GET Get IP Collection GET Get All IP Collections GET Get IP Assets in Collection GET Get IP Asset POST Create IP Asset PUT Create IP Asset (Idempotent) PATCH Update IP Asset GET Get IP Action GET Get IP Asset License GET Get IP Asset Graph NFT Collections POST Create Collection PUT Create Collection (Idempotent) GET Get All Collections GET Get Collection Info PATCH Update Collection PUT Set Royalties GET Get Royalties Configuration DEL Remove Royalties PUT Set Base URI GET Get Base URI PUT Set Transferability GET Get Transferability NFT Templates POST Create Template PUT Create Template with ID GET Get Template GET Get All Templates PATCH Edit Template DEL Delete Template Verifiable Credentials POST Create Credential template POST Issue Credential GET Get Credential by Credential ID GET Get Credential by NFT ID GET Get Credential by NFT Locator GET Retrieve credential nfts POST Verify Credential DEL Revoke Credential Verifiable Credential Types POST Create Credential Type PUT Create Credential Type with Name GET Get a Credential Type Headless Checkout POST Create Order GET Get Order PATCH Edit Order GET Check Token Support Action Status GET Get Action Status Admin GET Get Usage Get Action Status cURL Copy Ask AI curl --request GET \\ --url https://staging.crossmint.com/api/2022-06-09/actions/{actionId} \\ --header 'X-API-KEY: <api-key>' 200 403 404 524 Copy Ask AI { \"actionId\" : \"66881a4d-eff9-467a-b19d-a2ff76eef5c2\" , \"action\" : \"nfts.create\" , \"status\" : \"pending\" , \"data\" : { \"collection\" : { \"id\" : \"someCollection\" , \"contractAddress\" : \"0x0B7c736cD6D517b6AFfB3F6151eC662B0000018B\" }, \"recipient\" : { \"walletAddress\" : \"0x6Def4FF2Efe3731EB2Ca09c625d21bfd6da00000\" }, \"token\" : { \"id\" : \"66881a4d-eff9-467a-b19d-a2ff76eef5c2\" } }, \"startedAt\" : \"2023-10-02T22:10:41.000Z\" , \"resource\" : \"https://staging.crossmint.com/api/2022-06-09/actions/66881a4d-eff9-467a-b19d-a2ff76eef5c2\" } GET https://staging.crossmint.com/api https://www.crossmint.com/api / 2022-06-09 / actions / {actionId} Try it Get Action Status cURL Copy Ask AI curl --request GET \\ --url https://staging.crossmint.com/api/2022-06-09/actions/{actionId} \\ --header 'X-API-KEY: <api-key>' 200 403 404 524 Copy Ask AI { \"actionId\" : \"66881a4d-eff9-467a-b19d-a2ff76eef5c2\" , \"action\" : \"nfts.create\" , \"status\" : \"pending\" , \"data\" : { \"collection\" : { \"id\" : \"someCollection\" , \"contractAddress\" : \"0x0B7c736cD6D517b6AFfB3F6151eC662B0000018B\" }, \"recipient\" : { \"walletAddress\" : \"0x6Def4FF2Efe3731EB2Ca09c625d21bfd6da00000\" }, \"token\" : { \"id\" : \"66881a4d-eff9-467a-b19d-a2ff76eef5c2\" } }, \"startedAt\" : \"2023-10-02T22:10:41.000Z\" , \"resource\" : \"https://staging.crossmint.com/api/2022-06-09/actions/66881a4d-eff9-467a-b19d-a2ff76eef5c2\" } The shape of the data property in the 200 response for this API depends on the type of action initially performed. For example, minting/burning an NFT, creating/updating a collection or template, or NFT transfers. The action property will indicate the type of action originally performed and will be one of: nfts.create nfts.delete nfts.update collections.create collections.update wallets:nfts.transfer Authorizations ​ X-API-KEY string header required Obtained in the Crossmint developer console Path Parameters ​ actionId string required The actionId. Response 200 200 403 404 524 application/json Success The response is of type object . Was this page helpful? Yes No Check Token Support Get Usage Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 585
  },
  {
    "id": "https://docs.crossmint.com/api-reference/headless/check-token-support#chunk_0",
    "url": "https://docs.crossmint.com/api-reference/headless/check-token-support",
    "title": "Check Token Support - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Headless Checkout Check Token Support Documentation API Reference SDK Reference CLI Solution Guides Changelog API Reference Introduction Wallets POST Create Wallet GET Get Wallet By Locator GET Get Wallet Balance POST Fund Wallet GET Get NFTs from Wallet POST Create Transaction GET Get Transaction GET Get Wallet Transactions POST Approve Transaction POST Create Signature GET Get All Signatures GET Get Signature POST Approve Signature POST Create Delegated Signer GET Get Delegated Signer POST Transfer Token NFTs POST Mint NFT PUT Mint NFT with ID POST Mint SFT GET Get All NFTs GET Mint Status PATCH Edit NFT DEL Burn NFT IP POST Create IP Collection PUT Create IP Collection (Idempotent) GET Get IP Collection GET Get All IP Collections GET Get IP Assets in Collection GET Get IP Asset POST Create IP Asset PUT Create IP Asset (Idempotent) PATCH Update IP Asset GET Get IP Action GET Get IP Asset License GET Get IP Asset Graph NFT Collections POST Create Collection PUT Create Collection (Idempotent) GET Get All Collections GET Get Collection Info PATCH Update Collection PUT Set Royalties GET Get Royalties Configuration DEL Remove Royalties PUT Set Base URI GET Get Base URI PUT Set Transferability GET Get Transferability NFT Templates POST Create Template PUT Create Template with ID GET Get Template GET Get All Templates PATCH Edit Template DEL Delete Template Verifiable Credentials POST Create Credential template POST Issue Credential GET Get Credential by Credential ID GET Get Credential by NFT ID GET Get Credential by NFT Locator GET Retrieve credential nfts POST Verify Credential DEL Revoke Credential Verifiable Credential Types POST Create Credential Type PUT Create Credential Type with Name GET Get a Credential Type Headless Checkout POST Create Order GET Get Order PATCH Edit Order GET Check Token Support Action Status GET Get Action Status Admin GET Get Usage Check Supported Tokens cURL Copy Ask AI curl --request GET \\ --url https://staging.crossmint.com/api/v1-alpha2/tokens/{tokenLocator} \\ --header 'X-API-KEY: <api-key>' 200 400 403 404 503 524 Copy Ask AI { \"token\" : \"solana:6p6xgHyF7AeE6TZkSmFsko444wqoP15icUSqi2jfGiPN\" , \"available\" : true , \"features\" : { \"creditCardPayment\" : true } } GET https://staging.crossmint.com/api https://www.crossmint.com/api / v1-alpha2 / tokens / {tokenLocator} Try it Check Supported Tokens cURL Copy Ask AI curl --request GET \\ --url https://staging.crossmint.com/api/v1-alpha2/tokens/{tokenLocator} \\ --header 'X-API-KEY: <api-key>' 200 400 403 404 503 524 Copy Ask AI { \"token\" : \"solana:6p6xgHyF7AeE6TZkSmFsko444wqoP15icUSqi2jfGiPN\" , \"available\" : true , \"features\" : { \"creditCardPayment\" : true } } Authorizations apiKey clientApiKey ​ X-API-KEY string header required Path Parameters ​ tokenLocator string required A unique identifier used to locate a specific fungible token on a blockchain. Currently, memecoin checkout only supports the Solana network. Format: solana:<mintHash> (e.g. solana:6p6xgHyF7AeE6TZkSmFsko444wqoP15icUSqi2jfGiPN ). Response 200 200 400 403 404 503 524 application/json The token has been successfully retrieved. Information regarding the token that was requested and its availability Was this page helpful? Yes No Edit Order Get Action Status Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 497
  },
  {
    "id": "https://docs.crossmint.com/api-reference/headless/create-order#chunk_0",
    "url": "https://docs.crossmint.com/api-reference/headless/create-order",
    "title": "Create Order - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Headless Checkout Create Order Documentation API Reference SDK Reference CLI Solution Guides Changelog API Reference Introduction Wallets POST Create Wallet GET Get Wallet By Locator GET Get Wallet Balance POST Fund Wallet GET Get NFTs from Wallet POST Create Transaction GET Get Transaction GET Get Wallet Transactions POST Approve Transaction POST Create Signature GET Get All Signatures GET Get Signature POST Approve Signature POST Create Delegated Signer GET Get Delegated Signer POST Transfer Token NFTs POST Mint NFT PUT Mint NFT with ID POST Mint SFT GET Get All NFTs GET Mint Status PATCH Edit NFT DEL Burn NFT IP POST Create IP Collection PUT Create IP Collection (Idempotent) GET Get IP Collection GET Get All IP Collections GET Get IP Assets in Collection GET Get IP Asset POST Create IP Asset PUT Create IP Asset (Idempotent) PATCH Update IP Asset GET Get IP Action GET Get IP Asset License GET Get IP Asset Graph NFT Collections POST Create Collection PUT Create Collection (Idempotent) GET Get All Collections GET Get Collection Info PATCH Update Collection PUT Set Royalties GET Get Royalties Configuration DEL Remove Royalties PUT Set Base URI GET Get Base URI PUT Set Transferability GET Get Transferability NFT Templates POST Create Template PUT Create Template with ID GET Get Template GET Get All Templates PATCH Edit Template DEL Delete Template Verifiable Credentials POST Create Credential template POST Issue Credential GET Get Credential by Credential ID GET Get Credential by NFT ID GET Get Credential by NFT Locator GET Retrieve credential nfts POST Verify Credential DEL Revoke Credential Verifiable Credential Types POST Create Credential Type PUT Create Credential Type with Name GET Get a Credential Type Headless Checkout POST Create Order GET Get Order PATCH Edit Order GET Check Token Support Action Status GET Get Action Status Admin GET Get Usage Create Order cURL Copy Ask AI curl --request POST \\ --url https://staging.crossmint.com/api/2022-06-09/orders \\ --header 'Content-Type: application/json' \\ --header 'X-API-KEY: <api-key>' \\ --data '{ \"recipient\": { \"email\": \"jsmith@example.com\", \"physicalAddress\": { \"name\": \"<string>\", \"line1\": \"<string>\", \"line2\": \"<string>\", \"city\": \"<string>\", \"state\": \"<string>\", \"postalCode\": \"<string>\", \"country\": \"<string>\" } }, \"locale\": \"en-US\", \"payment\": { \"receiptEmail\": \"jsmith@example.com\", \"method\": \"arbitrum-sepolia\", \"currency\": \"eth\", \"payerAddress\": \"<string>\" }, \"lineItems\": { \"collectionLocator\": \"crossmint:<collectionId>\", \"callData\": { \"totalPrice\": \"<string>\" } } }' 201 example Copy Ask AI { \"clientSecret\" : \"_removed_\" , \"order\" : { \"orderId\" : \"b2959ca5-65e4-466a-bd26-1bd05cb4f837\" , \"phase\" : \"payment\" , \"locale\" : \"en-US\" , \"lineItems\" : [ { \"chain\" : \"polygon-amoy\" , \"quantity\" : 1 , \"callData\" : { \"quantity\" : 1 , \"ADDITIONAL_PROPERTIES\" : \"Your other mint function arguments\" }, \"metadata\" : { \"name\" : \"Headless Checkout Demo\" , \"description\" : \"NFT Description\" , \"imageUrl\" : \"https://cdn.io/image.png\" }, \"quote\" : { \"status\" : \"valid\" , \"charges\" : { \"unit\" : { \"amount\" : \"0.0001\" , \"currency\" : \"eth\" }, \"salesTax\" : { \"amount\" : \"0.34\" , \"currency\" : \"usdc\" }, \"shipping\" : { \"amount\" : \"0\" , \"currency\" : \"usdc\" } }, \"totalPrice\" : { \"amount\" : \"0.0001\" , \"currency\" : \"eth\" } }, \"delivery\" : { \"status\" : \"awaiting-payment\" , \"recipient\" : { \"locator\" : \"email:<email_address>:<chain>\" , \"email\" : \"testy@crossmint.com\" , \"walletAddress\" : \"0x1234abcd...\" } } } ], \"quote\" : { \"status\" : \"valid\" , \"quotedAt\" : \"2024-06-07T16:55:44.653Z\" , \"expiresAt\" : \"2024-06-07T17:55:44.653Z\" , \"totalPrice\" : { \"amount\" : \"0.0001375741\" , \"currency\" : \"eth\" } }, \"payment\" : { \"status\" : \"awaiting-payment\" , \"method\" : \"base-sepolia\" , \"currency\" : \"eth\" , \"preparation\" : { \"chain\" : \"base-sepolia\" , \"payerAddress\" : \"0x1234abcd...\" , \"serializedTransaction\" : \"0x02f90.....\" } } } } POST https://staging.crossmint.com/api https://www.crossmint.com/api / 2022-06-09 / orders Try it Create Order cURL Copy Ask AI curl --request POST \\ --url https://staging.crossmint.com/api/2022-06-09/orders \\ --header 'Content-Type: application/json' \\ --header 'X-API-KEY: <api-key>' \\ --data '{ \"recipient\": { \"email\": \"jsmith@example.com\", \"physicalAddress\": { \"name\": \"<string>\", \"line1\": \"<string>\", \"line2\": \"<string>\", \"city\": \"<string>\", \"state\": \"<string>\", \"postalCode\": \"<string>\", \"country\": \"<string>\" } }, \"locale\": \"en-US\", \"payment\": { \"receiptEmail\": \"jsmith@example.com\", \"method\": \"arbitrum-sepolia\", \"currency\": \"eth\", \"payerAddress\": \"<string>\" }, \"lineItems\": { \"collectionLocator\": \"crossmint:<collectionId>\", \"callData\": { \"totalPrice\": \"<string>\" } } }' 201 example Copy Ask AI { \"clientSecret\" : \"_removed_\" , \"order\" : { \"orderId\" : \"b2959ca5-65e4-466a-bd26-1bd05cb4f837\" , \"phase\" : \"payment\" , \"locale\" : \"en-US\" , \"lineItems\" : [ { \"chain\" : \"polygon-amoy\" , \"quantity\" : 1 , \"callData\" : { \"quantity\" : 1 , \"ADDITIONAL_PROPERTIES\" : \"Your other mint function arguments\" }, \"metadata\" : { \"name\" : \"Headless Checkout Demo\" , \"description\" : \"NFT Description\" , \"imageUrl\" : \"https://cdn.io/image.png\" }, \"quote\" : { \"status\" : \"valid\" , \"charges\" : { \"unit\" : { \"amount\" : \"0.0001\" , \"currency\" : \"eth\" }, \"salesTax\" : { \"amount\" : \"0.34\" , \"currency\" : \"usdc\" }, \"shipping\" : { \"amount\" : \"0\" , \"currency\" : \"usdc\" } }, \"totalPrice\" : { \"amount\" : \"0.0001\" , \"currency\" : \"eth\" } }, \"delivery\" : { \"status\" : \"awaiting-payment\" , \"recipient\" : { \"locator\" : \"email:<email_address>:<chain>\" , \"email\" : \"testy@crossmint.com\" , \"walletAddress\" : \"0x1234abcd...\" } } } ], \"quote\" : { \"status\" : \"valid\" , \"quotedAt\" : \"2024-06-07T16:55:44.653Z\" , \"expiresAt\" : \"2024-06-07T17:55:44.653Z\" , \"totalPrice\" : { \"amount\" : \"0.0001375741\" , \"currency\" : \"eth\" } }, \"payment\" : { \"status\" : \"awaiting-payment\" , \"method\" : \"base-sepolia\" , \"currency\" : \"eth\" , \"preparation\" : { \"chain\" : \"base-sepolia\" , \"payerAddress\" : \"0x1234abcd...\" , \"serializedTransaction\" : \"0x02f90.....\" } } } } Authorizations ​ X-API-KEY string header required Body application/json Response 201 201 400 403 404 503 524 application/json Order successfully created. The response is of type object . Was this page helpful? Yes No Get a Credential Type Get Order Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 931
  },
  {
    "id": "https://docs.crossmint.com/api-reference/headless/edit-order#chunk_0",
    "url": "https://docs.crossmint.com/api-reference/headless/edit-order",
    "title": "Edit Order - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Headless Checkout Edit Order Documentation API Reference SDK Reference CLI Solution Guides Changelog API Reference Introduction Wallets POST Create Wallet GET Get Wallet By Locator GET Get Wallet Balance POST Fund Wallet GET Get NFTs from Wallet POST Create Transaction GET Get Transaction GET Get Wallet Transactions POST Approve Transaction POST Create Signature GET Get All Signatures GET Get Signature POST Approve Signature POST Create Delegated Signer GET Get Delegated Signer POST Transfer Token NFTs POST Mint NFT PUT Mint NFT with ID POST Mint SFT GET Get All NFTs GET Mint Status PATCH Edit NFT DEL Burn NFT IP POST Create IP Collection PUT Create IP Collection (Idempotent) GET Get IP Collection GET Get All IP Collections GET Get IP Assets in Collection GET Get IP Asset POST Create IP Asset PUT Create IP Asset (Idempotent) PATCH Update IP Asset GET Get IP Action GET Get IP Asset License GET Get IP Asset Graph NFT Collections POST Create Collection PUT Create Collection (Idempotent) GET Get All Collections GET Get Collection Info PATCH Update Collection PUT Set Royalties GET Get Royalties Configuration DEL Remove Royalties PUT Set Base URI GET Get Base URI PUT Set Transferability GET Get Transferability NFT Templates POST Create Template PUT Create Template with ID GET Get Template GET Get All Templates PATCH Edit Template DEL Delete Template Verifiable Credentials POST Create Credential template POST Issue Credential GET Get Credential by Credential ID GET Get Credential by NFT ID GET Get Credential by NFT Locator GET Retrieve credential nfts POST Verify Credential DEL Revoke Credential Verifiable Credential Types POST Create Credential Type PUT Create Credential Type with Name GET Get a Credential Type Headless Checkout POST Create Order GET Get Order PATCH Edit Order GET Check Token Support Action Status GET Get Action Status Admin GET Get Usage Edit Order cURL Copy Ask AI curl --request PATCH \\ --url https://staging.crossmint.com/api/2022-06-09/orders/{orderId} \\ --header 'Content-Type: application/json' \\ --header 'X-API-KEY: <api-key>' \\ --data '{ \"recipient\": { \"email\": \"jsmith@example.com\", \"physicalAddress\": { \"name\": \"<string>\", \"line1\": \"<string>\", \"line2\": \"<string>\", \"city\": \"<string>\", \"state\": \"<string>\", \"postalCode\": \"<string>\", \"country\": \"<string>\" } }, \"locale\": \"en-US\", \"payment\": { \"receiptEmail\": \"jsmith@example.com\", \"method\": \"arbitrum-sepolia\", \"currency\": \"eth\", \"payerAddress\": \"<string>\" } }' 200 400 403 404 503 524 Copy Ask AI { \"orderId\" : \"b2959ca5-65e4-466a-bd26-1bd05cb4f837\" , \"phase\" : \"payment\" , \"locale\" : \"en-US\" , \"lineItems\" : [ { \"chain\" : \"polygon-amoy\" , \"quantity\" : 1 , \"callData\" : { \"quantity\" : 1 , \"ADDITIONAL_PROPERTIES\" : \"Your other mint function arguments\" }, \"metadata\" : { \"name\" : \"Headless Checkout Demo\" , \"description\" : \"NFT Description\" , \"imageUrl\" : \"https://cdn.io/image.png\" }, \"quote\" : { \"status\" : \"valid\" , \"charges\" : { \"unit\" : { \"amount\" : \"0.0001\" , \"currency\" : \"eth\" }, \"salesTax\" : { \"amount\" : \"0.34\" , \"currency\" : \"usdc\" }, \"shipping\" : { \"amount\" : \"0\" , \"currency\" : \"usdc\" } }, \"totalPrice\" : { \"amount\" : \"0.0001\" , \"currency\" : \"eth\" } }, \"delivery\" : { \"status\" : \"awaiting-payment\" , \"recipient\" : { \"locator\" : \"email:<email_address>:<chain>\" , \"email\" : \"testy@crossmint.com\" , \"walletAddress\" : \"0x1234abcd...\" } } } ], \"quote\" : { \"status\" : \"valid\" , \"quotedAt\" : \"2024-06-07T16:55:44.653Z\" , \"expiresAt\" : \"2024-06-07T17:55:44.653Z\" , \"totalPrice\" : { \"amount\" : \"0.0001375741\" , \"currency\" : \"eth\" } }, \"payment\" : { \"status\" : \"awaiting-payment\" , \"method\" : \"base-sepolia\" , \"currency\" : \"eth\" , \"preparation\" : { \"chain\" : \"base-sepolia\" , \"payerAddress\" : \"0x1234abcd...\" , \"serializedTransaction\" : \"0x02f90.....\" } } } PATCH https://staging.crossmint.com/api https://www.crossmint.com/api / 2022-06-09 / orders / {orderId} Try it Edit Order cURL Copy Ask AI curl --request PATCH \\ --url https://staging.crossmint.com/api/2022-06-09/orders/{orderId} \\ --header 'Content-Type: application/json' \\ --header 'X-API-KEY: <api-key>' \\ --data '{ \"recipient\": { \"email\": \"jsmith@example.com\", \"physicalAddress\": { \"name\": \"<string>\", \"line1\": \"<string>\", \"line2\": \"<string>\", \"city\": \"<string>\", \"state\": \"<string>\", \"postalCode\": \"<string>\", \"country\": \"<string>\" } }, \"locale\": \"en-US\", \"payment\": { \"receiptEmail\": \"jsmith@example.com\", \"method\": \"arbitrum-sepolia\", \"currency\": \"eth\", \"payerAddress\": \"<string>\" } }' 200 400 403 404 503 524 Copy Ask AI { \"orderId\" : \"b2959ca5-65e4-466a-bd26-1bd05cb4f837\" , \"phase\" : \"payment\" , \"locale\" : \"en-US\" , \"lineItems\" : [ { \"chain\" : \"polygon-amoy\" , \"quantity\" : 1 , \"callData\" : { \"quantity\" : 1 , \"ADDITIONAL_PROPERTIES\" : \"Your other mint function arguments\" }, \"metadata\" : { \"name\" : \"Headless Checkout Demo\" , \"description\" : \"NFT Description\" , \"imageUrl\" : \"https://cdn.io/image.png\" }, \"quote\" : { \"status\" : \"valid\" , \"charges\" : { \"unit\" : { \"amount\" : \"0.0001\" , \"currency\" : \"eth\" }, \"salesTax\" : { \"amount\" : \"0.34\" , \"currency\" : \"usdc\" }, \"shipping\" : { \"amount\" : \"0\" , \"currency\" : \"usdc\" } }, \"totalPrice\" : { \"amount\" : \"0.0001\" , \"currency\" : \"eth\" } }, \"delivery\" : { \"status\" : \"awaiting-payment\" , \"recipient\" : { \"locator\" : \"email:<email_address>:<chain>\" , \"email\" : \"testy@crossmint.com\" , \"walletAddress\" : \"0x1234abcd...\" } } } ], \"quote\" : { \"status\" : \"valid\" , \"quotedAt\" : \"2024-06-07T16:55:44.653Z\" , \"expiresAt\" : \"2024-06-07T17:55:44.653Z\" , \"totalPrice\" : { \"amount\" : \"0.0001375741\" , \"currency\" : \"eth\" } }, \"payment\" : { \"status\" : \"awaiting-payment\" , \"method\" : \"base-sepolia\" , \"currency\" : \"eth\" , \"preparation\" : { \"chain\" : \"base-sepolia\" , \"payerAddress\" : \"0x1234abcd...\" , \"serializedTransaction\" : \"0x02f90.....\" } } } Authorizations apiKey orderClientSecret ​ X-API-KEY string header required Path Parameters ​ orderId string required This is the identifier for the order with UUID format. Example: 9c82ef99-617f-497d-9abb-fd355291681b Body application/json Response 200 200 400 403 404 503 524 application/json Order successfully created. The response is of type object . Was this page helpful? Yes No Get Order Check Token Support Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 924
  },
  {
    "id": "https://docs.crossmint.com/api-reference/headless/get-order#chunk_0",
    "url": "https://docs.crossmint.com/api-reference/headless/get-order",
    "title": "Get Order - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Headless Checkout Get Order Documentation API Reference SDK Reference CLI Solution Guides Changelog API Reference Introduction Wallets POST Create Wallet GET Get Wallet By Locator GET Get Wallet Balance POST Fund Wallet GET Get NFTs from Wallet POST Create Transaction GET Get Transaction GET Get Wallet Transactions POST Approve Transaction POST Create Signature GET Get All Signatures GET Get Signature POST Approve Signature POST Create Delegated Signer GET Get Delegated Signer POST Transfer Token NFTs POST Mint NFT PUT Mint NFT with ID POST Mint SFT GET Get All NFTs GET Mint Status PATCH Edit NFT DEL Burn NFT IP POST Create IP Collection PUT Create IP Collection (Idempotent) GET Get IP Collection GET Get All IP Collections GET Get IP Assets in Collection GET Get IP Asset POST Create IP Asset PUT Create IP Asset (Idempotent) PATCH Update IP Asset GET Get IP Action GET Get IP Asset License GET Get IP Asset Graph NFT Collections POST Create Collection PUT Create Collection (Idempotent) GET Get All Collections GET Get Collection Info PATCH Update Collection PUT Set Royalties GET Get Royalties Configuration DEL Remove Royalties PUT Set Base URI GET Get Base URI PUT Set Transferability GET Get Transferability NFT Templates POST Create Template PUT Create Template with ID GET Get Template GET Get All Templates PATCH Edit Template DEL Delete Template Verifiable Credentials POST Create Credential template POST Issue Credential GET Get Credential by Credential ID GET Get Credential by NFT ID GET Get Credential by NFT Locator GET Retrieve credential nfts POST Verify Credential DEL Revoke Credential Verifiable Credential Types POST Create Credential Type PUT Create Credential Type with Name GET Get a Credential Type Headless Checkout POST Create Order GET Get Order PATCH Edit Order GET Check Token Support Action Status GET Get Action Status Admin GET Get Usage Get Order cURL Copy Ask AI curl --request GET \\ --url https://staging.crossmint.com/api/2022-06-09/orders/{orderId} \\ --header 'X-API-KEY: <api-key>' 200 400 403 404 503 524 Copy Ask AI { \"orderId\" : \"b2959ca5-65e4-466a-bd26-1bd05cb4f837\" , \"phase\" : \"payment\" , \"locale\" : \"en-US\" , \"lineItems\" : [ { \"chain\" : \"polygon-amoy\" , \"quantity\" : 1 , \"callData\" : { \"quantity\" : 1 , \"ADDITIONAL_PROPERTIES\" : \"Your other mint function arguments\" }, \"metadata\" : { \"name\" : \"Headless Checkout Demo\" , \"description\" : \"NFT Description\" , \"imageUrl\" : \"https://cdn.io/image.png\" }, \"quote\" : { \"status\" : \"valid\" , \"charges\" : { \"unit\" : { \"amount\" : \"0.0001\" , \"currency\" : \"eth\" }, \"salesTax\" : { \"amount\" : \"0.34\" , \"currency\" : \"usdc\" }, \"shipping\" : { \"amount\" : \"0\" , \"currency\" : \"usdc\" } }, \"totalPrice\" : { \"amount\" : \"0.0001\" , \"currency\" : \"eth\" } }, \"delivery\" : { \"status\" : \"awaiting-payment\" , \"recipient\" : { \"locator\" : \"email:<email_address>:<chain>\" , \"email\" : \"testy@crossmint.com\" , \"walletAddress\" : \"0x1234abcd...\" } } } ], \"quote\" : { \"status\" : \"valid\" , \"quotedAt\" : \"2024-06-07T16:55:44.653Z\" , \"expiresAt\" : \"2024-06-07T17:55:44.653Z\" , \"totalPrice\" : { \"amount\" : \"0.0001375741\" , \"currency\" : \"eth\" } }, \"payment\" : { \"status\" : \"awaiting-payment\" , \"method\" : \"base-sepolia\" , \"currency\" : \"eth\" , \"preparation\" : { \"chain\" : \"base-sepolia\" , \"payerAddress\" : \"0x1234abcd...\" , \"serializedTransaction\" : \"0x02f90.....\" } } } GET https://staging.crossmint.com/api https://www.crossmint.com/api / 2022-06-09 / orders / {orderId} Try it Get Order cURL Copy Ask AI curl --request GET \\ --url https://staging.crossmint.com/api/2022-06-09/orders/{orderId} \\ --header 'X-API-KEY: <api-key>' 200 400 403 404 503 524 Copy Ask AI { \"orderId\" : \"b2959ca5-65e4-466a-bd26-1bd05cb4f837\" , \"phase\" : \"payment\" , \"locale\" : \"en-US\" , \"lineItems\" : [ { \"chain\" : \"polygon-amoy\" , \"quantity\" : 1 , \"callData\" : { \"quantity\" : 1 , \"ADDITIONAL_PROPERTIES\" : \"Your other mint function arguments\" }, \"metadata\" : { \"name\" : \"Headless Checkout Demo\" , \"description\" : \"NFT Description\" , \"imageUrl\" : \"https://cdn.io/image.png\" }, \"quote\" : { \"status\" : \"valid\" , \"charges\" : { \"unit\" : { \"amount\" : \"0.0001\" , \"currency\" : \"eth\" }, \"salesTax\" : { \"amount\" : \"0.34\" , \"currency\" : \"usdc\" }, \"shipping\" : { \"amount\" : \"0\" , \"currency\" : \"usdc\" } }, \"totalPrice\" : { \"amount\" : \"0.0001\" , \"currency\" : \"eth\" } }, \"delivery\" : { \"status\" : \"awaiting-payment\" , \"recipient\" : { \"locator\" : \"email:<email_address>:<chain>\" , \"email\" : \"testy@crossmint.com\" , \"walletAddress\" : \"0x1234abcd...\" } } } ], \"quote\" : { \"status\" : \"valid\" , \"quotedAt\" : \"2024-06-07T16:55:44.653Z\" , \"expiresAt\" : \"2024-06-07T17:55:44.653Z\" , \"totalPrice\" : { \"amount\" : \"0.0001375741\" , \"currency\" : \"eth\" } }, \"payment\" : { \"status\" : \"awaiting-payment\" , \"method\" : \"base-sepolia\" , \"currency\" : \"eth\" , \"preparation\" : { \"chain\" : \"base-sepolia\" , \"payerAddress\" : \"0x1234abcd...\" , \"serializedTransaction\" : \"0x02f90.....\" } } } Authorizations apiKey orderClientSecret ​ X-API-KEY string header required Path Parameters ​ orderId string required This is the identifier for the order with UUID format. Example: 9c82ef99-617f-497d-9abb-fd355291681b Response 200 200 400 403 404 503 524 application/json Order successfully created. The response is of type object . Was this page helpful? Yes No Create Order Edit Order Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 835
  },
  {
    "id": "https://docs.crossmint.com/api-reference/introduction#chunk_0",
    "url": "https://docs.crossmint.com/api-reference/introduction",
    "title": "Introduction - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation API Reference Introduction Documentation API Reference SDK Reference CLI Solution Guides Changelog API Reference Introduction Wallets POST Create Wallet GET Get Wallet By Locator GET Get Wallet Balance POST Fund Wallet GET Get NFTs from Wallet POST Create Transaction GET Get Transaction GET Get Wallet Transactions POST Approve Transaction POST Create Signature GET Get All Signatures GET Get Signature POST Approve Signature POST Create Delegated Signer GET Get Delegated Signer POST Transfer Token NFTs POST Mint NFT PUT Mint NFT with ID POST Mint SFT GET Get All NFTs GET Mint Status PATCH Edit NFT DEL Burn NFT IP POST Create IP Collection PUT Create IP Collection (Idempotent) GET Get IP Collection GET Get All IP Collections GET Get IP Assets in Collection GET Get IP Asset POST Create IP Asset PUT Create IP Asset (Idempotent) PATCH Update IP Asset GET Get IP Action GET Get IP Asset License GET Get IP Asset Graph NFT Collections POST Create Collection PUT Create Collection (Idempotent) GET Get All Collections GET Get Collection Info PATCH Update Collection PUT Set Royalties GET Get Royalties Configuration DEL Remove Royalties PUT Set Base URI GET Get Base URI PUT Set Transferability GET Get Transferability NFT Templates POST Create Template PUT Create Template with ID GET Get Template GET Get All Templates PATCH Edit Template DEL Delete Template Verifiable Credentials POST Create Credential template POST Issue Credential GET Get Credential by Credential ID GET Get Credential by NFT ID GET Get Credential by NFT Locator GET Retrieve credential nfts POST Verify Credential DEL Revoke Credential Verifiable Credential Types POST Create Credential Type PUT Create Credential Type with Name GET Get a Credential Type Headless Checkout POST Create Order GET Get Order PATCH Edit Order GET Check Token Support Action Status GET Get Action Status Admin GET Get Usage Testing the APIs from the browser Next Steps This section provides a detailed guide for each of the APIs, with sample code and responses. ​ Testing the APIs from the browser The reference pages allow you to call the APIs directly from the browser. To get started: Create a developer account on the Staging or Production consoles. Read more about the environments here . Create an API key from the API keys tab on the console, with the permissions required for the APIs you want to use. From the page of your API of choice, insert the right API key in the authorization slot, introduce the different parameters, and call “Send”. (Optional) To call APIs in the production environment, find the API endpoint selector ( ⌄ ) next to the endpoint URL, and change it to www.crossmint.com/api . The following guide will show you how to create a wallet and mint an NFT into it within 5 minutes. For this, make sure your API key has the scopes wallets.create , and nfts.create . 1. Creating Wallets from the API Reference Follow the next steps to create a wallet within 5 minutes: 1 Navigate to the Create Wallet page 2 Select the correct environment for the API key you created 3 Input your API key into the Authorization section 4 Input the `body` parameters You may add any additional properties. Each API reference page includes the full list of properties and admissible values. 5 Send the request Scroll back to the top of the page and click the blue Send button to trigger the API call. Here is an example response object: Success! The next guide will show you how to mint an NFT into this wallet and view the content. 2. Mint NFTs from the API Reference In the previous guide, you created a wallet. Now you will deliver an NFT into it and read the wallet’s content. 1 Navigate to the Mint NFT page Open in a new tab here: /api-reference/minting/nfts/mint-nft 2 Enter the `default-polygon` collectionId This is a default collection associated to your account. You can create new ones using the Create Collections API. 3 Select the [EVM] Metadata URL metadata option The selector to choose between the different metadata option can be hard to spot. Look closely at the screenshots below to see where it is. 4 Enter metadata URL You can provide your own or use this example URL: metadata URL example JSON Copy Ask AI https://bafkreidbf4jpxpecwezjbagwmua5qv62ifhhtzsspoml7zls6iq6ms4byi.ipfs.nftstorage.link/ This URL must point to a valid JSON file that adheres to EVM metadata standards . 5 Enter the `recipient` There are two options for the recipient parameter. The first enables minting to an email address. The second enables minting directly to a wallet address. email recipient wallet recipient Copy Ask AI // format email : < email_address > : < chain > // example email:testy@crossmint.xyz:polygon Enter your own email address on this step and you can login to see your NFT in the Crossmint wallet later, which can be accessed from crossmint.com or staging.crossmint.com if you are in staging. 6 Set `reuploadLinkedFiles` to false This will prevent unnecessary uploading of files that are already pinned to IPFS. Crossmint has a 10MB re-upload size limit. For larger files, upload your media to IPFS, create a metadata.json as shown above, submit the metadata file’s URL, and ensure reuploadLinkedFiles is set to false . The default option is true . 7 Send the request Scroll back to the top of the page and click the blue Send button to trigger the API call. Here is an example response object: 8 View the NFT in your wallet If you followed this guide closely you can view the NFT in the staging wallet at https://staging.crossmint.com/user/collection . If you minted directly to a wallet address you can view the NFT in that application. Ensure you are accessing it from a testnet if you used staging. ​ Next Steps Test any other API directly from the reference page. You can find more information about the products on the documentation guides . Was this page helpful? Yes No Create Wallet Assistant Responses are generated",
    "chunk_index": 0,
    "word_count": 1000
  },
  {
    "id": "https://docs.crossmint.com/api-reference/introduction#chunk_0",
    "url": "https://docs.crossmint.com/api-reference/introduction",
    "title": "Introduction - Crossmint Docs",
    "content": "trigger the API call. Here is an example response object: 8 View the NFT in your wallet If you followed this guide closely you can view the NFT in the staging wallet at https://staging.crossmint.com/user/collection . If you minted directly to a wallet address you can view the NFT in that application. Ensure you are accessing it from a testnet if you used staging. ​ Next Steps Test any other API directly from the reference page. You can find more information about the products on the documentation guides . Was this page helpful? Yes No Create Wallet Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 106
  },
  {
    "id": "https://docs.crossmint.com/api-reference/ip/create-ip-asset#chunk_0",
    "url": "https://docs.crossmint.com/api-reference/ip/create-ip-asset",
    "title": "Create IP Asset - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation IP Create IP Asset Documentation API Reference SDK Reference CLI Solution Guides Changelog API Reference Introduction Wallets POST Create Wallet GET Get Wallet By Locator GET Get Wallet Balance POST Fund Wallet GET Get NFTs from Wallet POST Create Transaction GET Get Transaction GET Get Wallet Transactions POST Approve Transaction POST Create Signature GET Get All Signatures GET Get Signature POST Approve Signature POST Create Delegated Signer GET Get Delegated Signer POST Transfer Token NFTs POST Mint NFT PUT Mint NFT with ID POST Mint SFT GET Get All NFTs GET Mint Status PATCH Edit NFT DEL Burn NFT IP POST Create IP Collection PUT Create IP Collection (Idempotent) GET Get IP Collection GET Get All IP Collections GET Get IP Assets in Collection GET Get IP Asset POST Create IP Asset PUT Create IP Asset (Idempotent) PATCH Update IP Asset GET Get IP Action GET Get IP Asset License GET Get IP Asset Graph NFT Collections POST Create Collection PUT Create Collection (Idempotent) GET Get All Collections GET Get Collection Info PATCH Update Collection PUT Set Royalties GET Get Royalties Configuration DEL Remove Royalties PUT Set Base URI GET Get Base URI PUT Set Transferability GET Get Transferability NFT Templates POST Create Template PUT Create Template with ID GET Get Template GET Get All Templates PATCH Edit Template DEL Delete Template Verifiable Credentials POST Create Credential template POST Issue Credential GET Get Credential by Credential ID GET Get Credential by NFT ID GET Get Credential by NFT Locator GET Retrieve credential nfts POST Verify Credential DEL Revoke Credential Verifiable Credential Types POST Create Credential Type PUT Create Credential Type with Name GET Get a Credential Type Headless Checkout POST Create Order GET Get Order PATCH Edit Order GET Check Token Support Action Status GET Get Action Status Admin GET Get Usage Create IP Asset cURL Copy Ask AI curl --request POST \\ --url https://staging.crossmint.com/api/v1/ip/collections/{collectionId}/ipassets \\ --header 'Content-Type: application/json' \\ --header 'X-API-KEY: <x-api-key>' \\ --data '{ \"owner\": \"email:creator@example.com:story-testnet\", \"reuploadLinkedFiles\": true, \"nftMetadata\": { \"name\": \"Art #123\", \"description\": \"A unique story NFT\", \"image\": \"https://example.com/nft/123.png\" }, \"ipAssetMetadata\": { \"title\": \"Harry Potter and the Philosopher' \\' 's Stone\", \"createdAt\": \"1997-06-26T00:00:00\", \"ipType\": \"literature\", \"creators\": [ { \"name\": \"JK Rowling\", \"email\": \"JKRowling@example.com\", \"crossmintUserLocator\": \"email:JKRowling@example.com:story\", \"description\": \"Author\", \"contributionPercent\": 80, \"socialMedia\": [ { \"platform\": \"Wikipedia\", \"url\": \"https://en.wikipedia.org/wiki/J._K._Rowling\" } ] }, { \"name\": \"Thomas Taylor\", \"address\": \"0x1234567890123456789012345678901234567890\", \"description\": \"Illustrator\", \"contributionPercent\": 15 }, { \"name\": \"Bloomsbury Publishing\", \"email\": \"BloomsburyPublishing@example.com\", \"address\": \"0x1234567890123456789012345678901234567890\", \"description\": \"Publisher\", \"contributionPercent\": 5, \"socialMedia\": [ { \"platform\": \"Website\", \"url\": \"https://www.bloomsbury.com/\" } ] } ], \"media\": [ { \"name\": \"ePub\", \"url\": \"link_to_epub\", \"mimeType\": \"application/epub+zip\" }, { \"name\": \"Book Summary PDF\", \"url\": \"link_to_book_summary_pdf\", \"mimeType\": \"application/pdf\" } ], \"attributes\": [ { \"key\": \"ISBN\", \"value\": \"978-0-7475-3269-0\" }, { \"key\": \"Genre\", \"value\": \"Fantasy\" } ] }, \"sendNotification\": true, \"locale\": \"en-US\", \"licenseTerms\": [ { \"type\": \"non-commercial-social-remixing\" } ] }' 201 Copy Ask AI { \"id\" : \"d290f1ee-6c54-4b01-90e6-d701748f0851\" , \"actionId\" : \"d290f1ee-6c54-4b01-90e6-d701748f0851\" , \"nftMetadata\" : { \"name\" : \"Art #123\" , \"description\" : \"A unique story NFT\" , \"image\" : \"https://example.com/nft/123.png\" }, \"ipAssetMetadata\" : { \"title\" : \"Harry Potter and the Philosopher's Stone\" , \"createdAt\" : \"1997-06-26T00:00:00\" , \"ipType\" : \"literature\" , \"creators\" : [ { \"name\" : \"JK Rowling\" , \"email\" : \"JKRowling@example.com\" , \"crossmintUserLocator\" : \"email:JKRowling@example.com:story\" , \"description\" : \"Author\" , \"contributionPercent\" : 80 , \"socialMedia\" : [ { \"platform\" : \"Wikipedia\" , \"url\" : \"https://en.wikipedia.org/wiki/J._K._Rowling\" } ] }, { \"name\" : \"Thomas Taylor\" , \"address\" : \"0x1234567890123456789012345678901234567890\" , \"description\" : \"Illustrator\" , \"contributionPercent\" : 15 }, { \"name\" : \"Bloomsbury Publishing\" , \"email\" : \"BloomsburyPublishing@example.com\" , \"address\" : \"0x1234567890123456789012345678901234567890\" , \"description\" : \"Publisher\" , \"contributionPercent\" : 5 , \"socialMedia\" : [ { \"platform\" : \"Website\" , \"url\" : \"https://www.bloomsbury.com/\" } ] } ], \"media\" : [ { \"name\" : \"ePub\" , \"url\" : \"link_to_epub\" , \"mimeType\" : \"application/epub+zip\" }, { \"name\" : \"Book Summary PDF\" , \"url\" : \"link_to_book_summary_pdf\" , \"mimeType\" : \"application/pdf\" } ], \"attributes\" : [ { \"key\" : \"ISBN\" , \"value\" : \"978-0-7475-3269-0\" }, { \"key\" : \"Genre\" , \"value\" : \"Fantasy\" } ] }, \"onChain\" : { \"status\" : \"success\" , \"chain\" : \"story-testnet\" , \"contractAddress\" : \"0x123\" , \"ipAssetId\" : \"0xAC6062FF53fa41e61Fe01B89B83d9dB96b5F9280\" , \"tokenId\" : \"1\" , \"txId\" : \"0x123\" , \"explorerLink\" : \"https://portal.story.foundation/assets/0xAC6062FF53fa41e61Fe01B89B83d9dB96b5F9280\" , \"owner\" : \"0x123\" }, \"licenseTerms\" : [ { \"type\" : \"non-commercial-social-remixing\" , \"licenseTermsId\" : 1 } ], \"derivData\" : { \"parentIpIds\" : [ \"0x123\" ], \"licenseTermsIds\" : [ 1 ], \"maxMintingFee\" : 0 , \"maxRevenueShare\" : 100 , \"maxRts\" : 10000000 } } POST / v1 / ip / collections / {collectionId} / ipassets Try it Create IP Asset cURL Copy Ask AI curl --request POST \\ --url https://staging.crossmint.com/api/v1/ip/collections/{collectionId}/ipassets \\ --header 'Content-Type: application/json' \\ --header 'X-API-KEY: <x-api-key>' \\ --data '{ \"owner\": \"email:creator@example.com:story-testnet\", \"reuploadLinkedFiles\": true, \"nftMetadata\": { \"name\": \"Art #123\", \"description\": \"A unique story NFT\", \"image\": \"https://example.com/nft/123.png\" }, \"ipAssetMetadata\": { \"title\": \"Harry Potter and the Philosopher' \\' 's Stone\", \"createdAt\": \"1997-06-26T00:00:00\", \"ipType\": \"literature\", \"creators\": [ { \"name\": \"JK Rowling\", \"email\": \"JKRowling@example.com\", \"crossmintUserLocator\": \"email:JKRowling@example.com:story\", \"description\": \"Author\", \"contributionPercent\": 80, \"socialMedia\": [ { \"platform\": \"Wikipedia\", \"url\": \"https://en.wikipedia.org/wiki/J._K._Rowling\" } ] }, { \"name\": \"Thomas Taylor\", \"address\": \"0x1234567890123456789012345678901234567890\", \"description\": \"Illustrator\", \"contributionPercent\": 15 }, { \"name\": \"Bloomsbury Publishing\", \"email\": \"BloomsburyPublishing@example.com\", \"address\": \"0x1234567890123456789012345678901234567890\", \"description\": \"Publisher\", \"contributionPercent\": 5, \"socialMedia\": [ { \"platform\": \"Website\", \"url\": \"https://www.bloomsbury.com/\" } ] } ], \"media\": [ { \"name\": \"ePub\", \"url\": \"link_to_epub\", \"mimeType\": \"application/epub+zip\" }, { \"name\": \"Book Summary PDF\", \"url\": \"link_to_book_summary_pdf\", \"mimeType\": \"application/pdf\" } ], \"attributes\": [ { \"key\": \"ISBN\", \"value\": \"978-0-7475-3269-0\" }, { \"key\": \"Genre\", \"value\": \"Fantasy\" } ] }, \"sendNotification\": true, \"locale\": \"en-US\", \"licenseTerms\": [ { \"type\": \"non-commercial-social-remixing\" } ] }' 201 Copy Ask AI { \"id\" : \"d290f1ee-6c54-4b01-90e6-d701748f0851\" , \"actionId\" : \"d290f1ee-6c54-4b01-90e6-d701748f0851\" , \"nftMetadata\" : { \"name\" : \"Art #123\" , \"description\" : \"A unique story NFT\" , \"image\" : \"https://example.com/nft/123.png\" }, \"ipAssetMetadata\" : { \"title\" : \"Harry Potter and the Philosopher's Stone\" , \"createdAt\" : \"1997-06-26T00:00:00\" , \"ipType\" : \"literature\" , \"creators\" : [ { \"name\" : \"JK Rowling\" , \"email\" : \"JKRowling@example.com\" , \"crossmintUserLocator\" : \"email:JKRowling@example.com:story\" , \"description\" : \"Author\" ,",
    "chunk_index": 0,
    "word_count": 1000
  },
  {
    "id": "https://docs.crossmint.com/api-reference/ip/create-ip-asset#chunk_0",
    "url": "https://docs.crossmint.com/api-reference/ip/create-ip-asset",
    "title": "Create IP Asset - Crossmint Docs",
    "content": "[ { \"key\": \"ISBN\", \"value\": \"978-0-7475-3269-0\" }, { \"key\": \"Genre\", \"value\": \"Fantasy\" } ] }, \"sendNotification\": true, \"locale\": \"en-US\", \"licenseTerms\": [ { \"type\": \"non-commercial-social-remixing\" } ] }' 201 Copy Ask AI { \"id\" : \"d290f1ee-6c54-4b01-90e6-d701748f0851\" , \"actionId\" : \"d290f1ee-6c54-4b01-90e6-d701748f0851\" , \"nftMetadata\" : { \"name\" : \"Art #123\" , \"description\" : \"A unique story NFT\" , \"image\" : \"https://example.com/nft/123.png\" }, \"ipAssetMetadata\" : { \"title\" : \"Harry Potter and the Philosopher's Stone\" , \"createdAt\" : \"1997-06-26T00:00:00\" , \"ipType\" : \"literature\" , \"creators\" : [ { \"name\" : \"JK Rowling\" , \"email\" : \"JKRowling@example.com\" , \"crossmintUserLocator\" : \"email:JKRowling@example.com:story\" , \"description\" : \"Author\" , \"contributionPercent\" : 80 , \"socialMedia\" : [ { \"platform\" : \"Wikipedia\" , \"url\" : \"https://en.wikipedia.org/wiki/J._K._Rowling\" } ] }, { \"name\" : \"Thomas Taylor\" , \"address\" : \"0x1234567890123456789012345678901234567890\" , \"description\" : \"Illustrator\" , \"contributionPercent\" : 15 }, { \"name\" : \"Bloomsbury Publishing\" , \"email\" : \"BloomsburyPublishing@example.com\" , \"address\" : \"0x1234567890123456789012345678901234567890\" , \"description\" : \"Publisher\" , \"contributionPercent\" : 5 , \"socialMedia\" : [ { \"platform\" : \"Website\" , \"url\" : \"https://www.bloomsbury.com/\" } ] } ], \"media\" : [ { \"name\" : \"ePub\" , \"url\" : \"link_to_epub\" , \"mimeType\" : \"application/epub+zip\" }, { \"name\" : \"Book Summary PDF\" , \"url\" : \"link_to_book_summary_pdf\" , \"mimeType\" : \"application/pdf\" } ], \"attributes\" : [ { \"key\" : \"ISBN\" , \"value\" : \"978-0-7475-3269-0\" }, { \"key\" : \"Genre\" , \"value\" : \"Fantasy\" } ] }, \"onChain\" : { \"status\" : \"success\" , \"chain\" : \"story-testnet\" , \"contractAddress\" : \"0x123\" , \"ipAssetId\" : \"0xAC6062FF53fa41e61Fe01B89B83d9dB96b5F9280\" , \"tokenId\" : \"1\" , \"txId\" : \"0x123\" , \"explorerLink\" : \"https://portal.story.foundation/assets/0xAC6062FF53fa41e61Fe01B89B83d9dB96b5F9280\" , \"owner\" : \"0x123\" }, \"licenseTerms\" : [ { \"type\" : \"non-commercial-social-remixing\" , \"licenseTermsId\" : 1 } ], \"derivData\" : { \"parentIpIds\" : [ \"0x123\" ], \"licenseTermsIds\" : [ 1 ], \"maxMintingFee\" : 0 , \"maxRevenueShare\" : 100 , \"maxRts\" : 10000000 } } This API is still under development. Contact support for early access. Headers ​ X-API-KEY string required API key required for authentication Path Parameters ​ collectionId string required Body application/json Input schema for creating a new IP asset on Story Protocol Response 201 - application/json IP Asset created IPAsset response DTO Was this page helpful? Yes No Get IP Asset Create IP Asset (Idempotent) Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 375
  },
  {
    "id": "https://docs.crossmint.com/api-reference/ip/create-ip-asset-idempotent#chunk_0",
    "url": "https://docs.crossmint.com/api-reference/ip/create-ip-asset-idempotent",
    "title": "Create IP Asset (Idempotent) - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation IP Create IP Asset (Idempotent) Documentation API Reference SDK Reference CLI Solution Guides Changelog API Reference Introduction Wallets POST Create Wallet GET Get Wallet By Locator GET Get Wallet Balance POST Fund Wallet GET Get NFTs from Wallet POST Create Transaction GET Get Transaction GET Get Wallet Transactions POST Approve Transaction POST Create Signature GET Get All Signatures GET Get Signature POST Approve Signature POST Create Delegated Signer GET Get Delegated Signer POST Transfer Token NFTs POST Mint NFT PUT Mint NFT with ID POST Mint SFT GET Get All NFTs GET Mint Status PATCH Edit NFT DEL Burn NFT IP POST Create IP Collection PUT Create IP Collection (Idempotent) GET Get IP Collection GET Get All IP Collections GET Get IP Assets in Collection GET Get IP Asset POST Create IP Asset PUT Create IP Asset (Idempotent) PATCH Update IP Asset GET Get IP Action GET Get IP Asset License GET Get IP Asset Graph NFT Collections POST Create Collection PUT Create Collection (Idempotent) GET Get All Collections GET Get Collection Info PATCH Update Collection PUT Set Royalties GET Get Royalties Configuration DEL Remove Royalties PUT Set Base URI GET Get Base URI PUT Set Transferability GET Get Transferability NFT Templates POST Create Template PUT Create Template with ID GET Get Template GET Get All Templates PATCH Edit Template DEL Delete Template Verifiable Credentials POST Create Credential template POST Issue Credential GET Get Credential by Credential ID GET Get Credential by NFT ID GET Get Credential by NFT Locator GET Retrieve credential nfts POST Verify Credential DEL Revoke Credential Verifiable Credential Types POST Create Credential Type PUT Create Credential Type with Name GET Get a Credential Type Headless Checkout POST Create Order GET Get Order PATCH Edit Order GET Check Token Support Action Status GET Get Action Status Admin GET Get Usage Create IP Asset (Idempotent) cURL Copy Ask AI curl --request PUT \\ --url https://staging.crossmint.com/api/v1/ip/collections/{collectionId}/ipassets/{customerFacingId} \\ --header 'Content-Type: application/json' \\ --header 'X-API-KEY: <x-api-key>' \\ --data '{ \"owner\": \"email:creator@example.com:story-testnet\", \"reuploadLinkedFiles\": true, \"nftMetadata\": { \"name\": \"Art #123\", \"description\": \"A unique story NFT\", \"image\": \"https://example.com/nft/123.png\" }, \"ipAssetMetadata\": { \"title\": \"Harry Potter and the Philosopher' \\' 's Stone\", \"createdAt\": \"1997-06-26T00:00:00\", \"ipType\": \"literature\", \"creators\": [ { \"name\": \"JK Rowling\", \"email\": \"JKRowling@example.com\", \"crossmintUserLocator\": \"email:JKRowling@example.com:story\", \"description\": \"Author\", \"contributionPercent\": 80, \"socialMedia\": [ { \"platform\": \"Wikipedia\", \"url\": \"https://en.wikipedia.org/wiki/J._K._Rowling\" } ] }, { \"name\": \"Thomas Taylor\", \"address\": \"0x1234567890123456789012345678901234567890\", \"description\": \"Illustrator\", \"contributionPercent\": 15 }, { \"name\": \"Bloomsbury Publishing\", \"email\": \"BloomsburyPublishing@example.com\", \"address\": \"0x1234567890123456789012345678901234567890\", \"description\": \"Publisher\", \"contributionPercent\": 5, \"socialMedia\": [ { \"platform\": \"Website\", \"url\": \"https://www.bloomsbury.com/\" } ] } ], \"media\": [ { \"name\": \"ePub\", \"url\": \"link_to_epub\", \"mimeType\": \"application/epub+zip\" }, { \"name\": \"Book Summary PDF\", \"url\": \"link_to_book_summary_pdf\", \"mimeType\": \"application/pdf\" } ], \"attributes\": [ { \"key\": \"ISBN\", \"value\": \"978-0-7475-3269-0\" }, { \"key\": \"Genre\", \"value\": \"Fantasy\" } ] }, \"sendNotification\": true, \"locale\": \"en-US\", \"licenseTerms\": [ { \"type\": \"non-commercial-social-remixing\" } ] }' 201 Copy Ask AI { \"id\" : \"d290f1ee-6c54-4b01-90e6-d701748f0851\" , \"actionId\" : \"d290f1ee-6c54-4b01-90e6-d701748f0851\" , \"nftMetadata\" : { \"name\" : \"Art #123\" , \"description\" : \"A unique story NFT\" , \"image\" : \"https://example.com/nft/123.png\" }, \"ipAssetMetadata\" : { \"title\" : \"Harry Potter and the Philosopher's Stone\" , \"createdAt\" : \"1997-06-26T00:00:00\" , \"ipType\" : \"literature\" , \"creators\" : [ { \"name\" : \"JK Rowling\" , \"email\" : \"JKRowling@example.com\" , \"crossmintUserLocator\" : \"email:JKRowling@example.com:story\" , \"description\" : \"Author\" , \"contributionPercent\" : 80 , \"socialMedia\" : [ { \"platform\" : \"Wikipedia\" , \"url\" : \"https://en.wikipedia.org/wiki/J._K._Rowling\" } ] }, { \"name\" : \"Thomas Taylor\" , \"address\" : \"0x1234567890123456789012345678901234567890\" , \"description\" : \"Illustrator\" , \"contributionPercent\" : 15 }, { \"name\" : \"Bloomsbury Publishing\" , \"email\" : \"BloomsburyPublishing@example.com\" , \"address\" : \"0x1234567890123456789012345678901234567890\" , \"description\" : \"Publisher\" , \"contributionPercent\" : 5 , \"socialMedia\" : [ { \"platform\" : \"Website\" , \"url\" : \"https://www.bloomsbury.com/\" } ] } ], \"media\" : [ { \"name\" : \"ePub\" , \"url\" : \"link_to_epub\" , \"mimeType\" : \"application/epub+zip\" }, { \"name\" : \"Book Summary PDF\" , \"url\" : \"link_to_book_summary_pdf\" , \"mimeType\" : \"application/pdf\" } ], \"attributes\" : [ { \"key\" : \"ISBN\" , \"value\" : \"978-0-7475-3269-0\" }, { \"key\" : \"Genre\" , \"value\" : \"Fantasy\" } ] }, \"onChain\" : { \"status\" : \"success\" , \"chain\" : \"story-testnet\" , \"contractAddress\" : \"0x123\" , \"ipAssetId\" : \"0xAC6062FF53fa41e61Fe01B89B83d9dB96b5F9280\" , \"tokenId\" : \"1\" , \"txId\" : \"0x123\" , \"explorerLink\" : \"https://portal.story.foundation/assets/0xAC6062FF53fa41e61Fe01B89B83d9dB96b5F9280\" , \"owner\" : \"0x123\" }, \"licenseTerms\" : [ { \"type\" : \"non-commercial-social-remixing\" , \"licenseTermsId\" : 1 } ], \"derivData\" : { \"parentIpIds\" : [ \"0x123\" ], \"licenseTermsIds\" : [ 1 ], \"maxMintingFee\" : 0 , \"maxRevenueShare\" : 100 , \"maxRts\" : 10000000 } } PUT / v1 / ip / collections / {collectionId} / ipassets / {customerFacingId} Try it Create IP Asset (Idempotent) cURL Copy Ask AI curl --request PUT \\ --url https://staging.crossmint.com/api/v1/ip/collections/{collectionId}/ipassets/{customerFacingId} \\ --header 'Content-Type: application/json' \\ --header 'X-API-KEY: <x-api-key>' \\ --data '{ \"owner\": \"email:creator@example.com:story-testnet\", \"reuploadLinkedFiles\": true, \"nftMetadata\": { \"name\": \"Art #123\", \"description\": \"A unique story NFT\", \"image\": \"https://example.com/nft/123.png\" }, \"ipAssetMetadata\": { \"title\": \"Harry Potter and the Philosopher' \\' 's Stone\", \"createdAt\": \"1997-06-26T00:00:00\", \"ipType\": \"literature\", \"creators\": [ { \"name\": \"JK Rowling\", \"email\": \"JKRowling@example.com\", \"crossmintUserLocator\": \"email:JKRowling@example.com:story\", \"description\": \"Author\", \"contributionPercent\": 80, \"socialMedia\": [ { \"platform\": \"Wikipedia\", \"url\": \"https://en.wikipedia.org/wiki/J._K._Rowling\" } ] }, { \"name\": \"Thomas Taylor\", \"address\": \"0x1234567890123456789012345678901234567890\", \"description\": \"Illustrator\", \"contributionPercent\": 15 }, { \"name\": \"Bloomsbury Publishing\", \"email\": \"BloomsburyPublishing@example.com\", \"address\": \"0x1234567890123456789012345678901234567890\", \"description\": \"Publisher\", \"contributionPercent\": 5, \"socialMedia\": [ { \"platform\": \"Website\", \"url\": \"https://www.bloomsbury.com/\" } ] } ], \"media\": [ { \"name\": \"ePub\", \"url\": \"link_to_epub\", \"mimeType\": \"application/epub+zip\" }, { \"name\": \"Book Summary PDF\", \"url\": \"link_to_book_summary_pdf\", \"mimeType\": \"application/pdf\" } ], \"attributes\": [ { \"key\": \"ISBN\", \"value\": \"978-0-7475-3269-0\" }, { \"key\": \"Genre\", \"value\": \"Fantasy\" } ] }, \"sendNotification\": true, \"locale\": \"en-US\", \"licenseTerms\": [ { \"type\": \"non-commercial-social-remixing\" } ] }' 201 Copy Ask AI { \"id\" : \"d290f1ee-6c54-4b01-90e6-d701748f0851\" , \"actionId\" : \"d290f1ee-6c54-4b01-90e6-d701748f0851\" , \"nftMetadata\" : { \"name\" : \"Art #123\" , \"description\" : \"A unique story NFT\" , \"image\" : \"https://example.com/nft/123.png\" }, \"ipAssetMetadata\" : { \"title\" : \"Harry Potter and the Philosopher's Stone\" , \"createdAt\" : \"1997-06-26T00:00:00\" , \"ipType\" : \"literature\" , \"creators\" : [ { \"name\" : \"JK Rowling\" , \"email\" : \"JKRowling@example.com\" , \"crossmintUserLocator\" : \"email:JKRowling@example.com:story\"",
    "chunk_index": 0,
    "word_count": 1000
  },
  {
    "id": "https://docs.crossmint.com/api-reference/ip/create-ip-asset-idempotent#chunk_0",
    "url": "https://docs.crossmint.com/api-reference/ip/create-ip-asset-idempotent",
    "title": "Create IP Asset (Idempotent) - Crossmint Docs",
    "content": "\"mimeType\": \"application/pdf\" } ], \"attributes\": [ { \"key\": \"ISBN\", \"value\": \"978-0-7475-3269-0\" }, { \"key\": \"Genre\", \"value\": \"Fantasy\" } ] }, \"sendNotification\": true, \"locale\": \"en-US\", \"licenseTerms\": [ { \"type\": \"non-commercial-social-remixing\" } ] }' 201 Copy Ask AI { \"id\" : \"d290f1ee-6c54-4b01-90e6-d701748f0851\" , \"actionId\" : \"d290f1ee-6c54-4b01-90e6-d701748f0851\" , \"nftMetadata\" : { \"name\" : \"Art #123\" , \"description\" : \"A unique story NFT\" , \"image\" : \"https://example.com/nft/123.png\" }, \"ipAssetMetadata\" : { \"title\" : \"Harry Potter and the Philosopher's Stone\" , \"createdAt\" : \"1997-06-26T00:00:00\" , \"ipType\" : \"literature\" , \"creators\" : [ { \"name\" : \"JK Rowling\" , \"email\" : \"JKRowling@example.com\" , \"crossmintUserLocator\" : \"email:JKRowling@example.com:story\" , \"description\" : \"Author\" , \"contributionPercent\" : 80 , \"socialMedia\" : [ { \"platform\" : \"Wikipedia\" , \"url\" : \"https://en.wikipedia.org/wiki/J._K._Rowling\" } ] }, { \"name\" : \"Thomas Taylor\" , \"address\" : \"0x1234567890123456789012345678901234567890\" , \"description\" : \"Illustrator\" , \"contributionPercent\" : 15 }, { \"name\" : \"Bloomsbury Publishing\" , \"email\" : \"BloomsburyPublishing@example.com\" , \"address\" : \"0x1234567890123456789012345678901234567890\" , \"description\" : \"Publisher\" , \"contributionPercent\" : 5 , \"socialMedia\" : [ { \"platform\" : \"Website\" , \"url\" : \"https://www.bloomsbury.com/\" } ] } ], \"media\" : [ { \"name\" : \"ePub\" , \"url\" : \"link_to_epub\" , \"mimeType\" : \"application/epub+zip\" }, { \"name\" : \"Book Summary PDF\" , \"url\" : \"link_to_book_summary_pdf\" , \"mimeType\" : \"application/pdf\" } ], \"attributes\" : [ { \"key\" : \"ISBN\" , \"value\" : \"978-0-7475-3269-0\" }, { \"key\" : \"Genre\" , \"value\" : \"Fantasy\" } ] }, \"onChain\" : { \"status\" : \"success\" , \"chain\" : \"story-testnet\" , \"contractAddress\" : \"0x123\" , \"ipAssetId\" : \"0xAC6062FF53fa41e61Fe01B89B83d9dB96b5F9280\" , \"tokenId\" : \"1\" , \"txId\" : \"0x123\" , \"explorerLink\" : \"https://portal.story.foundation/assets/0xAC6062FF53fa41e61Fe01B89B83d9dB96b5F9280\" , \"owner\" : \"0x123\" }, \"licenseTerms\" : [ { \"type\" : \"non-commercial-social-remixing\" , \"licenseTermsId\" : 1 } ], \"derivData\" : { \"parentIpIds\" : [ \"0x123\" ], \"licenseTermsIds\" : [ 1 ], \"maxMintingFee\" : 0 , \"maxRevenueShare\" : 100 , \"maxRts\" : 10000000 } } This API is still under development. Contact support for early access. Headers ​ X-API-KEY string required API key required for authentication Path Parameters ​ collectionId string required ​ customerFacingId string required Body application/json Input schema for creating a new IP asset on Story Protocol Response 201 - application/json IP Asset created IPAsset response DTO Was this page helpful? Yes No Create IP Asset Update IP Asset Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 383
  },
  {
    "id": "https://docs.crossmint.com/api-reference/ip/create-ip-collection#chunk_0",
    "url": "https://docs.crossmint.com/api-reference/ip/create-ip-collection",
    "title": "Create IP Collection - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation IP Create IP Collection Documentation API Reference SDK Reference CLI Solution Guides Changelog API Reference Introduction Wallets POST Create Wallet GET Get Wallet By Locator GET Get Wallet Balance POST Fund Wallet GET Get NFTs from Wallet POST Create Transaction GET Get Transaction GET Get Wallet Transactions POST Approve Transaction POST Create Signature GET Get All Signatures GET Get Signature POST Approve Signature POST Create Delegated Signer GET Get Delegated Signer POST Transfer Token NFTs POST Mint NFT PUT Mint NFT with ID POST Mint SFT GET Get All NFTs GET Mint Status PATCH Edit NFT DEL Burn NFT IP POST Create IP Collection PUT Create IP Collection (Idempotent) GET Get IP Collection GET Get All IP Collections GET Get IP Assets in Collection GET Get IP Asset POST Create IP Asset PUT Create IP Asset (Idempotent) PATCH Update IP Asset GET Get IP Action GET Get IP Asset License GET Get IP Asset Graph NFT Collections POST Create Collection PUT Create Collection (Idempotent) GET Get All Collections GET Get Collection Info PATCH Update Collection PUT Set Royalties GET Get Royalties Configuration DEL Remove Royalties PUT Set Base URI GET Get Base URI PUT Set Transferability GET Get Transferability NFT Templates POST Create Template PUT Create Template with ID GET Get Template GET Get All Templates PATCH Edit Template DEL Delete Template Verifiable Credentials POST Create Credential template POST Issue Credential GET Get Credential by Credential ID GET Get Credential by NFT ID GET Get Credential by NFT Locator GET Retrieve credential nfts POST Verify Credential DEL Revoke Credential Verifiable Credential Types POST Create Credential Type PUT Create Credential Type with Name GET Get a Credential Type Headless Checkout POST Create Order GET Get Order PATCH Edit Order GET Check Token Support Action Status GET Get Action Status Admin GET Get Usage Create Collection (Idempotent) cURL Copy Ask AI curl --request POST \\ --url https://staging.crossmint.com/api/v1/ip/collections \\ --header 'Content-Type: application/json' \\ --header 'X-API-KEY: <x-api-key>' \\ --data '{ \"reuploadLinkedFiles\": true, \"metadata\": { \"name\": \"My Collection\", \"symbol\": \"MYCOL\", \"description\": \"My Collection Description\", \"image\": \"https://example.com/image.png\" }, \"chain\": \"story-testnet\" }' 201 Copy Ask AI { \"id\" : \"d290f1ee-6c54-4b01-90e6-d701748f0851\" , \"actionId\" : \"d290f1ee-6c54-4b01-90e6-d701748f0851\" , \"metadata\" : { \"name\" : \"My Collection\" , \"symbol\" : \"MYCOL\" , \"description\" : \"My Collection Description\" , \"image\" : \"https://example.com/image.png\" }, \"onChain\" : { \"chain\" : \"story-testnet\" , \"contractAddress\" : \"0x123\" } } POST / v1 / ip / collections Try it Create Collection (Idempotent) cURL Copy Ask AI curl --request POST \\ --url https://staging.crossmint.com/api/v1/ip/collections \\ --header 'Content-Type: application/json' \\ --header 'X-API-KEY: <x-api-key>' \\ --data '{ \"reuploadLinkedFiles\": true, \"metadata\": { \"name\": \"My Collection\", \"symbol\": \"MYCOL\", \"description\": \"My Collection Description\", \"image\": \"https://example.com/image.png\" }, \"chain\": \"story-testnet\" }' 201 Copy Ask AI { \"id\" : \"d290f1ee-6c54-4b01-90e6-d701748f0851\" , \"actionId\" : \"d290f1ee-6c54-4b01-90e6-d701748f0851\" , \"metadata\" : { \"name\" : \"My Collection\" , \"symbol\" : \"MYCOL\" , \"description\" : \"My Collection Description\" , \"image\" : \"https://example.com/image.png\" }, \"onChain\" : { \"chain\" : \"story-testnet\" , \"contractAddress\" : \"0x123\" } } This API is still under development. Contact support for early access. Headers ​ X-API-KEY string required API key required for authentication Body application/json Story Protocol collection creation input Response 201 - application/json Collection created Story Protocol collection creation output Was this page helpful? Yes No Burn NFT Create IP Collection (Idempotent) Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 563
  },
  {
    "id": "https://docs.crossmint.com/api-reference/ip/create-ip-collection-idempotent#chunk_0",
    "url": "https://docs.crossmint.com/api-reference/ip/create-ip-collection-idempotent",
    "title": "Create IP Collection (Idempotent) - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation IP Create IP Collection (Idempotent) Documentation API Reference SDK Reference CLI Solution Guides Changelog API Reference Introduction Wallets POST Create Wallet GET Get Wallet By Locator GET Get Wallet Balance POST Fund Wallet GET Get NFTs from Wallet POST Create Transaction GET Get Transaction GET Get Wallet Transactions POST Approve Transaction POST Create Signature GET Get All Signatures GET Get Signature POST Approve Signature POST Create Delegated Signer GET Get Delegated Signer POST Transfer Token NFTs POST Mint NFT PUT Mint NFT with ID POST Mint SFT GET Get All NFTs GET Mint Status PATCH Edit NFT DEL Burn NFT IP POST Create IP Collection PUT Create IP Collection (Idempotent) GET Get IP Collection GET Get All IP Collections GET Get IP Assets in Collection GET Get IP Asset POST Create IP Asset PUT Create IP Asset (Idempotent) PATCH Update IP Asset GET Get IP Action GET Get IP Asset License GET Get IP Asset Graph NFT Collections POST Create Collection PUT Create Collection (Idempotent) GET Get All Collections GET Get Collection Info PATCH Update Collection PUT Set Royalties GET Get Royalties Configuration DEL Remove Royalties PUT Set Base URI GET Get Base URI PUT Set Transferability GET Get Transferability NFT Templates POST Create Template PUT Create Template with ID GET Get Template GET Get All Templates PATCH Edit Template DEL Delete Template Verifiable Credentials POST Create Credential template POST Issue Credential GET Get Credential by Credential ID GET Get Credential by NFT ID GET Get Credential by NFT Locator GET Retrieve credential nfts POST Verify Credential DEL Revoke Credential Verifiable Credential Types POST Create Credential Type PUT Create Credential Type with Name GET Get a Credential Type Headless Checkout POST Create Order GET Get Order PATCH Edit Order GET Check Token Support Action Status GET Get Action Status Admin GET Get Usage Create Collection (Idempotent) cURL Copy Ask AI curl --request PUT \\ --url https://staging.crossmint.com/api/v1/ip/collections/{collectionId} \\ --header 'Content-Type: application/json' \\ --header 'X-API-KEY: <x-api-key>' \\ --data '{ \"reuploadLinkedFiles\": true, \"metadata\": { \"name\": \"My Collection\", \"symbol\": \"MYCOL\", \"description\": \"My Collection Description\", \"image\": \"https://example.com/image.png\" }, \"chain\": \"story-testnet\" }' 201 Copy Ask AI { \"id\" : \"d290f1ee-6c54-4b01-90e6-d701748f0851\" , \"actionId\" : \"d290f1ee-6c54-4b01-90e6-d701748f0851\" , \"metadata\" : { \"name\" : \"My Collection\" , \"symbol\" : \"MYCOL\" , \"description\" : \"My Collection Description\" , \"image\" : \"https://example.com/image.png\" }, \"onChain\" : { \"chain\" : \"story-testnet\" , \"contractAddress\" : \"0x123\" } } PUT / v1 / ip / collections / {collectionId} Try it Create Collection (Idempotent) cURL Copy Ask AI curl --request PUT \\ --url https://staging.crossmint.com/api/v1/ip/collections/{collectionId} \\ --header 'Content-Type: application/json' \\ --header 'X-API-KEY: <x-api-key>' \\ --data '{ \"reuploadLinkedFiles\": true, \"metadata\": { \"name\": \"My Collection\", \"symbol\": \"MYCOL\", \"description\": \"My Collection Description\", \"image\": \"https://example.com/image.png\" }, \"chain\": \"story-testnet\" }' 201 Copy Ask AI { \"id\" : \"d290f1ee-6c54-4b01-90e6-d701748f0851\" , \"actionId\" : \"d290f1ee-6c54-4b01-90e6-d701748f0851\" , \"metadata\" : { \"name\" : \"My Collection\" , \"symbol\" : \"MYCOL\" , \"description\" : \"My Collection Description\" , \"image\" : \"https://example.com/image.png\" }, \"onChain\" : { \"chain\" : \"story-testnet\" , \"contractAddress\" : \"0x123\" } } This API is still under development. Contact support for early access. Headers ​ X-API-KEY string required API key required for authentication Path Parameters ​ collectionId string required Body application/json Story Protocol collection creation input Response 201 - application/json Collection created Story Protocol collection creation output Was this page helpful? Yes No Create IP Collection Get IP Collection Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 572
  },
  {
    "id": "https://docs.crossmint.com/api-reference/ip/get-all-ip-collections#chunk_0",
    "url": "https://docs.crossmint.com/api-reference/ip/get-all-ip-collections",
    "title": "Get All IP Collections - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation IP Get All IP Collections Documentation API Reference SDK Reference CLI Solution Guides Changelog API Reference Introduction Wallets POST Create Wallet GET Get Wallet By Locator GET Get Wallet Balance POST Fund Wallet GET Get NFTs from Wallet POST Create Transaction GET Get Transaction GET Get Wallet Transactions POST Approve Transaction POST Create Signature GET Get All Signatures GET Get Signature POST Approve Signature POST Create Delegated Signer GET Get Delegated Signer POST Transfer Token NFTs POST Mint NFT PUT Mint NFT with ID POST Mint SFT GET Get All NFTs GET Mint Status PATCH Edit NFT DEL Burn NFT IP POST Create IP Collection PUT Create IP Collection (Idempotent) GET Get IP Collection GET Get All IP Collections GET Get IP Assets in Collection GET Get IP Asset POST Create IP Asset PUT Create IP Asset (Idempotent) PATCH Update IP Asset GET Get IP Action GET Get IP Asset License GET Get IP Asset Graph NFT Collections POST Create Collection PUT Create Collection (Idempotent) GET Get All Collections GET Get Collection Info PATCH Update Collection PUT Set Royalties GET Get Royalties Configuration DEL Remove Royalties PUT Set Base URI GET Get Base URI PUT Set Transferability GET Get Transferability NFT Templates POST Create Template PUT Create Template with ID GET Get Template GET Get All Templates PATCH Edit Template DEL Delete Template Verifiable Credentials POST Create Credential template POST Issue Credential GET Get Credential by Credential ID GET Get Credential by NFT ID GET Get Credential by NFT Locator GET Retrieve credential nfts POST Verify Credential DEL Revoke Credential Verifiable Credential Types POST Create Credential Type PUT Create Credential Type with Name GET Get a Credential Type Headless Checkout POST Create Order GET Get Order PATCH Edit Order GET Check Token Support Action Status GET Get Action Status Admin GET Get Usage Get All Collections cURL Copy Ask AI curl --request GET \\ --url https://staging.crossmint.com/api/v1/ip/collections \\ --header 'X-API-KEY: <x-api-key>' 200 Copy Ask AI [ { \"id\" : \"d290f1ee-6c54-4b01-90e6-d701748f0851\" , \"actionId\" : \"d290f1ee-6c54-4b01-90e6-d701748f0851\" , \"metadata\" : { \"name\" : \"My Collection\" , \"symbol\" : \"MYCOL\" , \"description\" : \"My Collection Description\" , \"image\" : \"https://example.com/image.png\" }, \"onChain\" : { \"chain\" : \"story-testnet\" , \"contractAddress\" : \"0x123\" } } ] GET / v1 / ip / collections Try it Get All Collections cURL Copy Ask AI curl --request GET \\ --url https://staging.crossmint.com/api/v1/ip/collections \\ --header 'X-API-KEY: <x-api-key>' 200 Copy Ask AI [ { \"id\" : \"d290f1ee-6c54-4b01-90e6-d701748f0851\" , \"actionId\" : \"d290f1ee-6c54-4b01-90e6-d701748f0851\" , \"metadata\" : { \"name\" : \"My Collection\" , \"symbol\" : \"MYCOL\" , \"description\" : \"My Collection Description\" , \"image\" : \"https://example.com/image.png\" }, \"onChain\" : { \"chain\" : \"story-testnet\" , \"contractAddress\" : \"0x123\" } } ] This API is still under development. Contact support for early access. Headers ​ X-API-KEY string required API key required for authentication Query Parameters ​ page string default: 1 ​ perPage string default: 10 Response 200 - application/json Collections found Story Protocol multiple collection creation output Was this page helpful? Yes No Get IP Collection Get IP Assets in Collection Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 524
  },
  {
    "id": "https://docs.crossmint.com/api-reference/ip/get-ip-action#chunk_0",
    "url": "https://docs.crossmint.com/api-reference/ip/get-ip-action",
    "title": "Get IP Action - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation IP Get IP Action Documentation API Reference SDK Reference CLI Solution Guides Changelog API Reference Introduction Wallets POST Create Wallet GET Get Wallet By Locator GET Get Wallet Balance POST Fund Wallet GET Get NFTs from Wallet POST Create Transaction GET Get Transaction GET Get Wallet Transactions POST Approve Transaction POST Create Signature GET Get All Signatures GET Get Signature POST Approve Signature POST Create Delegated Signer GET Get Delegated Signer POST Transfer Token NFTs POST Mint NFT PUT Mint NFT with ID POST Mint SFT GET Get All NFTs GET Mint Status PATCH Edit NFT DEL Burn NFT IP POST Create IP Collection PUT Create IP Collection (Idempotent) GET Get IP Collection GET Get All IP Collections GET Get IP Assets in Collection GET Get IP Asset POST Create IP Asset PUT Create IP Asset (Idempotent) PATCH Update IP Asset GET Get IP Action GET Get IP Asset License GET Get IP Asset Graph NFT Collections POST Create Collection PUT Create Collection (Idempotent) GET Get All Collections GET Get Collection Info PATCH Update Collection PUT Set Royalties GET Get Royalties Configuration DEL Remove Royalties PUT Set Base URI GET Get Base URI PUT Set Transferability GET Get Transferability NFT Templates POST Create Template PUT Create Template with ID GET Get Template GET Get All Templates PATCH Edit Template DEL Delete Template Verifiable Credentials POST Create Credential template POST Issue Credential GET Get Credential by Credential ID GET Get Credential by NFT ID GET Get Credential by NFT Locator GET Retrieve credential nfts POST Verify Credential DEL Revoke Credential Verifiable Credential Types POST Create Credential Type PUT Create Credential Type with Name GET Get a Credential Type Headless Checkout POST Create Order GET Get Order PATCH Edit Order GET Check Token Support Action Status GET Get Action Status Admin GET Get Usage Get Action cURL Copy Ask AI curl --request GET \\ --url https://staging.crossmint.com/api/v1/ip/actions/{actionId} \\ --header 'X-API-KEY: <x-api-key>' 200 Copy Ask AI { \"id\" : \"123\" , \"status\" : \"success\" } GET / v1 / ip / actions / {actionId} Try it Get Action cURL Copy Ask AI curl --request GET \\ --url https://staging.crossmint.com/api/v1/ip/actions/{actionId} \\ --header 'X-API-KEY: <x-api-key>' 200 Copy Ask AI { \"id\" : \"123\" , \"status\" : \"success\" } This API is still under development. Contact support for early access. Headers ​ X-API-KEY string required API key required for authentication Path Parameters ​ actionId string required Response 200 - application/json Actions found The response from the Story Actions API Was this page helpful? Yes No Update IP Asset Get IP Asset License Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 445
  },
  {
    "id": "https://docs.crossmint.com/api-reference/ip/get-ip-asset#chunk_0",
    "url": "https://docs.crossmint.com/api-reference/ip/get-ip-asset",
    "title": "Get IP Asset - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation IP Get IP Asset Documentation API Reference SDK Reference CLI Solution Guides Changelog API Reference Introduction Wallets POST Create Wallet GET Get Wallet By Locator GET Get Wallet Balance POST Fund Wallet GET Get NFTs from Wallet POST Create Transaction GET Get Transaction GET Get Wallet Transactions POST Approve Transaction POST Create Signature GET Get All Signatures GET Get Signature POST Approve Signature POST Create Delegated Signer GET Get Delegated Signer POST Transfer Token NFTs POST Mint NFT PUT Mint NFT with ID POST Mint SFT GET Get All NFTs GET Mint Status PATCH Edit NFT DEL Burn NFT IP POST Create IP Collection PUT Create IP Collection (Idempotent) GET Get IP Collection GET Get All IP Collections GET Get IP Assets in Collection GET Get IP Asset POST Create IP Asset PUT Create IP Asset (Idempotent) PATCH Update IP Asset GET Get IP Action GET Get IP Asset License GET Get IP Asset Graph NFT Collections POST Create Collection PUT Create Collection (Idempotent) GET Get All Collections GET Get Collection Info PATCH Update Collection PUT Set Royalties GET Get Royalties Configuration DEL Remove Royalties PUT Set Base URI GET Get Base URI PUT Set Transferability GET Get Transferability NFT Templates POST Create Template PUT Create Template with ID GET Get Template GET Get All Templates PATCH Edit Template DEL Delete Template Verifiable Credentials POST Create Credential template POST Issue Credential GET Get Credential by Credential ID GET Get Credential by NFT ID GET Get Credential by NFT Locator GET Retrieve credential nfts POST Verify Credential DEL Revoke Credential Verifiable Credential Types POST Create Credential Type PUT Create Credential Type with Name GET Get a Credential Type Headless Checkout POST Create Order GET Get Order PATCH Edit Order GET Check Token Support Action Status GET Get Action Status Admin GET Get Usage Get IP Asset cURL Copy Ask AI curl --request GET \\ --url https://staging.crossmint.com/api/v1/ip/collections/{collectionId}/ipassets/{customerFacingId} \\ --header 'X-API-KEY: <x-api-key>' 200 Copy Ask AI { \"id\" : \"d290f1ee-6c54-4b01-90e6-d701748f0851\" , \"actionId\" : \"d290f1ee-6c54-4b01-90e6-d701748f0851\" , \"nftMetadata\" : { \"name\" : \"Art #123\" , \"description\" : \"A unique story NFT\" , \"image\" : \"https://example.com/nft/123.png\" }, \"ipAssetMetadata\" : { \"title\" : \"Harry Potter and the Philosopher's Stone\" , \"createdAt\" : \"1997-06-26T00:00:00\" , \"ipType\" : \"literature\" , \"creators\" : [ { \"name\" : \"JK Rowling\" , \"email\" : \"JKRowling@example.com\" , \"crossmintUserLocator\" : \"email:JKRowling@example.com:story\" , \"description\" : \"Author\" , \"contributionPercent\" : 80 , \"socialMedia\" : [ { \"platform\" : \"Wikipedia\" , \"url\" : \"https://en.wikipedia.org/wiki/J._K._Rowling\" } ] }, { \"name\" : \"Thomas Taylor\" , \"address\" : \"0x1234567890123456789012345678901234567890\" , \"description\" : \"Illustrator\" , \"contributionPercent\" : 15 }, { \"name\" : \"Bloomsbury Publishing\" , \"email\" : \"BloomsburyPublishing@example.com\" , \"address\" : \"0x1234567890123456789012345678901234567890\" , \"description\" : \"Publisher\" , \"contributionPercent\" : 5 , \"socialMedia\" : [ { \"platform\" : \"Website\" , \"url\" : \"https://www.bloomsbury.com/\" } ] } ], \"media\" : [ { \"name\" : \"ePub\" , \"url\" : \"link_to_epub\" , \"mimeType\" : \"application/epub+zip\" }, { \"name\" : \"Book Summary PDF\" , \"url\" : \"link_to_book_summary_pdf\" , \"mimeType\" : \"application/pdf\" } ], \"attributes\" : [ { \"key\" : \"ISBN\" , \"value\" : \"978-0-7475-3269-0\" }, { \"key\" : \"Genre\" , \"value\" : \"Fantasy\" } ] }, \"onChain\" : { \"status\" : \"success\" , \"chain\" : \"story-testnet\" , \"contractAddress\" : \"0x123\" , \"ipAssetId\" : \"0xAC6062FF53fa41e61Fe01B89B83d9dB96b5F9280\" , \"tokenId\" : \"1\" , \"txId\" : \"0x123\" , \"explorerLink\" : \"https://portal.story.foundation/assets/0xAC6062FF53fa41e61Fe01B89B83d9dB96b5F9280\" , \"owner\" : \"0x123\" }, \"licenseTerms\" : [ { \"type\" : \"non-commercial-social-remixing\" , \"licenseTermsId\" : 1 } ], \"derivData\" : { \"parentIpIds\" : [ \"0x123\" ], \"licenseTermsIds\" : [ 1 ], \"maxMintingFee\" : 0 , \"maxRevenueShare\" : 100 , \"maxRts\" : 10000000 } } GET / v1 / ip / collections / {collectionId} / ipassets / {customerFacingId} Try it Get IP Asset cURL Copy Ask AI curl --request GET \\ --url https://staging.crossmint.com/api/v1/ip/collections/{collectionId}/ipassets/{customerFacingId} \\ --header 'X-API-KEY: <x-api-key>' 200 Copy Ask AI { \"id\" : \"d290f1ee-6c54-4b01-90e6-d701748f0851\" , \"actionId\" : \"d290f1ee-6c54-4b01-90e6-d701748f0851\" , \"nftMetadata\" : { \"name\" : \"Art #123\" , \"description\" : \"A unique story NFT\" , \"image\" : \"https://example.com/nft/123.png\" }, \"ipAssetMetadata\" : { \"title\" : \"Harry Potter and the Philosopher's Stone\" , \"createdAt\" : \"1997-06-26T00:00:00\" , \"ipType\" : \"literature\" , \"creators\" : [ { \"name\" : \"JK Rowling\" , \"email\" : \"JKRowling@example.com\" , \"crossmintUserLocator\" : \"email:JKRowling@example.com:story\" , \"description\" : \"Author\" , \"contributionPercent\" : 80 , \"socialMedia\" : [ { \"platform\" : \"Wikipedia\" , \"url\" : \"https://en.wikipedia.org/wiki/J._K._Rowling\" } ] }, { \"name\" : \"Thomas Taylor\" , \"address\" : \"0x1234567890123456789012345678901234567890\" , \"description\" : \"Illustrator\" , \"contributionPercent\" : 15 }, { \"name\" : \"Bloomsbury Publishing\" , \"email\" : \"BloomsburyPublishing@example.com\" , \"address\" : \"0x1234567890123456789012345678901234567890\" , \"description\" : \"Publisher\" , \"contributionPercent\" : 5 , \"socialMedia\" : [ { \"platform\" : \"Website\" , \"url\" : \"https://www.bloomsbury.com/\" } ] } ], \"media\" : [ { \"name\" : \"ePub\" , \"url\" : \"link_to_epub\" , \"mimeType\" : \"application/epub+zip\" }, { \"name\" : \"Book Summary PDF\" , \"url\" : \"link_to_book_summary_pdf\" , \"mimeType\" : \"application/pdf\" } ], \"attributes\" : [ { \"key\" : \"ISBN\" , \"value\" : \"978-0-7475-3269-0\" }, { \"key\" : \"Genre\" , \"value\" : \"Fantasy\" } ] }, \"onChain\" : { \"status\" : \"success\" , \"chain\" : \"story-testnet\" , \"contractAddress\" : \"0x123\" , \"ipAssetId\" : \"0xAC6062FF53fa41e61Fe01B89B83d9dB96b5F9280\" , \"tokenId\" : \"1\" , \"txId\" : \"0x123\" , \"explorerLink\" : \"https://portal.story.foundation/assets/0xAC6062FF53fa41e61Fe01B89B83d9dB96b5F9280\" , \"owner\" : \"0x123\" }, \"licenseTerms\" : [ { \"type\" : \"non-commercial-social-remixing\" , \"licenseTermsId\" : 1 } ], \"derivData\" : { \"parentIpIds\" : [ \"0x123\" ], \"licenseTermsIds\" : [ 1 ], \"maxMintingFee\" : 0 , \"maxRevenueShare\" : 100 , \"maxRts\" : 10000000 } } This API is still under development. Contact support for early access. Headers ​ X-API-KEY string required API key required for authentication Path Parameters ​ collectionId string required ​ customerFacingId string required Response 200 - application/json IP Asset found IPAsset response DTO Was this page helpful? Yes No Get IP Assets in Collection Create IP Asset Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 977
  },
  {
    "id": "https://docs.crossmint.com/api-reference/ip/get-ip-assets#chunk_0",
    "url": "https://docs.crossmint.com/api-reference/ip/get-ip-assets",
    "title": "Get IP Assets in Collection - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation IP Get IP Assets in Collection Documentation API Reference SDK Reference CLI Solution Guides Changelog API Reference Introduction Wallets POST Create Wallet GET Get Wallet By Locator GET Get Wallet Balance POST Fund Wallet GET Get NFTs from Wallet POST Create Transaction GET Get Transaction GET Get Wallet Transactions POST Approve Transaction POST Create Signature GET Get All Signatures GET Get Signature POST Approve Signature POST Create Delegated Signer GET Get Delegated Signer POST Transfer Token NFTs POST Mint NFT PUT Mint NFT with ID POST Mint SFT GET Get All NFTs GET Mint Status PATCH Edit NFT DEL Burn NFT IP POST Create IP Collection PUT Create IP Collection (Idempotent) GET Get IP Collection GET Get All IP Collections GET Get IP Assets in Collection GET Get IP Asset POST Create IP Asset PUT Create IP Asset (Idempotent) PATCH Update IP Asset GET Get IP Action GET Get IP Asset License GET Get IP Asset Graph NFT Collections POST Create Collection PUT Create Collection (Idempotent) GET Get All Collections GET Get Collection Info PATCH Update Collection PUT Set Royalties GET Get Royalties Configuration DEL Remove Royalties PUT Set Base URI GET Get Base URI PUT Set Transferability GET Get Transferability NFT Templates POST Create Template PUT Create Template with ID GET Get Template GET Get All Templates PATCH Edit Template DEL Delete Template Verifiable Credentials POST Create Credential template POST Issue Credential GET Get Credential by Credential ID GET Get Credential by NFT ID GET Get Credential by NFT Locator GET Retrieve credential nfts POST Verify Credential DEL Revoke Credential Verifiable Credential Types POST Create Credential Type PUT Create Credential Type with Name GET Get a Credential Type Headless Checkout POST Create Order GET Get Order PATCH Edit Order GET Check Token Support Action Status GET Get Action Status Admin GET Get Usage Get IP Assets in a collection cURL Copy Ask AI curl --request GET \\ --url https://staging.crossmint.com/api/v1/ip/collections/{collectionId}/ipassets \\ --header 'X-API-KEY: <x-api-key>' 200 Copy Ask AI [ { \"id\" : \"d290f1ee-6c54-4b01-90e6-d701748f0851\" , \"actionId\" : \"d290f1ee-6c54-4b01-90e6-d701748f0851\" , \"nftMetadata\" : { \"name\" : \"Art #123\" , \"description\" : \"A unique story NFT\" , \"image\" : \"https://example.com/nft/123.png\" }, \"ipAssetMetadata\" : { \"title\" : \"Harry Potter and the Philosopher's Stone\" , \"createdAt\" : \"1997-06-26T00:00:00\" , \"ipType\" : \"literature\" , \"creators\" : [ { \"name\" : \"JK Rowling\" , \"email\" : \"JKRowling@example.com\" , \"crossmintUserLocator\" : \"email:JKRowling@example.com:story\" , \"description\" : \"Author\" , \"contributionPercent\" : 80 , \"socialMedia\" : [ { \"platform\" : \"Wikipedia\" , \"url\" : \"https://en.wikipedia.org/wiki/J._K._Rowling\" } ] }, { \"name\" : \"Thomas Taylor\" , \"address\" : \"0x1234567890123456789012345678901234567890\" , \"description\" : \"Illustrator\" , \"contributionPercent\" : 15 }, { \"name\" : \"Bloomsbury Publishing\" , \"email\" : \"BloomsburyPublishing@example.com\" , \"address\" : \"0x1234567890123456789012345678901234567890\" , \"description\" : \"Publisher\" , \"contributionPercent\" : 5 , \"socialMedia\" : [ { \"platform\" : \"Website\" , \"url\" : \"https://www.bloomsbury.com/\" } ] } ], \"media\" : [ { \"name\" : \"ePub\" , \"url\" : \"link_to_epub\" , \"mimeType\" : \"application/epub+zip\" }, { \"name\" : \"Book Summary PDF\" , \"url\" : \"link_to_book_summary_pdf\" , \"mimeType\" : \"application/pdf\" } ], \"attributes\" : [ { \"key\" : \"ISBN\" , \"value\" : \"978-0-7475-3269-0\" }, { \"key\" : \"Genre\" , \"value\" : \"Fantasy\" } ] }, \"onChain\" : { \"status\" : \"success\" , \"chain\" : \"story-testnet\" , \"contractAddress\" : \"0x123\" , \"ipAssetId\" : \"0xAC6062FF53fa41e61Fe01B89B83d9dB96b5F9280\" , \"tokenId\" : \"1\" , \"txId\" : \"0x123\" , \"explorerLink\" : \"https://portal.story.foundation/assets/0xAC6062FF53fa41e61Fe01B89B83d9dB96b5F9280\" , \"owner\" : \"0x123\" }, \"licenseTerms\" : [ { \"type\" : \"non-commercial-social-remixing\" , \"licenseTermsId\" : 1 } ], \"derivData\" : { \"parentIpIds\" : [ \"0x123\" ], \"licenseTermsIds\" : [ 1 ], \"maxMintingFee\" : 0 , \"maxRevenueShare\" : 100 , \"maxRts\" : 10000000 } }, { \"id\" : \"d290f1ee-6c54-4b01-90e6-d701748f0851\" , \"actionId\" : \"d290f1ee-6c54-4b01-90e6-d701748f0851\" , \"nftMetadata\" : { \"name\" : \"Art #123\" , \"description\" : \"A unique story NFT\" , \"image\" : \"https://example.com/nft/123.png\" }, \"ipAssetMetadata\" : { \"title\" : \"Harry Potter and the Philosopher's Stone\" , \"createdAt\" : \"1997-06-26T00:00:00\" , \"ipType\" : \"literature\" , \"creators\" : [ { \"name\" : \"JK Rowling\" , \"email\" : \"JKRowling@example.com\" , \"crossmintUserLocator\" : \"email:JKRowling@example.com:story\" , \"description\" : \"Author\" , \"contributionPercent\" : 80 , \"socialMedia\" : [ { \"platform\" : \"Wikipedia\" , \"url\" : \"https://en.wikipedia.org/wiki/J._K._Rowling\" } ] }, { \"name\" : \"Thomas Taylor\" , \"address\" : \"0x1234567890123456789012345678901234567890\" , \"description\" : \"Illustrator\" , \"contributionPercent\" : 15 }, { \"name\" : \"Bloomsbury Publishing\" , \"email\" : \"BloomsburyPublishing@example.com\" , \"address\" : \"0x1234567890123456789012345678901234567890\" , \"description\" : \"Publisher\" , \"contributionPercent\" : 5 , \"socialMedia\" : [ { \"platform\" : \"Website\" , \"url\" : \"https://www.bloomsbury.com/\" } ] } ], \"media\" : [ { \"name\" : \"ePub\" , \"url\" : \"link_to_epub\" , \"mimeType\" : \"application/epub+zip\" }, { \"name\" : \"Book Summary PDF\" , \"url\" : \"link_to_book_summary_pdf\" , \"mimeType\" : \"application/pdf\" } ], \"attributes\" : [ { \"key\" : \"ISBN\" , \"value\" : \"978-0-7475-3269-0\" }, { \"key\" : \"Genre\" , \"value\" : \"Fantasy\" } ] }, \"onChain\" : { \"status\" : \"success\" , \"chain\" : \"story-testnet\" , \"contractAddress\" : \"0x123\" , \"ipAssetId\" : \"0xAC6062FF53fa41e61Fe01B89B83d9dB96b5F9280\" , \"tokenId\" : \"1\" , \"txId\" : \"0x123\" , \"explorerLink\" : \"https://portal.story.foundation/assets/0xAC6062FF53fa41e61Fe01B89B83d9dB96b5F9280\" , \"owner\" : \"0x123\" }, \"licenseTerms\" : [ { \"type\" : \"non-commercial-social-remixing\" , \"licenseTermsId\" : 1 } ], \"derivData\" : { \"parentIpIds\" : [ \"0x123\" ], \"licenseTermsIds\" : [ 1 ], \"maxMintingFee\" : 0 , \"maxRevenueShare\" : 100 , \"maxRts\" : 10000000 } } ] GET / v1 / ip / collections / {collectionId} / ipassets Try it Get IP Assets in a collection cURL Copy Ask AI curl --request GET \\ --url https://staging.crossmint.com/api/v1/ip/collections/{collectionId}/ipassets \\ --header 'X-API-KEY: <x-api-key>' 200 Copy Ask AI [ { \"id\" : \"d290f1ee-6c54-4b01-90e6-d701748f0851\" , \"actionId\" : \"d290f1ee-6c54-4b01-90e6-d701748f0851\" , \"nftMetadata\" : { \"name\" : \"Art #123\" , \"description\" : \"A unique story NFT\" , \"image\" : \"https://example.com/nft/123.png\" }, \"ipAssetMetadata\" : { \"title\" : \"Harry Potter and the Philosopher's Stone\" , \"createdAt\" : \"1997-06-26T00:00:00\" , \"ipType\" : \"literature\" , \"creators\" : [ { \"name\" : \"JK Rowling\" , \"email\" : \"JKRowling@example.com\" , \"crossmintUserLocator\" : \"email:JKRowling@example.com:story\" , \"description\" : \"Author\" , \"contributionPercent\" : 80 , \"socialMedia\" : [ { \"platform\" :",
    "chunk_index": 0,
    "word_count": 1000
  },
  {
    "id": "https://docs.crossmint.com/api-reference/ip/get-ip-assets#chunk_0",
    "url": "https://docs.crossmint.com/api-reference/ip/get-ip-assets",
    "title": "Get IP Assets in Collection - Crossmint Docs",
    "content": "a collection cURL Copy Ask AI curl --request GET \\ --url https://staging.crossmint.com/api/v1/ip/collections/{collectionId}/ipassets \\ --header 'X-API-KEY: <x-api-key>' 200 Copy Ask AI [ { \"id\" : \"d290f1ee-6c54-4b01-90e6-d701748f0851\" , \"actionId\" : \"d290f1ee-6c54-4b01-90e6-d701748f0851\" , \"nftMetadata\" : { \"name\" : \"Art #123\" , \"description\" : \"A unique story NFT\" , \"image\" : \"https://example.com/nft/123.png\" }, \"ipAssetMetadata\" : { \"title\" : \"Harry Potter and the Philosopher's Stone\" , \"createdAt\" : \"1997-06-26T00:00:00\" , \"ipType\" : \"literature\" , \"creators\" : [ { \"name\" : \"JK Rowling\" , \"email\" : \"JKRowling@example.com\" , \"crossmintUserLocator\" : \"email:JKRowling@example.com:story\" , \"description\" : \"Author\" , \"contributionPercent\" : 80 , \"socialMedia\" : [ { \"platform\" : \"Wikipedia\" , \"url\" : \"https://en.wikipedia.org/wiki/J._K._Rowling\" } ] }, { \"name\" : \"Thomas Taylor\" , \"address\" : \"0x1234567890123456789012345678901234567890\" , \"description\" : \"Illustrator\" , \"contributionPercent\" : 15 }, { \"name\" : \"Bloomsbury Publishing\" , \"email\" : \"BloomsburyPublishing@example.com\" , \"address\" : \"0x1234567890123456789012345678901234567890\" , \"description\" : \"Publisher\" , \"contributionPercent\" : 5 , \"socialMedia\" : [ { \"platform\" : \"Website\" , \"url\" : \"https://www.bloomsbury.com/\" } ] } ], \"media\" : [ { \"name\" : \"ePub\" , \"url\" : \"link_to_epub\" , \"mimeType\" : \"application/epub+zip\" }, { \"name\" : \"Book Summary PDF\" , \"url\" : \"link_to_book_summary_pdf\" , \"mimeType\" : \"application/pdf\" } ], \"attributes\" : [ { \"key\" : \"ISBN\" , \"value\" : \"978-0-7475-3269-0\" }, { \"key\" : \"Genre\" , \"value\" : \"Fantasy\" } ] }, \"onChain\" : { \"status\" : \"success\" , \"chain\" : \"story-testnet\" , \"contractAddress\" : \"0x123\" , \"ipAssetId\" : \"0xAC6062FF53fa41e61Fe01B89B83d9dB96b5F9280\" , \"tokenId\" : \"1\" , \"txId\" : \"0x123\" , \"explorerLink\" : \"https://portal.story.foundation/assets/0xAC6062FF53fa41e61Fe01B89B83d9dB96b5F9280\" , \"owner\" : \"0x123\" }, \"licenseTerms\" : [ { \"type\" : \"non-commercial-social-remixing\" , \"licenseTermsId\" : 1 } ], \"derivData\" : { \"parentIpIds\" : [ \"0x123\" ], \"licenseTermsIds\" : [ 1 ], \"maxMintingFee\" : 0 , \"maxRevenueShare\" : 100 , \"maxRts\" : 10000000 } }, { \"id\" : \"d290f1ee-6c54-4b01-90e6-d701748f0851\" , \"actionId\" : \"d290f1ee-6c54-4b01-90e6-d701748f0851\" , \"nftMetadata\" : { \"name\" : \"Art #123\" , \"description\" : \"A unique story NFT\" , \"image\" : \"https://example.com/nft/123.png\" }, \"ipAssetMetadata\" : { \"title\" : \"Harry Potter and the Philosopher's Stone\" , \"createdAt\" : \"1997-06-26T00:00:00\" , \"ipType\" : \"literature\" , \"creators\" : [ { \"name\" : \"JK Rowling\" , \"email\" : \"JKRowling@example.com\" , \"crossmintUserLocator\" : \"email:JKRowling@example.com:story\" , \"description\" : \"Author\" , \"contributionPercent\" : 80 , \"socialMedia\" : [ { \"platform\" : \"Wikipedia\" , \"url\" : \"https://en.wikipedia.org/wiki/J._K._Rowling\" } ] }, { \"name\" : \"Thomas Taylor\" , \"address\" : \"0x1234567890123456789012345678901234567890\" , \"description\" : \"Illustrator\" , \"contributionPercent\" : 15 }, { \"name\" : \"Bloomsbury Publishing\" , \"email\" : \"BloomsburyPublishing@example.com\" , \"address\" : \"0x1234567890123456789012345678901234567890\" , \"description\" : \"Publisher\" , \"contributionPercent\" : 5 , \"socialMedia\" : [ { \"platform\" : \"Website\" , \"url\" : \"https://www.bloomsbury.com/\" } ] } ], \"media\" : [ { \"name\" : \"ePub\" , \"url\" : \"link_to_epub\" , \"mimeType\" : \"application/epub+zip\" }, { \"name\" : \"Book Summary PDF\" , \"url\" : \"link_to_book_summary_pdf\" , \"mimeType\" : \"application/pdf\" } ], \"attributes\" : [ { \"key\" : \"ISBN\" , \"value\" : \"978-0-7475-3269-0\" }, { \"key\" : \"Genre\" , \"value\" : \"Fantasy\" } ] }, \"onChain\" : { \"status\" : \"success\" , \"chain\" : \"story-testnet\" , \"contractAddress\" : \"0x123\" , \"ipAssetId\" : \"0xAC6062FF53fa41e61Fe01B89B83d9dB96b5F9280\" , \"tokenId\" : \"1\" , \"txId\" : \"0x123\" , \"explorerLink\" : \"https://portal.story.foundation/assets/0xAC6062FF53fa41e61Fe01B89B83d9dB96b5F9280\" , \"owner\" : \"0x123\" }, \"licenseTerms\" : [ { \"type\" : \"non-commercial-social-remixing\" , \"licenseTermsId\" : 1 } ], \"derivData\" : { \"parentIpIds\" : [ \"0x123\" ], \"licenseTermsIds\" : [ 1 ], \"maxMintingFee\" : 0 , \"maxRevenueShare\" : 100 , \"maxRts\" : 10000000 } } ] This API is still under development. Contact support for early access. Headers ​ X-API-KEY string required API key required for authentication Path Parameters ​ collectionId string required Query Parameters ​ page string default: 1 ​ perPage string default: 10 Response 200 - application/json IP Assets found Multiple IPAsset response DTO Was this page helpful? Yes No Get All IP Collections Get IP Asset Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 637
  },
  {
    "id": "https://docs.crossmint.com/api-reference/ip/get-ip-collection#chunk_0",
    "url": "https://docs.crossmint.com/api-reference/ip/get-ip-collection",
    "title": "Get IP Collection - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation IP Get IP Collection Documentation API Reference SDK Reference CLI Solution Guides Changelog API Reference Introduction Wallets POST Create Wallet GET Get Wallet By Locator GET Get Wallet Balance POST Fund Wallet GET Get NFTs from Wallet POST Create Transaction GET Get Transaction GET Get Wallet Transactions POST Approve Transaction POST Create Signature GET Get All Signatures GET Get Signature POST Approve Signature POST Create Delegated Signer GET Get Delegated Signer POST Transfer Token NFTs POST Mint NFT PUT Mint NFT with ID POST Mint SFT GET Get All NFTs GET Mint Status PATCH Edit NFT DEL Burn NFT IP POST Create IP Collection PUT Create IP Collection (Idempotent) GET Get IP Collection GET Get All IP Collections GET Get IP Assets in Collection GET Get IP Asset POST Create IP Asset PUT Create IP Asset (Idempotent) PATCH Update IP Asset GET Get IP Action GET Get IP Asset License GET Get IP Asset Graph NFT Collections POST Create Collection PUT Create Collection (Idempotent) GET Get All Collections GET Get Collection Info PATCH Update Collection PUT Set Royalties GET Get Royalties Configuration DEL Remove Royalties PUT Set Base URI GET Get Base URI PUT Set Transferability GET Get Transferability NFT Templates POST Create Template PUT Create Template with ID GET Get Template GET Get All Templates PATCH Edit Template DEL Delete Template Verifiable Credentials POST Create Credential template POST Issue Credential GET Get Credential by Credential ID GET Get Credential by NFT ID GET Get Credential by NFT Locator GET Retrieve credential nfts POST Verify Credential DEL Revoke Credential Verifiable Credential Types POST Create Credential Type PUT Create Credential Type with Name GET Get a Credential Type Headless Checkout POST Create Order GET Get Order PATCH Edit Order GET Check Token Support Action Status GET Get Action Status Admin GET Get Usage Get a Collection cURL Copy Ask AI curl --request GET \\ --url https://staging.crossmint.com/api/v1/ip/collections/{collectionId} \\ --header 'X-API-KEY: <x-api-key>' 200 Copy Ask AI { \"id\": \"d290f1ee-6c54-4b01-90e6-d701748f0851\", \"actionId\": \"d290f1ee-6c54-4b01-90e6-d701748f0851\", \"metadata\": { \"name\": \"My Collection\", \"symbol\": \"MYCOL\", \"description\": \"My Collection Description\", \"image\": \"https://example.com/image.png\" }, \"onChain\": { \"chain\": \"story-testnet\", \"contractAddress\": \"0x123\" } } GET / v1 / ip / collections / {collectionId} Try it Get a Collection cURL Copy Ask AI curl --request GET \\ --url https://staging.crossmint.com/api/v1/ip/collections/{collectionId} \\ --header 'X-API-KEY: <x-api-key>' 200 Copy Ask AI { \"id\": \"d290f1ee-6c54-4b01-90e6-d701748f0851\", \"actionId\": \"d290f1ee-6c54-4b01-90e6-d701748f0851\", \"metadata\": { \"name\": \"My Collection\", \"symbol\": \"MYCOL\", \"description\": \"My Collection Description\", \"image\": \"https://example.com/image.png\" }, \"onChain\": { \"chain\": \"story-testnet\", \"contractAddress\": \"0x123\" } } This API is still under development. Contact support for early access. Headers ​ X-API-KEY string required API key required for authentication Path Parameters ​ collectionId string required Response 200 - application/json SPG Collection found Story Protocol collection creation output Was this page helpful? Yes No Create IP Collection (Idempotent) Get All IP Collections Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 483
  },
  {
    "id": "https://docs.crossmint.com/api-reference/ip/get-ip-graph#chunk_0",
    "url": "https://docs.crossmint.com/api-reference/ip/get-ip-graph",
    "title": "Get IP Asset Graph - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation IP Get IP Asset Graph Documentation API Reference SDK Reference CLI Solution Guides Changelog API Reference Introduction Wallets POST Create Wallet GET Get Wallet By Locator GET Get Wallet Balance POST Fund Wallet GET Get NFTs from Wallet POST Create Transaction GET Get Transaction GET Get Wallet Transactions POST Approve Transaction POST Create Signature GET Get All Signatures GET Get Signature POST Approve Signature POST Create Delegated Signer GET Get Delegated Signer POST Transfer Token NFTs POST Mint NFT PUT Mint NFT with ID POST Mint SFT GET Get All NFTs GET Mint Status PATCH Edit NFT DEL Burn NFT IP POST Create IP Collection PUT Create IP Collection (Idempotent) GET Get IP Collection GET Get All IP Collections GET Get IP Assets in Collection GET Get IP Asset POST Create IP Asset PUT Create IP Asset (Idempotent) PATCH Update IP Asset GET Get IP Action GET Get IP Asset License GET Get IP Asset Graph NFT Collections POST Create Collection PUT Create Collection (Idempotent) GET Get All Collections GET Get Collection Info PATCH Update Collection PUT Set Royalties GET Get Royalties Configuration DEL Remove Royalties PUT Set Base URI GET Get Base URI PUT Set Transferability GET Get Transferability NFT Templates POST Create Template PUT Create Template with ID GET Get Template GET Get All Templates PATCH Edit Template DEL Delete Template Verifiable Credentials POST Create Credential template POST Issue Credential GET Get Credential by Credential ID GET Get Credential by NFT ID GET Get Credential by NFT Locator GET Retrieve credential nfts POST Verify Credential DEL Revoke Credential Verifiable Credential Types POST Create Credential Type PUT Create Credential Type with Name GET Get a Credential Type Headless Checkout POST Create Order GET Get Order PATCH Edit Order GET Check Token Support Action Status GET Get Action Status Admin GET Get Usage Get IP Asset Graph cURL Copy Ask AI curl --request GET \\ --url https://staging.crossmint.com/api/v1/ip/graph/{ipAssetId} \\ --header 'X-API-KEY: <x-api-key>' 200 Copy Ask AI { \"rootIpId\" : \"0xf6546a7e5342b152366E3B3FC773743b6D991aB2\" , \"parents\" : [ { \"ipId\" : \"0xAb92d4f9EA97666c40527D54a9aF4D7F82ab8552\" , \"parents\" : [ { \"ipId\" : \"0x9876543210abcdef9876543210abcdef98765432\" , \"parents\" : [] } ] } ], \"children\" : [ { \"ipId\" : \"0x123456789abcdef0123456789abcdef012345678\" , \"children\" : [ { \"ipId\" : \"0xabcdef0123456789abcdef0123456789abcdef01\" , \"children\" : [] } ] } ] } GET / v1 / ip / graph / {ipAssetId} Try it Get IP Asset Graph cURL Copy Ask AI curl --request GET \\ --url https://staging.crossmint.com/api/v1/ip/graph/{ipAssetId} \\ --header 'X-API-KEY: <x-api-key>' 200 Copy Ask AI { \"rootIpId\" : \"0xf6546a7e5342b152366E3B3FC773743b6D991aB2\" , \"parents\" : [ { \"ipId\" : \"0xAb92d4f9EA97666c40527D54a9aF4D7F82ab8552\" , \"parents\" : [ { \"ipId\" : \"0x9876543210abcdef9876543210abcdef98765432\" , \"parents\" : [] } ] } ], \"children\" : [ { \"ipId\" : \"0x123456789abcdef0123456789abcdef012345678\" , \"children\" : [ { \"ipId\" : \"0xabcdef0123456789abcdef0123456789abcdef01\" , \"children\" : [] } ] } ] } This API is still under development. Contact support for early access. Headers ​ X-API-KEY string required API key required for authentication Path Parameters ​ ipAssetId string required Query Parameters ​ depth string default: 1 Response 200 - application/json IP Asset Graph found IP Asset relationship graph showing parents and children Was this page helpful? Yes No Get IP Asset License Create Collection Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 545
  },
  {
    "id": "https://docs.crossmint.com/api-reference/ip/get-ip-license#chunk_0",
    "url": "https://docs.crossmint.com/api-reference/ip/get-ip-license",
    "title": "Get IP Asset License - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation IP Get IP Asset License Documentation API Reference SDK Reference CLI Solution Guides Changelog API Reference Introduction Wallets POST Create Wallet GET Get Wallet By Locator GET Get Wallet Balance POST Fund Wallet GET Get NFTs from Wallet POST Create Transaction GET Get Transaction GET Get Wallet Transactions POST Approve Transaction POST Create Signature GET Get All Signatures GET Get Signature POST Approve Signature POST Create Delegated Signer GET Get Delegated Signer POST Transfer Token NFTs POST Mint NFT PUT Mint NFT with ID POST Mint SFT GET Get All NFTs GET Mint Status PATCH Edit NFT DEL Burn NFT IP POST Create IP Collection PUT Create IP Collection (Idempotent) GET Get IP Collection GET Get All IP Collections GET Get IP Assets in Collection GET Get IP Asset POST Create IP Asset PUT Create IP Asset (Idempotent) PATCH Update IP Asset GET Get IP Action GET Get IP Asset License GET Get IP Asset Graph NFT Collections POST Create Collection PUT Create Collection (Idempotent) GET Get All Collections GET Get Collection Info PATCH Update Collection PUT Set Royalties GET Get Royalties Configuration DEL Remove Royalties PUT Set Base URI GET Get Base URI PUT Set Transferability GET Get Transferability NFT Templates POST Create Template PUT Create Template with ID GET Get Template GET Get All Templates PATCH Edit Template DEL Delete Template Verifiable Credentials POST Create Credential template POST Issue Credential GET Get Credential by Credential ID GET Get Credential by NFT ID GET Get Credential by NFT Locator GET Retrieve credential nfts POST Verify Credential DEL Revoke Credential Verifiable Credential Types POST Create Credential Type PUT Create Credential Type with Name GET Get a Credential Type Headless Checkout POST Create Order GET Get Order PATCH Edit Order GET Check Token Support Action Status GET Get Action Status Admin GET Get Usage Get IP Asset Licenses cURL Copy Ask AI curl --request GET \\ --url https://staging.crossmint.com/api/v1/ip/licenses/{ipassetId} \\ --header 'X-API-KEY: <x-api-key>' 200 Copy Ask AI [ { \"id\" : \"155\" , \"terms\" : { \"transferable\" : true , \"royaltyPolicy\" : \"0x1234567890123456789012345678901234567890\" , \"defaultMintingFee\" : 100 , \"expiration\" : 0 , \"commercialUse\" : true , \"commercialAttribution\" : true , \"commercializerChecker\" : \"0x0000000000000000000000000000000000000000\" , \"commercializerCheckerData\" : \"0x0000000000000000000000000000000000000000\" , \"commercialRevShare\" : 10000000 , \"commercialRevCeiling\" : 0 , \"derivativesAllowed\" : true , \"derivativesAttribution\" : true , \"derivativesApproval\" : false , \"derivativesReciprocal\" : true , \"derivativeRevCeiling\" : 0 , \"currency\" : \"0x1234567890123456789012345678901234567890\" , \"uri\" : \"Will contain a reference to the license terms metadata\" }, \"disabled\" : false } ] GET / v1 / ip / licenses / {ipassetId} Try it Get IP Asset Licenses cURL Copy Ask AI curl --request GET \\ --url https://staging.crossmint.com/api/v1/ip/licenses/{ipassetId} \\ --header 'X-API-KEY: <x-api-key>' 200 Copy Ask AI [ { \"id\" : \"155\" , \"terms\" : { \"transferable\" : true , \"royaltyPolicy\" : \"0x1234567890123456789012345678901234567890\" , \"defaultMintingFee\" : 100 , \"expiration\" : 0 , \"commercialUse\" : true , \"commercialAttribution\" : true , \"commercializerChecker\" : \"0x0000000000000000000000000000000000000000\" , \"commercializerCheckerData\" : \"0x0000000000000000000000000000000000000000\" , \"commercialRevShare\" : 10000000 , \"commercialRevCeiling\" : 0 , \"derivativesAllowed\" : true , \"derivativesAttribution\" : true , \"derivativesApproval\" : false , \"derivativesReciprocal\" : true , \"derivativeRevCeiling\" : 0 , \"currency\" : \"0x1234567890123456789012345678901234567890\" , \"uri\" : \"Will contain a reference to the license terms metadata\" }, \"disabled\" : false } ] This API is still under development. Contact support for early access. Headers ​ X-API-KEY string required API key required for authentication Path Parameters ​ ipassetId string required Response 200 - application/json IP Asset License found Specific terms for a Story Protocol PIL (Programmable IP License). Default is the Non-Commercial Social Remixing license. More details here: https://docs.story.foundation/docs/pil-terms Was this page helpful? Yes No Get IP Action Get IP Asset Graph Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 628
  },
  {
    "id": "https://docs.crossmint.com/api-reference/ip/update-ip-asset#chunk_0",
    "url": "https://docs.crossmint.com/api-reference/ip/update-ip-asset",
    "title": "Update IP Asset - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation IP Update IP Asset Documentation API Reference SDK Reference CLI Solution Guides Changelog API Reference Introduction Wallets POST Create Wallet GET Get Wallet By Locator GET Get Wallet Balance POST Fund Wallet GET Get NFTs from Wallet POST Create Transaction GET Get Transaction GET Get Wallet Transactions POST Approve Transaction POST Create Signature GET Get All Signatures GET Get Signature POST Approve Signature POST Create Delegated Signer GET Get Delegated Signer POST Transfer Token NFTs POST Mint NFT PUT Mint NFT with ID POST Mint SFT GET Get All NFTs GET Mint Status PATCH Edit NFT DEL Burn NFT IP POST Create IP Collection PUT Create IP Collection (Idempotent) GET Get IP Collection GET Get All IP Collections GET Get IP Assets in Collection GET Get IP Asset POST Create IP Asset PUT Create IP Asset (Idempotent) PATCH Update IP Asset GET Get IP Action GET Get IP Asset License GET Get IP Asset Graph NFT Collections POST Create Collection PUT Create Collection (Idempotent) GET Get All Collections GET Get Collection Info PATCH Update Collection PUT Set Royalties GET Get Royalties Configuration DEL Remove Royalties PUT Set Base URI GET Get Base URI PUT Set Transferability GET Get Transferability NFT Templates POST Create Template PUT Create Template with ID GET Get Template GET Get All Templates PATCH Edit Template DEL Delete Template Verifiable Credentials POST Create Credential template POST Issue Credential GET Get Credential by Credential ID GET Get Credential by NFT ID GET Get Credential by NFT Locator GET Retrieve credential nfts POST Verify Credential DEL Revoke Credential Verifiable Credential Types POST Create Credential Type PUT Create Credential Type with Name GET Get a Credential Type Headless Checkout POST Create Order GET Get Order PATCH Edit Order GET Check Token Support Action Status GET Get Action Status Admin GET Get Usage Update IP Asset cURL Copy Ask AI curl --request PATCH \\ --url https://staging.crossmint.com/api/v1/ip/collections/{collectionId}/ipassets/{customerFacingId} \\ --header 'Content-Type: application/json' \\ --header 'X-API-KEY: <x-api-key>' \\ --data '{ \"reuploadLinkedFiles\": true, \"ipAssetMetadata\": { \"title\": \"Harry Potter and the Philosopher' \\' 's Stone\", \"createdAt\": \"1997-06-26T00:00:00\", \"ipType\": \"literature\", \"creators\": [ { \"name\": \"JK Rowling\", \"email\": \"JKRowling@example.com\", \"crossmintUserLocator\": \"email:JKRowling@example.com:story\", \"description\": \"Author\", \"contributionPercent\": 80, \"socialMedia\": [ { \"platform\": \"Wikipedia\", \"url\": \"https://en.wikipedia.org/wiki/J._K._Rowling\" } ] }, { \"name\": \"Thomas Taylor\", \"address\": \"0x1234567890123456789012345678901234567890\", \"description\": \"Illustrator\", \"contributionPercent\": 15 }, { \"name\": \"Bloomsbury Publishing\", \"email\": \"BloomsburyPublishing@example.com\", \"address\": \"0x1234567890123456789012345678901234567890\", \"description\": \"Publisher\", \"contributionPercent\": 5, \"socialMedia\": [ { \"platform\": \"Website\", \"url\": \"https://www.bloomsbury.com/\" } ] } ], \"media\": [ { \"name\": \"ePub\", \"url\": \"link_to_epub\", \"mimeType\": \"application/epub+zip\" }, { \"name\": \"Book Summary PDF\", \"url\": \"link_to_book_summary_pdf\", \"mimeType\": \"application/pdf\" } ], \"attributes\": [ { \"key\": \"ISBN\", \"value\": \"978-0-7475-3269-0\" }, { \"key\": \"Genre\", \"value\": \"Fantasy\" } ] }, \"licenseConfig\": { \"mintingFee\": 100, \"licenseTermsId\": \"1\" } }' 200 Copy Ask AI { \"id\" : \"d290f1ee-6c54-4b01-90e6-d701748f0851\" , \"actionId\" : \"d290f1ee-6c54-4b01-90e6-d701748f0851\" , \"nftMetadata\" : { \"name\" : \"Art #123\" , \"description\" : \"A unique story NFT\" , \"image\" : \"https://example.com/nft/123.png\" }, \"ipAssetMetadata\" : { \"title\" : \"Harry Potter and the Philosopher's Stone\" , \"createdAt\" : \"1997-06-26T00:00:00\" , \"ipType\" : \"literature\" , \"creators\" : [ { \"name\" : \"JK Rowling\" , \"email\" : \"JKRowling@example.com\" , \"crossmintUserLocator\" : \"email:JKRowling@example.com:story\" , \"description\" : \"Author\" , \"contributionPercent\" : 80 , \"socialMedia\" : [ { \"platform\" : \"Wikipedia\" , \"url\" : \"https://en.wikipedia.org/wiki/J._K._Rowling\" } ] }, { \"name\" : \"Thomas Taylor\" , \"address\" : \"0x1234567890123456789012345678901234567890\" , \"description\" : \"Illustrator\" , \"contributionPercent\" : 15 }, { \"name\" : \"Bloomsbury Publishing\" , \"email\" : \"BloomsburyPublishing@example.com\" , \"address\" : \"0x1234567890123456789012345678901234567890\" , \"description\" : \"Publisher\" , \"contributionPercent\" : 5 , \"socialMedia\" : [ { \"platform\" : \"Website\" , \"url\" : \"https://www.bloomsbury.com/\" } ] } ], \"media\" : [ { \"name\" : \"ePub\" , \"url\" : \"link_to_epub\" , \"mimeType\" : \"application/epub+zip\" }, { \"name\" : \"Book Summary PDF\" , \"url\" : \"link_to_book_summary_pdf\" , \"mimeType\" : \"application/pdf\" } ], \"attributes\" : [ { \"key\" : \"ISBN\" , \"value\" : \"978-0-7475-3269-0\" }, { \"key\" : \"Genre\" , \"value\" : \"Fantasy\" } ] }, \"onChain\" : { \"status\" : \"success\" , \"chain\" : \"story-testnet\" , \"contractAddress\" : \"0x123\" , \"ipAssetId\" : \"0xAC6062FF53fa41e61Fe01B89B83d9dB96b5F9280\" , \"tokenId\" : \"1\" , \"txId\" : \"0x123\" , \"explorerLink\" : \"https://portal.story.foundation/assets/0xAC6062FF53fa41e61Fe01B89B83d9dB96b5F9280\" , \"owner\" : \"0x123\" }, \"licenseTerms\" : [ { \"type\" : \"non-commercial-social-remixing\" , \"licenseTermsId\" : 1 } ], \"derivData\" : { \"parentIpIds\" : [ \"0x123\" ], \"licenseTermsIds\" : [ 1 ], \"maxMintingFee\" : 0 , \"maxRevenueShare\" : 100 , \"maxRts\" : 10000000 }, \"licenseConfig\" : { \"mintingFee\" : 100 , \"licenseTermsId\" : \"1\" , \"disabled\" : false } } PATCH / v1 / ip / collections / {collectionId} / ipassets / {customerFacingId} Try it Update IP Asset cURL Copy Ask AI curl --request PATCH \\ --url https://staging.crossmint.com/api/v1/ip/collections/{collectionId}/ipassets/{customerFacingId} \\ --header 'Content-Type: application/json' \\ --header 'X-API-KEY: <x-api-key>' \\ --data '{ \"reuploadLinkedFiles\": true, \"ipAssetMetadata\": { \"title\": \"Harry Potter and the Philosopher' \\' 's Stone\", \"createdAt\": \"1997-06-26T00:00:00\", \"ipType\": \"literature\", \"creators\": [ { \"name\": \"JK Rowling\", \"email\": \"JKRowling@example.com\", \"crossmintUserLocator\": \"email:JKRowling@example.com:story\", \"description\": \"Author\", \"contributionPercent\": 80, \"socialMedia\": [ { \"platform\": \"Wikipedia\", \"url\": \"https://en.wikipedia.org/wiki/J._K._Rowling\" } ] }, { \"name\": \"Thomas Taylor\", \"address\": \"0x1234567890123456789012345678901234567890\", \"description\": \"Illustrator\", \"contributionPercent\": 15 }, { \"name\": \"Bloomsbury Publishing\", \"email\": \"BloomsburyPublishing@example.com\", \"address\": \"0x1234567890123456789012345678901234567890\", \"description\": \"Publisher\", \"contributionPercent\": 5, \"socialMedia\": [ { \"platform\": \"Website\", \"url\": \"https://www.bloomsbury.com/\" } ] } ], \"media\": [ { \"name\": \"ePub\", \"url\": \"link_to_epub\", \"mimeType\": \"application/epub+zip\" }, { \"name\": \"Book Summary PDF\", \"url\": \"link_to_book_summary_pdf\", \"mimeType\": \"application/pdf\" } ], \"attributes\": [ { \"key\": \"ISBN\", \"value\": \"978-0-7475-3269-0\" }, { \"key\": \"Genre\", \"value\": \"Fantasy\" } ] }, \"licenseConfig\": { \"mintingFee\": 100, \"licenseTermsId\": \"1\" } }' 200 Copy Ask AI { \"id\" : \"d290f1ee-6c54-4b01-90e6-d701748f0851\" , \"actionId\" : \"d290f1ee-6c54-4b01-90e6-d701748f0851\" , \"nftMetadata\" : { \"name\" : \"Art #123\" , \"description\" : \"A unique story NFT\" , \"image\" : \"https://example.com/nft/123.png\" }, \"ipAssetMetadata\" : { \"title\" : \"Harry Potter and the Philosopher's Stone\" , \"createdAt\" : \"1997-06-26T00:00:00\" , \"ipType\" : \"literature\" , \"creators\" : [ { \"name\" : \"JK Rowling\" , \"email\" : \"JKRowling@example.com\" , \"crossmintUserLocator\" : \"email:JKRowling@example.com:story\" , \"description\" : \"Author\" , \"contributionPercent\" : 80 , \"socialMedia\" : [ { \"platform\" : \"Wikipedia\" , \"url\" : \"https://en.wikipedia.org/wiki/J._K._Rowling\" } ] }, { \"name\" :",
    "chunk_index": 0,
    "word_count": 1000
  },
  {
    "id": "https://docs.crossmint.com/api-reference/ip/update-ip-asset#chunk_0",
    "url": "https://docs.crossmint.com/api-reference/ip/update-ip-asset",
    "title": "Update IP Asset - Crossmint Docs",
    "content": "\"mintingFee\": 100, \"licenseTermsId\": \"1\" } }' 200 Copy Ask AI { \"id\" : \"d290f1ee-6c54-4b01-90e6-d701748f0851\" , \"actionId\" : \"d290f1ee-6c54-4b01-90e6-d701748f0851\" , \"nftMetadata\" : { \"name\" : \"Art #123\" , \"description\" : \"A unique story NFT\" , \"image\" : \"https://example.com/nft/123.png\" }, \"ipAssetMetadata\" : { \"title\" : \"Harry Potter and the Philosopher's Stone\" , \"createdAt\" : \"1997-06-26T00:00:00\" , \"ipType\" : \"literature\" , \"creators\" : [ { \"name\" : \"JK Rowling\" , \"email\" : \"JKRowling@example.com\" , \"crossmintUserLocator\" : \"email:JKRowling@example.com:story\" , \"description\" : \"Author\" , \"contributionPercent\" : 80 , \"socialMedia\" : [ { \"platform\" : \"Wikipedia\" , \"url\" : \"https://en.wikipedia.org/wiki/J._K._Rowling\" } ] }, { \"name\" : \"Thomas Taylor\" , \"address\" : \"0x1234567890123456789012345678901234567890\" , \"description\" : \"Illustrator\" , \"contributionPercent\" : 15 }, { \"name\" : \"Bloomsbury Publishing\" , \"email\" : \"BloomsburyPublishing@example.com\" , \"address\" : \"0x1234567890123456789012345678901234567890\" , \"description\" : \"Publisher\" , \"contributionPercent\" : 5 , \"socialMedia\" : [ { \"platform\" : \"Website\" , \"url\" : \"https://www.bloomsbury.com/\" } ] } ], \"media\" : [ { \"name\" : \"ePub\" , \"url\" : \"link_to_epub\" , \"mimeType\" : \"application/epub+zip\" }, { \"name\" : \"Book Summary PDF\" , \"url\" : \"link_to_book_summary_pdf\" , \"mimeType\" : \"application/pdf\" } ], \"attributes\" : [ { \"key\" : \"ISBN\" , \"value\" : \"978-0-7475-3269-0\" }, { \"key\" : \"Genre\" , \"value\" : \"Fantasy\" } ] }, \"onChain\" : { \"status\" : \"success\" , \"chain\" : \"story-testnet\" , \"contractAddress\" : \"0x123\" , \"ipAssetId\" : \"0xAC6062FF53fa41e61Fe01B89B83d9dB96b5F9280\" , \"tokenId\" : \"1\" , \"txId\" : \"0x123\" , \"explorerLink\" : \"https://portal.story.foundation/assets/0xAC6062FF53fa41e61Fe01B89B83d9dB96b5F9280\" , \"owner\" : \"0x123\" }, \"licenseTerms\" : [ { \"type\" : \"non-commercial-social-remixing\" , \"licenseTermsId\" : 1 } ], \"derivData\" : { \"parentIpIds\" : [ \"0x123\" ], \"licenseTermsIds\" : [ 1 ], \"maxMintingFee\" : 0 , \"maxRevenueShare\" : 100 , \"maxRts\" : 10000000 }, \"licenseConfig\" : { \"mintingFee\" : 100 , \"licenseTermsId\" : \"1\" , \"disabled\" : false } } This API is still under development. Contact support for early access. Headers ​ X-API-KEY string required API key required for authentication Path Parameters ​ collectionId string required ​ customerFacingId string required Body application/json Input schema for updating an existing IP asset on Story Protocol Response 200 - application/json IP Asset updated Response schema for updating an existing IP asset on Story Protocol Was this page helpful? Yes No Create IP Asset (Idempotent) Get IP Action Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 381
  },
  {
    "id": "https://docs.crossmint.com/api-reference/minting/collection/create-collection#chunk_0",
    "url": "https://docs.crossmint.com/api-reference/minting/collection/create-collection",
    "title": "Create Collection - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation NFT Collections Create Collection Documentation API Reference SDK Reference CLI Solution Guides Changelog API Reference Introduction Wallets POST Create Wallet GET Get Wallet By Locator GET Get Wallet Balance POST Fund Wallet GET Get NFTs from Wallet POST Create Transaction GET Get Transaction GET Get Wallet Transactions POST Approve Transaction POST Create Signature GET Get All Signatures GET Get Signature POST Approve Signature POST Create Delegated Signer GET Get Delegated Signer POST Transfer Token NFTs POST Mint NFT PUT Mint NFT with ID POST Mint SFT GET Get All NFTs GET Mint Status PATCH Edit NFT DEL Burn NFT IP POST Create IP Collection PUT Create IP Collection (Idempotent) GET Get IP Collection GET Get All IP Collections GET Get IP Assets in Collection GET Get IP Asset POST Create IP Asset PUT Create IP Asset (Idempotent) PATCH Update IP Asset GET Get IP Action GET Get IP Asset License GET Get IP Asset Graph NFT Collections POST Create Collection PUT Create Collection (Idempotent) GET Get All Collections GET Get Collection Info PATCH Update Collection PUT Set Royalties GET Get Royalties Configuration DEL Remove Royalties PUT Set Base URI GET Get Base URI PUT Set Transferability GET Get Transferability NFT Templates POST Create Template PUT Create Template with ID GET Get Template GET Get All Templates PATCH Edit Template DEL Delete Template Verifiable Credentials POST Create Credential template POST Issue Credential GET Get Credential by Credential ID GET Get Credential by NFT ID GET Get Credential by NFT Locator GET Retrieve credential nfts POST Verify Credential DEL Revoke Credential Verifiable Credential Types POST Create Credential Type PUT Create Credential Type with Name GET Get a Credential Type Headless Checkout POST Create Order GET Get Order PATCH Edit Order GET Check Token Support Action Status GET Get Action Status Admin GET Get Usage Create Collection cURL Copy Ask AI curl --request POST \\ --url https://staging.crossmint.com/api/2022-06-09/collections/ \\ --header 'Content-Type: application/json' \\ --header 'X-API-KEY: <api-key>' \\ --data '{ \"chain\": \"polygon\", \"metadata\": { \"name\": \"Sample NFT Collection\", \"imageUrl\": \"https://www.crossmint.com/assets/crossmint/logo.png\", \"description\": \"This is a sample NFT collection\", \"symbol\": \"TOKEN\" }, \"fungibility\": \"non-fungible\", \"transferable\": true, \"supplyLimit\": 123, \"payments\": { \"price\": \"<string>\", \"recipientAddress\": \"<string>\", \"currency\": \"<string>\" }, \"subscription\": { \"enabled\": false }, \"reuploadLinkedFiles\": true }' 200 400 403 404 503 Copy Ask AI { \"id\" : \"5263650e-6d43-4ed3-9e31-0cf593d076a4\" , \"metadata\" : { \"name\" : \"Sample NFT Collection\" , \"description\" : \"This is a sample NFT collection\" , \"imageUrl\" : \"https://www.crossmint.com/assets/crossmint/logo.png\" , \"symbol\" : \"TOKEN\" }, \"fungibility\" : \"non-fungible\" , \"onChain\" : { \"chain\" : \"polygon\" , \"type\" : \"erc-721\" }, \"actionId\" : \"5263650e-6d43-4ed3-9e31-0cf593d076a4\" , \"subscription\" : { \"enabled\" : true } } POST https://staging.crossmint.com/api https://www.crossmint.com/api / 2022-06-09 / collections / Try it Create Collection cURL Copy Ask AI curl --request POST \\ --url https://staging.crossmint.com/api/2022-06-09/collections/ \\ --header 'Content-Type: application/json' \\ --header 'X-API-KEY: <api-key>' \\ --data '{ \"chain\": \"polygon\", \"metadata\": { \"name\": \"Sample NFT Collection\", \"imageUrl\": \"https://www.crossmint.com/assets/crossmint/logo.png\", \"description\": \"This is a sample NFT collection\", \"symbol\": \"TOKEN\" }, \"fungibility\": \"non-fungible\", \"transferable\": true, \"supplyLimit\": 123, \"payments\": { \"price\": \"<string>\", \"recipientAddress\": \"<string>\", \"currency\": \"<string>\" }, \"subscription\": { \"enabled\": false }, \"reuploadLinkedFiles\": true }' 200 400 403 404 503 Copy Ask AI { \"id\" : \"5263650e-6d43-4ed3-9e31-0cf593d076a4\" , \"metadata\" : { \"name\" : \"Sample NFT Collection\" , \"description\" : \"This is a sample NFT collection\" , \"imageUrl\" : \"https://www.crossmint.com/assets/crossmint/logo.png\" , \"symbol\" : \"TOKEN\" }, \"fungibility\" : \"non-fungible\" , \"onChain\" : { \"chain\" : \"polygon\" , \"type\" : \"erc-721\" }, \"actionId\" : \"5263650e-6d43-4ed3-9e31-0cf593d076a4\" , \"subscription\" : { \"enabled\" : true } } Authorizations ​ X-API-KEY string header required Obtained in the Crossmint developer console Body application/json Response 200 200 400 403 404 503 application/json Success. The response is of type object . Was this page helpful? Yes No Get IP Asset Graph Create Collection (Idempotent) Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 640
  },
  {
    "id": "https://docs.crossmint.com/api-reference/minting/collection/create-collection-idempotent#chunk_0",
    "url": "https://docs.crossmint.com/api-reference/minting/collection/create-collection-idempotent",
    "title": "Create Collection (Idempotent) - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation NFT Collections Create Collection (Idempotent) Documentation API Reference SDK Reference CLI Solution Guides Changelog API Reference Introduction Wallets POST Create Wallet GET Get Wallet By Locator GET Get Wallet Balance POST Fund Wallet GET Get NFTs from Wallet POST Create Transaction GET Get Transaction GET Get Wallet Transactions POST Approve Transaction POST Create Signature GET Get All Signatures GET Get Signature POST Approve Signature POST Create Delegated Signer GET Get Delegated Signer POST Transfer Token NFTs POST Mint NFT PUT Mint NFT with ID POST Mint SFT GET Get All NFTs GET Mint Status PATCH Edit NFT DEL Burn NFT IP POST Create IP Collection PUT Create IP Collection (Idempotent) GET Get IP Collection GET Get All IP Collections GET Get IP Assets in Collection GET Get IP Asset POST Create IP Asset PUT Create IP Asset (Idempotent) PATCH Update IP Asset GET Get IP Action GET Get IP Asset License GET Get IP Asset Graph NFT Collections POST Create Collection PUT Create Collection (Idempotent) GET Get All Collections GET Get Collection Info PATCH Update Collection PUT Set Royalties GET Get Royalties Configuration DEL Remove Royalties PUT Set Base URI GET Get Base URI PUT Set Transferability GET Get Transferability NFT Templates POST Create Template PUT Create Template with ID GET Get Template GET Get All Templates PATCH Edit Template DEL Delete Template Verifiable Credentials POST Create Credential template POST Issue Credential GET Get Credential by Credential ID GET Get Credential by NFT ID GET Get Credential by NFT Locator GET Retrieve credential nfts POST Verify Credential DEL Revoke Credential Verifiable Credential Types POST Create Credential Type PUT Create Credential Type with Name GET Get a Credential Type Headless Checkout POST Create Order GET Get Order PATCH Edit Order GET Check Token Support Action Status GET Get Action Status Admin GET Get Usage Create Collection with ID cURL Copy Ask AI curl --request PUT \\ --url https://staging.crossmint.com/api/2022-06-09/collections/{collectionId} \\ --header 'Content-Type: application/json' \\ --header 'X-API-KEY: <api-key>' \\ --data '{ \"chain\": \"polygon\", \"metadata\": { \"name\": \"Sample NFT Collection\", \"imageUrl\": \"https://www.crossmint.com/assets/crossmint/logo.png\", \"description\": \"This is a sample NFT collection\", \"symbol\": \"TOKEN\" }, \"fungibility\": \"non-fungible\", \"transferable\": true, \"supplyLimit\": 123, \"payments\": { \"price\": \"<string>\", \"recipientAddress\": \"<string>\", \"currency\": \"<string>\" }, \"subscription\": { \"enabled\": false }, \"reuploadLinkedFiles\": true }' 200 400 403 404 503 Copy Ask AI { \"id\" : \"5263650e-6d43-4ed3-9e31-0cf593d076a4\" , \"metadata\" : { \"name\" : \"Sample NFT Collection\" , \"description\" : \"This is a sample NFT collection\" , \"imageUrl\" : \"https://www.crossmint.com/assets/crossmint/logo.png\" , \"symbol\" : \"TOKEN\" }, \"fungibility\" : \"non-fungible\" , \"onChain\" : { \"chain\" : \"polygon\" , \"type\" : \"erc-721\" }, \"actionId\" : \"5263650e-6d43-4ed3-9e31-0cf593d076a4\" , \"subscription\" : { \"enabled\" : true } } PUT https://staging.crossmint.com/api https://www.crossmint.com/api / 2022-06-09 / collections / {collectionId} Try it Create Collection with ID cURL Copy Ask AI curl --request PUT \\ --url https://staging.crossmint.com/api/2022-06-09/collections/{collectionId} \\ --header 'Content-Type: application/json' \\ --header 'X-API-KEY: <api-key>' \\ --data '{ \"chain\": \"polygon\", \"metadata\": { \"name\": \"Sample NFT Collection\", \"imageUrl\": \"https://www.crossmint.com/assets/crossmint/logo.png\", \"description\": \"This is a sample NFT collection\", \"symbol\": \"TOKEN\" }, \"fungibility\": \"non-fungible\", \"transferable\": true, \"supplyLimit\": 123, \"payments\": { \"price\": \"<string>\", \"recipientAddress\": \"<string>\", \"currency\": \"<string>\" }, \"subscription\": { \"enabled\": false }, \"reuploadLinkedFiles\": true }' 200 400 403 404 503 Copy Ask AI { \"id\" : \"5263650e-6d43-4ed3-9e31-0cf593d076a4\" , \"metadata\" : { \"name\" : \"Sample NFT Collection\" , \"description\" : \"This is a sample NFT collection\" , \"imageUrl\" : \"https://www.crossmint.com/assets/crossmint/logo.png\" , \"symbol\" : \"TOKEN\" }, \"fungibility\" : \"non-fungible\" , \"onChain\" : { \"chain\" : \"polygon\" , \"type\" : \"erc-721\" }, \"actionId\" : \"5263650e-6d43-4ed3-9e31-0cf593d076a4\" , \"subscription\" : { \"enabled\" : true } } Authorizations ​ X-API-KEY string header required Obtained in the Crossmint developer console Path Parameters ​ collectionId string required This is the identifier for the collection related to the request. Every project has default collections: default-solana and default-polygon . The create-collection API will result in collections with UUID formatted collectionId . Example: 9c82ef99-617f-497d-9abb-fd355291681b The create-collection-idempotent API allows you to specify an arbitrary identifier during the intitial request. Example: your-custom-identifer Body application/json Response 200 200 400 403 404 503 application/json Success. The response is of type object . Was this page helpful? Yes No Create Collection Get All Collections Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 700
  },
  {
    "id": "https://docs.crossmint.com/api-reference/minting/collection/get-all-collections#chunk_0",
    "url": "https://docs.crossmint.com/api-reference/minting/collection/get-all-collections",
    "title": "Get All Collections - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation NFT Collections Get All Collections Documentation API Reference SDK Reference CLI Solution Guides Changelog API Reference Introduction Wallets POST Create Wallet GET Get Wallet By Locator GET Get Wallet Balance POST Fund Wallet GET Get NFTs from Wallet POST Create Transaction GET Get Transaction GET Get Wallet Transactions POST Approve Transaction POST Create Signature GET Get All Signatures GET Get Signature POST Approve Signature POST Create Delegated Signer GET Get Delegated Signer POST Transfer Token NFTs POST Mint NFT PUT Mint NFT with ID POST Mint SFT GET Get All NFTs GET Mint Status PATCH Edit NFT DEL Burn NFT IP POST Create IP Collection PUT Create IP Collection (Idempotent) GET Get IP Collection GET Get All IP Collections GET Get IP Assets in Collection GET Get IP Asset POST Create IP Asset PUT Create IP Asset (Idempotent) PATCH Update IP Asset GET Get IP Action GET Get IP Asset License GET Get IP Asset Graph NFT Collections POST Create Collection PUT Create Collection (Idempotent) GET Get All Collections GET Get Collection Info PATCH Update Collection PUT Set Royalties GET Get Royalties Configuration DEL Remove Royalties PUT Set Base URI GET Get Base URI PUT Set Transferability GET Get Transferability NFT Templates POST Create Template PUT Create Template with ID GET Get Template GET Get All Templates PATCH Edit Template DEL Delete Template Verifiable Credentials POST Create Credential template POST Issue Credential GET Get Credential by Credential ID GET Get Credential by NFT ID GET Get Credential by NFT Locator GET Retrieve credential nfts POST Verify Credential DEL Revoke Credential Verifiable Credential Types POST Create Credential Type PUT Create Credential Type with Name GET Get a Credential Type Headless Checkout POST Create Order GET Get Order PATCH Edit Order GET Check Token Support Action Status GET Get Action Status Admin GET Get Usage Get All Collections cURL Copy Ask AI curl --request GET \\ --url https://staging.crossmint.com/api/2022-06-09/collections/ \\ --header 'X-API-KEY: <api-key>' 200 400 403 404 503 Copy Ask AI { \"results\" : [ { \"id\" : \"bb691876-edb3-404c-af3e-c019b8e2ed2c\" , \"metadata\" : { \"name\" : \"Test Collection\" , \"description\" : \"Test\" , \"imageUrl\" : \"ipfs://QmVocoiYXZLAtheEHV3VF8w4pa68bkPutT8cQZdMrrpzxh\" , \"symbol\" : \"XMINT\" }, \"fungibility\" : \"non-fungible\" , \"onChain\" : { \"chain\" : \"polygon\" , \"type\" : \"erc-721\" , \"contractAddress\" : \"0x9564bD85f3D5677D86244dDb06F06bbD22D9d0DB\" }, \"supplyLimit\" : 95 , \"payments\" : { \"price\" : \"0.001\" , \"recipientAddress\" : \"0x6C3b3225759Cbda68F96378A9F0277B4374f9F06\" } } ] } GET https://staging.crossmint.com/api https://www.crossmint.com/api / 2022-06-09 / collections / Try it Get All Collections cURL Copy Ask AI curl --request GET \\ --url https://staging.crossmint.com/api/2022-06-09/collections/ \\ --header 'X-API-KEY: <api-key>' 200 400 403 404 503 Copy Ask AI { \"results\" : [ { \"id\" : \"bb691876-edb3-404c-af3e-c019b8e2ed2c\" , \"metadata\" : { \"name\" : \"Test Collection\" , \"description\" : \"Test\" , \"imageUrl\" : \"ipfs://QmVocoiYXZLAtheEHV3VF8w4pa68bkPutT8cQZdMrrpzxh\" , \"symbol\" : \"XMINT\" }, \"fungibility\" : \"non-fungible\" , \"onChain\" : { \"chain\" : \"polygon\" , \"type\" : \"erc-721\" , \"contractAddress\" : \"0x9564bD85f3D5677D86244dDb06F06bbD22D9d0DB\" }, \"supplyLimit\" : 95 , \"payments\" : { \"price\" : \"0.001\" , \"recipientAddress\" : \"0x6C3b3225759Cbda68F96378A9F0277B4374f9F06\" } } ] } For Solana collections the onChain.contractAddress property will be named onChain.mintAddress 200 400 403 404 503 Copy Ask AI { \"results\" : [ { \"id\" : \"bb691876-edb3-404c-af3e-c019b8e2ed2c\" , \"metadata\" : { \"name\" : \"Test Collection\" , \"description\" : \"Test\" , \"imageUrl\" : \"ipfs://QmVocoiYXZLAtheEHV3VF8w4pa68bkPutT8cQZdMrrpzxh\" , \"symbol\" : \"XMINT\" }, \"fungibility\" : \"non-fungible\" , \"onChain\" : { \"chain\" : \"polygon\" , \"type\" : \"erc-721\" , \"contractAddress\" : \"0x9564bD85f3D5677D86244dDb06F06bbD22D9d0DB\" }, \"supplyLimit\" : 95 , \"payments\" : { \"price\" : \"0.001\" , \"recipientAddress\" : \"0x6C3b3225759Cbda68F96378A9F0277B4374f9F06\" } } ] } Authorizations ​ X-API-KEY string header required Obtained in the Crossmint developer console Response 200 200 400 403 404 503 application/json Success. The response is of type object . Was this page helpful? Yes No Create Collection (Idempotent) Get Collection Info Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 640
  },
  {
    "id": "https://docs.crossmint.com/api-reference/minting/collection/get-base-uri#chunk_0",
    "url": "https://docs.crossmint.com/api-reference/minting/collection/get-base-uri",
    "title": "Get Base URI - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation NFT Collections Get Base URI Documentation API Reference SDK Reference CLI Solution Guides Changelog API Reference Introduction Wallets POST Create Wallet GET Get Wallet By Locator GET Get Wallet Balance POST Fund Wallet GET Get NFTs from Wallet POST Create Transaction GET Get Transaction GET Get Wallet Transactions POST Approve Transaction POST Create Signature GET Get All Signatures GET Get Signature POST Approve Signature POST Create Delegated Signer GET Get Delegated Signer POST Transfer Token NFTs POST Mint NFT PUT Mint NFT with ID POST Mint SFT GET Get All NFTs GET Mint Status PATCH Edit NFT DEL Burn NFT IP POST Create IP Collection PUT Create IP Collection (Idempotent) GET Get IP Collection GET Get All IP Collections GET Get IP Assets in Collection GET Get IP Asset POST Create IP Asset PUT Create IP Asset (Idempotent) PATCH Update IP Asset GET Get IP Action GET Get IP Asset License GET Get IP Asset Graph NFT Collections POST Create Collection PUT Create Collection (Idempotent) GET Get All Collections GET Get Collection Info PATCH Update Collection PUT Set Royalties GET Get Royalties Configuration DEL Remove Royalties PUT Set Base URI GET Get Base URI PUT Set Transferability GET Get Transferability NFT Templates POST Create Template PUT Create Template with ID GET Get Template GET Get All Templates PATCH Edit Template DEL Delete Template Verifiable Credentials POST Create Credential template POST Issue Credential GET Get Credential by Credential ID GET Get Credential by NFT ID GET Get Credential by NFT Locator GET Retrieve credential nfts POST Verify Credential DEL Revoke Credential Verifiable Credential Types POST Create Credential Type PUT Create Credential Type with Name GET Get a Credential Type Headless Checkout POST Create Order GET Get Order PATCH Edit Order GET Check Token Support Action Status GET Get Action Status Admin GET Get Usage Get Base URI cURL Copy Ask AI curl --request GET \\ --url https://staging.crossmint.com/api/v1-alpha1/minting/collections/{collectionId}/base-uri \\ --header 'X-API-KEY: <api-key>' 200 400 403 404 503 Copy Ask AI { \"uri\" : \"<string>\" } GET https://staging.crossmint.com/api https://www.crossmint.com/api / v1-alpha1 / minting / collections / {collectionId} / base-uri Try it Get Base URI cURL Copy Ask AI curl --request GET \\ --url https://staging.crossmint.com/api/v1-alpha1/minting/collections/{collectionId}/base-uri \\ --header 'X-API-KEY: <api-key>' 200 400 403 404 503 Copy Ask AI { \"uri\" : \"<string>\" } This is an alpha API and subject to change. Authorizations ​ X-API-KEY string header required Obtained in the Crossmint developer console Path Parameters ​ collectionId string required This is the identifier for the collection related to the request. Every project has default collections: default-solana and default-polygon . The create-collection API will result in collections with UUID formatted collectionId . Example: 9c82ef99-617f-497d-9abb-fd355291681b The create-collection-idempotent API allows you to specify an arbitrary identifier during the intitial request. Example: your-custom-identifer Response 200 200 400 403 404 503 application/json Base URI of a collection as it appears onchain The response is of type object . Was this page helpful? Yes No Set Base URI Set Transferability Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 511
  },
  {
    "id": "https://docs.crossmint.com/api-reference/minting/collection/get-collection#chunk_0",
    "url": "https://docs.crossmint.com/api-reference/minting/collection/get-collection",
    "title": "Get Collection Info - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation NFT Collections Get Collection Info Documentation API Reference SDK Reference CLI Solution Guides Changelog API Reference Introduction Wallets POST Create Wallet GET Get Wallet By Locator GET Get Wallet Balance POST Fund Wallet GET Get NFTs from Wallet POST Create Transaction GET Get Transaction GET Get Wallet Transactions POST Approve Transaction POST Create Signature GET Get All Signatures GET Get Signature POST Approve Signature POST Create Delegated Signer GET Get Delegated Signer POST Transfer Token NFTs POST Mint NFT PUT Mint NFT with ID POST Mint SFT GET Get All NFTs GET Mint Status PATCH Edit NFT DEL Burn NFT IP POST Create IP Collection PUT Create IP Collection (Idempotent) GET Get IP Collection GET Get All IP Collections GET Get IP Assets in Collection GET Get IP Asset POST Create IP Asset PUT Create IP Asset (Idempotent) PATCH Update IP Asset GET Get IP Action GET Get IP Asset License GET Get IP Asset Graph NFT Collections POST Create Collection PUT Create Collection (Idempotent) GET Get All Collections GET Get Collection Info PATCH Update Collection PUT Set Royalties GET Get Royalties Configuration DEL Remove Royalties PUT Set Base URI GET Get Base URI PUT Set Transferability GET Get Transferability NFT Templates POST Create Template PUT Create Template with ID GET Get Template GET Get All Templates PATCH Edit Template DEL Delete Template Verifiable Credentials POST Create Credential template POST Issue Credential GET Get Credential by Credential ID GET Get Credential by NFT ID GET Get Credential by NFT Locator GET Retrieve credential nfts POST Verify Credential DEL Revoke Credential Verifiable Credential Types POST Create Credential Type PUT Create Credential Type with Name GET Get a Credential Type Headless Checkout POST Create Order GET Get Order PATCH Edit Order GET Check Token Support Action Status GET Get Action Status Admin GET Get Usage Get Collection Info cURL Copy Ask AI curl --request GET \\ --url https://staging.crossmint.com/api/2022-06-09/collections/{collectionId} \\ --header 'X-API-KEY: <api-key>' 200 400 403 404 503 Copy Ask AI { \"id\" : \"bb691876-edb3-404c-af3e-c019b8e2ed2c\" , \"metadata\" : { \"name\" : \"Sample NFT Collection\" , \"description\" : \"This is a sample NFT collection\" , \"imageUrl\" : \"https://www.crossmint.com/assets/crossmint/logo.png\" , \"symbol\" : \"TOKEN\" }, \"fungibility\" : \"non-fungible\" , \"onChain\" : { \"chain\" : \"polygon\" , \"type\" : \"erc-721\" , \"contractAddress\" : \"0x9564bD85f3D5677D86244dDb06F06bbD22D9d0DB\" }, \"supplyLimit\" : 95 , \"payments\" : { \"price\" : \"0.001\" , \"recipientAddress\" : \"0x6C3b3225759Cbda68F96378A9F0277B4374f9F06\" }, \"subscription\" : { \"enabled\" : true } } GET https://staging.crossmint.com/api https://www.crossmint.com/api / 2022-06-09 / collections / {collectionId} Try it Get Collection Info cURL Copy Ask AI curl --request GET \\ --url https://staging.crossmint.com/api/2022-06-09/collections/{collectionId} \\ --header 'X-API-KEY: <api-key>' 200 400 403 404 503 Copy Ask AI { \"id\" : \"bb691876-edb3-404c-af3e-c019b8e2ed2c\" , \"metadata\" : { \"name\" : \"Sample NFT Collection\" , \"description\" : \"This is a sample NFT collection\" , \"imageUrl\" : \"https://www.crossmint.com/assets/crossmint/logo.png\" , \"symbol\" : \"TOKEN\" }, \"fungibility\" : \"non-fungible\" , \"onChain\" : { \"chain\" : \"polygon\" , \"type\" : \"erc-721\" , \"contractAddress\" : \"0x9564bD85f3D5677D86244dDb06F06bbD22D9d0DB\" }, \"supplyLimit\" : 95 , \"payments\" : { \"price\" : \"0.001\" , \"recipientAddress\" : \"0x6C3b3225759Cbda68F96378A9F0277B4374f9F06\" }, \"subscription\" : { \"enabled\" : true } } For Solana collections the onChain.contractAddress property will be named onChain.mintAddress Authorizations ​ X-API-KEY string header required Obtained in the Crossmint developer console Path Parameters ​ collectionId string required This is the identifier for the collection related to the request. Every project has default collections: default-solana and default-polygon . The create-collection API will result in collections with UUID formatted collectionId . Example: 9c82ef99-617f-497d-9abb-fd355291681b The create-collection-idempotent API allows you to specify an arbitrary identifier during the intitial request. Example: your-custom-identifer Response 200 200 400 403 404 503 application/json Success. The response is of type object . Was this page helpful? Yes No Get All Collections Update Collection Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 636
  },
  {
    "id": "https://docs.crossmint.com/api-reference/minting/collection/get-royalties-configuration#chunk_0",
    "url": "https://docs.crossmint.com/api-reference/minting/collection/get-royalties-configuration",
    "title": "Get Royalties Configuration - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation NFT Collections Get Royalties Configuration Documentation API Reference SDK Reference CLI Solution Guides Changelog API Reference Introduction Wallets POST Create Wallet GET Get Wallet By Locator GET Get Wallet Balance POST Fund Wallet GET Get NFTs from Wallet POST Create Transaction GET Get Transaction GET Get Wallet Transactions POST Approve Transaction POST Create Signature GET Get All Signatures GET Get Signature POST Approve Signature POST Create Delegated Signer GET Get Delegated Signer POST Transfer Token NFTs POST Mint NFT PUT Mint NFT with ID POST Mint SFT GET Get All NFTs GET Mint Status PATCH Edit NFT DEL Burn NFT IP POST Create IP Collection PUT Create IP Collection (Idempotent) GET Get IP Collection GET Get All IP Collections GET Get IP Assets in Collection GET Get IP Asset POST Create IP Asset PUT Create IP Asset (Idempotent) PATCH Update IP Asset GET Get IP Action GET Get IP Asset License GET Get IP Asset Graph NFT Collections POST Create Collection PUT Create Collection (Idempotent) GET Get All Collections GET Get Collection Info PATCH Update Collection PUT Set Royalties GET Get Royalties Configuration DEL Remove Royalties PUT Set Base URI GET Get Base URI PUT Set Transferability GET Get Transferability NFT Templates POST Create Template PUT Create Template with ID GET Get Template GET Get All Templates PATCH Edit Template DEL Delete Template Verifiable Credentials POST Create Credential template POST Issue Credential GET Get Credential by Credential ID GET Get Credential by NFT ID GET Get Credential by NFT Locator GET Retrieve credential nfts POST Verify Credential DEL Revoke Credential Verifiable Credential Types POST Create Credential Type PUT Create Credential Type with Name GET Get a Credential Type Headless Checkout POST Create Order GET Get Order PATCH Edit Order GET Check Token Support Action Status GET Get Action Status Admin GET Get Usage Get Royalties Config cURL Copy Ask AI curl --request GET \\ --url https://staging.crossmint.com/api/v1-alpha1/minting/collections/{collectionId}/royalties \\ --header 'X-API-KEY: <api-key>' 200 400 403 404 503 Copy Ask AI { \"recipients\" : [ { \"address\" : \"0x71C...\" , \"basisPoints\" : 100 } ] } GET https://staging.crossmint.com/api https://www.crossmint.com/api / v1-alpha1 / minting / collections / {collectionId} / royalties Try it Get Royalties Config cURL Copy Ask AI curl --request GET \\ --url https://staging.crossmint.com/api/v1-alpha1/minting/collections/{collectionId}/royalties \\ --header 'X-API-KEY: <api-key>' 200 400 403 404 503 Copy Ask AI { \"recipients\" : [ { \"address\" : \"0x71C...\" , \"basisPoints\" : 100 } ] } This is an alpha API and subject to change. Authorizations ​ X-API-KEY string header required Obtained in the Crossmint developer console Path Parameters ​ collectionId string required This is the identifier for the collection related to the request. Every project has default collections: default-solana and default-polygon . The create-collection API will result in collections with UUID formatted collectionId . Example: 9c82ef99-617f-497d-9abb-fd355291681b The create-collection-idempotent API allows you to specify an arbitrary identifier during the intitial request. Example: your-custom-identifer Response 200 200 400 403 404 503 application/json Success. The response is of type object . Was this page helpful? Yes No Set Royalties Remove Royalties Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 522
  },
  {
    "id": "https://docs.crossmint.com/api-reference/minting/collection/get-transferability#chunk_0",
    "url": "https://docs.crossmint.com/api-reference/minting/collection/get-transferability",
    "title": "Get Transferability - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation NFT Collections Get Transferability Documentation API Reference SDK Reference CLI Solution Guides Changelog API Reference Introduction Wallets POST Create Wallet GET Get Wallet By Locator GET Get Wallet Balance POST Fund Wallet GET Get NFTs from Wallet POST Create Transaction GET Get Transaction GET Get Wallet Transactions POST Approve Transaction POST Create Signature GET Get All Signatures GET Get Signature POST Approve Signature POST Create Delegated Signer GET Get Delegated Signer POST Transfer Token NFTs POST Mint NFT PUT Mint NFT with ID POST Mint SFT GET Get All NFTs GET Mint Status PATCH Edit NFT DEL Burn NFT IP POST Create IP Collection PUT Create IP Collection (Idempotent) GET Get IP Collection GET Get All IP Collections GET Get IP Assets in Collection GET Get IP Asset POST Create IP Asset PUT Create IP Asset (Idempotent) PATCH Update IP Asset GET Get IP Action GET Get IP Asset License GET Get IP Asset Graph NFT Collections POST Create Collection PUT Create Collection (Idempotent) GET Get All Collections GET Get Collection Info PATCH Update Collection PUT Set Royalties GET Get Royalties Configuration DEL Remove Royalties PUT Set Base URI GET Get Base URI PUT Set Transferability GET Get Transferability NFT Templates POST Create Template PUT Create Template with ID GET Get Template GET Get All Templates PATCH Edit Template DEL Delete Template Verifiable Credentials POST Create Credential template POST Issue Credential GET Get Credential by Credential ID GET Get Credential by NFT ID GET Get Credential by NFT Locator GET Retrieve credential nfts POST Verify Credential DEL Revoke Credential Verifiable Credential Types POST Create Credential Type PUT Create Credential Type with Name GET Get a Credential Type Headless Checkout POST Create Order GET Get Order PATCH Edit Order GET Check Token Support Action Status GET Get Action Status Admin GET Get Usage Get Transferability cURL Copy Ask AI curl --request GET \\ --url https://staging.crossmint.com/api/v1-alpha1/minting/collections/{collectionId}/transferable \\ --header 'X-API-KEY: <api-key>' 200 400 403 404 503 Copy Ask AI { \"value\" : true } GET https://staging.crossmint.com/api https://www.crossmint.com/api / v1-alpha1 / minting / collections / {collectionId} / transferable Try it Get Transferability cURL Copy Ask AI curl --request GET \\ --url https://staging.crossmint.com/api/v1-alpha1/minting/collections/{collectionId}/transferable \\ --header 'X-API-KEY: <api-key>' 200 400 403 404 503 Copy Ask AI { \"value\" : true } This is an alpha API and subject to change. Authorizations ​ X-API-KEY string header required Obtained in the Crossmint developer console Path Parameters ​ collectionId string required This is the identifier for the collection related to the request. Every project has default collections: default-solana and default-polygon . The create-collection API will result in collections with UUID formatted collectionId . Example: 9c82ef99-617f-497d-9abb-fd355291681b The create-collection-idempotent API allows you to specify an arbitrary identifier during the intitial request. Example: your-custom-identifer Response 200 200 400 403 404 503 application/json Success The response is of type object . Was this page helpful? Yes No Set Transferability Create Template Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 499
  },
  {
    "id": "https://docs.crossmint.com/api-reference/minting/collection/remove-royalties#chunk_0",
    "url": "https://docs.crossmint.com/api-reference/minting/collection/remove-royalties",
    "title": "Remove Royalties - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation NFT Collections Remove Royalties Documentation API Reference SDK Reference CLI Solution Guides Changelog API Reference Introduction Wallets POST Create Wallet GET Get Wallet By Locator GET Get Wallet Balance POST Fund Wallet GET Get NFTs from Wallet POST Create Transaction GET Get Transaction GET Get Wallet Transactions POST Approve Transaction POST Create Signature GET Get All Signatures GET Get Signature POST Approve Signature POST Create Delegated Signer GET Get Delegated Signer POST Transfer Token NFTs POST Mint NFT PUT Mint NFT with ID POST Mint SFT GET Get All NFTs GET Mint Status PATCH Edit NFT DEL Burn NFT IP POST Create IP Collection PUT Create IP Collection (Idempotent) GET Get IP Collection GET Get All IP Collections GET Get IP Assets in Collection GET Get IP Asset POST Create IP Asset PUT Create IP Asset (Idempotent) PATCH Update IP Asset GET Get IP Action GET Get IP Asset License GET Get IP Asset Graph NFT Collections POST Create Collection PUT Create Collection (Idempotent) GET Get All Collections GET Get Collection Info PATCH Update Collection PUT Set Royalties GET Get Royalties Configuration DEL Remove Royalties PUT Set Base URI GET Get Base URI PUT Set Transferability GET Get Transferability NFT Templates POST Create Template PUT Create Template with ID GET Get Template GET Get All Templates PATCH Edit Template DEL Delete Template Verifiable Credentials POST Create Credential template POST Issue Credential GET Get Credential by Credential ID GET Get Credential by NFT ID GET Get Credential by NFT Locator GET Retrieve credential nfts POST Verify Credential DEL Revoke Credential Verifiable Credential Types POST Create Credential Type PUT Create Credential Type with Name GET Get a Credential Type Headless Checkout POST Create Order GET Get Order PATCH Edit Order GET Check Token Support Action Status GET Get Action Status Admin GET Get Usage Remove Royalties cURL Copy Ask AI curl --request DELETE \\ --url https://staging.crossmint.com/api/v1-alpha1/minting/collections/{collectionId}/royalties \\ --header 'X-API-KEY: <api-key>' 204 400 403 404 503 Copy Ask AI This response does not have an example. DELETE https://staging.crossmint.com/api https://www.crossmint.com/api / v1-alpha1 / minting / collections / {collectionId} / royalties Try it Remove Royalties cURL Copy Ask AI curl --request DELETE \\ --url https://staging.crossmint.com/api/v1-alpha1/minting/collections/{collectionId}/royalties \\ --header 'X-API-KEY: <api-key>' 204 400 403 404 503 Copy Ask AI This response does not have an example. This is an alpha API and subject to change. Authorizations ​ X-API-KEY string header required Obtained in the Crossmint developer console Path Parameters ​ collectionId string required This is the identifier for the collection related to the request. Every project has default collections: default-solana and default-polygon . The create-collection API will result in collections with UUID formatted collectionId . Example: 9c82ef99-617f-497d-9abb-fd355291681b The create-collection-idempotent API allows you to specify an arbitrary identifier during the intitial request. Example: your-custom-identifer Response 204 204 400 403 404 503 No-content success response indicating that the request is being processed. Was this page helpful? Yes No Get Royalties Configuration Set Base URI Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 506
  },
  {
    "id": "https://docs.crossmint.com/api-reference/minting/collection/set-base-uri#chunk_0",
    "url": "https://docs.crossmint.com/api-reference/minting/collection/set-base-uri",
    "title": "Set Base URI - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation NFT Collections Set Base URI Documentation API Reference SDK Reference CLI Solution Guides Changelog API Reference Introduction Wallets POST Create Wallet GET Get Wallet By Locator GET Get Wallet Balance POST Fund Wallet GET Get NFTs from Wallet POST Create Transaction GET Get Transaction GET Get Wallet Transactions POST Approve Transaction POST Create Signature GET Get All Signatures GET Get Signature POST Approve Signature POST Create Delegated Signer GET Get Delegated Signer POST Transfer Token NFTs POST Mint NFT PUT Mint NFT with ID POST Mint SFT GET Get All NFTs GET Mint Status PATCH Edit NFT DEL Burn NFT IP POST Create IP Collection PUT Create IP Collection (Idempotent) GET Get IP Collection GET Get All IP Collections GET Get IP Assets in Collection GET Get IP Asset POST Create IP Asset PUT Create IP Asset (Idempotent) PATCH Update IP Asset GET Get IP Action GET Get IP Asset License GET Get IP Asset Graph NFT Collections POST Create Collection PUT Create Collection (Idempotent) GET Get All Collections GET Get Collection Info PATCH Update Collection PUT Set Royalties GET Get Royalties Configuration DEL Remove Royalties PUT Set Base URI GET Get Base URI PUT Set Transferability GET Get Transferability NFT Templates POST Create Template PUT Create Template with ID GET Get Template GET Get All Templates PATCH Edit Template DEL Delete Template Verifiable Credentials POST Create Credential template POST Issue Credential GET Get Credential by Credential ID GET Get Credential by NFT ID GET Get Credential by NFT Locator GET Retrieve credential nfts POST Verify Credential DEL Revoke Credential Verifiable Credential Types POST Create Credential Type PUT Create Credential Type with Name GET Get a Credential Type Headless Checkout POST Create Order GET Get Order PATCH Edit Order GET Check Token Support Action Status GET Get Action Status Admin GET Get Usage Set Base URI cURL Copy Ask AI curl --request PUT \\ --url https://staging.crossmint.com/api/v1-alpha1/minting/collections/{collectionId}/base-uri \\ --header 'Content-Type: application/json' \\ --header 'X-API-KEY: <api-key>' \\ --data '{ \"uri\": \"https://www.example.com\" }' 204 400 403 404 409 503 Copy Ask AI This response does not have an example. PUT https://staging.crossmint.com/api https://www.crossmint.com/api / v1-alpha1 / minting / collections / {collectionId} / base-uri Try it Set Base URI cURL Copy Ask AI curl --request PUT \\ --url https://staging.crossmint.com/api/v1-alpha1/minting/collections/{collectionId}/base-uri \\ --header 'Content-Type: application/json' \\ --header 'X-API-KEY: <api-key>' \\ --data '{ \"uri\": \"https://www.example.com\" }' 204 400 403 404 409 503 Copy Ask AI This response does not have an example. This is an alpha API and subject to change. Authorizations ​ X-API-KEY string header required Obtained in the Crossmint developer console Path Parameters ​ collectionId string required This is the identifier for the collection related to the request. Every project has default collections: default-solana and default-polygon . The create-collection API will result in collections with UUID formatted collectionId . Example: 9c82ef99-617f-497d-9abb-fd355291681b The create-collection-idempotent API allows you to specify an arbitrary identifier during the intitial request. Example: your-custom-identifer Body application/json Response 204 204 400 403 404 409 503 No-content success response indicating that the request is being processed Was this page helpful? Yes No Remove Royalties Get Base URI Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 533
  },
  {
    "id": "https://docs.crossmint.com/api-reference/minting/collection/set-royalties#chunk_0",
    "url": "https://docs.crossmint.com/api-reference/minting/collection/set-royalties",
    "title": "Set Royalties - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation NFT Collections Set Royalties Documentation API Reference SDK Reference CLI Solution Guides Changelog API Reference Introduction Wallets POST Create Wallet GET Get Wallet By Locator GET Get Wallet Balance POST Fund Wallet GET Get NFTs from Wallet POST Create Transaction GET Get Transaction GET Get Wallet Transactions POST Approve Transaction POST Create Signature GET Get All Signatures GET Get Signature POST Approve Signature POST Create Delegated Signer GET Get Delegated Signer POST Transfer Token NFTs POST Mint NFT PUT Mint NFT with ID POST Mint SFT GET Get All NFTs GET Mint Status PATCH Edit NFT DEL Burn NFT IP POST Create IP Collection PUT Create IP Collection (Idempotent) GET Get IP Collection GET Get All IP Collections GET Get IP Assets in Collection GET Get IP Asset POST Create IP Asset PUT Create IP Asset (Idempotent) PATCH Update IP Asset GET Get IP Action GET Get IP Asset License GET Get IP Asset Graph NFT Collections POST Create Collection PUT Create Collection (Idempotent) GET Get All Collections GET Get Collection Info PATCH Update Collection PUT Set Royalties GET Get Royalties Configuration DEL Remove Royalties PUT Set Base URI GET Get Base URI PUT Set Transferability GET Get Transferability NFT Templates POST Create Template PUT Create Template with ID GET Get Template GET Get All Templates PATCH Edit Template DEL Delete Template Verifiable Credentials POST Create Credential template POST Issue Credential GET Get Credential by Credential ID GET Get Credential by NFT ID GET Get Credential by NFT Locator GET Retrieve credential nfts POST Verify Credential DEL Revoke Credential Verifiable Credential Types POST Create Credential Type PUT Create Credential Type with Name GET Get a Credential Type Headless Checkout POST Create Order GET Get Order PATCH Edit Order GET Check Token Support Action Status GET Get Action Status Admin GET Get Usage Set Royalties cURL Copy Ask AI curl --request PUT \\ --url https://staging.crossmint.com/api/v1-alpha1/minting/collections/{collectionId}/royalties \\ --header 'Content-Type: application/json' \\ --header 'X-API-KEY: <api-key>' \\ --data '{ \"recipients\": [ { \"address\": \"0x71C...\", \"basisPoints\": 100 } ] }' 204 400 403 404 409 503 Copy Ask AI This response does not have an example. PUT https://staging.crossmint.com/api https://www.crossmint.com/api / v1-alpha1 / minting / collections / {collectionId} / royalties Try it Set Royalties cURL Copy Ask AI curl --request PUT \\ --url https://staging.crossmint.com/api/v1-alpha1/minting/collections/{collectionId}/royalties \\ --header 'Content-Type: application/json' \\ --header 'X-API-KEY: <api-key>' \\ --data '{ \"recipients\": [ { \"address\": \"0x71C...\", \"basisPoints\": 100 } ] }' 204 400 403 404 409 503 Copy Ask AI This response does not have an example. This is an alpha API and subject to change. Authorizations ​ X-API-KEY string header required Obtained in the Crossmint developer console Path Parameters ​ collectionId string required This is the identifier for the collection related to the request. Every project has default collections: default-solana and default-polygon . The create-collection API will result in collections with UUID formatted collectionId . Example: 9c82ef99-617f-497d-9abb-fd355291681b The create-collection-idempotent API allows you to specify an arbitrary identifier during the intitial request. Example: your-custom-identifer Body application/json Response 204 204 400 403 404 409 503 No-content success response indicating that the request is being processed. Was this page helpful? Yes No Update Collection Get Royalties Configuration Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 544
  },
  {
    "id": "https://docs.crossmint.com/api-reference/minting/collection/set-transferability#chunk_0",
    "url": "https://docs.crossmint.com/api-reference/minting/collection/set-transferability",
    "title": "Set Transferability - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation NFT Collections Set Transferability Documentation API Reference SDK Reference CLI Solution Guides Changelog API Reference Introduction Wallets POST Create Wallet GET Get Wallet By Locator GET Get Wallet Balance POST Fund Wallet GET Get NFTs from Wallet POST Create Transaction GET Get Transaction GET Get Wallet Transactions POST Approve Transaction POST Create Signature GET Get All Signatures GET Get Signature POST Approve Signature POST Create Delegated Signer GET Get Delegated Signer POST Transfer Token NFTs POST Mint NFT PUT Mint NFT with ID POST Mint SFT GET Get All NFTs GET Mint Status PATCH Edit NFT DEL Burn NFT IP POST Create IP Collection PUT Create IP Collection (Idempotent) GET Get IP Collection GET Get All IP Collections GET Get IP Assets in Collection GET Get IP Asset POST Create IP Asset PUT Create IP Asset (Idempotent) PATCH Update IP Asset GET Get IP Action GET Get IP Asset License GET Get IP Asset Graph NFT Collections POST Create Collection PUT Create Collection (Idempotent) GET Get All Collections GET Get Collection Info PATCH Update Collection PUT Set Royalties GET Get Royalties Configuration DEL Remove Royalties PUT Set Base URI GET Get Base URI PUT Set Transferability GET Get Transferability NFT Templates POST Create Template PUT Create Template with ID GET Get Template GET Get All Templates PATCH Edit Template DEL Delete Template Verifiable Credentials POST Create Credential template POST Issue Credential GET Get Credential by Credential ID GET Get Credential by NFT ID GET Get Credential by NFT Locator GET Retrieve credential nfts POST Verify Credential DEL Revoke Credential Verifiable Credential Types POST Create Credential Type PUT Create Credential Type with Name GET Get a Credential Type Headless Checkout POST Create Order GET Get Order PATCH Edit Order GET Check Token Support Action Status GET Get Action Status Admin GET Get Usage Set Transferability cURL Copy Ask AI curl --request PUT \\ --url https://staging.crossmint.com/api/v1-alpha1/minting/collections/{collectionId}/transferable \\ --header 'Content-Type: application/json' \\ --header 'X-API-KEY: <api-key>' \\ --data '{ \"value\": true }' 204 400 403 404 409 503 Copy Ask AI This response does not have an example. PUT https://staging.crossmint.com/api https://www.crossmint.com/api / v1-alpha1 / minting / collections / {collectionId} / transferable Try it Set Transferability cURL Copy Ask AI curl --request PUT \\ --url https://staging.crossmint.com/api/v1-alpha1/minting/collections/{collectionId}/transferable \\ --header 'Content-Type: application/json' \\ --header 'X-API-KEY: <api-key>' \\ --data '{ \"value\": true }' 204 400 403 404 409 503 Copy Ask AI This response does not have an example. This is an alpha API and subject to change. Authorizations ​ X-API-KEY string header required Obtained in the Crossmint developer console Path Parameters ​ collectionId string required This is the identifier for the collection related to the request. Every project has default collections: default-solana and default-polygon . The create-collection API will result in collections with UUID formatted collectionId . Example: 9c82ef99-617f-497d-9abb-fd355291681b The create-collection-idempotent API allows you to specify an arbitrary identifier during the intitial request. Example: your-custom-identifer Body application/json Response 204 204 400 403 404 409 503 Success Was this page helpful? Yes No Get Base URI Get Transferability Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 521
  },
  {
    "id": "https://docs.crossmint.com/api-reference/minting/collection/update-collection#chunk_0",
    "url": "https://docs.crossmint.com/api-reference/minting/collection/update-collection",
    "title": "Update Collection - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation NFT Collections Update Collection Documentation API Reference SDK Reference CLI Solution Guides Changelog API Reference Introduction Wallets POST Create Wallet GET Get Wallet By Locator GET Get Wallet Balance POST Fund Wallet GET Get NFTs from Wallet POST Create Transaction GET Get Transaction GET Get Wallet Transactions POST Approve Transaction POST Create Signature GET Get All Signatures GET Get Signature POST Approve Signature POST Create Delegated Signer GET Get Delegated Signer POST Transfer Token NFTs POST Mint NFT PUT Mint NFT with ID POST Mint SFT GET Get All NFTs GET Mint Status PATCH Edit NFT DEL Burn NFT IP POST Create IP Collection PUT Create IP Collection (Idempotent) GET Get IP Collection GET Get All IP Collections GET Get IP Assets in Collection GET Get IP Asset POST Create IP Asset PUT Create IP Asset (Idempotent) PATCH Update IP Asset GET Get IP Action GET Get IP Asset License GET Get IP Asset Graph NFT Collections POST Create Collection PUT Create Collection (Idempotent) GET Get All Collections GET Get Collection Info PATCH Update Collection PUT Set Royalties GET Get Royalties Configuration DEL Remove Royalties PUT Set Base URI GET Get Base URI PUT Set Transferability GET Get Transferability NFT Templates POST Create Template PUT Create Template with ID GET Get Template GET Get All Templates PATCH Edit Template DEL Delete Template Verifiable Credentials POST Create Credential template POST Issue Credential GET Get Credential by Credential ID GET Get Credential by NFT ID GET Get Credential by NFT Locator GET Retrieve credential nfts POST Verify Credential DEL Revoke Credential Verifiable Credential Types POST Create Credential Type PUT Create Credential Type with Name GET Get a Credential Type Headless Checkout POST Create Order GET Get Order PATCH Edit Order GET Check Token Support Action Status GET Get Action Status Admin GET Get Usage Update Collection Info cURL Copy Ask AI curl --request PATCH \\ --url https://staging.crossmint.com/api/2022-06-09/collections/{collectionId} \\ --header 'Content-Type: application/json' \\ --header 'X-API-KEY: <api-key>' \\ --data '{ \"supplyLimit\": 123, \"payments\": { \"price\": \"<string>\", \"recipientAddress\": \"<string>\", \"currency\": \"<string>\" } }' 200 400 403 404 503 Copy Ask AI { \"actionId\" : \"e9abb61c-9371-447e-af1a-86fb5c073754\" , \"action\" : \"collections.update\" , \"status\" : \"pending\" , \"data\" : { \"chain\" : \"arbitrum\" , \"collection\" : { \"id\" : \"42c43e55-f92d-4b25-bc99-d8309b6e1f38\" , \"contractAddress\" : \"0x45ba91BCa91fA0D384022d3C279866811795FcF7\" }, \"changes\" : \"supplyLimit\" }, \"startedAt\" : \"2023-12-30T00:06:56.000Z\" , \"resource\" : \"https://staging.crossmint.com/api/2022-06-09/collections/<collectionId>\" , \"subscription\" : { \"enabled\" : true } } PATCH https://staging.crossmint.com/api https://www.crossmint.com/api / 2022-06-09 / collections / {collectionId} Try it Update Collection Info cURL Copy Ask AI curl --request PATCH \\ --url https://staging.crossmint.com/api/2022-06-09/collections/{collectionId} \\ --header 'Content-Type: application/json' \\ --header 'X-API-KEY: <api-key>' \\ --data '{ \"supplyLimit\": 123, \"payments\": { \"price\": \"<string>\", \"recipientAddress\": \"<string>\", \"currency\": \"<string>\" } }' 200 400 403 404 503 Copy Ask AI { \"actionId\" : \"e9abb61c-9371-447e-af1a-86fb5c073754\" , \"action\" : \"collections.update\" , \"status\" : \"pending\" , \"data\" : { \"chain\" : \"arbitrum\" , \"collection\" : { \"id\" : \"42c43e55-f92d-4b25-bc99-d8309b6e1f38\" , \"contractAddress\" : \"0x45ba91BCa91fA0D384022d3C279866811795FcF7\" }, \"changes\" : \"supplyLimit\" }, \"startedAt\" : \"2023-12-30T00:06:56.000Z\" , \"resource\" : \"https://staging.crossmint.com/api/2022-06-09/collections/<collectionId>\" , \"subscription\" : { \"enabled\" : true } } Authorizations ​ X-API-KEY string header required Obtained in the Crossmint developer console Path Parameters ​ collectionId string required This is the identifier for the collection related to the request. Every project has default collections: default-solana and default-polygon . The create-collection API will result in collections with UUID formatted collectionId . Example: 9c82ef99-617f-497d-9abb-fd355291681b The create-collection-idempotent API allows you to specify an arbitrary identifier during the intitial request. Example: your-custom-identifer Body application/json Response 200 200 400 403 404 503 application/json A JSON object containing transactionId and status The response is of type object . Was this page helpful? Yes No Get Collection Info Set Royalties Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 627
  },
  {
    "id": "https://docs.crossmint.com/api-reference/minting/nfts/burn-nft#chunk_0",
    "url": "https://docs.crossmint.com/api-reference/minting/nfts/burn-nft",
    "title": "Burn NFT - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation NFTs Burn NFT Documentation API Reference SDK Reference CLI Solution Guides Changelog API Reference Introduction Wallets POST Create Wallet GET Get Wallet By Locator GET Get Wallet Balance POST Fund Wallet GET Get NFTs from Wallet POST Create Transaction GET Get Transaction GET Get Wallet Transactions POST Approve Transaction POST Create Signature GET Get All Signatures GET Get Signature POST Approve Signature POST Create Delegated Signer GET Get Delegated Signer POST Transfer Token NFTs POST Mint NFT PUT Mint NFT with ID POST Mint SFT GET Get All NFTs GET Mint Status PATCH Edit NFT DEL Burn NFT IP POST Create IP Collection PUT Create IP Collection (Idempotent) GET Get IP Collection GET Get All IP Collections GET Get IP Assets in Collection GET Get IP Asset POST Create IP Asset PUT Create IP Asset (Idempotent) PATCH Update IP Asset GET Get IP Action GET Get IP Asset License GET Get IP Asset Graph NFT Collections POST Create Collection PUT Create Collection (Idempotent) GET Get All Collections GET Get Collection Info PATCH Update Collection PUT Set Royalties GET Get Royalties Configuration DEL Remove Royalties PUT Set Base URI GET Get Base URI PUT Set Transferability GET Get Transferability NFT Templates POST Create Template PUT Create Template with ID GET Get Template GET Get All Templates PATCH Edit Template DEL Delete Template Verifiable Credentials POST Create Credential template POST Issue Credential GET Get Credential by Credential ID GET Get Credential by NFT ID GET Get Credential by NFT Locator GET Retrieve credential nfts POST Verify Credential DEL Revoke Credential Verifiable Credential Types POST Create Credential Type PUT Create Credential Type with Name GET Get a Credential Type Headless Checkout POST Create Order GET Get Order PATCH Edit Order GET Check Token Support Action Status GET Get Action Status Admin GET Get Usage Burn NFT cURL Copy Ask AI curl --request DELETE \\ --url https://staging.crossmint.com/api/2022-06-09/collections/{collectionId}/nfts/{id} \\ --header 'X-API-KEY: <api-key>' 200 400 403 404 503 Copy Ask AI { \"actionId\" : \"201520fc-e0eb-4698-a2f3-c6b50cc7c894\" , \"action\" : \"nfts.delete\" , \"status\" : \"pending OR succeeded\" , \"data\" : { \"chain\" : \"polygon\" , \"txId\" : \"succeeded status ONLY - 0x69cf6d971e6745f25f683db9c87663839be02bdaa4a70f0724f490d7335b0081\" , \"collection\" : { \"id\" : \"default-polygon\" , \"contractAddress\" : \"0x67a602CBb306b3DBaaC7ECf55b72EED0E04Dc785\" }, \"token\" : { \"id\" : \"799a6f68-e2ea-4126-8577-4298dfcf900c\" , \"tokenId\" : \"7\" } }, \"startedAt\" : \"2024-01-10T23:01:45.000Z\" , \"completedAt\" : \"succeeded status ONLY - 2024-01-10T23:02:00.000Z\" , \"resource\" : \"https://staging.crossmint.com/api/2022-06-09/collections/default-polygon/nfts/201520fc-e0eb-4698-a2f3-c6b50cc7c894\" } DELETE https://staging.crossmint.com/api https://www.crossmint.com/api / 2022-06-09 / collections / {collectionId} / nfts / {id} Try it Burn NFT cURL Copy Ask AI curl --request DELETE \\ --url https://staging.crossmint.com/api/2022-06-09/collections/{collectionId}/nfts/{id} \\ --header 'X-API-KEY: <api-key>' 200 400 403 404 503 Copy Ask AI { \"actionId\" : \"201520fc-e0eb-4698-a2f3-c6b50cc7c894\" , \"action\" : \"nfts.delete\" , \"status\" : \"pending OR succeeded\" , \"data\" : { \"chain\" : \"polygon\" , \"txId\" : \"succeeded status ONLY - 0x69cf6d971e6745f25f683db9c87663839be02bdaa4a70f0724f490d7335b0081\" , \"collection\" : { \"id\" : \"default-polygon\" , \"contractAddress\" : \"0x67a602CBb306b3DBaaC7ECf55b72EED0E04Dc785\" }, \"token\" : { \"id\" : \"799a6f68-e2ea-4126-8577-4298dfcf900c\" , \"tokenId\" : \"7\" } }, \"startedAt\" : \"2024-01-10T23:01:45.000Z\" , \"completedAt\" : \"succeeded status ONLY - 2024-01-10T23:02:00.000Z\" , \"resource\" : \"https://staging.crossmint.com/api/2022-06-09/collections/default-polygon/nfts/201520fc-e0eb-4698-a2f3-c6b50cc7c894\" } This is an alpha API and subject to change. Authorizations ​ X-API-KEY string header required Obtained in the Crossmint developer console Path Parameters ​ collectionId string required This is the identifier for the collection related to the request. Every project has default collections: default-solana and default-polygon . The create-collection API will result in collections with UUID formatted collectionId . Example: 9c82ef99-617f-497d-9abb-fd355291681b The create-collection-idempotent API allows you to specify an arbitrary identifier during the intitial request. Example: your-custom-identifer ​ id string required Unique ID of the minted NFT returned in the mint response Response 200 200 400 403 404 503 application/json Success. The response is of type object . Was this page helpful? Yes No Edit NFT Create IP Collection Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 642
  },
  {
    "id": "https://docs.crossmint.com/api-reference/minting/nfts/edit-nft#chunk_0",
    "url": "https://docs.crossmint.com/api-reference/minting/nfts/edit-nft",
    "title": "Edit NFT - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation NFTs Edit NFT Documentation API Reference SDK Reference CLI Solution Guides Changelog API Reference Introduction Wallets POST Create Wallet GET Get Wallet By Locator GET Get Wallet Balance POST Fund Wallet GET Get NFTs from Wallet POST Create Transaction GET Get Transaction GET Get Wallet Transactions POST Approve Transaction POST Create Signature GET Get All Signatures GET Get Signature POST Approve Signature POST Create Delegated Signer GET Get Delegated Signer POST Transfer Token NFTs POST Mint NFT PUT Mint NFT with ID POST Mint SFT GET Get All NFTs GET Mint Status PATCH Edit NFT DEL Burn NFT IP POST Create IP Collection PUT Create IP Collection (Idempotent) GET Get IP Collection GET Get All IP Collections GET Get IP Assets in Collection GET Get IP Asset POST Create IP Asset PUT Create IP Asset (Idempotent) PATCH Update IP Asset GET Get IP Action GET Get IP Asset License GET Get IP Asset Graph NFT Collections POST Create Collection PUT Create Collection (Idempotent) GET Get All Collections GET Get Collection Info PATCH Update Collection PUT Set Royalties GET Get Royalties Configuration DEL Remove Royalties PUT Set Base URI GET Get Base URI PUT Set Transferability GET Get Transferability NFT Templates POST Create Template PUT Create Template with ID GET Get Template GET Get All Templates PATCH Edit Template DEL Delete Template Verifiable Credentials POST Create Credential template POST Issue Credential GET Get Credential by Credential ID GET Get Credential by NFT ID GET Get Credential by NFT Locator GET Retrieve credential nfts POST Verify Credential DEL Revoke Credential Verifiable Credential Types POST Create Credential Type PUT Create Credential Type with Name GET Get a Credential Type Headless Checkout POST Create Order GET Get Order PATCH Edit Order GET Check Token Support Action Status GET Get Action Status Admin GET Get Usage Edit NFT cURL Copy Ask AI curl --request PATCH \\ --url https://staging.crossmint.com/api/2022-06-09/collections/{collectionId}/nfts/{id} \\ --header 'Content-Type: application/json' \\ --header 'X-API-KEY: <api-key>' \\ --data '{ \"metadata\": { \"name\": \"Crossmint Example NFT\", \"image\": \"https://www.crossmint.com/assets/crossmint/logo.png\", \"description\": \"My NFT created via the mint API!\", \"animation_url\": \"\", \"attributes\": [ { \"display_type\": \"boost_number\", \"trait_type\": \"<string>\", \"value\": \"<string>\" } ] }, \"reuploadLinkedFiles\": true }' 200 400 403 404 503 Copy Ask AI { \"actionId\" : \"d5e24c69-530d-4efd-9201-e6f9d6f647e2\" , \"action\" : \"nfts.update\" , \"status\" : \"pending OR succeeded\" , \"data\" : { \"txId\" : \"succeeded status ONLY - 0x69cf6d971e6745f25f683db9c87663839be02bdaa4a70f0724f490d7335b0081\" , \"chain\" : \"polygon\" , \"collection\" : { \"id\" : \"c242dcdb-57a7-4944-af9f-2c1472fa70fb\" , \"contractAddress\" : \"0xc0DeE392CBe1af5f8211A17EAffAA5c358C0fE6d\" }, \"token\" : { \"id\" : \"27db27cf-1596-4ab0-9826-a6740ffce61a\" , \"owner\" : { \"walletAddress\" : \"0x0794f3aa4521d19273D775a08289110523D34DD4\" }, \"tokenId\" : \"1\" }, \"changes\" : [ \"metadata\" ] }, \"startedAt\" : \"2024-03-08T00:10:59.000Z\" , \"completedAt\" : \"succeeded status ONLY - 2024-03-08T00:11:01.000Z\" , \"resource\" : \"https://staging.crossmint.com/api/2022-06-09/collections/c242dcdb-57a7-4944-af9f-2c1472fa70fb/nfts/d5e24c69-530d-4efd-9201-e6f9d6f647e2\" } PATCH https://staging.crossmint.com/api https://www.crossmint.com/api / 2022-06-09 / collections / {collectionId} / nfts / {id} Try it Edit NFT cURL Copy Ask AI curl --request PATCH \\ --url https://staging.crossmint.com/api/2022-06-09/collections/{collectionId}/nfts/{id} \\ --header 'Content-Type: application/json' \\ --header 'X-API-KEY: <api-key>' \\ --data '{ \"metadata\": { \"name\": \"Crossmint Example NFT\", \"image\": \"https://www.crossmint.com/assets/crossmint/logo.png\", \"description\": \"My NFT created via the mint API!\", \"animation_url\": \"\", \"attributes\": [ { \"display_type\": \"boost_number\", \"trait_type\": \"<string>\", \"value\": \"<string>\" } ] }, \"reuploadLinkedFiles\": true }' 200 400 403 404 503 Copy Ask AI { \"actionId\" : \"d5e24c69-530d-4efd-9201-e6f9d6f647e2\" , \"action\" : \"nfts.update\" , \"status\" : \"pending OR succeeded\" , \"data\" : { \"txId\" : \"succeeded status ONLY - 0x69cf6d971e6745f25f683db9c87663839be02bdaa4a70f0724f490d7335b0081\" , \"chain\" : \"polygon\" , \"collection\" : { \"id\" : \"c242dcdb-57a7-4944-af9f-2c1472fa70fb\" , \"contractAddress\" : \"0xc0DeE392CBe1af5f8211A17EAffAA5c358C0fE6d\" }, \"token\" : { \"id\" : \"27db27cf-1596-4ab0-9826-a6740ffce61a\" , \"owner\" : { \"walletAddress\" : \"0x0794f3aa4521d19273D775a08289110523D34DD4\" }, \"tokenId\" : \"1\" }, \"changes\" : [ \"metadata\" ] }, \"startedAt\" : \"2024-03-08T00:10:59.000Z\" , \"completedAt\" : \"succeeded status ONLY - 2024-03-08T00:11:01.000Z\" , \"resource\" : \"https://staging.crossmint.com/api/2022-06-09/collections/c242dcdb-57a7-4944-af9f-2c1472fa70fb/nfts/d5e24c69-530d-4efd-9201-e6f9d6f647e2\" } Authorizations ​ X-API-KEY string header required Obtained in the Crossmint developer console Path Parameters ​ collectionId string required This is the identifier for the collection related to the request. Every project has default collections: default-solana and default-polygon . The create-collection API will result in collections with UUID formatted collectionId . Example: 9c82ef99-617f-497d-9abb-fd355291681b The create-collection-idempotent API allows you to specify an arbitrary identifier during the intitial request. Example: your-custom-identifer ​ id string required Unique ID of the minted NFT returned in the mint response Body application/json Response 200 200 400 403 404 503 application/json The NFT metadata update action has been successfully been created. The response is of type object . Was this page helpful? Yes No Mint Status Burn NFT Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 747
  },
  {
    "id": "https://docs.crossmint.com/api-reference/minting/nfts/get-nfts#chunk_0",
    "url": "https://docs.crossmint.com/api-reference/minting/nfts/get-nfts",
    "title": "Get All NFTs - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation NFTs Get All NFTs Documentation API Reference SDK Reference CLI Solution Guides Changelog API Reference Introduction Wallets POST Create Wallet GET Get Wallet By Locator GET Get Wallet Balance POST Fund Wallet GET Get NFTs from Wallet POST Create Transaction GET Get Transaction GET Get Wallet Transactions POST Approve Transaction POST Create Signature GET Get All Signatures GET Get Signature POST Approve Signature POST Create Delegated Signer GET Get Delegated Signer POST Transfer Token NFTs POST Mint NFT PUT Mint NFT with ID POST Mint SFT GET Get All NFTs GET Mint Status PATCH Edit NFT DEL Burn NFT IP POST Create IP Collection PUT Create IP Collection (Idempotent) GET Get IP Collection GET Get All IP Collections GET Get IP Assets in Collection GET Get IP Asset POST Create IP Asset PUT Create IP Asset (Idempotent) PATCH Update IP Asset GET Get IP Action GET Get IP Asset License GET Get IP Asset Graph NFT Collections POST Create Collection PUT Create Collection (Idempotent) GET Get All Collections GET Get Collection Info PATCH Update Collection PUT Set Royalties GET Get Royalties Configuration DEL Remove Royalties PUT Set Base URI GET Get Base URI PUT Set Transferability GET Get Transferability NFT Templates POST Create Template PUT Create Template with ID GET Get Template GET Get All Templates PATCH Edit Template DEL Delete Template Verifiable Credentials POST Create Credential template POST Issue Credential GET Get Credential by Credential ID GET Get Credential by NFT ID GET Get Credential by NFT Locator GET Retrieve credential nfts POST Verify Credential DEL Revoke Credential Verifiable Credential Types POST Create Credential Type PUT Create Credential Type with Name GET Get a Credential Type Headless Checkout POST Create Order GET Get Order PATCH Edit Order GET Check Token Support Action Status GET Get Action Status Admin GET Get Usage Get All NFTs cURL Copy Ask AI curl --request GET \\ --url https://staging.crossmint.com/api/2022-06-09/collections/{collectionId}/nfts \\ --header 'X-API-KEY: <api-key>' 200 400 403 404 503 Copy Ask AI [ { \"id\" : \"<string>\" , \"metadata\" : { \"name\" : \"<string>\" , \"image\" : \"<string>\" , \"description\" : \"<string>\" }, \"onChain\" : { \"status\" : \"<string>\" , \"tokenId\" : \"<string>\" , \"owner\" : \"<string>\" , \"txId\" : \"<string>\" , \"contractAddress\" : \"<string>\" , \"chain\" : \"<string>\" , \"subscription\" : { \"expiresAt\" : \"2023-11-07T05:31:56Z\" } } } ] GET https://staging.crossmint.com/api https://www.crossmint.com/api / 2022-06-09 / collections / {collectionId} / nfts Try it Get All NFTs cURL Copy Ask AI curl --request GET \\ --url https://staging.crossmint.com/api/2022-06-09/collections/{collectionId}/nfts \\ --header 'X-API-KEY: <api-key>' 200 400 403 404 503 Copy Ask AI [ { \"id\" : \"<string>\" , \"metadata\" : { \"name\" : \"<string>\" , \"image\" : \"<string>\" , \"description\" : \"<string>\" }, \"onChain\" : { \"status\" : \"<string>\" , \"tokenId\" : \"<string>\" , \"owner\" : \"<string>\" , \"txId\" : \"<string>\" , \"contractAddress\" : \"<string>\" , \"chain\" : \"<string>\" , \"subscription\" : { \"expiresAt\" : \"2023-11-07T05:31:56Z\" } } } ] Authorizations ​ X-API-KEY string header required Obtained in the Crossmint developer console Path Parameters ​ collectionId string required This is the identifier for the collection related to the request. Every project has default collections: default-solana and default-polygon . The create-collection API will result in collections with UUID formatted collectionId . Example: 9c82ef99-617f-497d-9abb-fd355291681b The create-collection-idempotent API allows you to specify an arbitrary identifier during the intitial request. Example: your-custom-identifer Query Parameters ​ page number required The page number you want to query, starting at 1 ​ perPage number How many items you want to be returned in the page. Example : 20 Response 200 200 400 403 404 503 application/json Success. Returns an array of objects describing the NFTs minted from this collection. The response is of type object[] . Was this page helpful? Yes No Mint SFT Mint Status Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 641
  },
  {
    "id": "https://docs.crossmint.com/api-reference/minting/nfts/mint-nft#chunk_0",
    "url": "https://docs.crossmint.com/api-reference/minting/nfts/mint-nft",
    "title": "Mint NFT - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation NFTs Mint NFT Documentation API Reference SDK Reference CLI Solution Guides Changelog API Reference Introduction Wallets POST Create Wallet GET Get Wallet By Locator GET Get Wallet Balance POST Fund Wallet GET Get NFTs from Wallet POST Create Transaction GET Get Transaction GET Get Wallet Transactions POST Approve Transaction POST Create Signature GET Get All Signatures GET Get Signature POST Approve Signature POST Create Delegated Signer GET Get Delegated Signer POST Transfer Token NFTs POST Mint NFT PUT Mint NFT with ID POST Mint SFT GET Get All NFTs GET Mint Status PATCH Edit NFT DEL Burn NFT IP POST Create IP Collection PUT Create IP Collection (Idempotent) GET Get IP Collection GET Get All IP Collections GET Get IP Assets in Collection GET Get IP Asset POST Create IP Asset PUT Create IP Asset (Idempotent) PATCH Update IP Asset GET Get IP Action GET Get IP Asset License GET Get IP Asset Graph NFT Collections POST Create Collection PUT Create Collection (Idempotent) GET Get All Collections GET Get Collection Info PATCH Update Collection PUT Set Royalties GET Get Royalties Configuration DEL Remove Royalties PUT Set Base URI GET Get Base URI PUT Set Transferability GET Get Transferability NFT Templates POST Create Template PUT Create Template with ID GET Get Template GET Get All Templates PATCH Edit Template DEL Delete Template Verifiable Credentials POST Create Credential template POST Issue Credential GET Get Credential by Credential ID GET Get Credential by NFT ID GET Get Credential by NFT Locator GET Retrieve credential nfts POST Verify Credential DEL Revoke Credential Verifiable Credential Types POST Create Credential Type PUT Create Credential Type with Name GET Get a Credential Type Headless Checkout POST Create Order GET Get Order PATCH Edit Order GET Check Token Support Action Status GET Get Action Status Admin GET Get Usage Mint NFT cURL Copy Ask AI curl --request POST \\ --url https://staging.crossmint.com/api/2022-06-09/collections/{collectionId}/nfts \\ --header 'Content-Type: application/json' \\ --header 'X-API-KEY: <api-key>' \\ --data '{ \"metadata\": { \"name\": \"Crossmint Example NFT\", \"image\": \"https://www.crossmint.com/assets/crossmint/logo.png\", \"description\": \"My NFT created via the mint API!\", \"animation_url\": \"\", \"attributes\": [ { \"display_type\": \"boost_number\", \"trait_type\": \"<string>\", \"value\": \"<string>\" } ] }, \"recipient\": \"email:testy@crossmint.com:polygon\", \"sendNotification\": true, \"locale\": \"en-US\", \"reuploadLinkedFiles\": true, \"compressed\": true }' 200 EVM 200 Solana 400 403 404 503 Copy Ask AI { \"id\" : \"a9c57776-8f0c-4dfc-8a81-06909439234e\" , \"onChain\" : { \"status\" : \"pending\" , \"chain\" : \"polygon\" , \"contractAddress\" : \"0xe7Ad5c85B14b5bedc6911c148cfbB52B2744531E\" }, \"actionId\" : \"a9c57776-8f0c-4dfc-8a81-06909439234e\" } POST https://staging.crossmint.com/api https://www.crossmint.com/api / 2022-06-09 / collections / {collectionId} / nfts Try it Mint NFT cURL Copy Ask AI curl --request POST \\ --url https://staging.crossmint.com/api/2022-06-09/collections/{collectionId}/nfts \\ --header 'Content-Type: application/json' \\ --header 'X-API-KEY: <api-key>' \\ --data '{ \"metadata\": { \"name\": \"Crossmint Example NFT\", \"image\": \"https://www.crossmint.com/assets/crossmint/logo.png\", \"description\": \"My NFT created via the mint API!\", \"animation_url\": \"\", \"attributes\": [ { \"display_type\": \"boost_number\", \"trait_type\": \"<string>\", \"value\": \"<string>\" } ] }, \"recipient\": \"email:testy@crossmint.com:polygon\", \"sendNotification\": true, \"locale\": \"en-US\", \"reuploadLinkedFiles\": true, \"compressed\": true }' 200 EVM 200 Solana 400 403 404 503 Copy Ask AI { \"id\" : \"a9c57776-8f0c-4dfc-8a81-06909439234e\" , \"onChain\" : { \"status\" : \"pending\" , \"chain\" : \"polygon\" , \"contractAddress\" : \"0xe7Ad5c85B14b5bedc6911c148cfbB52B2744531E\" }, \"actionId\" : \"a9c57776-8f0c-4dfc-8a81-06909439234e\" } For uncompressed Solana NFTs, contact sales for access. 200 EVM 200 Solana 400 403 404 503 Copy Ask AI { \"id\" : \"a9c57776-8f0c-4dfc-8a81-06909439234e\" , \"onChain\" : { \"status\" : \"pending\" , \"chain\" : \"polygon\" , \"contractAddress\" : \"0xe7Ad5c85B14b5bedc6911c148cfbB52B2744531E\" }, \"actionId\" : \"a9c57776-8f0c-4dfc-8a81-06909439234e\" } Authorizations ​ X-API-KEY string header required Obtained in the Crossmint developer console Path Parameters ​ collectionId string required This is the identifier for the collection related to the request. Every project has default collections: default-solana and default-polygon . The create-collection API will result in collections with UUID formatted collectionId . Example: 9c82ef99-617f-497d-9abb-fd355291681b The create-collection-idempotent API allows you to specify an arbitrary identifier during the intitial request. Example: your-custom-identifer Body application/json Metadata Template Id Response 200 200 400 403 404 503 application/json Success. Option 1 Option 2 The response is of type object . Was this page helpful? Yes No Transfer Token Mint NFT with ID Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 681
  },
  {
    "id": "https://docs.crossmint.com/api-reference/minting/nfts/mint-nft-idempotent#chunk_0",
    "url": "https://docs.crossmint.com/api-reference/minting/nfts/mint-nft-idempotent",
    "title": "Mint NFT with ID - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation NFTs Mint NFT with ID Documentation API Reference SDK Reference CLI Solution Guides Changelog API Reference Introduction Wallets POST Create Wallet GET Get Wallet By Locator GET Get Wallet Balance POST Fund Wallet GET Get NFTs from Wallet POST Create Transaction GET Get Transaction GET Get Wallet Transactions POST Approve Transaction POST Create Signature GET Get All Signatures GET Get Signature POST Approve Signature POST Create Delegated Signer GET Get Delegated Signer POST Transfer Token NFTs POST Mint NFT PUT Mint NFT with ID POST Mint SFT GET Get All NFTs GET Mint Status PATCH Edit NFT DEL Burn NFT IP POST Create IP Collection PUT Create IP Collection (Idempotent) GET Get IP Collection GET Get All IP Collections GET Get IP Assets in Collection GET Get IP Asset POST Create IP Asset PUT Create IP Asset (Idempotent) PATCH Update IP Asset GET Get IP Action GET Get IP Asset License GET Get IP Asset Graph NFT Collections POST Create Collection PUT Create Collection (Idempotent) GET Get All Collections GET Get Collection Info PATCH Update Collection PUT Set Royalties GET Get Royalties Configuration DEL Remove Royalties PUT Set Base URI GET Get Base URI PUT Set Transferability GET Get Transferability NFT Templates POST Create Template PUT Create Template with ID GET Get Template GET Get All Templates PATCH Edit Template DEL Delete Template Verifiable Credentials POST Create Credential template POST Issue Credential GET Get Credential by Credential ID GET Get Credential by NFT ID GET Get Credential by NFT Locator GET Retrieve credential nfts POST Verify Credential DEL Revoke Credential Verifiable Credential Types POST Create Credential Type PUT Create Credential Type with Name GET Get a Credential Type Headless Checkout POST Create Order GET Get Order PATCH Edit Order GET Check Token Support Action Status GET Get Action Status Admin GET Get Usage Mint NFT with ID cURL Copy Ask AI curl --request PUT \\ --url https://staging.crossmint.com/api/2022-06-09/collections/{collectionId}/nfts/{id} \\ --header 'Content-Type: application/json' \\ --header 'X-API-KEY: <api-key>' \\ --data '{ \"metadata\": { \"name\": \"Crossmint Example NFT\", \"image\": \"https://www.crossmint.com/assets/crossmint/logo.png\", \"description\": \"My NFT created via the mint API!\", \"animation_url\": \"\", \"attributes\": [ { \"display_type\": \"boost_number\", \"trait_type\": \"<string>\", \"value\": \"<string>\" } ] }, \"recipient\": \"email:testy@crossmint.com:polygon\", \"sendNotification\": true, \"locale\": \"en-US\", \"reuploadLinkedFiles\": true, \"compressed\": true }' 200 EVM 200 Solana 400 403 404 503 Copy Ask AI { \"id\" : \"a9c57776-8f0c-4dfc-8a81-06909439234e\" , \"onChain\" : { \"status\" : \"pending\" , \"chain\" : \"polygon\" , \"contractAddress\" : \"0xe7Ad5c85B14b5bedc6911c148cfbB52B2744531E\" }, \"actionId\" : \"a9c57776-8f0c-4dfc-8a81-06909439234e\" } PUT https://staging.crossmint.com/api https://www.crossmint.com/api / 2022-06-09 / collections / {collectionId} / nfts / {id} Try it Mint NFT with ID cURL Copy Ask AI curl --request PUT \\ --url https://staging.crossmint.com/api/2022-06-09/collections/{collectionId}/nfts/{id} \\ --header 'Content-Type: application/json' \\ --header 'X-API-KEY: <api-key>' \\ --data '{ \"metadata\": { \"name\": \"Crossmint Example NFT\", \"image\": \"https://www.crossmint.com/assets/crossmint/logo.png\", \"description\": \"My NFT created via the mint API!\", \"animation_url\": \"\", \"attributes\": [ { \"display_type\": \"boost_number\", \"trait_type\": \"<string>\", \"value\": \"<string>\" } ] }, \"recipient\": \"email:testy@crossmint.com:polygon\", \"sendNotification\": true, \"locale\": \"en-US\", \"reuploadLinkedFiles\": true, \"compressed\": true }' 200 EVM 200 Solana 400 403 404 503 Copy Ask AI { \"id\" : \"a9c57776-8f0c-4dfc-8a81-06909439234e\" , \"onChain\" : { \"status\" : \"pending\" , \"chain\" : \"polygon\" , \"contractAddress\" : \"0xe7Ad5c85B14b5bedc6911c148cfbB52B2744531E\" }, \"actionId\" : \"a9c57776-8f0c-4dfc-8a81-06909439234e\" } Subsequent requests to this endpoint with the same id in the path will not mint additional NFTs. Furthermore, the success responses (with status code 200) will be different once the initial request has completed and includes the metadata for the minted NFT. 200 response examples for subsequent requests EVM Solana Copy Ask AI { \"id\" : \"<string>\" , \"metadata\" : { \"name\" : \"<string>\" , \"image\" : \"<string>\" , \"description\" : \"<string>\" }, \"onChain\" : { \"status\" : \"<string>\" , \"tokenId\" : \"<string>\" , \"owner\" : \"<string>\" , \"txId\" : \"<string>\" , \"contractAddress\" : \"<string>\" , \"chain\" : \"<string>\" }, \"actionId\" : \"<string>\" } 200 EVM 200 Solana 400 403 404 503 Copy Ask AI { \"id\" : \"a9c57776-8f0c-4dfc-8a81-06909439234e\" , \"onChain\" : { \"status\" : \"pending\" , \"chain\" : \"polygon\" , \"contractAddress\" : \"0xe7Ad5c85B14b5bedc6911c148cfbB52B2744531E\" }, \"actionId\" : \"a9c57776-8f0c-4dfc-8a81-06909439234e\" } Authorizations ​ X-API-KEY string header required Obtained in the Crossmint developer console Path Parameters ​ collectionId string required This is the identifier for the collection related to the request. Every project has default collections: default-solana and default-polygon . The create-collection API will result in collections with UUID formatted collectionId . Example: 9c82ef99-617f-497d-9abb-fd355291681b The create-collection-idempotent API allows you to specify an arbitrary identifier during the intitial request. Example: your-custom-identifer ​ id string required Custom ID of the NFT, which is used as an idempotency key Example : \"my-idempotency-key\" Body application/json Response 200 200 400 403 404 503 application/json The request has been accepted. Option 1 Option 2 Option 3 Option 4 The response is of type object . Was this page helpful? Yes No Mint NFT Mint SFT Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 807
  },
  {
    "id": "https://docs.crossmint.com/api-reference/minting/nfts/mint-sft#chunk_0",
    "url": "https://docs.crossmint.com/api-reference/minting/nfts/mint-sft",
    "title": "Mint SFT - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation NFTs Mint SFT Documentation API Reference SDK Reference CLI Solution Guides Changelog API Reference Introduction Wallets POST Create Wallet GET Get Wallet By Locator GET Get Wallet Balance POST Fund Wallet GET Get NFTs from Wallet POST Create Transaction GET Get Transaction GET Get Wallet Transactions POST Approve Transaction POST Create Signature GET Get All Signatures GET Get Signature POST Approve Signature POST Create Delegated Signer GET Get Delegated Signer POST Transfer Token NFTs POST Mint NFT PUT Mint NFT with ID POST Mint SFT GET Get All NFTs GET Mint Status PATCH Edit NFT DEL Burn NFT IP POST Create IP Collection PUT Create IP Collection (Idempotent) GET Get IP Collection GET Get All IP Collections GET Get IP Assets in Collection GET Get IP Asset POST Create IP Asset PUT Create IP Asset (Idempotent) PATCH Update IP Asset GET Get IP Action GET Get IP Asset License GET Get IP Asset Graph NFT Collections POST Create Collection PUT Create Collection (Idempotent) GET Get All Collections GET Get Collection Info PATCH Update Collection PUT Set Royalties GET Get Royalties Configuration DEL Remove Royalties PUT Set Base URI GET Get Base URI PUT Set Transferability GET Get Transferability NFT Templates POST Create Template PUT Create Template with ID GET Get Template GET Get All Templates PATCH Edit Template DEL Delete Template Verifiable Credentials POST Create Credential template POST Issue Credential GET Get Credential by Credential ID GET Get Credential by NFT ID GET Get Credential by NFT Locator GET Retrieve credential nfts POST Verify Credential DEL Revoke Credential Verifiable Credential Types POST Create Credential Type PUT Create Credential Type with Name GET Get a Credential Type Headless Checkout POST Create Order GET Get Order PATCH Edit Order GET Check Token Support Action Status GET Get Action Status Admin GET Get Usage Mint SFT cURL Copy Ask AI curl --request POST \\ --url https://staging.crossmint.com/api/2022-06-09/collections/{collectionId}/sfts \\ --header 'Content-Type: application/json' \\ --header 'X-API-KEY: <api-key>' \\ --data '{ \"templateId\": \"silver-pass\", \"recipient\": \"email:testy@crossmint.com:polygon\", \"sendNotification\": true, \"locale\": \"en-US\", \"amount\": 10 }' 200 400 403 404 503 Copy Ask AI { \"actionId\" : \"a91c15e3-60f2-4a45-bf1a-cee508981667\" , \"action\" : \"nfts.create\" , \"status\" : \"pending\" , \"data\" : { \"chain\" : \"polygon\" , \"collection\" : { \"id\" : \"84e3d617-9c1b-4e7a-9686-522a9ea7c520\" , \"contractAddress\" : \"0x9b8ab8949bd7E73E61945b88F7fe12151f98ad3C\" }, \"recipient\" : { \"walletAddress\" : \"0xcFDc00Cf926A5053f9Cdf004e6DF17e6dEB2E146\" , \"email\" : \"testy@crossmint.com\" }, \"token\" : { \"id\" : \"a91c15e3-60f2-4a45-bf1a-cee508981667\" } }, \"startedAt\" : \"2024-01-02T22:05:01.000Z\" , \"resource\" : \"https://staging.crossmint.com/api/2022-06-09/actions/a91c15e3-60f2-4a45-bf1a-cee508981667\" } POST https://staging.crossmint.com/api https://www.crossmint.com/api / 2022-06-09 / collections / {collectionId} / sfts Try it Mint SFT cURL Copy Ask AI curl --request POST \\ --url https://staging.crossmint.com/api/2022-06-09/collections/{collectionId}/sfts \\ --header 'Content-Type: application/json' \\ --header 'X-API-KEY: <api-key>' \\ --data '{ \"templateId\": \"silver-pass\", \"recipient\": \"email:testy@crossmint.com:polygon\", \"sendNotification\": true, \"locale\": \"en-US\", \"amount\": 10 }' 200 400 403 404 503 Copy Ask AI { \"actionId\" : \"a91c15e3-60f2-4a45-bf1a-cee508981667\" , \"action\" : \"nfts.create\" , \"status\" : \"pending\" , \"data\" : { \"chain\" : \"polygon\" , \"collection\" : { \"id\" : \"84e3d617-9c1b-4e7a-9686-522a9ea7c520\" , \"contractAddress\" : \"0x9b8ab8949bd7E73E61945b88F7fe12151f98ad3C\" }, \"recipient\" : { \"walletAddress\" : \"0xcFDc00Cf926A5053f9Cdf004e6DF17e6dEB2E146\" , \"email\" : \"testy@crossmint.com\" }, \"token\" : { \"id\" : \"a91c15e3-60f2-4a45-bf1a-cee508981667\" } }, \"startedAt\" : \"2024-01-02T22:05:01.000Z\" , \"resource\" : \"https://staging.crossmint.com/api/2022-06-09/actions/a91c15e3-60f2-4a45-bf1a-cee508981667\" } Authorizations ​ X-API-KEY string header required Obtained in the Crossmint developer console Headers ​ x-idempotency-key string Unique identifier to prevent duplicate requests Path Parameters ​ collectionId string required This is the identifier for the collection related to the request. Every project has default collections: default-solana and default-polygon . The create-collection API will result in collections with UUID formatted collectionId . Example: 9c82ef99-617f-497d-9abb-fd355291681b The create-collection-idempotent API allows you to specify an arbitrary identifier during the intitial request. Example: your-custom-identifer Body application/json Response 200 200 400 403 404 503 application/json Success The response is of type object . Was this page helpful? Yes No Mint NFT with ID Get All NFTs Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 644
  },
  {
    "id": "https://docs.crossmint.com/api-reference/minting/nfts/mint-status#chunk_0",
    "url": "https://docs.crossmint.com/api-reference/minting/nfts/mint-status",
    "title": "Mint Status - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation NFTs Mint Status Documentation API Reference SDK Reference CLI Solution Guides Changelog API Reference Introduction Wallets POST Create Wallet GET Get Wallet By Locator GET Get Wallet Balance POST Fund Wallet GET Get NFTs from Wallet POST Create Transaction GET Get Transaction GET Get Wallet Transactions POST Approve Transaction POST Create Signature GET Get All Signatures GET Get Signature POST Approve Signature POST Create Delegated Signer GET Get Delegated Signer POST Transfer Token NFTs POST Mint NFT PUT Mint NFT with ID POST Mint SFT GET Get All NFTs GET Mint Status PATCH Edit NFT DEL Burn NFT IP POST Create IP Collection PUT Create IP Collection (Idempotent) GET Get IP Collection GET Get All IP Collections GET Get IP Assets in Collection GET Get IP Asset POST Create IP Asset PUT Create IP Asset (Idempotent) PATCH Update IP Asset GET Get IP Action GET Get IP Asset License GET Get IP Asset Graph NFT Collections POST Create Collection PUT Create Collection (Idempotent) GET Get All Collections GET Get Collection Info PATCH Update Collection PUT Set Royalties GET Get Royalties Configuration DEL Remove Royalties PUT Set Base URI GET Get Base URI PUT Set Transferability GET Get Transferability NFT Templates POST Create Template PUT Create Template with ID GET Get Template GET Get All Templates PATCH Edit Template DEL Delete Template Verifiable Credentials POST Create Credential template POST Issue Credential GET Get Credential by Credential ID GET Get Credential by NFT ID GET Get Credential by NFT Locator GET Retrieve credential nfts POST Verify Credential DEL Revoke Credential Verifiable Credential Types POST Create Credential Type PUT Create Credential Type with Name GET Get a Credential Type Headless Checkout POST Create Order GET Get Order PATCH Edit Order GET Check Token Support Action Status GET Get Action Status Admin GET Get Usage Mint Status cURL Copy Ask AI curl --request GET \\ --url https://staging.crossmint.com/api/2022-06-09/collections/{collectionId}/nfts/{id} \\ --header 'X-API-KEY: <api-key>' 200 EVM 200 Solana 400 403 404 503 Copy Ask AI { \"id\" : \"<string>\" , \"metadata\" : { \"name\" : \"<string>\" , \"image\" : \"<string>\" , \"description\" : \"<string>\" }, \"onChain\" : { \"status\" : \"success\" , \"tokenId\" : \"<string>\" , \"owner\" : \"<string>\" , \"txId\" : \"<string>\" , \"contractAddress\" : \"<string>\" , \"chain\" : \"polygon\" }, \"action\" : \"https://staging.crossmint.com/api/2022-06-09/actions/<actionId>\" } GET https://staging.crossmint.com/api https://www.crossmint.com/api / 2022-06-09 / collections / {collectionId} / nfts / {id} Try it Mint Status cURL Copy Ask AI curl --request GET \\ --url https://staging.crossmint.com/api/2022-06-09/collections/{collectionId}/nfts/{id} \\ --header 'X-API-KEY: <api-key>' 200 EVM 200 Solana 400 403 404 503 Copy Ask AI { \"id\" : \"<string>\" , \"metadata\" : { \"name\" : \"<string>\" , \"image\" : \"<string>\" , \"description\" : \"<string>\" }, \"onChain\" : { \"status\" : \"success\" , \"tokenId\" : \"<string>\" , \"owner\" : \"<string>\" , \"txId\" : \"<string>\" , \"contractAddress\" : \"<string>\" , \"chain\" : \"polygon\" }, \"action\" : \"https://staging.crossmint.com/api/2022-06-09/actions/<actionId>\" } 200 EVM 200 Solana 400 403 404 503 Copy Ask AI { \"id\" : \"<string>\" , \"metadata\" : { \"name\" : \"<string>\" , \"image\" : \"<string>\" , \"description\" : \"<string>\" }, \"onChain\" : { \"status\" : \"success\" , \"tokenId\" : \"<string>\" , \"owner\" : \"<string>\" , \"txId\" : \"<string>\" , \"contractAddress\" : \"<string>\" , \"chain\" : \"polygon\" }, \"action\" : \"https://staging.crossmint.com/api/2022-06-09/actions/<actionId>\" } Authorizations ​ X-API-KEY string header required Obtained in the Crossmint developer console Path Parameters ​ collectionId string required This is the identifier for the collection related to the request. Every project has default collections: default-solana and default-polygon . The create-collection API will result in collections with UUID formatted collectionId . Example: 9c82ef99-617f-497d-9abb-fd355291681b The create-collection-idempotent API allows you to specify an arbitrary identifier during the intitial request. Example: your-custom-identifer ​ id string required Unique ID of the minted NFT returned in the mint response Response 200 200 400 403 404 503 application/json Success. The response is of type object . Was this page helpful? Yes No Get All NFTs Edit NFT Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 665
  },
  {
    "id": "https://docs.crossmint.com/api-reference/minting/template/create-template#chunk_0",
    "url": "https://docs.crossmint.com/api-reference/minting/template/create-template",
    "title": "Create Template - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation NFT Templates Create Template Documentation API Reference SDK Reference CLI Solution Guides Changelog API Reference Introduction Wallets POST Create Wallet GET Get Wallet By Locator GET Get Wallet Balance POST Fund Wallet GET Get NFTs from Wallet POST Create Transaction GET Get Transaction GET Get Wallet Transactions POST Approve Transaction POST Create Signature GET Get All Signatures GET Get Signature POST Approve Signature POST Create Delegated Signer GET Get Delegated Signer POST Transfer Token NFTs POST Mint NFT PUT Mint NFT with ID POST Mint SFT GET Get All NFTs GET Mint Status PATCH Edit NFT DEL Burn NFT IP POST Create IP Collection PUT Create IP Collection (Idempotent) GET Get IP Collection GET Get All IP Collections GET Get IP Assets in Collection GET Get IP Asset POST Create IP Asset PUT Create IP Asset (Idempotent) PATCH Update IP Asset GET Get IP Action GET Get IP Asset License GET Get IP Asset Graph NFT Collections POST Create Collection PUT Create Collection (Idempotent) GET Get All Collections GET Get Collection Info PATCH Update Collection PUT Set Royalties GET Get Royalties Configuration DEL Remove Royalties PUT Set Base URI GET Get Base URI PUT Set Transferability GET Get Transferability NFT Templates POST Create Template PUT Create Template with ID GET Get Template GET Get All Templates PATCH Edit Template DEL Delete Template Verifiable Credentials POST Create Credential template POST Issue Credential GET Get Credential by Credential ID GET Get Credential by NFT ID GET Get Credential by NFT Locator GET Retrieve credential nfts POST Verify Credential DEL Revoke Credential Verifiable Credential Types POST Create Credential Type PUT Create Credential Type with Name GET Get a Credential Type Headless Checkout POST Create Order GET Get Order PATCH Edit Order GET Check Token Support Action Status GET Get Action Status Admin GET Get Usage Create Template cURL Copy Ask AI curl --request POST \\ --url https://staging.crossmint.com/api/2022-06-09/collections/{collectionId}/templates \\ --header 'Content-Type: application/json' \\ --header 'X-API-KEY: <api-key>' \\ --data '{ \"metadata\": { \"name\": \"My template\", \"image\": \"https://www.crossmint.com/assets/crossmint/logo.png\", \"description\": \"A new collection with its own dedicated smart contract\", \"symbol\": \"<string>\" }, \"onChain\": { \"tokenId\": \"1\" }, \"supply\": { \"limit\": 10 }, \"reuploadLinkedFiles\": true }' 200 400 404 409 424 503 Copy Ask AI { \"templateId\" : \"20ed0963-0185-49af-b4a0-2de3169bb367\" , \"metadata\" : { \"name\" : \"My Token\" , \"image\" : \"ipfs://QmaToZn4VEjF7q4CAudPaNka6AD484xuuEZSXmTLJPDLVE\" , \"description\" : \"Sample Token Template\" , \"symbol\" : \"A shorthand identifier for the token (Solana only)\" }, \"onChain\" : { \"tokenId\" : 1 }, \"supply\" : { \"limit\" : 1 , \"minted\" : 0 } } POST https://staging.crossmint.com/api https://www.crossmint.com/api / 2022-06-09 / collections / {collectionId} / templates Try it Create Template cURL Copy Ask AI curl --request POST \\ --url https://staging.crossmint.com/api/2022-06-09/collections/{collectionId}/templates \\ --header 'Content-Type: application/json' \\ --header 'X-API-KEY: <api-key>' \\ --data '{ \"metadata\": { \"name\": \"My template\", \"image\": \"https://www.crossmint.com/assets/crossmint/logo.png\", \"description\": \"A new collection with its own dedicated smart contract\", \"symbol\": \"<string>\" }, \"onChain\": { \"tokenId\": \"1\" }, \"supply\": { \"limit\": 10 }, \"reuploadLinkedFiles\": true }' 200 400 404 409 424 503 Copy Ask AI { \"templateId\" : \"20ed0963-0185-49af-b4a0-2de3169bb367\" , \"metadata\" : { \"name\" : \"My Token\" , \"image\" : \"ipfs://QmaToZn4VEjF7q4CAudPaNka6AD484xuuEZSXmTLJPDLVE\" , \"description\" : \"Sample Token Template\" , \"symbol\" : \"A shorthand identifier for the token (Solana only)\" }, \"onChain\" : { \"tokenId\" : 1 }, \"supply\" : { \"limit\" : 1 , \"minted\" : 0 } } Authorizations ​ X-API-KEY string header required Obtained in the Crossmint developer console Path Parameters ​ collectionId string required The ID of the named collection, used to create new tokens Example : \"idempotent-collection-name\" Body application/json Response 200 200 400 404 409 424 503 application/json Success The response is of type object . Was this page helpful? Yes No Get Transferability Create Template with ID Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 635
  },
  {
    "id": "https://docs.crossmint.com/api-reference/minting/template/create-template-idempotent#chunk_0",
    "url": "https://docs.crossmint.com/api-reference/minting/template/create-template-idempotent",
    "title": "Create Template with ID - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation NFT Templates Create Template with ID Documentation API Reference SDK Reference CLI Solution Guides Changelog API Reference Introduction Wallets POST Create Wallet GET Get Wallet By Locator GET Get Wallet Balance POST Fund Wallet GET Get NFTs from Wallet POST Create Transaction GET Get Transaction GET Get Wallet Transactions POST Approve Transaction POST Create Signature GET Get All Signatures GET Get Signature POST Approve Signature POST Create Delegated Signer GET Get Delegated Signer POST Transfer Token NFTs POST Mint NFT PUT Mint NFT with ID POST Mint SFT GET Get All NFTs GET Mint Status PATCH Edit NFT DEL Burn NFT IP POST Create IP Collection PUT Create IP Collection (Idempotent) GET Get IP Collection GET Get All IP Collections GET Get IP Assets in Collection GET Get IP Asset POST Create IP Asset PUT Create IP Asset (Idempotent) PATCH Update IP Asset GET Get IP Action GET Get IP Asset License GET Get IP Asset Graph NFT Collections POST Create Collection PUT Create Collection (Idempotent) GET Get All Collections GET Get Collection Info PATCH Update Collection PUT Set Royalties GET Get Royalties Configuration DEL Remove Royalties PUT Set Base URI GET Get Base URI PUT Set Transferability GET Get Transferability NFT Templates POST Create Template PUT Create Template with ID GET Get Template GET Get All Templates PATCH Edit Template DEL Delete Template Verifiable Credentials POST Create Credential template POST Issue Credential GET Get Credential by Credential ID GET Get Credential by NFT ID GET Get Credential by NFT Locator GET Retrieve credential nfts POST Verify Credential DEL Revoke Credential Verifiable Credential Types POST Create Credential Type PUT Create Credential Type with Name GET Get a Credential Type Headless Checkout POST Create Order GET Get Order PATCH Edit Order GET Check Token Support Action Status GET Get Action Status Admin GET Get Usage Create Template with ID cURL Copy Ask AI curl --request PUT \\ --url https://staging.crossmint.com/api/2022-06-09/collections/{collectionId}/templates/{templateId} \\ --header 'Content-Type: application/json' \\ --header 'X-API-KEY: <api-key>' \\ --data '{ \"metadata\": { \"name\": \"My template\", \"image\": \"https://www.crossmint.com/assets/crossmint/logo.png\", \"description\": \"A new collection with its own dedicated smart contract\", \"symbol\": \"<string>\" }, \"onChain\": { \"tokenId\": \"1\" }, \"supply\": { \"limit\": 10 }, \"reuploadLinkedFiles\": true }' 200 400 404 409 424 503 Copy Ask AI { \"templateId\" : \"20ed0963-0185-49af-b4a0-2de3169bb367\" , \"metadata\" : { \"name\" : \"My Token\" , \"image\" : \"ipfs://QmaToZn4VEjF7q4CAudPaNka6AD484xuuEZSXmTLJPDLVE\" , \"description\" : \"Sample Token Template\" , \"symbol\" : \"A shorthand identifier for the token (Solana only)\" }, \"onChain\" : { \"tokenId\" : 1 }, \"supply\" : { \"limit\" : 1 , \"minted\" : 0 } } PUT https://staging.crossmint.com/api https://www.crossmint.com/api / 2022-06-09 / collections / {collectionId} / templates / {templateId} Try it Create Template with ID cURL Copy Ask AI curl --request PUT \\ --url https://staging.crossmint.com/api/2022-06-09/collections/{collectionId}/templates/{templateId} \\ --header 'Content-Type: application/json' \\ --header 'X-API-KEY: <api-key>' \\ --data '{ \"metadata\": { \"name\": \"My template\", \"image\": \"https://www.crossmint.com/assets/crossmint/logo.png\", \"description\": \"A new collection with its own dedicated smart contract\", \"symbol\": \"<string>\" }, \"onChain\": { \"tokenId\": \"1\" }, \"supply\": { \"limit\": 10 }, \"reuploadLinkedFiles\": true }' 200 400 404 409 424 503 Copy Ask AI { \"templateId\" : \"20ed0963-0185-49af-b4a0-2de3169bb367\" , \"metadata\" : { \"name\" : \"My Token\" , \"image\" : \"ipfs://QmaToZn4VEjF7q4CAudPaNka6AD484xuuEZSXmTLJPDLVE\" , \"description\" : \"Sample Token Template\" , \"symbol\" : \"A shorthand identifier for the token (Solana only)\" }, \"onChain\" : { \"tokenId\" : 1 }, \"supply\" : { \"limit\" : 1 , \"minted\" : 0 } } Authorizations ​ X-API-KEY string header required Obtained in the Crossmint developer console Path Parameters ​ collectionId string required This is the identifier for the collection related to the request. Every project has default collections: default-solana and default-polygon . The create-collection API will result in collections with UUID formatted collectionId . Example: 9c82ef99-617f-497d-9abb-fd355291681b The create-collection-idempotent API allows you to specify an arbitrary identifier during the intitial request. Example: your-custom-identifer ​ templateId string required The template ID Body application/json Response 200 200 400 404 409 424 503 application/json Success The response is of type object . Was this page helpful? Yes No Create Template Get Template Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 684
  },
  {
    "id": "https://docs.crossmint.com/api-reference/minting/template/delete-template#chunk_0",
    "url": "https://docs.crossmint.com/api-reference/minting/template/delete-template",
    "title": "Delete Template - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation NFT Templates Delete Template Documentation API Reference SDK Reference CLI Solution Guides Changelog API Reference Introduction Wallets POST Create Wallet GET Get Wallet By Locator GET Get Wallet Balance POST Fund Wallet GET Get NFTs from Wallet POST Create Transaction GET Get Transaction GET Get Wallet Transactions POST Approve Transaction POST Create Signature GET Get All Signatures GET Get Signature POST Approve Signature POST Create Delegated Signer GET Get Delegated Signer POST Transfer Token NFTs POST Mint NFT PUT Mint NFT with ID POST Mint SFT GET Get All NFTs GET Mint Status PATCH Edit NFT DEL Burn NFT IP POST Create IP Collection PUT Create IP Collection (Idempotent) GET Get IP Collection GET Get All IP Collections GET Get IP Assets in Collection GET Get IP Asset POST Create IP Asset PUT Create IP Asset (Idempotent) PATCH Update IP Asset GET Get IP Action GET Get IP Asset License GET Get IP Asset Graph NFT Collections POST Create Collection PUT Create Collection (Idempotent) GET Get All Collections GET Get Collection Info PATCH Update Collection PUT Set Royalties GET Get Royalties Configuration DEL Remove Royalties PUT Set Base URI GET Get Base URI PUT Set Transferability GET Get Transferability NFT Templates POST Create Template PUT Create Template with ID GET Get Template GET Get All Templates PATCH Edit Template DEL Delete Template Verifiable Credentials POST Create Credential template POST Issue Credential GET Get Credential by Credential ID GET Get Credential by NFT ID GET Get Credential by NFT Locator GET Retrieve credential nfts POST Verify Credential DEL Revoke Credential Verifiable Credential Types POST Create Credential Type PUT Create Credential Type with Name GET Get a Credential Type Headless Checkout POST Create Order GET Get Order PATCH Edit Order GET Check Token Support Action Status GET Get Action Status Admin GET Get Usage Delete Template cURL Copy Ask AI curl --request DELETE \\ --url https://staging.crossmint.com/api/2022-06-09/collections/{collectionId}/templates/{templateId} \\ --header 'X-API-KEY: <api-key>' 200 400 403 404 503 Copy Ask AI This response does not have an example. DELETE https://staging.crossmint.com/api https://www.crossmint.com/api / 2022-06-09 / collections / {collectionId} / templates / {templateId} Try it Delete Template cURL Copy Ask AI curl --request DELETE \\ --url https://staging.crossmint.com/api/2022-06-09/collections/{collectionId}/templates/{templateId} \\ --header 'X-API-KEY: <api-key>' 200 400 403 404 503 Copy Ask AI This response does not have an example. Authorizations ​ X-API-KEY string header required Obtained in the Crossmint developer console Path Parameters ​ collectionId string required This is the identifier for the collection related to the request. Every project has default collections: default-solana and default-polygon . The create-collection API will result in collections with UUID formatted collectionId . Example: 9c82ef99-617f-497d-9abb-fd355291681b The create-collection-idempotent API allows you to specify an arbitrary identifier during the intitial request. Example: your-custom-identifer ​ templateId string required The template ID Response 200 200 400 403 404 503 Success. Was this page helpful? Yes No Edit Template Create Credential template Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 494
  },
  {
    "id": "https://docs.crossmint.com/api-reference/minting/template/edit-template#chunk_0",
    "url": "https://docs.crossmint.com/api-reference/minting/template/edit-template",
    "title": "Edit Template - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation NFT Templates Edit Template Documentation API Reference SDK Reference CLI Solution Guides Changelog API Reference Introduction Wallets POST Create Wallet GET Get Wallet By Locator GET Get Wallet Balance POST Fund Wallet GET Get NFTs from Wallet POST Create Transaction GET Get Transaction GET Get Wallet Transactions POST Approve Transaction POST Create Signature GET Get All Signatures GET Get Signature POST Approve Signature POST Create Delegated Signer GET Get Delegated Signer POST Transfer Token NFTs POST Mint NFT PUT Mint NFT with ID POST Mint SFT GET Get All NFTs GET Mint Status PATCH Edit NFT DEL Burn NFT IP POST Create IP Collection PUT Create IP Collection (Idempotent) GET Get IP Collection GET Get All IP Collections GET Get IP Assets in Collection GET Get IP Asset POST Create IP Asset PUT Create IP Asset (Idempotent) PATCH Update IP Asset GET Get IP Action GET Get IP Asset License GET Get IP Asset Graph NFT Collections POST Create Collection PUT Create Collection (Idempotent) GET Get All Collections GET Get Collection Info PATCH Update Collection PUT Set Royalties GET Get Royalties Configuration DEL Remove Royalties PUT Set Base URI GET Get Base URI PUT Set Transferability GET Get Transferability NFT Templates POST Create Template PUT Create Template with ID GET Get Template GET Get All Templates PATCH Edit Template DEL Delete Template Verifiable Credentials POST Create Credential template POST Issue Credential GET Get Credential by Credential ID GET Get Credential by NFT ID GET Get Credential by NFT Locator GET Retrieve credential nfts POST Verify Credential DEL Revoke Credential Verifiable Credential Types POST Create Credential Type PUT Create Credential Type with Name GET Get a Credential Type Headless Checkout POST Create Order GET Get Order PATCH Edit Order GET Check Token Support Action Status GET Get Action Status Admin GET Get Usage Edit Template cURL Copy Ask AI curl --request PATCH \\ --url https://staging.crossmint.com/api/2022-06-09/collections/{collectionId}/templates/{templateId} \\ --header 'Content-Type: application/json' \\ --header 'X-API-KEY: <api-key>' \\ --data '{ \"metadata\": { \"name\": \"test\", \"imageUrl\": \"https://www.crossmint.com/assets/crossmint/logo.png\", \"description\": \"A new collection with its own dedicated smart contract\" } }' 204 400 404 503 Copy Ask AI This response does not have an example. PATCH https://staging.crossmint.com/api https://www.crossmint.com/api / 2022-06-09 / collections / {collectionId} / templates / {templateId} Try it Edit Template cURL Copy Ask AI curl --request PATCH \\ --url https://staging.crossmint.com/api/2022-06-09/collections/{collectionId}/templates/{templateId} \\ --header 'Content-Type: application/json' \\ --header 'X-API-KEY: <api-key>' \\ --data '{ \"metadata\": { \"name\": \"test\", \"imageUrl\": \"https://www.crossmint.com/assets/crossmint/logo.png\", \"description\": \"A new collection with its own dedicated smart contract\" } }' 204 400 404 503 Copy Ask AI This response does not have an example. Authorizations ​ X-API-KEY string header required Obtained in the Crossmint developer console Path Parameters ​ collectionId string required This is the identifier for the collection related to the request. Every project has default collections: default-solana and default-polygon . The create-collection API will result in collections with UUID formatted collectionId . Example: 9c82ef99-617f-497d-9abb-fd355291681b The create-collection-idempotent API allows you to specify an arbitrary identifier during the intitial request. Example: your-custom-identifer ​ templateId string required The template ID Body application/json Metadata Update Supply Update Response 204 204 400 404 503 Success Was this page helpful? Yes No Get All Templates Delete Template Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 547
  },
  {
    "id": "https://docs.crossmint.com/api-reference/minting/template/get-all-templates#chunk_0",
    "url": "https://docs.crossmint.com/api-reference/minting/template/get-all-templates",
    "title": "Get All Templates - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation NFT Templates Get All Templates Documentation API Reference SDK Reference CLI Solution Guides Changelog API Reference Introduction Wallets POST Create Wallet GET Get Wallet By Locator GET Get Wallet Balance POST Fund Wallet GET Get NFTs from Wallet POST Create Transaction GET Get Transaction GET Get Wallet Transactions POST Approve Transaction POST Create Signature GET Get All Signatures GET Get Signature POST Approve Signature POST Create Delegated Signer GET Get Delegated Signer POST Transfer Token NFTs POST Mint NFT PUT Mint NFT with ID POST Mint SFT GET Get All NFTs GET Mint Status PATCH Edit NFT DEL Burn NFT IP POST Create IP Collection PUT Create IP Collection (Idempotent) GET Get IP Collection GET Get All IP Collections GET Get IP Assets in Collection GET Get IP Asset POST Create IP Asset PUT Create IP Asset (Idempotent) PATCH Update IP Asset GET Get IP Action GET Get IP Asset License GET Get IP Asset Graph NFT Collections POST Create Collection PUT Create Collection (Idempotent) GET Get All Collections GET Get Collection Info PATCH Update Collection PUT Set Royalties GET Get Royalties Configuration DEL Remove Royalties PUT Set Base URI GET Get Base URI PUT Set Transferability GET Get Transferability NFT Templates POST Create Template PUT Create Template with ID GET Get Template GET Get All Templates PATCH Edit Template DEL Delete Template Verifiable Credentials POST Create Credential template POST Issue Credential GET Get Credential by Credential ID GET Get Credential by NFT ID GET Get Credential by NFT Locator GET Retrieve credential nfts POST Verify Credential DEL Revoke Credential Verifiable Credential Types POST Create Credential Type PUT Create Credential Type with Name GET Get a Credential Type Headless Checkout POST Create Order GET Get Order PATCH Edit Order GET Check Token Support Action Status GET Get Action Status Admin GET Get Usage Get All Templates cURL Copy Ask AI curl --request GET \\ --url https://staging.crossmint.com/api/2022-06-09/collections/{collectionId}/templates \\ --header 'X-API-KEY: <api-key>' 200 400 403 404 503 Copy Ask AI [ { \"templateId\" : \"20ed0963-0185-49af-b4a0-2de3169bb367\" , \"metadata\" : { \"name\" : \"My Token\" , \"image\" : \"ipfs://QmaToZn4VEjF7q4CAudPaNka6AD484xuuEZSXmTLJPDLVE\" , \"description\" : \"Sample Token Template\" , \"symbol\" : \"A shorthand identifier for the token (Solana only)\" }, \"onChain\" : { \"tokenId\" : 1 }, \"supply\" : { \"limit\" : 1 , \"minted\" : 0 } } ] GET https://staging.crossmint.com/api https://www.crossmint.com/api / 2022-06-09 / collections / {collectionId} / templates Try it Get All Templates cURL Copy Ask AI curl --request GET \\ --url https://staging.crossmint.com/api/2022-06-09/collections/{collectionId}/templates \\ --header 'X-API-KEY: <api-key>' 200 400 403 404 503 Copy Ask AI [ { \"templateId\" : \"20ed0963-0185-49af-b4a0-2de3169bb367\" , \"metadata\" : { \"name\" : \"My Token\" , \"image\" : \"ipfs://QmaToZn4VEjF7q4CAudPaNka6AD484xuuEZSXmTLJPDLVE\" , \"description\" : \"Sample Token Template\" , \"symbol\" : \"A shorthand identifier for the token (Solana only)\" }, \"onChain\" : { \"tokenId\" : 1 }, \"supply\" : { \"limit\" : 1 , \"minted\" : 0 } } ] Authorizations ​ X-API-KEY string header required Obtained in the Crossmint developer console Path Parameters ​ collectionId string required This is the identifier for the collection related to the request. Every project has default collections: default-solana and default-polygon . The create-collection API will result in collections with UUID formatted collectionId . Example: 9c82ef99-617f-497d-9abb-fd355291681b The create-collection-idempotent API allows you to specify an arbitrary identifier during the intitial request. Example: your-custom-identifer Query Parameters ​ page number required The page number you want to query, starting at 1 ​ perPage number How many items you want to be returned in the page. Example : 20 Response 200 200 400 403 404 503 application/json success The response is of type object[] . Was this page helpful? Yes No Get Template Edit Template Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 624
  },
  {
    "id": "https://docs.crossmint.com/api-reference/minting/template/get-template#chunk_0",
    "url": "https://docs.crossmint.com/api-reference/minting/template/get-template",
    "title": "Get Template - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation NFT Templates Get Template Documentation API Reference SDK Reference CLI Solution Guides Changelog API Reference Introduction Wallets POST Create Wallet GET Get Wallet By Locator GET Get Wallet Balance POST Fund Wallet GET Get NFTs from Wallet POST Create Transaction GET Get Transaction GET Get Wallet Transactions POST Approve Transaction POST Create Signature GET Get All Signatures GET Get Signature POST Approve Signature POST Create Delegated Signer GET Get Delegated Signer POST Transfer Token NFTs POST Mint NFT PUT Mint NFT with ID POST Mint SFT GET Get All NFTs GET Mint Status PATCH Edit NFT DEL Burn NFT IP POST Create IP Collection PUT Create IP Collection (Idempotent) GET Get IP Collection GET Get All IP Collections GET Get IP Assets in Collection GET Get IP Asset POST Create IP Asset PUT Create IP Asset (Idempotent) PATCH Update IP Asset GET Get IP Action GET Get IP Asset License GET Get IP Asset Graph NFT Collections POST Create Collection PUT Create Collection (Idempotent) GET Get All Collections GET Get Collection Info PATCH Update Collection PUT Set Royalties GET Get Royalties Configuration DEL Remove Royalties PUT Set Base URI GET Get Base URI PUT Set Transferability GET Get Transferability NFT Templates POST Create Template PUT Create Template with ID GET Get Template GET Get All Templates PATCH Edit Template DEL Delete Template Verifiable Credentials POST Create Credential template POST Issue Credential GET Get Credential by Credential ID GET Get Credential by NFT ID GET Get Credential by NFT Locator GET Retrieve credential nfts POST Verify Credential DEL Revoke Credential Verifiable Credential Types POST Create Credential Type PUT Create Credential Type with Name GET Get a Credential Type Headless Checkout POST Create Order GET Get Order PATCH Edit Order GET Check Token Support Action Status GET Get Action Status Admin GET Get Usage Get Template cURL Copy Ask AI curl --request GET \\ --url https://staging.crossmint.com/api/2022-06-09/collections/{collectionId}/templates/{templateId} \\ --header 'X-API-KEY: <api-key>' 200 400 403 404 503 Copy Ask AI { \"templateId\" : \"20ed0963-0185-49af-b4a0-2de3169bb367\" , \"metadata\" : { \"name\" : \"My Token\" , \"image\" : \"ipfs://QmaToZn4VEjF7q4CAudPaNka6AD484xuuEZSXmTLJPDLVE\" , \"description\" : \"Sample Token Template\" , \"symbol\" : \"A shorthand identifier for the token (Solana only)\" }, \"onChain\" : { \"tokenId\" : 1 }, \"supply\" : { \"limit\" : 1 , \"minted\" : 0 } } GET https://staging.crossmint.com/api https://www.crossmint.com/api / 2022-06-09 / collections / {collectionId} / templates / {templateId} Try it Get Template cURL Copy Ask AI curl --request GET \\ --url https://staging.crossmint.com/api/2022-06-09/collections/{collectionId}/templates/{templateId} \\ --header 'X-API-KEY: <api-key>' 200 400 403 404 503 Copy Ask AI { \"templateId\" : \"20ed0963-0185-49af-b4a0-2de3169bb367\" , \"metadata\" : { \"name\" : \"My Token\" , \"image\" : \"ipfs://QmaToZn4VEjF7q4CAudPaNka6AD484xuuEZSXmTLJPDLVE\" , \"description\" : \"Sample Token Template\" , \"symbol\" : \"A shorthand identifier for the token (Solana only)\" }, \"onChain\" : { \"tokenId\" : 1 }, \"supply\" : { \"limit\" : 1 , \"minted\" : 0 } } Authorizations ​ X-API-KEY string header required Obtained in the Crossmint developer console Path Parameters ​ collectionId string required This is the identifier for the collection related to the request. Every project has default collections: default-solana and default-polygon . The create-collection API will result in collections with UUID formatted collectionId . Example: 9c82ef99-617f-497d-9abb-fd355291681b The create-collection-idempotent API allows you to specify an arbitrary identifier during the intitial request. Example: your-custom-identifer ​ templateId string required The template ID Response 200 200 400 403 404 503 application/json Success The response is of type object . Was this page helpful? Yes No Create Template with ID Get All Templates Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 596
  },
  {
    "id": "https://docs.crossmint.com/api-reference/verifiable-credentials/credentials/issue-credential#chunk_0",
    "url": "https://docs.crossmint.com/api-reference/verifiable-credentials/credentials/issue-credential",
    "title": "Issue Credential - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Verifiable Credentials Issue Credential Documentation API Reference SDK Reference CLI Solution Guides Changelog API Reference Introduction Wallets POST Create Wallet GET Get Wallet By Locator GET Get Wallet Balance POST Fund Wallet GET Get NFTs from Wallet POST Create Transaction GET Get Transaction GET Get Wallet Transactions POST Approve Transaction POST Create Signature GET Get All Signatures GET Get Signature POST Approve Signature POST Create Delegated Signer GET Get Delegated Signer POST Transfer Token NFTs POST Mint NFT PUT Mint NFT with ID POST Mint SFT GET Get All NFTs GET Mint Status PATCH Edit NFT DEL Burn NFT IP POST Create IP Collection PUT Create IP Collection (Idempotent) GET Get IP Collection GET Get All IP Collections GET Get IP Assets in Collection GET Get IP Asset POST Create IP Asset PUT Create IP Asset (Idempotent) PATCH Update IP Asset GET Get IP Action GET Get IP Asset License GET Get IP Asset Graph NFT Collections POST Create Collection PUT Create Collection (Idempotent) GET Get All Collections GET Get Collection Info PATCH Update Collection PUT Set Royalties GET Get Royalties Configuration DEL Remove Royalties PUT Set Base URI GET Get Base URI PUT Set Transferability GET Get Transferability NFT Templates POST Create Template PUT Create Template with ID GET Get Template GET Get All Templates PATCH Edit Template DEL Delete Template Verifiable Credentials POST Create Credential template POST Issue Credential GET Get Credential by Credential ID GET Get Credential by NFT ID GET Get Credential by NFT Locator GET Retrieve credential nfts POST Verify Credential DEL Revoke Credential Verifiable Credential Types POST Create Credential Type PUT Create Credential Type with Name GET Get a Credential Type Headless Checkout POST Create Order GET Get Order PATCH Edit Order GET Check Token Support Action Status GET Get Action Status Admin GET Get Usage Issue Credential cURL Copy Ask AI curl --request POST \\ --url https://staging.crossmint.com/api/v1-alpha1/credentials/templates/{templateId}/vcs \\ --header 'Content-Type: application/json' \\ --header 'X-API-KEY: <api-key>' \\ --data '{ \"recipient\": \"polygon:0x1234abcde... or email:<email_address>:polygon\", \"sendNotification\": true, \"locale\": \"en-US\", \"metadata\": { \"name\": \"Crossmint Example Verifiable Credential NFT\", \"image\": \"https://www.crossmint.com/assets/crossmint/logo.png\", \"description\": \"My Verifiable Credential NFT created via the mint API!\", \"attributes\": [ { \"display_type\": \"boost_number\", \"trait_type\": \"<string>\", \"value\": \"<string>\" } ] }, \"credential\": { \"subject\": { \"subjectName\": \"foo\", \"subjectAge\": 20, \"claim\": \"bar\" }, \"expiresAt\": \"2023-08-31T16:34:33.854Z\" } }' 200 400 403 503 Copy Ask AI { \"id\" : \"1938b38c-3037-45dc-8033-333b7ebaee7\" , \"onChain\" : { \"status\" : \"pending\" , \"chain\" : \"polygon\" , \"contractAddress\" : \"0x123456789\" }, \"credentialId\" : \"urn:uuid:40ada19e-3b4a-4de0-8d61-e0e7aedbfa0\" , \"actionId\" : \"1938b38c-3037-45dc-8033-333b7ebaee7\" } POST https://staging.crossmint.com/api https://www.crossmint.com/api / v1-alpha1 / credentials / templates / {templateId} / vcs Try it Issue Credential cURL Copy Ask AI curl --request POST \\ --url https://staging.crossmint.com/api/v1-alpha1/credentials/templates/{templateId}/vcs \\ --header 'Content-Type: application/json' \\ --header 'X-API-KEY: <api-key>' \\ --data '{ \"recipient\": \"polygon:0x1234abcde... or email:<email_address>:polygon\", \"sendNotification\": true, \"locale\": \"en-US\", \"metadata\": { \"name\": \"Crossmint Example Verifiable Credential NFT\", \"image\": \"https://www.crossmint.com/assets/crossmint/logo.png\", \"description\": \"My Verifiable Credential NFT created via the mint API!\", \"attributes\": [ { \"display_type\": \"boost_number\", \"trait_type\": \"<string>\", \"value\": \"<string>\" } ] }, \"credential\": { \"subject\": { \"subjectName\": \"foo\", \"subjectAge\": 20, \"claim\": \"bar\" }, \"expiresAt\": \"2023-08-31T16:34:33.854Z\" } }' 200 400 403 503 Copy Ask AI { \"id\" : \"1938b38c-3037-45dc-8033-333b7ebaee7\" , \"onChain\" : { \"status\" : \"pending\" , \"chain\" : \"polygon\" , \"contractAddress\" : \"0x123456789\" }, \"credentialId\" : \"urn:uuid:40ada19e-3b4a-4de0-8d61-e0e7aedbfa0\" , \"actionId\" : \"1938b38c-3037-45dc-8033-333b7ebaee7\" } This is an alpha API and subject to change. Authorizations ​ X-API-KEY string header required Key obtained from the Crossmint developer console, reflecting the API scope granted. Path Parameters ​ templateId string required The credential template's id that the newly issued credential is related to. Body application/json Response 200 200 400 403 503 application/json Success. The response is of type object . Was this page helpful? Yes No Create Credential template Get Credential by Credential ID Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 640
  },
  {
    "id": "https://docs.crossmint.com/api-reference/verifiable-credentials/credentials/retrieve-credential-by-id#chunk_0",
    "url": "https://docs.crossmint.com/api-reference/verifiable-credentials/credentials/retrieve-credential-by-id",
    "title": "Get Credential by Credential ID - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Verifiable Credentials Get Credential by Credential ID Documentation API Reference SDK Reference CLI Solution Guides Changelog API Reference Introduction Wallets POST Create Wallet GET Get Wallet By Locator GET Get Wallet Balance POST Fund Wallet GET Get NFTs from Wallet POST Create Transaction GET Get Transaction GET Get Wallet Transactions POST Approve Transaction POST Create Signature GET Get All Signatures GET Get Signature POST Approve Signature POST Create Delegated Signer GET Get Delegated Signer POST Transfer Token NFTs POST Mint NFT PUT Mint NFT with ID POST Mint SFT GET Get All NFTs GET Mint Status PATCH Edit NFT DEL Burn NFT IP POST Create IP Collection PUT Create IP Collection (Idempotent) GET Get IP Collection GET Get All IP Collections GET Get IP Assets in Collection GET Get IP Asset POST Create IP Asset PUT Create IP Asset (Idempotent) PATCH Update IP Asset GET Get IP Action GET Get IP Asset License GET Get IP Asset Graph NFT Collections POST Create Collection PUT Create Collection (Idempotent) GET Get All Collections GET Get Collection Info PATCH Update Collection PUT Set Royalties GET Get Royalties Configuration DEL Remove Royalties PUT Set Base URI GET Get Base URI PUT Set Transferability GET Get Transferability NFT Templates POST Create Template PUT Create Template with ID GET Get Template GET Get All Templates PATCH Edit Template DEL Delete Template Verifiable Credentials POST Create Credential template POST Issue Credential GET Get Credential by Credential ID GET Get Credential by NFT ID GET Get Credential by NFT Locator GET Retrieve credential nfts POST Verify Credential DEL Revoke Credential Verifiable Credential Types POST Create Credential Type PUT Create Credential Type with Name GET Get a Credential Type Headless Checkout POST Create Order GET Get Order PATCH Edit Order GET Check Token Support Action Status GET Get Action Status Admin GET Get Usage Get Credential by Credential ID cURL Copy Ask AI curl --request GET \\ --url https://staging.crossmint.com/api/v1-alpha1/credentials/{id} \\ --header 'X-API-KEY: <api-key>' 200 400 404 Copy Ask AI { \"value\" : { \"id\" : \"<CREDENTIAL_ID>\" , \"credentialSubject\" : { \"id\" : \"0xSUBJECT_ADDRESS\" , \"...additional fields\" : \"...\" }, \"nft\" : { \"tokenId\" : \"<tokenId>\" , \"chain\" : \"polygon\" , \"contractAddress\" : \"<collection_contract_address>\" }, \"expirationDate\" : \"2234-12-12\" , \"@context\" : [ \"https://www.w3.org/2018/credentials/v1\" , \"https://github.com/haardikk21/ethereum-eip712-signature-2021-spec/blob/main/index.html\" ], \"issuer\" : { \"id\" : \"did:0xISSUER_ADDRESS\" }, \"type\" : [ \"VerifiableCredential\" , \"64f0c05641a512c86786fd3b\" ], \"issuanceDate\" : \"2023-08-31T16:34:33.854Z\" , \"proof\" : { \"proofValue\" : \"ProofValue\" , \"...additional required fields\" : \"...\" } } } GET https://staging.crossmint.com/api https://www.crossmint.com/api / v1-alpha1 / credentials / {id} Try it Get Credential by Credential ID cURL Copy Ask AI curl --request GET \\ --url https://staging.crossmint.com/api/v1-alpha1/credentials/{id} \\ --header 'X-API-KEY: <api-key>' 200 400 404 Copy Ask AI { \"value\" : { \"id\" : \"<CREDENTIAL_ID>\" , \"credentialSubject\" : { \"id\" : \"0xSUBJECT_ADDRESS\" , \"...additional fields\" : \"...\" }, \"nft\" : { \"tokenId\" : \"<tokenId>\" , \"chain\" : \"polygon\" , \"contractAddress\" : \"<collection_contract_address>\" }, \"expirationDate\" : \"2234-12-12\" , \"@context\" : [ \"https://www.w3.org/2018/credentials/v1\" , \"https://github.com/haardikk21/ethereum-eip712-signature-2021-spec/blob/main/index.html\" ], \"issuer\" : { \"id\" : \"did:0xISSUER_ADDRESS\" }, \"type\" : [ \"VerifiableCredential\" , \"64f0c05641a512c86786fd3b\" ], \"issuanceDate\" : \"2023-08-31T16:34:33.854Z\" , \"proof\" : { \"proofValue\" : \"ProofValue\" , \"...additional required fields\" : \"...\" } } } This is an alpha API and subject to change. Authorizations ​ X-API-KEY string header required Key obtained from the Crossmint developer console, reflecting the API scope granted. Path Parameters ​ id string required Unique ID of the credential as returned in the Verifiable Credential NFT creation response. Format is: urn:uuid:<UUID> Response 200 200 400 404 application/json Success. The credential object Was this page helpful? Yes No Issue Credential Get Credential by NFT ID Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 618
  },
  {
    "id": "https://docs.crossmint.com/api-reference/verifiable-credentials/credentials/retrieve-credential-by-nft#chunk_0",
    "url": "https://docs.crossmint.com/api-reference/verifiable-credentials/credentials/retrieve-credential-by-nft",
    "title": "Get Credential by NFT ID - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Verifiable Credentials Get Credential by NFT ID Documentation API Reference SDK Reference CLI Solution Guides Changelog API Reference Introduction Wallets POST Create Wallet GET Get Wallet By Locator GET Get Wallet Balance POST Fund Wallet GET Get NFTs from Wallet POST Create Transaction GET Get Transaction GET Get Wallet Transactions POST Approve Transaction POST Create Signature GET Get All Signatures GET Get Signature POST Approve Signature POST Create Delegated Signer GET Get Delegated Signer POST Transfer Token NFTs POST Mint NFT PUT Mint NFT with ID POST Mint SFT GET Get All NFTs GET Mint Status PATCH Edit NFT DEL Burn NFT IP POST Create IP Collection PUT Create IP Collection (Idempotent) GET Get IP Collection GET Get All IP Collections GET Get IP Assets in Collection GET Get IP Asset POST Create IP Asset PUT Create IP Asset (Idempotent) PATCH Update IP Asset GET Get IP Action GET Get IP Asset License GET Get IP Asset Graph NFT Collections POST Create Collection PUT Create Collection (Idempotent) GET Get All Collections GET Get Collection Info PATCH Update Collection PUT Set Royalties GET Get Royalties Configuration DEL Remove Royalties PUT Set Base URI GET Get Base URI PUT Set Transferability GET Get Transferability NFT Templates POST Create Template PUT Create Template with ID GET Get Template GET Get All Templates PATCH Edit Template DEL Delete Template Verifiable Credentials POST Create Credential template POST Issue Credential GET Get Credential by Credential ID GET Get Credential by NFT ID GET Get Credential by NFT Locator GET Retrieve credential nfts POST Verify Credential DEL Revoke Credential Verifiable Credential Types POST Create Credential Type PUT Create Credential Type with Name GET Get a Credential Type Headless Checkout POST Create Order GET Get Order PATCH Edit Order GET Check Token Support Action Status GET Get Action Status Admin GET Get Usage Get Credential by NFT ID cURL Copy Ask AI curl --request GET \\ --url https://staging.crossmint.com/api/v1-alpha1/credentials/templates/{collectionId}/nfts/{id}/credentials \\ --header 'X-API-KEY: <api-key>' 200 400 404 Copy Ask AI { \"value\" : { \"id\" : \"<CREDENTIAL_ID>\" , \"credentialSubject\" : { \"id\" : \"0xSUBJECT_ADDRESS\" , \"...additional fields\" : \"...\" }, \"nft\" : { \"tokenId\" : \"<tokenId>\" , \"chain\" : \"polygon\" , \"contractAddress\" : \"<collection_contract_address>\" }, \"expirationDate\" : \"2234-12-12\" , \"@context\" : [ \"https://www.w3.org/2018/credentials/v1\" , \"https://github.com/haardikk21/ethereum-eip712-signature-2021-spec/blob/main/index.html\" ], \"issuer\" : { \"id\" : \"did:0xISSUER_ADDRESS\" }, \"type\" : [ \"VerifiableCredential\" , \"64f0c05641a512c86786fd3b\" ], \"issuanceDate\" : \"2023-08-31T16:34:33.854Z\" , \"proof\" : { \"proofValue\" : \"ProofValue\" , \"...additional required fields\" : \"...\" } } } GET https://staging.crossmint.com/api https://www.crossmint.com/api / v1-alpha1 / credentials / templates / {collectionId} / nfts / {id} / credentials Try it Get Credential by NFT ID cURL Copy Ask AI curl --request GET \\ --url https://staging.crossmint.com/api/v1-alpha1/credentials/templates/{collectionId}/nfts/{id}/credentials \\ --header 'X-API-KEY: <api-key>' 200 400 404 Copy Ask AI { \"value\" : { \"id\" : \"<CREDENTIAL_ID>\" , \"credentialSubject\" : { \"id\" : \"0xSUBJECT_ADDRESS\" , \"...additional fields\" : \"...\" }, \"nft\" : { \"tokenId\" : \"<tokenId>\" , \"chain\" : \"polygon\" , \"contractAddress\" : \"<collection_contract_address>\" }, \"expirationDate\" : \"2234-12-12\" , \"@context\" : [ \"https://www.w3.org/2018/credentials/v1\" , \"https://github.com/haardikk21/ethereum-eip712-signature-2021-spec/blob/main/index.html\" ], \"issuer\" : { \"id\" : \"did:0xISSUER_ADDRESS\" }, \"type\" : [ \"VerifiableCredential\" , \"64f0c05641a512c86786fd3b\" ], \"issuanceDate\" : \"2023-08-31T16:34:33.854Z\" , \"proof\" : { \"proofValue\" : \"ProofValue\" , \"...additional required fields\" : \"...\" } } } This is an alpha API and subject to change. Authorizations ​ X-API-KEY string header required Key obtained from the Crossmint developer console, reflecting the API scope granted. Path Parameters ​ collectionId string required The credential's template id. ​ id string required UUID of the NFT returned in the NFT creation response. Format is: <UUID> . Response 200 200 400 404 application/json Success. The credential object Was this page helpful? Yes No Get Credential by Credential ID Get Credential by NFT Locator Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 634
  },
  {
    "id": "https://docs.crossmint.com/api-reference/verifiable-credentials/credentials/retrieve-credential-by-nft-locator#chunk_0",
    "url": "https://docs.crossmint.com/api-reference/verifiable-credentials/credentials/retrieve-credential-by-nft-locator",
    "title": "Get Credential by NFT Locator - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Verifiable Credentials Get Credential by NFT Locator Documentation API Reference SDK Reference CLI Solution Guides Changelog API Reference Introduction Wallets POST Create Wallet GET Get Wallet By Locator GET Get Wallet Balance POST Fund Wallet GET Get NFTs from Wallet POST Create Transaction GET Get Transaction GET Get Wallet Transactions POST Approve Transaction POST Create Signature GET Get All Signatures GET Get Signature POST Approve Signature POST Create Delegated Signer GET Get Delegated Signer POST Transfer Token NFTs POST Mint NFT PUT Mint NFT with ID POST Mint SFT GET Get All NFTs GET Mint Status PATCH Edit NFT DEL Burn NFT IP POST Create IP Collection PUT Create IP Collection (Idempotent) GET Get IP Collection GET Get All IP Collections GET Get IP Assets in Collection GET Get IP Asset POST Create IP Asset PUT Create IP Asset (Idempotent) PATCH Update IP Asset GET Get IP Action GET Get IP Asset License GET Get IP Asset Graph NFT Collections POST Create Collection PUT Create Collection (Idempotent) GET Get All Collections GET Get Collection Info PATCH Update Collection PUT Set Royalties GET Get Royalties Configuration DEL Remove Royalties PUT Set Base URI GET Get Base URI PUT Set Transferability GET Get Transferability NFT Templates POST Create Template PUT Create Template with ID GET Get Template GET Get All Templates PATCH Edit Template DEL Delete Template Verifiable Credentials POST Create Credential template POST Issue Credential GET Get Credential by Credential ID GET Get Credential by NFT ID GET Get Credential by NFT Locator GET Retrieve credential nfts POST Verify Credential DEL Revoke Credential Verifiable Credential Types POST Create Credential Type PUT Create Credential Type with Name GET Get a Credential Type Headless Checkout POST Create Order GET Get Order PATCH Edit Order GET Check Token Support Action Status GET Get Action Status Admin GET Get Usage Get Credential by NFT Locator cURL Copy Ask AI curl --request GET \\ --url https://staging.crossmint.com/api/v1-alpha1/nfts/{nftLocator}/credentials \\ --header 'X-API-KEY: <api-key>' 200 400 404 Copy Ask AI { \"value\" : { \"id\" : \"<CREDENTIAL_ID>\" , \"credentialSubject\" : { \"id\" : \"0xSUBJECT_ADDRESS\" , \"...additional fields\" : \"...\" }, \"nft\" : { \"tokenId\" : \"<tokenId>\" , \"chain\" : \"polygon\" , \"contractAddress\" : \"<collection_contract_address>\" }, \"expirationDate\" : \"2234-12-12\" , \"@context\" : [ \"https://www.w3.org/2018/credentials/v1\" , \"https://github.com/haardikk21/ethereum-eip712-signature-2021-spec/blob/main/index.html\" ], \"issuer\" : { \"id\" : \"did:0xISSUER_ADDRESS\" }, \"type\" : [ \"VerifiableCredential\" , \"64f0c05641a512c86786fd3b\" ], \"issuanceDate\" : \"2023-08-31T16:34:33.854Z\" , \"proof\" : { \"proofValue\" : \"ProofValue\" , \"...additional required fields\" : \"...\" } } } GET https://staging.crossmint.com/api https://www.crossmint.com/api / v1-alpha1 / nfts / {nftLocator} / credentials Try it Get Credential by NFT Locator cURL Copy Ask AI curl --request GET \\ --url https://staging.crossmint.com/api/v1-alpha1/nfts/{nftLocator}/credentials \\ --header 'X-API-KEY: <api-key>' 200 400 404 Copy Ask AI { \"value\" : { \"id\" : \"<CREDENTIAL_ID>\" , \"credentialSubject\" : { \"id\" : \"0xSUBJECT_ADDRESS\" , \"...additional fields\" : \"...\" }, \"nft\" : { \"tokenId\" : \"<tokenId>\" , \"chain\" : \"polygon\" , \"contractAddress\" : \"<collection_contract_address>\" }, \"expirationDate\" : \"2234-12-12\" , \"@context\" : [ \"https://www.w3.org/2018/credentials/v1\" , \"https://github.com/haardikk21/ethereum-eip712-signature-2021-spec/blob/main/index.html\" ], \"issuer\" : { \"id\" : \"did:0xISSUER_ADDRESS\" }, \"type\" : [ \"VerifiableCredential\" , \"64f0c05641a512c86786fd3b\" ], \"issuanceDate\" : \"2023-08-31T16:34:33.854Z\" , \"proof\" : { \"proofValue\" : \"ProofValue\" , \"...additional required fields\" : \"...\" } } } This is an alpha API and subject to change. Authorizations ​ X-API-KEY string header required Key obtained from the Crossmint developer console, reflecting the API scope granted. Path Parameters ​ nftLocator string required NFT on chain locator, in the format of <chain>:<contract_address>:<tokenId> Response 200 200 400 404 application/json Success. The credential object Was this page helpful? Yes No Get Credential by NFT ID Retrieve credential nfts Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 613
  },
  {
    "id": "https://docs.crossmint.com/api-reference/verifiable-credentials/credentials/retrieve-credential-nfts#chunk_0",
    "url": "https://docs.crossmint.com/api-reference/verifiable-credentials/credentials/retrieve-credential-nfts",
    "title": "Retrieve credential nfts - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Documentation API Reference SDK Reference CLI Solution Guides Changelog API Reference Introduction Wallets POST Create Wallet GET Get Wallet By Locator GET Get Wallet Balance POST Fund Wallet GET Get NFTs from Wallet POST Create Transaction GET Get Transaction GET Get Wallet Transactions POST Approve Transaction POST Create Signature GET Get All Signatures GET Get Signature POST Approve Signature POST Create Delegated Signer GET Get Delegated Signer POST Transfer Token NFTs POST Mint NFT PUT Mint NFT with ID POST Mint SFT GET Get All NFTs GET Mint Status PATCH Edit NFT DEL Burn NFT IP POST Create IP Collection PUT Create IP Collection (Idempotent) GET Get IP Collection GET Get All IP Collections GET Get IP Assets in Collection GET Get IP Asset POST Create IP Asset PUT Create IP Asset (Idempotent) PATCH Update IP Asset GET Get IP Action GET Get IP Asset License GET Get IP Asset Graph NFT Collections POST Create Collection PUT Create Collection (Idempotent) GET Get All Collections GET Get Collection Info PATCH Update Collection PUT Set Royalties GET Get Royalties Configuration DEL Remove Royalties PUT Set Base URI GET Get Base URI PUT Set Transferability GET Get Transferability NFT Templates POST Create Template PUT Create Template with ID GET Get Template GET Get All Templates PATCH Edit Template DEL Delete Template Verifiable Credentials POST Create Credential template POST Issue Credential GET Get Credential by Credential ID GET Get Credential by NFT ID GET Get Credential by NFT Locator GET Retrieve credential nfts POST Verify Credential DEL Revoke Credential Verifiable Credential Types POST Create Credential Type PUT Create Credential Type with Name GET Get a Credential Type Headless Checkout POST Create Order GET Get Order PATCH Edit Order GET Check Token Support Action Status GET Get Action Status Admin GET Get Usage This is an alpha API and subject to change. Was this page helpful? Yes No Get Credential by NFT Locator Verify Credential Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 341
  },
  {
    "id": "https://docs.crossmint.com/api-reference/verifiable-credentials/credentials/revoke-credential#chunk_0",
    "url": "https://docs.crossmint.com/api-reference/verifiable-credentials/credentials/revoke-credential",
    "title": "Revoke Credential - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Verifiable Credentials Revoke Credential Documentation API Reference SDK Reference CLI Solution Guides Changelog API Reference Introduction Wallets POST Create Wallet GET Get Wallet By Locator GET Get Wallet Balance POST Fund Wallet GET Get NFTs from Wallet POST Create Transaction GET Get Transaction GET Get Wallet Transactions POST Approve Transaction POST Create Signature GET Get All Signatures GET Get Signature POST Approve Signature POST Create Delegated Signer GET Get Delegated Signer POST Transfer Token NFTs POST Mint NFT PUT Mint NFT with ID POST Mint SFT GET Get All NFTs GET Mint Status PATCH Edit NFT DEL Burn NFT IP POST Create IP Collection PUT Create IP Collection (Idempotent) GET Get IP Collection GET Get All IP Collections GET Get IP Assets in Collection GET Get IP Asset POST Create IP Asset PUT Create IP Asset (Idempotent) PATCH Update IP Asset GET Get IP Action GET Get IP Asset License GET Get IP Asset Graph NFT Collections POST Create Collection PUT Create Collection (Idempotent) GET Get All Collections GET Get Collection Info PATCH Update Collection PUT Set Royalties GET Get Royalties Configuration DEL Remove Royalties PUT Set Base URI GET Get Base URI PUT Set Transferability GET Get Transferability NFT Templates POST Create Template PUT Create Template with ID GET Get Template GET Get All Templates PATCH Edit Template DEL Delete Template Verifiable Credentials POST Create Credential template POST Issue Credential GET Get Credential by Credential ID GET Get Credential by NFT ID GET Get Credential by NFT Locator GET Retrieve credential nfts POST Verify Credential DEL Revoke Credential Verifiable Credential Types POST Create Credential Type PUT Create Credential Type with Name GET Get a Credential Type Headless Checkout POST Create Order GET Get Order PATCH Edit Order GET Check Token Support Action Status GET Get Action Status Admin GET Get Usage Revoke Credential cURL Copy Ask AI curl --request DELETE \\ --url https://staging.crossmint.com/api/v1-alpha1/credentials/{id} \\ --header 'X-API-KEY: <api-key>' 200 403 404 503 Copy Ask AI { \"actionId\" : \"201520fc-e0eb-4698-a2f3-c6b50cc7c894\" , \"action\" : \"nfts.delete\" , \"status\" : \"pending OR succeeded\" , \"data\" : { \"chain\" : \"polygon\" , \"txId\" : \"succeeded status ONLY - 0x69cf6d971e6745f25f683db9c87663839be02bdaa4a70f0724f490d7335b0081\" , \"collection\" : { \"id\" : \"default-polygon\" , \"contractAddress\" : \"0x67a602CBb306b3DBaaC7ECf55b72EED0E04Dc785\" }, \"token\" : { \"id\" : \"799a6f68-e2ea-4126-8577-4298dfcf900c\" , \"tokenId\" : \"7\" } }, \"startedAt\" : \"2024-01-10T23:01:45.000Z\" , \"completedAt\" : \"succeeded status ONLY - 2024-01-10T23:02:00.000Z\" , \"resource\" : \"https://staging.crossmint.com/api/2022-06-09/collections/default-polygon/nfts/201520fc-e0eb-4698-a2f3-c6b50cc7c894\" } DELETE https://staging.crossmint.com/api https://www.crossmint.com/api / v1-alpha1 / credentials / {id} Try it Revoke Credential cURL Copy Ask AI curl --request DELETE \\ --url https://staging.crossmint.com/api/v1-alpha1/credentials/{id} \\ --header 'X-API-KEY: <api-key>' 200 403 404 503 Copy Ask AI { \"actionId\" : \"201520fc-e0eb-4698-a2f3-c6b50cc7c894\" , \"action\" : \"nfts.delete\" , \"status\" : \"pending OR succeeded\" , \"data\" : { \"chain\" : \"polygon\" , \"txId\" : \"succeeded status ONLY - 0x69cf6d971e6745f25f683db9c87663839be02bdaa4a70f0724f490d7335b0081\" , \"collection\" : { \"id\" : \"default-polygon\" , \"contractAddress\" : \"0x67a602CBb306b3DBaaC7ECf55b72EED0E04Dc785\" }, \"token\" : { \"id\" : \"799a6f68-e2ea-4126-8577-4298dfcf900c\" , \"tokenId\" : \"7\" } }, \"startedAt\" : \"2024-01-10T23:01:45.000Z\" , \"completedAt\" : \"succeeded status ONLY - 2024-01-10T23:02:00.000Z\" , \"resource\" : \"https://staging.crossmint.com/api/2022-06-09/collections/default-polygon/nfts/201520fc-e0eb-4698-a2f3-c6b50cc7c894\" } This is an alpha API and subject to change. Authorizations ​ X-API-KEY string header required Key obtained from the Crossmint developer console, reflecting the API scope granted. Path Parameters ​ id string required Unique ID of the credential as returned in the NFT creation response. Format is: urn:uuid:<UUID> Response 200 200 403 404 503 application/json Success The response is of type object . Was this page helpful? Yes No Verify Credential Create Credential Type Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 592
  },
  {
    "id": "https://docs.crossmint.com/api-reference/verifiable-credentials/credentials/verify-credential#chunk_0",
    "url": "https://docs.crossmint.com/api-reference/verifiable-credentials/credentials/verify-credential",
    "title": "Verify Credential - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Verifiable Credentials Verify Credential Documentation API Reference SDK Reference CLI Solution Guides Changelog API Reference Introduction Wallets POST Create Wallet GET Get Wallet By Locator GET Get Wallet Balance POST Fund Wallet GET Get NFTs from Wallet POST Create Transaction GET Get Transaction GET Get Wallet Transactions POST Approve Transaction POST Create Signature GET Get All Signatures GET Get Signature POST Approve Signature POST Create Delegated Signer GET Get Delegated Signer POST Transfer Token NFTs POST Mint NFT PUT Mint NFT with ID POST Mint SFT GET Get All NFTs GET Mint Status PATCH Edit NFT DEL Burn NFT IP POST Create IP Collection PUT Create IP Collection (Idempotent) GET Get IP Collection GET Get All IP Collections GET Get IP Assets in Collection GET Get IP Asset POST Create IP Asset PUT Create IP Asset (Idempotent) PATCH Update IP Asset GET Get IP Action GET Get IP Asset License GET Get IP Asset Graph NFT Collections POST Create Collection PUT Create Collection (Idempotent) GET Get All Collections GET Get Collection Info PATCH Update Collection PUT Set Royalties GET Get Royalties Configuration DEL Remove Royalties PUT Set Base URI GET Get Base URI PUT Set Transferability GET Get Transferability NFT Templates POST Create Template PUT Create Template with ID GET Get Template GET Get All Templates PATCH Edit Template DEL Delete Template Verifiable Credentials POST Create Credential template POST Issue Credential GET Get Credential by Credential ID GET Get Credential by NFT ID GET Get Credential by NFT Locator GET Retrieve credential nfts POST Verify Credential DEL Revoke Credential Verifiable Credential Types POST Create Credential Type PUT Create Credential Type with Name GET Get a Credential Type Headless Checkout POST Create Order GET Get Order PATCH Edit Order GET Check Token Support Action Status GET Get Action Status Admin GET Get Usage Verify Credential cURL Copy Ask AI curl --request POST \\ --url https://staging.crossmint.com/api/v1-alpha1/credentials/verification/verify \\ --header 'Content-Type: application/json' \\ --header 'X-API-KEY: <api-key>' \\ --data '{ \"credential\": {} }' 200 valid 200 revoked 200 expired 200 invalid_proof Copy Ask AI { \"isValid\" : true , \"error\" : null } POST https://staging.crossmint.com/api https://www.crossmint.com/api / v1-alpha1 / credentials / verification / verify Try it Verify Credential cURL Copy Ask AI curl --request POST \\ --url https://staging.crossmint.com/api/v1-alpha1/credentials/verification/verify \\ --header 'Content-Type: application/json' \\ --header 'X-API-KEY: <api-key>' \\ --data '{ \"credential\": {} }' 200 valid 200 revoked 200 expired 200 invalid_proof Copy Ask AI { \"isValid\" : true , \"error\" : null } This is an alpha API and subject to change. It is impractical to use the API Playground to verify a credential. Instead you can copy the sample code for your preferred language in the righthand sidebar and fill in the JSON of the credential you intend to verify. Here is an example of how to verify a credential using javascript: verifyVC.js Copy Ask AI const options = { method: \"POST\" , headers: { \"X-API-KEY\" : \"YOUR_API_KEY\" , \"Content-Type\" : \"application/json\" , }, body: '{\"credential\": {\"id\":\"urn:uuid:e31316b6-3be1-49af-a95f-c7f4c3f52aa1\",\"credentialSubject\":{\"course\":\"Blockchain 101\",\"passed\":true,\"id\":\"did:polygon:0x6C3b3225759Cbda68F96378A9F0277B4374f9F06\"},\"expirationDate\":\"2034-02-03\",\"nft\":{\"tokenId\":\"1\",\"chain\":\"polygon\",\"contractAddress\":\"0xdC444A3F4768185497Dae6250E2F348b99bE89F3\"},\"issuer\":{\"id\":\"did:polygon:0xa22CaDEdE67c11dc1444E507fDdd9b831a67aBd1\"},\"type\":[\"VerifiableCredential\",\"65c15243e9bee8deac219d57\"],\"issuanceDate\":\"2024-02-05T23:21:32.641Z\",\"@context\":[\"https://www.w3.org/2018/credentials/v1\",\"https://github.com/haardikk21/ethereum-eip712-signature-2021-spec/blob/main/index.html\",\"DUMMY_CROSSMINT/65c15243e9bee8deac219d57\"],\"proof\":{\"verificationMethod\":\"did:polygon:0xa22CaDEdE67c11dc1444E507fDdd9b831a67aBd1#ethereumAddress\",\"ethereumAddress\":null,\"created\":\"2024-02-05T23:22:24.058Z\",\"proofPurpose\":\"assertionMethod\",\"type\":\"EthereumEip712Signature2021\",\"proofValue\":\"0x748a55d9770cbc6ef16689f0d9547355e288bcce03a8949a32d2aac59244cb9e08cbf54c960bc00d133fc51e6651a4ac1366aeda320dd121777118a4e74980631b\",\"eip712\":{\"domain\":{\"name\":\"Krebit\",\"version\":\"0.1\",\"chainId\":4,\"verifyingContract\":\"0xD8393a735e8b7B6E199db9A537cf27C61Aa74954\"},\"types\":{\"VerifiableCredential\":[{\"name\":\"@context\",\"type\":\"string[]\"},{\"name\":\"type\",\"type\":\"string[]\"},{\"name\":\"id\",\"type\":\"string\"},{\"name\":\"issuer\",\"type\":\"Issuer\"},{\"name\":\"credentialSubject\",\"type\":\"CredentialSubject\"},{\"name\":\"issuanceDate\",\"type\":\"string\"},{\"name\":\"expirationDate\",\"type\":\"string\"},{\"name\":\"nft\",\"type\":\"Nft\"}],\"CredentialSubject\":[{\"name\":\"id\",\"type\":\"string\"},{\"name\":\"course\",\"type\":\"string\"},{\"name\":\"passed\",\"type\":\"bool\"}],\"Issuer\":[{\"name\":\"id\",\"type\":\"string\"}],\"Nft\":[{\"name\":\"tokenId\",\"type\":\"string\"},{\"name\":\"contractAddress\",\"type\":\"string\"},{\"name\":\"chain\",\"type\":\"string\"}]},\"primaryType\":\"VerifiableCredential\"}}}}', }; // note the gigantic VC JSON string in the body property fetch ( \"https://staging.crossmint.com/api/v1-alpha1/credentials/verification/verify\" , options ) . then (( response ) => response . json ()) . then (( response ) => console . log ( response )) . catch (( err ) => console . error ( err )); 200 valid 200 revoked 200 expired 200 invalid_proof Copy Ask AI { \"isValid\" : true , \"error\" : null } Authorizations ​ X-API-KEY string header required Key obtained from the Crossmint developer console, reflecting the API scope granted. Body application/json Response 200 200 400 application/json Success. The response is of type object . Was this page helpful? Yes No Retrieve credential nfts Revoke Credential Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 630
  },
  {
    "id": "https://docs.crossmint.com/api-reference/verifiable-credentials/templates/create-template#chunk_0",
    "url": "https://docs.crossmint.com/api-reference/verifiable-credentials/templates/create-template",
    "title": "Create Credential template - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Verifiable Credentials Create Credential template Documentation API Reference SDK Reference CLI Solution Guides Changelog API Reference Introduction Wallets POST Create Wallet GET Get Wallet By Locator GET Get Wallet Balance POST Fund Wallet GET Get NFTs from Wallet POST Create Transaction GET Get Transaction GET Get Wallet Transactions POST Approve Transaction POST Create Signature GET Get All Signatures GET Get Signature POST Approve Signature POST Create Delegated Signer GET Get Delegated Signer POST Transfer Token NFTs POST Mint NFT PUT Mint NFT with ID POST Mint SFT GET Get All NFTs GET Mint Status PATCH Edit NFT DEL Burn NFT IP POST Create IP Collection PUT Create IP Collection (Idempotent) GET Get IP Collection GET Get All IP Collections GET Get IP Assets in Collection GET Get IP Asset POST Create IP Asset PUT Create IP Asset (Idempotent) PATCH Update IP Asset GET Get IP Action GET Get IP Asset License GET Get IP Asset Graph NFT Collections POST Create Collection PUT Create Collection (Idempotent) GET Get All Collections GET Get Collection Info PATCH Update Collection PUT Set Royalties GET Get Royalties Configuration DEL Remove Royalties PUT Set Base URI GET Get Base URI PUT Set Transferability GET Get Transferability NFT Templates POST Create Template PUT Create Template with ID GET Get Template GET Get All Templates PATCH Edit Template DEL Delete Template Verifiable Credentials POST Create Credential template POST Issue Credential GET Get Credential by Credential ID GET Get Credential by NFT ID GET Get Credential by NFT Locator GET Retrieve credential nfts POST Verify Credential DEL Revoke Credential Verifiable Credential Types POST Create Credential Type PUT Create Credential Type with Name GET Get a Credential Type Headless Checkout POST Create Order GET Get Order PATCH Edit Order GET Check Token Support Action Status GET Get Action Status Admin GET Get Usage Create Credential template cURL Copy Ask AI curl --request POST \\ --url https://staging.crossmint.com/api/v1-alpha1/credentials/templates/ \\ --header 'Content-Type: application/json' \\ --header 'X-API-KEY: <api-key>' \\ --data '{ \"metadata\": { \"name\": \"Verifiable Credential\", \"imageUrl\": \"https://www.crossmint.com/assets/crossmint/logo.png\", \"description\": \"The owner of this credential is authorized.\" }, \"chain\": \"polygon\", \"credentials\": { \"type\": \"crossmint:5fe6040e-07a1-48bb-97a3-b588a7e927d2:CourseCompletionCertificate\", \"storage\": \"crossmint\", \"delegatedStorageEndpoint\": \"unknown\", \"encryption\": \"crossmint-recoverable\", \"delegatedSignature\": \"undefined\" } }' 200 400 Copy Ask AI \"Success. Refer to the standard nft create collection response for more details.\" POST https://staging.crossmint.com/api https://www.crossmint.com/api / v1-alpha1 / credentials / templates / Try it Create Credential template cURL Copy Ask AI curl --request POST \\ --url https://staging.crossmint.com/api/v1-alpha1/credentials/templates/ \\ --header 'Content-Type: application/json' \\ --header 'X-API-KEY: <api-key>' \\ --data '{ \"metadata\": { \"name\": \"Verifiable Credential\", \"imageUrl\": \"https://www.crossmint.com/assets/crossmint/logo.png\", \"description\": \"The owner of this credential is authorized.\" }, \"chain\": \"polygon\", \"credentials\": { \"type\": \"crossmint:5fe6040e-07a1-48bb-97a3-b588a7e927d2:CourseCompletionCertificate\", \"storage\": \"crossmint\", \"delegatedStorageEndpoint\": \"unknown\", \"encryption\": \"crossmint-recoverable\", \"delegatedSignature\": \"undefined\" } }' 200 400 Copy Ask AI \"Success. Refer to the standard nft create collection response for more details.\" This is an alpha API and subject to change. Authorizations ​ X-API-KEY string header required Key obtained from the Crossmint developer console, reflecting the API scope granted. Body application/json Response 200 200 400 application/json Success. Refer to the standard create collection response for more details. The response is of type string . Example : \"Success. Refer to the standard nft create collection response for more details.\" Was this page helpful? Yes No Delete Template Issue Credential Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 558
  },
  {
    "id": "https://docs.crossmint.com/api-reference/verifiable-credentials/types/create-named-type#chunk_0",
    "url": "https://docs.crossmint.com/api-reference/verifiable-credentials/types/create-named-type",
    "title": "Create Credential Type with Name - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Verifiable Credential Types Create Credential Type with Name Documentation API Reference SDK Reference CLI Solution Guides Changelog API Reference Introduction Wallets POST Create Wallet GET Get Wallet By Locator GET Get Wallet Balance POST Fund Wallet GET Get NFTs from Wallet POST Create Transaction GET Get Transaction GET Get Wallet Transactions POST Approve Transaction POST Create Signature GET Get All Signatures GET Get Signature POST Approve Signature POST Create Delegated Signer GET Get Delegated Signer POST Transfer Token NFTs POST Mint NFT PUT Mint NFT with ID POST Mint SFT GET Get All NFTs GET Mint Status PATCH Edit NFT DEL Burn NFT IP POST Create IP Collection PUT Create IP Collection (Idempotent) GET Get IP Collection GET Get All IP Collections GET Get IP Assets in Collection GET Get IP Asset POST Create IP Asset PUT Create IP Asset (Idempotent) PATCH Update IP Asset GET Get IP Action GET Get IP Asset License GET Get IP Asset Graph NFT Collections POST Create Collection PUT Create Collection (Idempotent) GET Get All Collections GET Get Collection Info PATCH Update Collection PUT Set Royalties GET Get Royalties Configuration DEL Remove Royalties PUT Set Base URI GET Get Base URI PUT Set Transferability GET Get Transferability NFT Templates POST Create Template PUT Create Template with ID GET Get Template GET Get All Templates PATCH Edit Template DEL Delete Template Verifiable Credentials POST Create Credential template POST Issue Credential GET Get Credential by Credential ID GET Get Credential by NFT ID GET Get Credential by NFT Locator GET Retrieve credential nfts POST Verify Credential DEL Revoke Credential Verifiable Credential Types POST Create Credential Type PUT Create Credential Type with Name GET Get a Credential Type Headless Checkout POST Create Order GET Get Order PATCH Edit Order GET Check Token Support Action Status GET Get Action Status Admin GET Get Usage Create Credential Type with Name cURL Copy Ask AI curl --request PUT \\ --url https://staging.crossmint.com/api/v1-alpha1/credentials/types/{typeName} \\ --header 'Content-Type: application/json' \\ --header 'X-API-KEY: <api-key>' \\ --data '{ \"$schema\": \"https://json-schema.org/draft/2020-12/schema\", \"title\": \"Course completion\", \"description\": \"Describes the course completed and the assigned grade\", \"type\": \"object\", \"properties\": { \"credentialSubject\": { \"type\": \"object\", \"properties\": { \"course\": { \"type\": \"string\" }, \"grade\": { \"type\": \"string\" }, \"id\": { \"type\": \"string\" } }, \"required\": [ \"course\", \"grade\" ], \"additionalProperties\": false } } }' 200 400 Copy Ask AI { \"id\" : \"crossmint:bfb292e7-2700-4924-9213-478f3d71f2d8:CourseCompletionCertificate\" , \"typeSchema\" : { \"$schema\" : \"https://json-schema.org/draft/2020-12/schema\" , \"title\" : \"Course completion\" , \"description\" : \"Describes the course completed and the assigned grade\" , \"type\" : \"object\" , \"properties\" : { \"credentialSubject\" : { \"type\" : \"object\" , \"properties\" : { \"course\" : { \"type\" : \"string\" }, \"grade\" : { \"type\" : \"string\" }, \"id\" : { \"type\" : \"string\" } }, \"required\" : [ \"course\" , \"grade\" ], \"additionalProperties\" : false } }, \"$id\" : \"https://staging.crossmint.com/api/v1-alpha1/credentials/types/crossmint:bfb292e7-2700-4924-9213-478f3d71f2d8:CourseCompletionCertificate\" } } PUT https://staging.crossmint.com/api https://www.crossmint.com/api / v1-alpha1 / credentials / types / {typeName} Try it Create Credential Type with Name cURL Copy Ask AI curl --request PUT \\ --url https://staging.crossmint.com/api/v1-alpha1/credentials/types/{typeName} \\ --header 'Content-Type: application/json' \\ --header 'X-API-KEY: <api-key>' \\ --data '{ \"$schema\": \"https://json-schema.org/draft/2020-12/schema\", \"title\": \"Course completion\", \"description\": \"Describes the course completed and the assigned grade\", \"type\": \"object\", \"properties\": { \"credentialSubject\": { \"type\": \"object\", \"properties\": { \"course\": { \"type\": \"string\" }, \"grade\": { \"type\": \"string\" }, \"id\": { \"type\": \"string\" } }, \"required\": [ \"course\", \"grade\" ], \"additionalProperties\": false } } }' 200 400 Copy Ask AI { \"id\" : \"crossmint:bfb292e7-2700-4924-9213-478f3d71f2d8:CourseCompletionCertificate\" , \"typeSchema\" : { \"$schema\" : \"https://json-schema.org/draft/2020-12/schema\" , \"title\" : \"Course completion\" , \"description\" : \"Describes the course completed and the assigned grade\" , \"type\" : \"object\" , \"properties\" : { \"credentialSubject\" : { \"type\" : \"object\" , \"properties\" : { \"course\" : { \"type\" : \"string\" }, \"grade\" : { \"type\" : \"string\" }, \"id\" : { \"type\" : \"string\" } }, \"required\" : [ \"course\" , \"grade\" ], \"additionalProperties\" : false } }, \"$id\" : \"https://staging.crossmint.com/api/v1-alpha1/credentials/types/crossmint:bfb292e7-2700-4924-9213-478f3d71f2d8:CourseCompletionCertificate\" } } This is an alpha API and subject to change. Authorizations ​ X-API-KEY string header required Key obtained from the Crossmint developer console, reflecting the API scope granted. Path Parameters ​ typeName string required The name of the type. Body application/json Create Type Import Type Response 200 200 400 application/json Success. The response is of type object . Was this page helpful? Yes No Create Credential Type Get a Credential Type Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 740
  },
  {
    "id": "https://docs.crossmint.com/api-reference/verifiable-credentials/types/create-type#chunk_0",
    "url": "https://docs.crossmint.com/api-reference/verifiable-credentials/types/create-type",
    "title": "Create Credential Type - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Verifiable Credential Types Create Credential Type Documentation API Reference SDK Reference CLI Solution Guides Changelog API Reference Introduction Wallets POST Create Wallet GET Get Wallet By Locator GET Get Wallet Balance POST Fund Wallet GET Get NFTs from Wallet POST Create Transaction GET Get Transaction GET Get Wallet Transactions POST Approve Transaction POST Create Signature GET Get All Signatures GET Get Signature POST Approve Signature POST Create Delegated Signer GET Get Delegated Signer POST Transfer Token NFTs POST Mint NFT PUT Mint NFT with ID POST Mint SFT GET Get All NFTs GET Mint Status PATCH Edit NFT DEL Burn NFT IP POST Create IP Collection PUT Create IP Collection (Idempotent) GET Get IP Collection GET Get All IP Collections GET Get IP Assets in Collection GET Get IP Asset POST Create IP Asset PUT Create IP Asset (Idempotent) PATCH Update IP Asset GET Get IP Action GET Get IP Asset License GET Get IP Asset Graph NFT Collections POST Create Collection PUT Create Collection (Idempotent) GET Get All Collections GET Get Collection Info PATCH Update Collection PUT Set Royalties GET Get Royalties Configuration DEL Remove Royalties PUT Set Base URI GET Get Base URI PUT Set Transferability GET Get Transferability NFT Templates POST Create Template PUT Create Template with ID GET Get Template GET Get All Templates PATCH Edit Template DEL Delete Template Verifiable Credentials POST Create Credential template POST Issue Credential GET Get Credential by Credential ID GET Get Credential by NFT ID GET Get Credential by NFT Locator GET Retrieve credential nfts POST Verify Credential DEL Revoke Credential Verifiable Credential Types POST Create Credential Type PUT Create Credential Type with Name GET Get a Credential Type Headless Checkout POST Create Order GET Get Order PATCH Edit Order GET Check Token Support Action Status GET Get Action Status Admin GET Get Usage Create Credential Type cURL Copy Ask AI curl --request POST \\ --url https://staging.crossmint.com/api/v1-alpha1/credentials/types \\ --header 'Content-Type: application/json' \\ --header 'X-API-KEY: <api-key>' \\ --data '{ \"$schema\": \"https://json-schema.org/draft/2020-12/schema\", \"title\": \"Course completion\", \"description\": \"Describes the course completed and the assigned grade\", \"type\": \"object\", \"properties\": { \"credentialSubject\": { \"type\": \"object\", \"properties\": { \"course\": { \"type\": \"string\" }, \"grade\": { \"type\": \"string\" }, \"id\": { \"type\": \"string\" } }, \"required\": [ \"course\", \"grade\" ], \"additionalProperties\": false } } }' 200 400 Copy Ask AI { \"id\" : \"crossmint:bfb292e7-2700-4924-9213-478f3d71f2d8:CourseCompletionCertificate\" , \"typeSchema\" : { \"$schema\" : \"https://json-schema.org/draft/2020-12/schema\" , \"title\" : \"Course completion\" , \"description\" : \"Describes the course completed and the assigned grade\" , \"type\" : \"object\" , \"properties\" : { \"credentialSubject\" : { \"type\" : \"object\" , \"properties\" : { \"course\" : { \"type\" : \"string\" }, \"grade\" : { \"type\" : \"string\" }, \"id\" : { \"type\" : \"string\" } }, \"required\" : [ \"course\" , \"grade\" ], \"additionalProperties\" : false } }, \"$id\" : \"https://staging.crossmint.com/api/v1-alpha1/credentials/types/crossmint:bfb292e7-2700-4924-9213-478f3d71f2d8:CourseCompletionCertificate\" } } POST https://staging.crossmint.com/api https://www.crossmint.com/api / v1-alpha1 / credentials / types Try it Create Credential Type cURL Copy Ask AI curl --request POST \\ --url https://staging.crossmint.com/api/v1-alpha1/credentials/types \\ --header 'Content-Type: application/json' \\ --header 'X-API-KEY: <api-key>' \\ --data '{ \"$schema\": \"https://json-schema.org/draft/2020-12/schema\", \"title\": \"Course completion\", \"description\": \"Describes the course completed and the assigned grade\", \"type\": \"object\", \"properties\": { \"credentialSubject\": { \"type\": \"object\", \"properties\": { \"course\": { \"type\": \"string\" }, \"grade\": { \"type\": \"string\" }, \"id\": { \"type\": \"string\" } }, \"required\": [ \"course\", \"grade\" ], \"additionalProperties\": false } } }' 200 400 Copy Ask AI { \"id\" : \"crossmint:bfb292e7-2700-4924-9213-478f3d71f2d8:CourseCompletionCertificate\" , \"typeSchema\" : { \"$schema\" : \"https://json-schema.org/draft/2020-12/schema\" , \"title\" : \"Course completion\" , \"description\" : \"Describes the course completed and the assigned grade\" , \"type\" : \"object\" , \"properties\" : { \"credentialSubject\" : { \"type\" : \"object\" , \"properties\" : { \"course\" : { \"type\" : \"string\" }, \"grade\" : { \"type\" : \"string\" }, \"id\" : { \"type\" : \"string\" } }, \"required\" : [ \"course\" , \"grade\" ], \"additionalProperties\" : false } }, \"$id\" : \"https://staging.crossmint.com/api/v1-alpha1/credentials/types/crossmint:bfb292e7-2700-4924-9213-478f3d71f2d8:CourseCompletionCertificate\" } } This is an alpha API and subject to change. Authorizations ​ X-API-KEY string header required Key obtained from the Crossmint developer console, reflecting the API scope granted. Body application/json Create Type Import Type Response 200 200 400 application/json Success. The response is of type object . Was this page helpful? Yes No Revoke Credential Create Credential Type with Name Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 721
  },
  {
    "id": "https://docs.crossmint.com/api-reference/verifiable-credentials/types/get-type#chunk_0",
    "url": "https://docs.crossmint.com/api-reference/verifiable-credentials/types/get-type",
    "title": "Get a Credential Type - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Verifiable Credential Types Get a Credential Type Documentation API Reference SDK Reference CLI Solution Guides Changelog API Reference Introduction Wallets POST Create Wallet GET Get Wallet By Locator GET Get Wallet Balance POST Fund Wallet GET Get NFTs from Wallet POST Create Transaction GET Get Transaction GET Get Wallet Transactions POST Approve Transaction POST Create Signature GET Get All Signatures GET Get Signature POST Approve Signature POST Create Delegated Signer GET Get Delegated Signer POST Transfer Token NFTs POST Mint NFT PUT Mint NFT with ID POST Mint SFT GET Get All NFTs GET Mint Status PATCH Edit NFT DEL Burn NFT IP POST Create IP Collection PUT Create IP Collection (Idempotent) GET Get IP Collection GET Get All IP Collections GET Get IP Assets in Collection GET Get IP Asset POST Create IP Asset PUT Create IP Asset (Idempotent) PATCH Update IP Asset GET Get IP Action GET Get IP Asset License GET Get IP Asset Graph NFT Collections POST Create Collection PUT Create Collection (Idempotent) GET Get All Collections GET Get Collection Info PATCH Update Collection PUT Set Royalties GET Get Royalties Configuration DEL Remove Royalties PUT Set Base URI GET Get Base URI PUT Set Transferability GET Get Transferability NFT Templates POST Create Template PUT Create Template with ID GET Get Template GET Get All Templates PATCH Edit Template DEL Delete Template Verifiable Credentials POST Create Credential template POST Issue Credential GET Get Credential by Credential ID GET Get Credential by NFT ID GET Get Credential by NFT Locator GET Retrieve credential nfts POST Verify Credential DEL Revoke Credential Verifiable Credential Types POST Create Credential Type PUT Create Credential Type with Name GET Get a Credential Type Headless Checkout POST Create Order GET Get Order PATCH Edit Order GET Check Token Support Action Status GET Get Action Status Admin GET Get Usage Get a Credential Type cURL Copy Ask AI curl --request GET \\ --url https://staging.crossmint.com/api/v1-alpha1/credentials/types/{typeName} \\ --header 'X-API-KEY: <api-key>' 200 400 Copy Ask AI { \"id\" : \"crossmint:bfb292e7-2700-4924-9213-478f3d71f2d8:CourseCompletionCertificate\" , \"typeSchema\" : { \"$schema\" : \"https://json-schema.org/draft/2020-12/schema\" , \"title\" : \"Course completion\" , \"description\" : \"Describes the course completed and the assigned grade\" , \"type\" : \"object\" , \"properties\" : { \"credentialSubject\" : { \"type\" : \"object\" , \"properties\" : { \"course\" : { \"type\" : \"string\" }, \"grade\" : { \"type\" : \"string\" }, \"id\" : { \"type\" : \"string\" } }, \"required\" : [ \"course\" , \"grade\" ], \"additionalProperties\" : false } }, \"$id\" : \"https://staging.crossmint.com/api/v1-alpha1/credentials/types/crossmint:bfb292e7-2700-4924-9213-478f3d71f2d8:CourseCompletionCertificate\" } } GET https://staging.crossmint.com/api https://www.crossmint.com/api / v1-alpha1 / credentials / types / {typeName} Try it Get a Credential Type cURL Copy Ask AI curl --request GET \\ --url https://staging.crossmint.com/api/v1-alpha1/credentials/types/{typeName} \\ --header 'X-API-KEY: <api-key>' 200 400 Copy Ask AI { \"id\" : \"crossmint:bfb292e7-2700-4924-9213-478f3d71f2d8:CourseCompletionCertificate\" , \"typeSchema\" : { \"$schema\" : \"https://json-schema.org/draft/2020-12/schema\" , \"title\" : \"Course completion\" , \"description\" : \"Describes the course completed and the assigned grade\" , \"type\" : \"object\" , \"properties\" : { \"credentialSubject\" : { \"type\" : \"object\" , \"properties\" : { \"course\" : { \"type\" : \"string\" }, \"grade\" : { \"type\" : \"string\" }, \"id\" : { \"type\" : \"string\" } }, \"required\" : [ \"course\" , \"grade\" ], \"additionalProperties\" : false } }, \"$id\" : \"https://staging.crossmint.com/api/v1-alpha1/credentials/types/crossmint:bfb292e7-2700-4924-9213-478f3d71f2d8:CourseCompletionCertificate\" } } This is an alpha API and subject to change. Authorizations ​ X-API-KEY string header required Key obtained from the Crossmint developer console, reflecting the API scope granted. Path Parameters ​ typeName string required The name of the type or the type's id. Response 200 200 400 application/json Success. The response is of type object . Was this page helpful? Yes No Create Credential Type with Name Create Order Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 621
  },
  {
    "id": "https://docs.crossmint.com/api-reference/wallets/approve-signature#chunk_0",
    "url": "https://docs.crossmint.com/api-reference/wallets/approve-signature",
    "title": "Approve Signature - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Wallets Approve Signature Documentation API Reference SDK Reference CLI Solution Guides Changelog API Reference Introduction Wallets POST Create Wallet GET Get Wallet By Locator GET Get Wallet Balance POST Fund Wallet GET Get NFTs from Wallet POST Create Transaction GET Get Transaction GET Get Wallet Transactions POST Approve Transaction POST Create Signature GET Get All Signatures GET Get Signature POST Approve Signature POST Create Delegated Signer GET Get Delegated Signer POST Transfer Token NFTs POST Mint NFT PUT Mint NFT with ID POST Mint SFT GET Get All NFTs GET Mint Status PATCH Edit NFT DEL Burn NFT IP POST Create IP Collection PUT Create IP Collection (Idempotent) GET Get IP Collection GET Get All IP Collections GET Get IP Assets in Collection GET Get IP Asset POST Create IP Asset PUT Create IP Asset (Idempotent) PATCH Update IP Asset GET Get IP Action GET Get IP Asset License GET Get IP Asset Graph NFT Collections POST Create Collection PUT Create Collection (Idempotent) GET Get All Collections GET Get Collection Info PATCH Update Collection PUT Set Royalties GET Get Royalties Configuration DEL Remove Royalties PUT Set Base URI GET Get Base URI PUT Set Transferability GET Get Transferability NFT Templates POST Create Template PUT Create Template with ID GET Get Template GET Get All Templates PATCH Edit Template DEL Delete Template Verifiable Credentials POST Create Credential template POST Issue Credential GET Get Credential by Credential ID GET Get Credential by NFT ID GET Get Credential by NFT Locator GET Retrieve credential nfts POST Verify Credential DEL Revoke Credential Verifiable Credential Types POST Create Credential Type PUT Create Credential Type with Name GET Get a Credential Type Headless Checkout POST Create Order GET Get Order PATCH Edit Order GET Check Token Support Action Status GET Get Action Status Admin GET Get Usage Approve Signature cURL Copy Ask AI curl --request POST \\ --url https://staging.crossmint.com/api/2025-06-09/wallets/{walletLocator}/signatures/{signatureId}/approvals \\ --header 'Content-Type: application/json' \\ --header 'X-API-KEY: <x-api-key>' \\ --data '{ \"approvals\": [ { \"signer\": \"external-wallet:0x1234...\", \"signature\": \"0x1234567890abcdef...\" } ] }' 201 400 404 Copy Ask AI { \"id\" : \"sig-b984491a-5785-43c0-8811-45d46fe6e520\" , \"type\" : \"message\" , \"chainType\" : \"evm\" , \"walletType\" : \"smart\" , \"status\" : \"awaiting-approval\" , \"params\" : { \"message\" : \"Hello, world!\" , \"signer\" : { \"type\" : \"external-wallet\" , \"address\" : \"0xB17Ea8d34078424B9d7D126E444d5F2C3CC5c81E\" , \"locator\" : \"external-wallet:0xB17Ea8d34078424B9d7D126E444d5F2C3CC5c81E\" }, \"chain\" : \"polygon\" }, \"approvals\" : { \"pending\" : [ { \"signer\" : { \"type\" : \"external-wallet\" , \"address\" : \"0xB17Ea8d34078424B9d7D126E444d5F2C3CC5c81E\" , \"locator\" : \"external-wallet:0xB17Ea8d34078424B9d7D126E444d5F2C3CC5c81E\" }, \"message\" : \"Hello world!\" } ], \"submitted\" : [] }, \"createdAt\" : \"2024-01-01T00:00:00Z\" } POST https://staging.crossmint.com/api https://www.crossmint.com/api / 2025-06-09 / wallets / {walletLocator} / signatures / {signatureId} / approvals Try it Approve Signature cURL Copy Ask AI curl --request POST \\ --url https://staging.crossmint.com/api/2025-06-09/wallets/{walletLocator}/signatures/{signatureId}/approvals \\ --header 'Content-Type: application/json' \\ --header 'X-API-KEY: <x-api-key>' \\ --data '{ \"approvals\": [ { \"signer\": \"external-wallet:0x1234...\", \"signature\": \"0x1234567890abcdef...\" } ] }' 201 400 404 Copy Ask AI { \"id\" : \"sig-b984491a-5785-43c0-8811-45d46fe6e520\" , \"type\" : \"message\" , \"chainType\" : \"evm\" , \"walletType\" : \"smart\" , \"status\" : \"awaiting-approval\" , \"params\" : { \"message\" : \"Hello, world!\" , \"signer\" : { \"type\" : \"external-wallet\" , \"address\" : \"0xB17Ea8d34078424B9d7D126E444d5F2C3CC5c81E\" , \"locator\" : \"external-wallet:0xB17Ea8d34078424B9d7D126E444d5F2C3CC5c81E\" }, \"chain\" : \"polygon\" }, \"approvals\" : { \"pending\" : [ { \"signer\" : { \"type\" : \"external-wallet\" , \"address\" : \"0xB17Ea8d34078424B9d7D126E444d5F2C3CC5c81E\" , \"locator\" : \"external-wallet:0xB17Ea8d34078424B9d7D126E444d5F2C3CC5c81E\" }, \"message\" : \"Hello world!\" } ], \"submitted\" : [] }, \"createdAt\" : \"2024-01-01T00:00:00Z\" } Headers ​ X-API-KEY string required API key required for authentication Path Parameters ​ walletLocator string required A wallet locator can be of the format: <walletAddress> email:<email>:<chainType>[:<walletType>] (walletType defaults to 'smart') userId:<userId>:<chainType>[:<walletType>] (white label user example) phoneNumber:<phoneNumber>:<chainType>[:<walletType>] twitter:<handle>:<chainType>[:<walletType>] x:<handle>:<chainType>[:<walletType>] me:<chainType>[:<walletType>] (Use when calling from the client side with a client API key) ​ signatureId string required Body application/json Input for submitting one or more approvals Response 201 201 400 404 application/json The signature has been successfully approved. Complete signature response including status, signing requirements, and wallet type specific data Was this page helpful? Yes No Get Signature Create Delegated Signer Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 684
  },
  {
    "id": "https://docs.crossmint.com/api-reference/wallets/approve-transaction#chunk_0",
    "url": "https://docs.crossmint.com/api-reference/wallets/approve-transaction",
    "title": "Approve Transaction - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Wallets Approve Transaction Documentation API Reference SDK Reference CLI Solution Guides Changelog API Reference Introduction Wallets POST Create Wallet GET Get Wallet By Locator GET Get Wallet Balance POST Fund Wallet GET Get NFTs from Wallet POST Create Transaction GET Get Transaction GET Get Wallet Transactions POST Approve Transaction POST Create Signature GET Get All Signatures GET Get Signature POST Approve Signature POST Create Delegated Signer GET Get Delegated Signer POST Transfer Token NFTs POST Mint NFT PUT Mint NFT with ID POST Mint SFT GET Get All NFTs GET Mint Status PATCH Edit NFT DEL Burn NFT IP POST Create IP Collection PUT Create IP Collection (Idempotent) GET Get IP Collection GET Get All IP Collections GET Get IP Assets in Collection GET Get IP Asset POST Create IP Asset PUT Create IP Asset (Idempotent) PATCH Update IP Asset GET Get IP Action GET Get IP Asset License GET Get IP Asset Graph NFT Collections POST Create Collection PUT Create Collection (Idempotent) GET Get All Collections GET Get Collection Info PATCH Update Collection PUT Set Royalties GET Get Royalties Configuration DEL Remove Royalties PUT Set Base URI GET Get Base URI PUT Set Transferability GET Get Transferability NFT Templates POST Create Template PUT Create Template with ID GET Get Template GET Get All Templates PATCH Edit Template DEL Delete Template Verifiable Credentials POST Create Credential template POST Issue Credential GET Get Credential by Credential ID GET Get Credential by NFT ID GET Get Credential by NFT Locator GET Retrieve credential nfts POST Verify Credential DEL Revoke Credential Verifiable Credential Types POST Create Credential Type PUT Create Credential Type with Name GET Get a Credential Type Headless Checkout POST Create Order GET Get Order PATCH Edit Order GET Check Token Support Action Status GET Get Action Status Admin GET Get Usage Approve Transaction cURL Copy Ask AI curl --request POST \\ --url https://staging.crossmint.com/api/2025-06-09/wallets/{walletLocator}/transactions/{transactionId}/approvals \\ --header 'Content-Type: application/json' \\ --header 'X-API-KEY: <x-api-key>' \\ --data '{ \"approvals\": [ { \"signer\": \"external-wallet:0x1234...\", \"signature\": \"0x1234567890abcdef...\" } ] }' 201 400 404 409 422 Copy Ask AI { \"chainType\" : \"evm\" , \"walletType\" : \"smart\" , \"params\" : { \"calls\" : [ { \"address\" : \"<string>\" , \"functionName\" : \"<string>\" , \"abi\" : [ { \"type\" : \"error\" , \"inputs\" : [ \"<any>\" ], \"name\" : \"<string>\" } ], \"args\" : [ \"<any>\" ], \"value\" : \"0\" } ], \"chain\" : \"abstract\" , \"signer\" : { \"type\" : \"external-wallet\" , \"address\" : \"<string>\" , \"locator\" : \"<string>\" } }, \"onChain\" : { \"userOperation\" : { \"sender\" : \"<string>\" , \"nonce\" : \"<string>\" , \"callData\" : \"<string>\" , \"callGasLimit\" : \"<string>\" , \"verificationGasLimit\" : \"<string>\" , \"preVerificationGas\" : \"<string>\" , \"maxFeePerGas\" : \"<string>\" , \"maxPriorityFeePerGas\" : \"<string>\" , \"paymaster\" : \"<string>\" , \"paymasterVerificationGasLimit\" : \"<string>\" , \"paymasterData\" : \"<string>\" , \"paymasterPostOpGasLimit\" : \"<string>\" , \"signature\" : \"<string>\" , \"factory\" : \"<string>\" , \"factoryData\" : \"<string>\" }, \"userOperationHash\" : \"<string>\" , \"txId\" : \"<string>\" , \"explorerLink\" : \"<string>\" }, \"id\" : \"<string>\" , \"status\" : \"awaiting-approval\" , \"approvals\" : { \"pending\" : [ { \"signer\" : { \"type\" : \"external-wallet\" , \"address\" : \"<string>\" , \"locator\" : \"<string>\" }, \"message\" : \"<string>\" } ], \"submitted\" : [ { \"signature\" : \"<string>\" , \"submittedAt\" : \"2024-01-01T00:00:00.000Z\" , \"signer\" : { \"type\" : \"external-wallet\" , \"address\" : \"<string>\" , \"locator\" : \"<string>\" }, \"message\" : \"<string>\" , \"metadata\" : { \"deviceInfo\" : \"<string>\" , \"ipAddress\" : \"<string>\" , \"userAgent\" : \"<string>\" } } ], \"required\" : 123 }, \"createdAt\" : \"2024-01-01T00:00:00.000Z\" , \"completedAt\" : \"2024-01-01T00:00:00.000Z\" , \"error\" : { \"reason\" : \"build_failed\" , \"message\" : \"<string>\" }, \"sendParams\" : { \"token\" : \"<string>\" , \"params\" : { \"amount\" : \"<string>\" , \"recipient\" : \"<string>\" , \"recipientAddress\" : \"<string>\" } } } POST https://staging.crossmint.com/api https://www.crossmint.com/api / 2025-06-09 / wallets / {walletLocator} / transactions / {transactionId} / approvals Try it Approve Transaction cURL Copy Ask AI curl --request POST \\ --url https://staging.crossmint.com/api/2025-06-09/wallets/{walletLocator}/transactions/{transactionId}/approvals \\ --header 'Content-Type: application/json' \\ --header 'X-API-KEY: <x-api-key>' \\ --data '{ \"approvals\": [ { \"signer\": \"external-wallet:0x1234...\", \"signature\": \"0x1234567890abcdef...\" } ] }' 201 400 404 409 422 Copy Ask AI { \"chainType\" : \"evm\" , \"walletType\" : \"smart\" , \"params\" : { \"calls\" : [ { \"address\" : \"<string>\" , \"functionName\" : \"<string>\" , \"abi\" : [ { \"type\" : \"error\" , \"inputs\" : [ \"<any>\" ], \"name\" : \"<string>\" } ], \"args\" : [ \"<any>\" ], \"value\" : \"0\" } ], \"chain\" : \"abstract\" , \"signer\" : { \"type\" : \"external-wallet\" , \"address\" : \"<string>\" , \"locator\" : \"<string>\" } }, \"onChain\" : { \"userOperation\" : { \"sender\" : \"<string>\" , \"nonce\" : \"<string>\" , \"callData\" : \"<string>\" , \"callGasLimit\" : \"<string>\" , \"verificationGasLimit\" : \"<string>\" , \"preVerificationGas\" : \"<string>\" , \"maxFeePerGas\" : \"<string>\" , \"maxPriorityFeePerGas\" : \"<string>\" , \"paymaster\" : \"<string>\" , \"paymasterVerificationGasLimit\" : \"<string>\" , \"paymasterData\" : \"<string>\" , \"paymasterPostOpGasLimit\" : \"<string>\" , \"signature\" : \"<string>\" , \"factory\" : \"<string>\" , \"factoryData\" : \"<string>\" }, \"userOperationHash\" : \"<string>\" , \"txId\" : \"<string>\" , \"explorerLink\" : \"<string>\" }, \"id\" : \"<string>\" , \"status\" : \"awaiting-approval\" , \"approvals\" : { \"pending\" : [ { \"signer\" : { \"type\" : \"external-wallet\" , \"address\" : \"<string>\" , \"locator\" : \"<string>\" }, \"message\" : \"<string>\" } ], \"submitted\" : [ { \"signature\" : \"<string>\" , \"submittedAt\" : \"2024-01-01T00:00:00.000Z\" , \"signer\" : { \"type\" : \"external-wallet\" , \"address\" : \"<string>\" , \"locator\" : \"<string>\" }, \"message\" : \"<string>\" , \"metadata\" : { \"deviceInfo\" : \"<string>\" , \"ipAddress\" : \"<string>\" , \"userAgent\" : \"<string>\" } } ], \"required\" : 123 }, \"createdAt\" : \"2024-01-01T00:00:00.000Z\" , \"completedAt\" : \"2024-01-01T00:00:00.000Z\" , \"error\" : { \"reason\" : \"build_failed\" , \"message\" : \"<string>\" }, \"sendParams\" : { \"token\" : \"<string>\" , \"params\" : { \"amount\" : \"<string>\" , \"recipient\" : \"<string>\" , \"recipientAddress\" : \"<string>\" } } } Headers ​ X-API-KEY string required API key required for authentication Path Parameters ​ walletLocator string required A wallet locator can be of the format: <walletAddress> email:<email>:<chainType>[:<walletType>] (walletType defaults to",
    "chunk_index": 0,
    "word_count": 1000
  },
  {
    "id": "https://docs.crossmint.com/api-reference/wallets/approve-transaction#chunk_0",
    "url": "https://docs.crossmint.com/api-reference/wallets/approve-transaction",
    "title": "Approve Transaction - Crossmint Docs",
    "content": ": \"<string>\" }, \"message\" : \"<string>\" , \"metadata\" : { \"deviceInfo\" : \"<string>\" , \"ipAddress\" : \"<string>\" , \"userAgent\" : \"<string>\" } } ], \"required\" : 123 }, \"createdAt\" : \"2024-01-01T00:00:00.000Z\" , \"completedAt\" : \"2024-01-01T00:00:00.000Z\" , \"error\" : { \"reason\" : \"build_failed\" , \"message\" : \"<string>\" }, \"sendParams\" : { \"token\" : \"<string>\" , \"params\" : { \"amount\" : \"<string>\" , \"recipient\" : \"<string>\" , \"recipientAddress\" : \"<string>\" } } } Headers ​ X-API-KEY string required API key required for authentication Path Parameters ​ walletLocator string required A wallet locator can be of the format: <walletAddress> email:<email>:<chainType>[:<walletType>] (walletType defaults to 'smart') userId:<userId>:<chainType>[:<walletType>] (white label user example) phoneNumber:<phoneNumber>:<chainType>[:<walletType>] twitter:<handle>:<chainType>[:<walletType>] x:<handle>:<chainType>[:<walletType>] me:<chainType>[:<walletType>] (Use when calling from the client side with a client API key) ​ transactionId string required Body application/json Input for submitting one or more approvals Response 201 201 400 404 409 422 application/json The approval has successfully been submitted to the transaction. EVM Smart Wallet EVM MPC Wallet Solana Smart Wallet Solana MPC Wallet Stellar Smart Wallet Complete transaction response including status, signing requirements, and wallet type specific data Was this page helpful? Yes No Get Wallet Transactions Create Signature Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 200
  },
  {
    "id": "https://docs.crossmint.com/api-reference/wallets/create-signature#chunk_0",
    "url": "https://docs.crossmint.com/api-reference/wallets/create-signature",
    "title": "Create Signature - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Wallets Create Signature Documentation API Reference SDK Reference CLI Solution Guides Changelog API Reference Introduction Wallets POST Create Wallet GET Get Wallet By Locator GET Get Wallet Balance POST Fund Wallet GET Get NFTs from Wallet POST Create Transaction GET Get Transaction GET Get Wallet Transactions POST Approve Transaction POST Create Signature GET Get All Signatures GET Get Signature POST Approve Signature POST Create Delegated Signer GET Get Delegated Signer POST Transfer Token NFTs POST Mint NFT PUT Mint NFT with ID POST Mint SFT GET Get All NFTs GET Mint Status PATCH Edit NFT DEL Burn NFT IP POST Create IP Collection PUT Create IP Collection (Idempotent) GET Get IP Collection GET Get All IP Collections GET Get IP Assets in Collection GET Get IP Asset POST Create IP Asset PUT Create IP Asset (Idempotent) PATCH Update IP Asset GET Get IP Action GET Get IP Asset License GET Get IP Asset Graph NFT Collections POST Create Collection PUT Create Collection (Idempotent) GET Get All Collections GET Get Collection Info PATCH Update Collection PUT Set Royalties GET Get Royalties Configuration DEL Remove Royalties PUT Set Base URI GET Get Base URI PUT Set Transferability GET Get Transferability NFT Templates POST Create Template PUT Create Template with ID GET Get Template GET Get All Templates PATCH Edit Template DEL Delete Template Verifiable Credentials POST Create Credential template POST Issue Credential GET Get Credential by Credential ID GET Get Credential by NFT ID GET Get Credential by NFT Locator GET Retrieve credential nfts POST Verify Credential DEL Revoke Credential Verifiable Credential Types POST Create Credential Type PUT Create Credential Type with Name GET Get a Credential Type Headless Checkout POST Create Order GET Get Order PATCH Edit Order GET Check Token Support Action Status GET Get Action Status Admin GET Get Usage Create Signature cURL Copy Ask AI curl --request POST \\ --url https://staging.crossmint.com/api/2025-06-09/wallets/{walletLocator}/signatures \\ --header 'Content-Type: application/json' \\ --header 'X-API-KEY: <x-api-key>' \\ --data '{ \"type\": \"message\", \"params\": { \"message\": \"Hello, world!\", \"signer\": \"external-wallet:0xB17Ea8d34078424B9d7D126E444d5F2C3CC5c81E\", \"chain\": \"ethereum\" } }' 201 400 404 Copy Ask AI { \"id\" : \"sig-b984491a-5785-43c0-8811-45d46fe6e520\" , \"type\" : \"message\" , \"chainType\" : \"evm\" , \"walletType\" : \"smart\" , \"status\" : \"awaiting-approval\" , \"params\" : { \"message\" : \"Hello, world!\" , \"signer\" : { \"type\" : \"external-wallet\" , \"address\" : \"0xB17Ea8d34078424B9d7D126E444d5F2C3CC5c81E\" , \"locator\" : \"external-wallet:0xB17Ea8d34078424B9d7D126E444d5F2C3CC5c81E\" }, \"chain\" : \"polygon\" }, \"approvals\" : { \"pending\" : [ { \"signer\" : { \"type\" : \"external-wallet\" , \"address\" : \"0xB17Ea8d34078424B9d7D126E444d5F2C3CC5c81E\" , \"locator\" : \"external-wallet:0xB17Ea8d34078424B9d7D126E444d5F2C3CC5c81E\" }, \"message\" : \"Hello world!\" } ], \"submitted\" : [] }, \"createdAt\" : \"2024-01-01T00:00:00Z\" } POST https://staging.crossmint.com/api https://www.crossmint.com/api / 2025-06-09 / wallets / {walletLocator} / signatures Try it Create Signature cURL Copy Ask AI curl --request POST \\ --url https://staging.crossmint.com/api/2025-06-09/wallets/{walletLocator}/signatures \\ --header 'Content-Type: application/json' \\ --header 'X-API-KEY: <x-api-key>' \\ --data '{ \"type\": \"message\", \"params\": { \"message\": \"Hello, world!\", \"signer\": \"external-wallet:0xB17Ea8d34078424B9d7D126E444d5F2C3CC5c81E\", \"chain\": \"ethereum\" } }' 201 400 404 Copy Ask AI { \"id\" : \"sig-b984491a-5785-43c0-8811-45d46fe6e520\" , \"type\" : \"message\" , \"chainType\" : \"evm\" , \"walletType\" : \"smart\" , \"status\" : \"awaiting-approval\" , \"params\" : { \"message\" : \"Hello, world!\" , \"signer\" : { \"type\" : \"external-wallet\" , \"address\" : \"0xB17Ea8d34078424B9d7D126E444d5F2C3CC5c81E\" , \"locator\" : \"external-wallet:0xB17Ea8d34078424B9d7D126E444d5F2C3CC5c81E\" }, \"chain\" : \"polygon\" }, \"approvals\" : { \"pending\" : [ { \"signer\" : { \"type\" : \"external-wallet\" , \"address\" : \"0xB17Ea8d34078424B9d7D126E444d5F2C3CC5c81E\" , \"locator\" : \"external-wallet:0xB17Ea8d34078424B9d7D126E444d5F2C3CC5c81E\" }, \"message\" : \"Hello world!\" } ], \"submitted\" : [] }, \"createdAt\" : \"2024-01-01T00:00:00Z\" } Headers ​ X-API-KEY string required API key required for authentication ​ x-idempotency-key string Unique key to prevent duplicate signature creation Path Parameters ​ walletLocator string required A wallet locator can be of the format: <walletAddress> email:<email>:<chainType>[:<walletType>] (walletType defaults to 'smart') userId:<userId>:<chainType>[:<walletType>] (white label user example) phoneNumber:<phoneNumber>:<chainType>[:<walletType>] twitter:<handle>:<chainType>[:<walletType>] x:<handle>:<chainType>[:<walletType>] me:<chainType>[:<walletType>] (Use when calling from the client side with a client API key) Body application/json Message Signature Typed Data Signature Input schema for creating a new signature. The parameters vary based on the signature type. Parameters for a message signature Response 201 201 400 404 application/json The signature has been successfully created. Complete signature response including status, signing requirements, and wallet type specific data Was this page helpful? Yes No Approve Transaction Get All Signatures Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 710
  },
  {
    "id": "https://docs.crossmint.com/api-reference/wallets/create-transaction#chunk_0",
    "url": "https://docs.crossmint.com/api-reference/wallets/create-transaction",
    "title": "Create Transaction - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Wallets Create Transaction Documentation API Reference SDK Reference CLI Solution Guides Changelog API Reference Introduction Wallets POST Create Wallet GET Get Wallet By Locator GET Get Wallet Balance POST Fund Wallet GET Get NFTs from Wallet POST Create Transaction GET Get Transaction GET Get Wallet Transactions POST Approve Transaction POST Create Signature GET Get All Signatures GET Get Signature POST Approve Signature POST Create Delegated Signer GET Get Delegated Signer POST Transfer Token NFTs POST Mint NFT PUT Mint NFT with ID POST Mint SFT GET Get All NFTs GET Mint Status PATCH Edit NFT DEL Burn NFT IP POST Create IP Collection PUT Create IP Collection (Idempotent) GET Get IP Collection GET Get All IP Collections GET Get IP Assets in Collection GET Get IP Asset POST Create IP Asset PUT Create IP Asset (Idempotent) PATCH Update IP Asset GET Get IP Action GET Get IP Asset License GET Get IP Asset Graph NFT Collections POST Create Collection PUT Create Collection (Idempotent) GET Get All Collections GET Get Collection Info PATCH Update Collection PUT Set Royalties GET Get Royalties Configuration DEL Remove Royalties PUT Set Base URI GET Get Base URI PUT Set Transferability GET Get Transferability NFT Templates POST Create Template PUT Create Template with ID GET Get Template GET Get All Templates PATCH Edit Template DEL Delete Template Verifiable Credentials POST Create Credential template POST Issue Credential GET Get Credential by Credential ID GET Get Credential by NFT ID GET Get Credential by NFT Locator GET Retrieve credential nfts POST Verify Credential DEL Revoke Credential Verifiable Credential Types POST Create Credential Type PUT Create Credential Type with Name GET Get a Credential Type Headless Checkout POST Create Order GET Get Order PATCH Edit Order GET Check Token Support Action Status GET Get Action Status Admin GET Get Usage Create Transaction cURL Copy Ask AI curl --request POST \\ --url https://staging.crossmint.com/api/2025-06-09/wallets/{walletLocator}/transactions \\ --header 'Content-Type: application/json' \\ --header 'X-API-KEY: <x-api-key>' \\ --data '{ \"params\": { \"transaction\": \"<string>\", \"requiredSigners\": [ [ \"passkey:cWtP7gmZbd98HbKUuGXx5Q\", \"api-key:123456789\", \"external-wallet:0x1234567890123456789012345678901234567890\", \"email:test@example.com\", \"phone:+1234567890\" ] ], \"signer\": [ \"passkey:cWtP7gmZbd98HbKUuGXx5Q\", \"api-key:123456789\", \"external-wallet:0x1234567890123456789012345678901234567890\", \"email:test@example.com\", \"phone:+1234567890\" ] } }' 201 400 404 422 Copy Ask AI { \"chainType\" : \"evm\" , \"walletType\" : \"smart\" , \"params\" : { \"calls\" : [ { \"address\" : \"<string>\" , \"functionName\" : \"<string>\" , \"abi\" : [ { \"type\" : \"error\" , \"inputs\" : [ \"<any>\" ], \"name\" : \"<string>\" } ], \"args\" : [ \"<any>\" ], \"value\" : \"0\" } ], \"chain\" : \"abstract\" , \"signer\" : { \"type\" : \"external-wallet\" , \"address\" : \"<string>\" , \"locator\" : \"<string>\" } }, \"onChain\" : { \"userOperation\" : { \"sender\" : \"<string>\" , \"nonce\" : \"<string>\" , \"callData\" : \"<string>\" , \"callGasLimit\" : \"<string>\" , \"verificationGasLimit\" : \"<string>\" , \"preVerificationGas\" : \"<string>\" , \"maxFeePerGas\" : \"<string>\" , \"maxPriorityFeePerGas\" : \"<string>\" , \"paymaster\" : \"<string>\" , \"paymasterVerificationGasLimit\" : \"<string>\" , \"paymasterData\" : \"<string>\" , \"paymasterPostOpGasLimit\" : \"<string>\" , \"signature\" : \"<string>\" , \"factory\" : \"<string>\" , \"factoryData\" : \"<string>\" }, \"userOperationHash\" : \"<string>\" , \"txId\" : \"<string>\" , \"explorerLink\" : \"<string>\" }, \"id\" : \"<string>\" , \"status\" : \"awaiting-approval\" , \"approvals\" : { \"pending\" : [ { \"signer\" : { \"type\" : \"external-wallet\" , \"address\" : \"<string>\" , \"locator\" : \"<string>\" }, \"message\" : \"<string>\" } ], \"submitted\" : [ { \"signature\" : \"<string>\" , \"submittedAt\" : \"2024-01-01T00:00:00.000Z\" , \"signer\" : { \"type\" : \"external-wallet\" , \"address\" : \"<string>\" , \"locator\" : \"<string>\" }, \"message\" : \"<string>\" , \"metadata\" : { \"deviceInfo\" : \"<string>\" , \"ipAddress\" : \"<string>\" , \"userAgent\" : \"<string>\" } } ], \"required\" : 123 }, \"createdAt\" : \"2024-01-01T00:00:00.000Z\" , \"completedAt\" : \"2024-01-01T00:00:00.000Z\" , \"error\" : { \"reason\" : \"build_failed\" , \"message\" : \"<string>\" }, \"sendParams\" : { \"token\" : \"<string>\" , \"params\" : { \"amount\" : \"<string>\" , \"recipient\" : \"<string>\" , \"recipientAddress\" : \"<string>\" } } } POST https://staging.crossmint.com/api https://www.crossmint.com/api / 2025-06-09 / wallets / {walletLocator} / transactions Try it Create Transaction cURL Copy Ask AI curl --request POST \\ --url https://staging.crossmint.com/api/2025-06-09/wallets/{walletLocator}/transactions \\ --header 'Content-Type: application/json' \\ --header 'X-API-KEY: <x-api-key>' \\ --data '{ \"params\": { \"transaction\": \"<string>\", \"requiredSigners\": [ [ \"passkey:cWtP7gmZbd98HbKUuGXx5Q\", \"api-key:123456789\", \"external-wallet:0x1234567890123456789012345678901234567890\", \"email:test@example.com\", \"phone:+1234567890\" ] ], \"signer\": [ \"passkey:cWtP7gmZbd98HbKUuGXx5Q\", \"api-key:123456789\", \"external-wallet:0x1234567890123456789012345678901234567890\", \"email:test@example.com\", \"phone:+1234567890\" ] } }' 201 400 404 422 Copy Ask AI { \"chainType\" : \"evm\" , \"walletType\" : \"smart\" , \"params\" : { \"calls\" : [ { \"address\" : \"<string>\" , \"functionName\" : \"<string>\" , \"abi\" : [ { \"type\" : \"error\" , \"inputs\" : [ \"<any>\" ], \"name\" : \"<string>\" } ], \"args\" : [ \"<any>\" ], \"value\" : \"0\" } ], \"chain\" : \"abstract\" , \"signer\" : { \"type\" : \"external-wallet\" , \"address\" : \"<string>\" , \"locator\" : \"<string>\" } }, \"onChain\" : { \"userOperation\" : { \"sender\" : \"<string>\" , \"nonce\" : \"<string>\" , \"callData\" : \"<string>\" , \"callGasLimit\" : \"<string>\" , \"verificationGasLimit\" : \"<string>\" , \"preVerificationGas\" : \"<string>\" , \"maxFeePerGas\" : \"<string>\" , \"maxPriorityFeePerGas\" : \"<string>\" , \"paymaster\" : \"<string>\" , \"paymasterVerificationGasLimit\" : \"<string>\" , \"paymasterData\" : \"<string>\" , \"paymasterPostOpGasLimit\" : \"<string>\" , \"signature\" : \"<string>\" , \"factory\" : \"<string>\" , \"factoryData\" : \"<string>\" }, \"userOperationHash\" : \"<string>\" , \"txId\" : \"<string>\" , \"explorerLink\" : \"<string>\" }, \"id\" : \"<string>\" , \"status\" : \"awaiting-approval\" , \"approvals\" : { \"pending\" : [ { \"signer\" : { \"type\" : \"external-wallet\" , \"address\" : \"<string>\" , \"locator\" : \"<string>\" }, \"message\" : \"<string>\" } ], \"submitted\" : [ { \"signature\" : \"<string>\" , \"submittedAt\" : \"2024-01-01T00:00:00.000Z\" , \"signer\" : { \"type\" : \"external-wallet\" , \"address\" : \"<string>\" , \"locator\" : \"<string>\" }, \"message\" : \"<string>\" , \"metadata\" : { \"deviceInfo\" : \"<string>\" , \"ipAddress\" : \"<string>\" , \"userAgent\" : \"<string>\" } } ], \"required\" : 123 }, \"createdAt\" : \"2024-01-01T00:00:00.000Z\" , \"completedAt\" : \"2024-01-01T00:00:00.000Z\" , \"error\" : { \"reason\" : \"build_failed\" , \"message\" : \"<string>\" }, \"sendParams\" : { \"token\" : \"<string>\" , \"params\" : { \"amount\" : \"<string>\" , \"recipient\" : \"<string>\" , \"recipientAddress\" : \"<string>\" } } } Headers ​ X-API-KEY string required API key",
    "chunk_index": 0,
    "word_count": 1000
  },
  {
    "id": "https://docs.crossmint.com/api-reference/wallets/create-transaction#chunk_0",
    "url": "https://docs.crossmint.com/api-reference/wallets/create-transaction",
    "title": "Create Transaction - Crossmint Docs",
    "content": "[ { \"signature\" : \"<string>\" , \"submittedAt\" : \"2024-01-01T00:00:00.000Z\" , \"signer\" : { \"type\" : \"external-wallet\" , \"address\" : \"<string>\" , \"locator\" : \"<string>\" }, \"message\" : \"<string>\" , \"metadata\" : { \"deviceInfo\" : \"<string>\" , \"ipAddress\" : \"<string>\" , \"userAgent\" : \"<string>\" } } ], \"required\" : 123 }, \"createdAt\" : \"2024-01-01T00:00:00.000Z\" , \"completedAt\" : \"2024-01-01T00:00:00.000Z\" , \"error\" : { \"reason\" : \"build_failed\" , \"message\" : \"<string>\" }, \"sendParams\" : { \"token\" : \"<string>\" , \"params\" : { \"amount\" : \"<string>\" , \"recipient\" : \"<string>\" , \"recipientAddress\" : \"<string>\" } } } Headers ​ X-API-KEY string required API key required for authentication ​ x-idempotency-key string Unique key to prevent duplicate transaction creation Path Parameters ​ walletLocator string required A wallet locator can be of the format: <walletAddress> email:<email>:<chainType>[:<walletType>] (walletType defaults to 'smart') userId:<userId>:<chainType>[:<walletType>] (white label user example) phoneNumber:<phoneNumber>:<chainType>[:<walletType>] twitter:<handle>:<chainType>[:<walletType>] x:<handle>:<chainType>[:<walletType>] me:<chainType>[:<walletType>] (Use when calling from the client side with a client API key) Body application/json Solana Smart Wallet Solana MPC Wallet EVM Smart Wallet EVM MPC Wallet Stellar Smart Wallet Input schema for creating a new transaction. The parameters vary based on the wallet type (EVM vs Solana vs Stellar). Parameters for a transaction from a Solana Smart Wallet Response 201 201 400 404 422 application/json The transaction has been successfully created. EVM Smart Wallet EVM MPC Wallet Solana Smart Wallet Solana MPC Wallet Stellar Smart Wallet Complete transaction response including status, signing requirements, and wallet type specific data Was this page helpful? Yes No Get NFTs from Wallet Get Transaction Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 262
  },
  {
    "id": "https://docs.crossmint.com/api-reference/wallets/create-wallet#chunk_0",
    "url": "https://docs.crossmint.com/api-reference/wallets/create-wallet",
    "title": "Create Wallet - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Wallets Create Wallet Documentation API Reference SDK Reference CLI Solution Guides Changelog API Reference Introduction Wallets POST Create Wallet GET Get Wallet By Locator GET Get Wallet Balance POST Fund Wallet GET Get NFTs from Wallet POST Create Transaction GET Get Transaction GET Get Wallet Transactions POST Approve Transaction POST Create Signature GET Get All Signatures GET Get Signature POST Approve Signature POST Create Delegated Signer GET Get Delegated Signer POST Transfer Token NFTs POST Mint NFT PUT Mint NFT with ID POST Mint SFT GET Get All NFTs GET Mint Status PATCH Edit NFT DEL Burn NFT IP POST Create IP Collection PUT Create IP Collection (Idempotent) GET Get IP Collection GET Get All IP Collections GET Get IP Assets in Collection GET Get IP Asset POST Create IP Asset PUT Create IP Asset (Idempotent) PATCH Update IP Asset GET Get IP Action GET Get IP Asset License GET Get IP Asset Graph NFT Collections POST Create Collection PUT Create Collection (Idempotent) GET Get All Collections GET Get Collection Info PATCH Update Collection PUT Set Royalties GET Get Royalties Configuration DEL Remove Royalties PUT Set Base URI GET Get Base URI PUT Set Transferability GET Get Transferability NFT Templates POST Create Template PUT Create Template with ID GET Get Template GET Get All Templates PATCH Edit Template DEL Delete Template Verifiable Credentials POST Create Credential template POST Issue Credential GET Get Credential by Credential ID GET Get Credential by NFT ID GET Get Credential by NFT Locator GET Retrieve credential nfts POST Verify Credential DEL Revoke Credential Verifiable Credential Types POST Create Credential Type PUT Create Credential Type with Name GET Get a Credential Type Headless Checkout POST Create Order GET Get Order PATCH Edit Order GET Check Token Support Action Status GET Get Action Status Admin GET Get Usage Create Wallet cURL Copy Ask AI curl --request POST \\ --url https://staging.crossmint.com/api/2025-06-09/wallets \\ --header 'Content-Type: application/json' \\ --header 'X-API-KEY: <x-api-key>' \\ --data '{ \"chainType\": \"evm\", \"type\": \"smart\", \"config\": { \"adminSigner\": { \"type\": \"external-wallet\", \"address\": \"0x1234567890123456789012345678901234567890\" } }, \"owner\": \"email:user@example.com\" }' 201 400 Copy Ask AI { \"chainType\" : \"evm\" , \"type\" : \"smart\" , \"owner\" : \"email:user@example.com\" , \"address\" : \"0x1234567890123456789012345678901234567890\" , \"config\" : { \"adminSigner\" : { \"type\" : \"external-wallet\" , \"address\" : \"0x1234567890123456789012345678901234567890\" , \"locator\" : \"external-wallet:0x1234567890123456789012345678901234567890\" } } } POST https://staging.crossmint.com/api https://www.crossmint.com/api / 2025-06-09 / wallets Try it Create Wallet cURL Copy Ask AI curl --request POST \\ --url https://staging.crossmint.com/api/2025-06-09/wallets \\ --header 'Content-Type: application/json' \\ --header 'X-API-KEY: <x-api-key>' \\ --data '{ \"chainType\": \"evm\", \"type\": \"smart\", \"config\": { \"adminSigner\": { \"type\": \"external-wallet\", \"address\": \"0x1234567890123456789012345678901234567890\" } }, \"owner\": \"email:user@example.com\" }' 201 400 Copy Ask AI { \"chainType\" : \"evm\" , \"type\" : \"smart\" , \"owner\" : \"email:user@example.com\" , \"address\" : \"0x1234567890123456789012345678901234567890\" , \"config\" : { \"adminSigner\" : { \"type\" : \"external-wallet\" , \"address\" : \"0x1234567890123456789012345678901234567890\" , \"locator\" : \"external-wallet:0x1234567890123456789012345678901234567890\" } } } Headers ​ X-API-KEY string required API key required for authentication ​ x-idempotency-key string Unique key to prevent duplicate wallet creation Body application/json EVM wallet creation input Solana wallet creation input Aptos wallet creation input Sui wallet creation input Stellar wallet creation input EVM wallet creation input Response 201 201 400 application/json Returns an existing wallet (200) if one already exists for the provided owner or idempotencyKey, or creates and returns a new wallet (201). The response includes the wallet details and whether it was newly created. EVM wallet output Solana wallet output Aptos wallet output Sui wallet output Stellar wallet output Complete wallet configuration including type-specific settings Was this page helpful? Yes No Introduction Get Wallet By Locator Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 613
  },
  {
    "id": "https://docs.crossmint.com/api-reference/wallets/fund-wallet#chunk_0",
    "url": "https://docs.crossmint.com/api-reference/wallets/fund-wallet",
    "title": "Fund Wallet - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Wallets Fund Wallet Documentation API Reference SDK Reference CLI Solution Guides Changelog API Reference Introduction Wallets POST Create Wallet GET Get Wallet By Locator GET Get Wallet Balance POST Fund Wallet GET Get NFTs from Wallet POST Create Transaction GET Get Transaction GET Get Wallet Transactions POST Approve Transaction POST Create Signature GET Get All Signatures GET Get Signature POST Approve Signature POST Create Delegated Signer GET Get Delegated Signer POST Transfer Token NFTs POST Mint NFT PUT Mint NFT with ID POST Mint SFT GET Get All NFTs GET Mint Status PATCH Edit NFT DEL Burn NFT IP POST Create IP Collection PUT Create IP Collection (Idempotent) GET Get IP Collection GET Get All IP Collections GET Get IP Assets in Collection GET Get IP Asset POST Create IP Asset PUT Create IP Asset (Idempotent) PATCH Update IP Asset GET Get IP Action GET Get IP Asset License GET Get IP Asset Graph NFT Collections POST Create Collection PUT Create Collection (Idempotent) GET Get All Collections GET Get Collection Info PATCH Update Collection PUT Set Royalties GET Get Royalties Configuration DEL Remove Royalties PUT Set Base URI GET Get Base URI PUT Set Transferability GET Get Transferability NFT Templates POST Create Template PUT Create Template with ID GET Get Template GET Get All Templates PATCH Edit Template DEL Delete Template Verifiable Credentials POST Create Credential template POST Issue Credential GET Get Credential by Credential ID GET Get Credential by NFT ID GET Get Credential by NFT Locator GET Retrieve credential nfts POST Verify Credential DEL Revoke Credential Verifiable Credential Types POST Create Credential Type PUT Create Credential Type with Name GET Get a Credential Type Headless Checkout POST Create Order GET Get Order PATCH Edit Order GET Check Token Support Action Status GET Get Action Status Admin GET Get Usage Fund Wallet cURL Copy Ask AI curl --request POST \\ --url https://staging.crossmint.com/api/v1-alpha2/wallets/{walletLocator}/balances \\ --header 'Content-Type: application/json' \\ --header 'X-API-KEY: <x-api-key>' \\ --data '{ \"amount\": 10, \"token\": \"usdc\", \"chain\": \"base-sepolia\" }' 201 404 Copy Ask AI [ { \"token\" : \"usdc\" , \"decimals\" : 6 , \"balances\" : { \"base\" : \"121000000\" , \"ethereum\" : \"121000000\" , \"total\" : \"242000000\" } }, { \"token\" : \"eth\" , \"decimals\" : 18 , \"balances\" : { \"ethereum\" : \"1000000000000000000\" , \"total\" : \"1000000000000000000\" } } ] POST https://staging.crossmint.com/api https://www.crossmint.com/api / v1-alpha2 / wallets / {walletLocator} / balances Try it Fund Wallet cURL Copy Ask AI curl --request POST \\ --url https://staging.crossmint.com/api/v1-alpha2/wallets/{walletLocator}/balances \\ --header 'Content-Type: application/json' \\ --header 'X-API-KEY: <x-api-key>' \\ --data '{ \"amount\": 10, \"token\": \"usdc\", \"chain\": \"base-sepolia\" }' 201 404 Copy Ask AI [ { \"token\" : \"usdc\" , \"decimals\" : 6 , \"balances\" : { \"base\" : \"121000000\" , \"ethereum\" : \"121000000\" , \"total\" : \"242000000\" } }, { \"token\" : \"eth\" , \"decimals\" : 18 , \"balances\" : { \"ethereum\" : \"1000000000000000000\" , \"total\" : \"1000000000000000000\" } } ] This is an alpha API and subject to change. This endpoint is only available in staging and only supports USDC and USDXM. Headers ​ X-API-KEY string required API key required for authentication Path Parameters ​ walletLocator string required A wallet locator can be of the format: <walletAddress> email:<email>:<walletType> userId:<userId>:<walletType> userId:<userId>:<walletType> (white label user example) phoneNumber:<phoneNumber>:<walletType> twitter:<handle>:<walletType> x:<handle>:<walletType> me:<walletType> (Use when calling from the client side with a client API key) Body application/json Parameters required to fund a wallet Response 201 201 404 application/json Funds sent successfully. The balances of the wallet Was this page helpful? Yes No Get Wallet Balance Get NFTs from Wallet Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 605
  },
  {
    "id": "https://docs.crossmint.com/api-reference/wallets/get-nfts-from-wallet#chunk_0",
    "url": "https://docs.crossmint.com/api-reference/wallets/get-nfts-from-wallet",
    "title": "Get NFTs from Wallet - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Wallets Get NFTs from Wallet Documentation API Reference SDK Reference CLI Solution Guides Changelog API Reference Introduction Wallets POST Create Wallet GET Get Wallet By Locator GET Get Wallet Balance POST Fund Wallet GET Get NFTs from Wallet POST Create Transaction GET Get Transaction GET Get Wallet Transactions POST Approve Transaction POST Create Signature GET Get All Signatures GET Get Signature POST Approve Signature POST Create Delegated Signer GET Get Delegated Signer POST Transfer Token NFTs POST Mint NFT PUT Mint NFT with ID POST Mint SFT GET Get All NFTs GET Mint Status PATCH Edit NFT DEL Burn NFT IP POST Create IP Collection PUT Create IP Collection (Idempotent) GET Get IP Collection GET Get All IP Collections GET Get IP Assets in Collection GET Get IP Asset POST Create IP Asset PUT Create IP Asset (Idempotent) PATCH Update IP Asset GET Get IP Action GET Get IP Asset License GET Get IP Asset Graph NFT Collections POST Create Collection PUT Create Collection (Idempotent) GET Get All Collections GET Get Collection Info PATCH Update Collection PUT Set Royalties GET Get Royalties Configuration DEL Remove Royalties PUT Set Base URI GET Get Base URI PUT Set Transferability GET Get Transferability NFT Templates POST Create Template PUT Create Template with ID GET Get Template GET Get All Templates PATCH Edit Template DEL Delete Template Verifiable Credentials POST Create Credential template POST Issue Credential GET Get Credential by Credential ID GET Get Credential by NFT ID GET Get Credential by NFT Locator GET Retrieve credential nfts POST Verify Credential DEL Revoke Credential Verifiable Credential Types POST Create Credential Type PUT Create Credential Type with Name GET Get a Credential Type Headless Checkout POST Create Order GET Get Order PATCH Edit Order GET Check Token Support Action Status GET Get Action Status Admin GET Get Usage Get NFTs from Wallet cURL Copy Ask AI curl --request GET \\ --url https://staging.crossmint.com/api/2022-06-09/wallets/{identifier}/nfts \\ --header 'X-API-KEY: <api-key>' 200 EVM 200 EVM (with subscription) 200 Solana 400 Copy Ask AI [ { \"chain\" : \"<string>\" , \"contractAddress\" : \"<string>\" , \"tokenId\" : \"<string>\" , \"metadata\" : { \"attributes\" : [], \"collection\" : {}, \"description\" : \"<string>\" , \"image\" : \"<string>\" , \"animation_url\" : \"<string>\" , \"name\" : \"<string>\" }, \"locator\" : \"<string>\" , \"tokenStandard\" : \"<string>\" } ] GET https://staging.crossmint.com/api https://www.crossmint.com/api / 2022-06-09 / wallets / {identifier} / nfts Try it Get NFTs from Wallet cURL Copy Ask AI curl --request GET \\ --url https://staging.crossmint.com/api/2022-06-09/wallets/{identifier}/nfts \\ --header 'X-API-KEY: <api-key>' 200 EVM 200 EVM (with subscription) 200 Solana 400 Copy Ask AI [ { \"chain\" : \"<string>\" , \"contractAddress\" : \"<string>\" , \"tokenId\" : \"<string>\" , \"metadata\" : { \"attributes\" : [], \"collection\" : {}, \"description\" : \"<string>\" , \"image\" : \"<string>\" , \"animation_url\" : \"<string>\" , \"name\" : \"<string>\" }, \"locator\" : \"<string>\" , \"tokenStandard\" : \"<string>\" } ] This API enables fetching the NFTs for a provided wallet address and chain. The response will be slightly different between EVM, Solana, and other wallets. See the example responses to the right. 200 EVM 200 EVM (with subscription) 200 Solana 400 Copy Ask AI [ { \"chain\" : \"<string>\" , \"contractAddress\" : \"<string>\" , \"tokenId\" : \"<string>\" , \"metadata\" : { \"attributes\" : [], \"collection\" : {}, \"description\" : \"<string>\" , \"image\" : \"<string>\" , \"animation_url\" : \"<string>\" , \"name\" : \"<string>\" }, \"locator\" : \"<string>\" , \"tokenStandard\" : \"<string>\" } ] Authorizations ​ X-API-KEY string header required Obtained in the Crossmint developer console Path Parameters ​ identifier string required The wallet identifier in the format of <chain>:<address> , email:<email_address>:<chain> or userId:<userId>:<chain> . Query Parameters ​ page string default: 1 required Page index ​ perPage string default: 20 required Number of items to display per page Response 200 200 400 application/json Success EVM Solana EVM Was this page helpful? Yes No Fund Wallet Create Transaction Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 658
  },
  {
    "id": "https://docs.crossmint.com/api-reference/wallets/get-signature#chunk_0",
    "url": "https://docs.crossmint.com/api-reference/wallets/get-signature",
    "title": "Get Signature - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Wallets Get Signature Documentation API Reference SDK Reference CLI Solution Guides Changelog API Reference Introduction Wallets POST Create Wallet GET Get Wallet By Locator GET Get Wallet Balance POST Fund Wallet GET Get NFTs from Wallet POST Create Transaction GET Get Transaction GET Get Wallet Transactions POST Approve Transaction POST Create Signature GET Get All Signatures GET Get Signature POST Approve Signature POST Create Delegated Signer GET Get Delegated Signer POST Transfer Token NFTs POST Mint NFT PUT Mint NFT with ID POST Mint SFT GET Get All NFTs GET Mint Status PATCH Edit NFT DEL Burn NFT IP POST Create IP Collection PUT Create IP Collection (Idempotent) GET Get IP Collection GET Get All IP Collections GET Get IP Assets in Collection GET Get IP Asset POST Create IP Asset PUT Create IP Asset (Idempotent) PATCH Update IP Asset GET Get IP Action GET Get IP Asset License GET Get IP Asset Graph NFT Collections POST Create Collection PUT Create Collection (Idempotent) GET Get All Collections GET Get Collection Info PATCH Update Collection PUT Set Royalties GET Get Royalties Configuration DEL Remove Royalties PUT Set Base URI GET Get Base URI PUT Set Transferability GET Get Transferability NFT Templates POST Create Template PUT Create Template with ID GET Get Template GET Get All Templates PATCH Edit Template DEL Delete Template Verifiable Credentials POST Create Credential template POST Issue Credential GET Get Credential by Credential ID GET Get Credential by NFT ID GET Get Credential by NFT Locator GET Retrieve credential nfts POST Verify Credential DEL Revoke Credential Verifiable Credential Types POST Create Credential Type PUT Create Credential Type with Name GET Get a Credential Type Headless Checkout POST Create Order GET Get Order PATCH Edit Order GET Check Token Support Action Status GET Get Action Status Admin GET Get Usage Get Signature cURL Copy Ask AI curl --request GET \\ --url https://staging.crossmint.com/api/2025-06-09/wallets/{walletLocator}/signatures/{signatureId} \\ --header 'X-API-KEY: <x-api-key>' 200 404 Copy Ask AI { \"id\" : \"sig-b984491a-5785-43c0-8811-45d46fe6e520\" , \"type\" : \"message\" , \"chainType\" : \"evm\" , \"walletType\" : \"smart\" , \"status\" : \"awaiting-approval\" , \"params\" : { \"message\" : \"Hello, world!\" , \"signer\" : { \"type\" : \"external-wallet\" , \"address\" : \"0xB17Ea8d34078424B9d7D126E444d5F2C3CC5c81E\" , \"locator\" : \"external-wallet:0xB17Ea8d34078424B9d7D126E444d5F2C3CC5c81E\" }, \"chain\" : \"polygon\" }, \"approvals\" : { \"pending\" : [ { \"signer\" : { \"type\" : \"external-wallet\" , \"address\" : \"0xB17Ea8d34078424B9d7D126E444d5F2C3CC5c81E\" , \"locator\" : \"external-wallet:0xB17Ea8d34078424B9d7D126E444d5F2C3CC5c81E\" }, \"message\" : \"Hello world!\" } ], \"submitted\" : [] }, \"createdAt\" : \"2024-01-01T00:00:00Z\" } GET https://staging.crossmint.com/api https://www.crossmint.com/api / 2025-06-09 / wallets / {walletLocator} / signatures / {signatureId} Try it Get Signature cURL Copy Ask AI curl --request GET \\ --url https://staging.crossmint.com/api/2025-06-09/wallets/{walletLocator}/signatures/{signatureId} \\ --header 'X-API-KEY: <x-api-key>' 200 404 Copy Ask AI { \"id\" : \"sig-b984491a-5785-43c0-8811-45d46fe6e520\" , \"type\" : \"message\" , \"chainType\" : \"evm\" , \"walletType\" : \"smart\" , \"status\" : \"awaiting-approval\" , \"params\" : { \"message\" : \"Hello, world!\" , \"signer\" : { \"type\" : \"external-wallet\" , \"address\" : \"0xB17Ea8d34078424B9d7D126E444d5F2C3CC5c81E\" , \"locator\" : \"external-wallet:0xB17Ea8d34078424B9d7D126E444d5F2C3CC5c81E\" }, \"chain\" : \"polygon\" }, \"approvals\" : { \"pending\" : [ { \"signer\" : { \"type\" : \"external-wallet\" , \"address\" : \"0xB17Ea8d34078424B9d7D126E444d5F2C3CC5c81E\" , \"locator\" : \"external-wallet:0xB17Ea8d34078424B9d7D126E444d5F2C3CC5c81E\" }, \"message\" : \"Hello world!\" } ], \"submitted\" : [] }, \"createdAt\" : \"2024-01-01T00:00:00Z\" } Headers ​ X-API-KEY string required API key required for authentication Path Parameters ​ walletLocator string required A wallet locator can be of the format: <walletAddress> email:<email>:<chainType>[:<walletType>] (walletType defaults to 'smart') userId:<userId>:<chainType>[:<walletType>] (white label user example) phoneNumber:<phoneNumber>:<chainType>[:<walletType>] twitter:<handle>:<chainType>[:<walletType>] x:<handle>:<chainType>[:<walletType>] me:<chainType>[:<walletType>] (Use when calling from the client side with a client API key) ​ signatureId string required Response 200 200 404 application/json The signature has been successfully retrieved. Complete signature response including status, signing requirements, and wallet type specific data Was this page helpful? Yes No Get All Signatures Approve Signature Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 636
  },
  {
    "id": "https://docs.crossmint.com/api-reference/wallets/get-signatures#chunk_0",
    "url": "https://docs.crossmint.com/api-reference/wallets/get-signatures",
    "title": "Get All Signatures - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Wallets Get All Signatures Documentation API Reference SDK Reference CLI Solution Guides Changelog API Reference Introduction Wallets POST Create Wallet GET Get Wallet By Locator GET Get Wallet Balance POST Fund Wallet GET Get NFTs from Wallet POST Create Transaction GET Get Transaction GET Get Wallet Transactions POST Approve Transaction POST Create Signature GET Get All Signatures GET Get Signature POST Approve Signature POST Create Delegated Signer GET Get Delegated Signer POST Transfer Token NFTs POST Mint NFT PUT Mint NFT with ID POST Mint SFT GET Get All NFTs GET Mint Status PATCH Edit NFT DEL Burn NFT IP POST Create IP Collection PUT Create IP Collection (Idempotent) GET Get IP Collection GET Get All IP Collections GET Get IP Assets in Collection GET Get IP Asset POST Create IP Asset PUT Create IP Asset (Idempotent) PATCH Update IP Asset GET Get IP Action GET Get IP Asset License GET Get IP Asset Graph NFT Collections POST Create Collection PUT Create Collection (Idempotent) GET Get All Collections GET Get Collection Info PATCH Update Collection PUT Set Royalties GET Get Royalties Configuration DEL Remove Royalties PUT Set Base URI GET Get Base URI PUT Set Transferability GET Get Transferability NFT Templates POST Create Template PUT Create Template with ID GET Get Template GET Get All Templates PATCH Edit Template DEL Delete Template Verifiable Credentials POST Create Credential template POST Issue Credential GET Get Credential by Credential ID GET Get Credential by NFT ID GET Get Credential by NFT Locator GET Retrieve credential nfts POST Verify Credential DEL Revoke Credential Verifiable Credential Types POST Create Credential Type PUT Create Credential Type with Name GET Get a Credential Type Headless Checkout POST Create Order GET Get Order PATCH Edit Order GET Check Token Support Action Status GET Get Action Status Admin GET Get Usage Get All Signatures cURL Copy Ask AI curl --request GET \\ --url https://staging.crossmint.com/api/2025-06-09/wallets/{walletLocator}/signatures \\ --header 'X-API-KEY: <x-api-key>' 200 404 Copy Ask AI { \"signatures\" : [ { \"id\" : \"sig-b984491a-5785-43c0-8811-45d46fe6e520\" , \"type\" : \"message\" , \"chainType\" : \"evm\" , \"walletType\" : \"smart\" , \"status\" : \"awaiting-approval\" , \"params\" : { \"message\" : \"Hello, world!\" , \"signer\" : { \"type\" : \"external-wallet\" , \"address\" : \"0xB17Ea8d34078424B9d7D126E444d5F2C3CC5c81E\" , \"locator\" : \"external-wallet:0xB17Ea8d34078424B9d7D126E444d5F2C3CC5c81E\" }, \"chain\" : \"polygon\" }, \"approvals\" : { \"pending\" : [ { \"signer\" : { \"type\" : \"external-wallet\" , \"address\" : \"0xB17Ea8d34078424B9d7D126E444d5F2C3CC5c81E\" , \"locator\" : \"external-wallet:0xB17Ea8d34078424B9d7D126E444d5F2C3CC5c81E\" }, \"message\" : \"Hello world!\" } ], \"submitted\" : [] }, \"createdAt\" : \"2024-01-01T00:00:00Z\" } ] } GET https://staging.crossmint.com/api https://www.crossmint.com/api / 2025-06-09 / wallets / {walletLocator} / signatures Try it Get All Signatures cURL Copy Ask AI curl --request GET \\ --url https://staging.crossmint.com/api/2025-06-09/wallets/{walletLocator}/signatures \\ --header 'X-API-KEY: <x-api-key>' 200 404 Copy Ask AI { \"signatures\" : [ { \"id\" : \"sig-b984491a-5785-43c0-8811-45d46fe6e520\" , \"type\" : \"message\" , \"chainType\" : \"evm\" , \"walletType\" : \"smart\" , \"status\" : \"awaiting-approval\" , \"params\" : { \"message\" : \"Hello, world!\" , \"signer\" : { \"type\" : \"external-wallet\" , \"address\" : \"0xB17Ea8d34078424B9d7D126E444d5F2C3CC5c81E\" , \"locator\" : \"external-wallet:0xB17Ea8d34078424B9d7D126E444d5F2C3CC5c81E\" }, \"chain\" : \"polygon\" }, \"approvals\" : { \"pending\" : [ { \"signer\" : { \"type\" : \"external-wallet\" , \"address\" : \"0xB17Ea8d34078424B9d7D126E444d5F2C3CC5c81E\" , \"locator\" : \"external-wallet:0xB17Ea8d34078424B9d7D126E444d5F2C3CC5c81E\" }, \"message\" : \"Hello world!\" } ], \"submitted\" : [] }, \"createdAt\" : \"2024-01-01T00:00:00Z\" } ] } Headers ​ X-API-KEY string required API key required for authentication Path Parameters ​ walletLocator string required A wallet locator can be of the format: <walletAddress> email:<email>:<chainType>[:<walletType>] (walletType defaults to 'smart') userId:<userId>:<chainType>[:<walletType>] (white label user example) phoneNumber:<phoneNumber>:<chainType>[:<walletType>] twitter:<handle>:<chainType>[:<walletType>] x:<handle>:<chainType>[:<walletType>] me:<chainType>[:<walletType>] (Use when calling from the client side with a client API key) Query Parameters ​ page string default: 1 ​ perPage string default: 10 Response 200 200 404 application/json The signatures have been successfully retrieved. List of signatures with their status, signing requirements, and wallet type specific data Was this page helpful? Yes No Create Signature Get Signature Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 657
  },
  {
    "id": "https://docs.crossmint.com/api-reference/wallets/get-signer#chunk_0",
    "url": "https://docs.crossmint.com/api-reference/wallets/get-signer",
    "title": "Get Delegated Signer - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Wallets Get Delegated Signer Documentation API Reference SDK Reference CLI Solution Guides Changelog API Reference Introduction Wallets POST Create Wallet GET Get Wallet By Locator GET Get Wallet Balance POST Fund Wallet GET Get NFTs from Wallet POST Create Transaction GET Get Transaction GET Get Wallet Transactions POST Approve Transaction POST Create Signature GET Get All Signatures GET Get Signature POST Approve Signature POST Create Delegated Signer GET Get Delegated Signer POST Transfer Token NFTs POST Mint NFT PUT Mint NFT with ID POST Mint SFT GET Get All NFTs GET Mint Status PATCH Edit NFT DEL Burn NFT IP POST Create IP Collection PUT Create IP Collection (Idempotent) GET Get IP Collection GET Get All IP Collections GET Get IP Assets in Collection GET Get IP Asset POST Create IP Asset PUT Create IP Asset (Idempotent) PATCH Update IP Asset GET Get IP Action GET Get IP Asset License GET Get IP Asset Graph NFT Collections POST Create Collection PUT Create Collection (Idempotent) GET Get All Collections GET Get Collection Info PATCH Update Collection PUT Set Royalties GET Get Royalties Configuration DEL Remove Royalties PUT Set Base URI GET Get Base URI PUT Set Transferability GET Get Transferability NFT Templates POST Create Template PUT Create Template with ID GET Get Template GET Get All Templates PATCH Edit Template DEL Delete Template Verifiable Credentials POST Create Credential template POST Issue Credential GET Get Credential by Credential ID GET Get Credential by NFT ID GET Get Credential by NFT Locator GET Retrieve credential nfts POST Verify Credential DEL Revoke Credential Verifiable Credential Types POST Create Credential Type PUT Create Credential Type with Name GET Get a Credential Type Headless Checkout POST Create Order GET Get Order PATCH Edit Order GET Check Token Support Action Status GET Get Action Status Admin GET Get Usage Get Delegated Signer cURL Copy Ask AI curl --request GET \\ --url https://staging.crossmint.com/api/2025-06-09/wallets/{walletLocator}/signers/{signer} \\ --header 'X-API-KEY: <x-api-key>' 200 404 Copy Ask AI { \"type\" : \"external-wallet\" , \"id\" : \"cWtP7gmZbd98HbKUuGXx5Q\" , \"name\" : \"hgranger\" , \"publicKey\" : { \"x\" : \"38035223810536273945556366218149112558607829411547667975304293530457502824247\" , \"y\" : \"91117823763706733837104303008228095481082989039135234750508288790583476078729\" }, \"validatorContractVersion\" : \"0.2.0\" , \"locator\" : \"external-wallet:DzaYNi6XtWt9DNwFV61bzWEiaSxfTgWbFDgFmurJzwdo\" , \"address\" : \"DzaYNi6XtWt9DNwFV61bzWEiaSxfTgWbFDgFmurJzwdo\" , \"transaction\" : { \"chainType\" : \"solana\" , \"walletType\" : \"smart\" , \"onChain\" : { \"transaction\" : \"4B9yzZoEV45cngasy9dP2MVxhZ2iro72eqdKitTj62pqFYHk4wVoR4NCc3xkEamWbFGXLjVotyPrDqEn11WUYHoq98b5aKCSDUrLWaQDZgb3xLxF1EvaY82Vui7Ntbv682tYnu5Ngnv4Eun1wrDJ6r4aRsUSQ3XF3jvNq8bRMn4HavBjPyErQSgXX9ytCDKntCEQcY3wfMHYbRFg5zgFU1QCqhuoLa5oBpZLCUYT8DCYu3Ado7W4xzP5aCAAwVd2tj8iAnwJEujQvBnr7wWkf2mCS1cNoCTbCFAvNVaVaau6vXBWKZqS7sDNmUD3KLQVqLwxhLLNeRuvUTkD5VQ5D21VcDiYWQWQTuYYAcQ3RUhn4Vt4ymijgRGbUXZHoeN26UHoGSBFJJ7gjqCruAtFXQZxHRDKSWN9jhYXugPYVVXSpGFA5BYWBuztUtEMF4u96tk6YTgPGdkTgrQybkNxRwbVCbpsKRG1kAbjQgBxDLAX89eMCZVbzWXnAgGA6aDBQPLAyQru8awZBDasrirnxCSQq9cWwMLePQGhY5gJZykswFKtyYF4CHeto\" , \"lastValidBlockHeight\" : 343486121 }, \"id\" : \"30ef7527-eb5a-4862-92de-aa96947ee705\" , \"status\" : \"pending\" , \"approvals\" : { \"required\" : 1 , \"pending\" : [ { \"signer\" : { \"type\" : \"external-wallet\" , \"address\" : \"GsMTPi8utYnuWakS8uvPah3UKd13dWcAshirnNmXDr3d\" , \"locator\" : \"external-wallet:GsMTPi8utYnuWakS8uvPah3UKd13dWcAshirnNmXDr3d\" }, \"message\" : \"2kwN1iuY6Y6Br2i5D1QphaS28H7vDdAiwtABgtRdYqjx7s85rRwqF9y6iVBdv9dDZ8F1JAZo8iQdFBAx2Eg9tL3P4sbAznPZgkZcGrbUSCe5jTZ7ULZrcSd377SGEjsZcwx7h7ozrUKB6FnjHB7wGaCqEeeUXE2CfCjC1SjEc8ZzZeyNmeEv5hJSkGsK62syoAE4V5ScZs7idhxXWzpeJiRt3wfWJRevr1pJY7BBd8HaEYurXtXqwCox1uzQnnuZTiUNu7cUWUajYXBWUae4NJGJxmtFJvqnPAa5HXB4nZWXMDdcBis4tQkLCfFT6GXMauQTFCaKmcMgLRh218n51nTNopR7gTaY66ysRH536wmxt9dLqkS9okG3HF5GEXufXPLX6iT7e7\" } ], \"submitted\" : [] }, \"createdAt\" : \"2025-01-20T13:49:08.910Z\" } } GET https://staging.crossmint.com/api https://www.crossmint.com/api / 2025-06-09 / wallets / {walletLocator} / signers / {signer} Try it Get Delegated Signer cURL Copy Ask AI curl --request GET \\ --url https://staging.crossmint.com/api/2025-06-09/wallets/{walletLocator}/signers/{signer} \\ --header 'X-API-KEY: <x-api-key>' 200 404 Copy Ask AI { \"type\" : \"external-wallet\" , \"id\" : \"cWtP7gmZbd98HbKUuGXx5Q\" , \"name\" : \"hgranger\" , \"publicKey\" : { \"x\" : \"38035223810536273945556366218149112558607829411547667975304293530457502824247\" , \"y\" : \"91117823763706733837104303008228095481082989039135234750508288790583476078729\" }, \"validatorContractVersion\" : \"0.2.0\" , \"locator\" : \"external-wallet:DzaYNi6XtWt9DNwFV61bzWEiaSxfTgWbFDgFmurJzwdo\" , \"address\" : \"DzaYNi6XtWt9DNwFV61bzWEiaSxfTgWbFDgFmurJzwdo\" , \"transaction\" : { \"chainType\" : \"solana\" , \"walletType\" : \"smart\" , \"onChain\" : { \"transaction\" : \"4B9yzZoEV45cngasy9dP2MVxhZ2iro72eqdKitTj62pqFYHk4wVoR4NCc3xkEamWbFGXLjVotyPrDqEn11WUYHoq98b5aKCSDUrLWaQDZgb3xLxF1EvaY82Vui7Ntbv682tYnu5Ngnv4Eun1wrDJ6r4aRsUSQ3XF3jvNq8bRMn4HavBjPyErQSgXX9ytCDKntCEQcY3wfMHYbRFg5zgFU1QCqhuoLa5oBpZLCUYT8DCYu3Ado7W4xzP5aCAAwVd2tj8iAnwJEujQvBnr7wWkf2mCS1cNoCTbCFAvNVaVaau6vXBWKZqS7sDNmUD3KLQVqLwxhLLNeRuvUTkD5VQ5D21VcDiYWQWQTuYYAcQ3RUhn4Vt4ymijgRGbUXZHoeN26UHoGSBFJJ7gjqCruAtFXQZxHRDKSWN9jhYXugPYVVXSpGFA5BYWBuztUtEMF4u96tk6YTgPGdkTgrQybkNxRwbVCbpsKRG1kAbjQgBxDLAX89eMCZVbzWXnAgGA6aDBQPLAyQru8awZBDasrirnxCSQq9cWwMLePQGhY5gJZykswFKtyYF4CHeto\" , \"lastValidBlockHeight\" : 343486121 }, \"id\" : \"30ef7527-eb5a-4862-92de-aa96947ee705\" , \"status\" : \"pending\" , \"approvals\" : { \"required\" : 1 , \"pending\" : [ { \"signer\" : { \"type\" : \"external-wallet\" , \"address\" : \"GsMTPi8utYnuWakS8uvPah3UKd13dWcAshirnNmXDr3d\" , \"locator\" : \"external-wallet:GsMTPi8utYnuWakS8uvPah3UKd13dWcAshirnNmXDr3d\" }, \"message\" : \"2kwN1iuY6Y6Br2i5D1QphaS28H7vDdAiwtABgtRdYqjx7s85rRwqF9y6iVBdv9dDZ8F1JAZo8iQdFBAx2Eg9tL3P4sbAznPZgkZcGrbUSCe5jTZ7ULZrcSd377SGEjsZcwx7h7ozrUKB6FnjHB7wGaCqEeeUXE2CfCjC1SjEc8ZzZeyNmeEv5hJSkGsK62syoAE4V5ScZs7idhxXWzpeJiRt3wfWJRevr1pJY7BBd8HaEYurXtXqwCox1uzQnnuZTiUNu7cUWUajYXBWUae4NJGJxmtFJvqnPAa5HXB4nZWXMDdcBis4tQkLCfFT6GXMauQTFCaKmcMgLRh218n51nTNopR7gTaY66ysRH536wmxt9dLqkS9okG3HF5GEXufXPLX6iT7e7\" } ], \"submitted\" : [] }, \"createdAt\" : \"2025-01-20T13:49:08.910Z\" } } Headers ​ X-API-KEY string required API key required for authentication Path Parameters ​ walletLocator string required A wallet locator can be of the format: <walletAddress> email:<email>:<chainType>[:<walletType>] (walletType defaults to 'smart') userId:<userId>:<chainType>[:<walletType>] (white label user example) phoneNumber:<phoneNumber>:<chainType>[:<walletType>] twitter:<handle>:<chainType>[:<walletType>] x:<handle>:<chainType>[:<walletType>] me:<chainType>[:<walletType>] (Use when calling from the client side with a client API key) ​ signer string required The locator for the signer Response 200 200 404 application/json The delegated signer has been successfully retrieved. Passkey Signer API Key Signer External Wallet Signer Email Signer Phone Signer Passkey Signer API Key Signer External Wallet Signer Email Signer Phone Signer Complete delegated signer response including the signer and authorization transaction Response schema for a registered Passkey signer including validator contract details Was this page helpful? Yes No Create Delegated Signer Transfer Token Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 722
  },
  {
    "id": "https://docs.crossmint.com/api-reference/wallets/get-transaction#chunk_0",
    "url": "https://docs.crossmint.com/api-reference/wallets/get-transaction",
    "title": "Get Transaction - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Wallets Get Transaction Documentation API Reference SDK Reference CLI Solution Guides Changelog API Reference Introduction Wallets POST Create Wallet GET Get Wallet By Locator GET Get Wallet Balance POST Fund Wallet GET Get NFTs from Wallet POST Create Transaction GET Get Transaction GET Get Wallet Transactions POST Approve Transaction POST Create Signature GET Get All Signatures GET Get Signature POST Approve Signature POST Create Delegated Signer GET Get Delegated Signer POST Transfer Token NFTs POST Mint NFT PUT Mint NFT with ID POST Mint SFT GET Get All NFTs GET Mint Status PATCH Edit NFT DEL Burn NFT IP POST Create IP Collection PUT Create IP Collection (Idempotent) GET Get IP Collection GET Get All IP Collections GET Get IP Assets in Collection GET Get IP Asset POST Create IP Asset PUT Create IP Asset (Idempotent) PATCH Update IP Asset GET Get IP Action GET Get IP Asset License GET Get IP Asset Graph NFT Collections POST Create Collection PUT Create Collection (Idempotent) GET Get All Collections GET Get Collection Info PATCH Update Collection PUT Set Royalties GET Get Royalties Configuration DEL Remove Royalties PUT Set Base URI GET Get Base URI PUT Set Transferability GET Get Transferability NFT Templates POST Create Template PUT Create Template with ID GET Get Template GET Get All Templates PATCH Edit Template DEL Delete Template Verifiable Credentials POST Create Credential template POST Issue Credential GET Get Credential by Credential ID GET Get Credential by NFT ID GET Get Credential by NFT Locator GET Retrieve credential nfts POST Verify Credential DEL Revoke Credential Verifiable Credential Types POST Create Credential Type PUT Create Credential Type with Name GET Get a Credential Type Headless Checkout POST Create Order GET Get Order PATCH Edit Order GET Check Token Support Action Status GET Get Action Status Admin GET Get Usage Get Transaction cURL Copy Ask AI curl --request GET \\ --url https://staging.crossmint.com/api/2025-06-09/wallets/{walletLocator}/transactions/{transactionId} \\ --header 'X-API-KEY: <x-api-key>' 200 404 Copy Ask AI { \"chainType\" : \"evm\" , \"walletType\" : \"smart\" , \"params\" : { \"calls\" : [ { \"address\" : \"<string>\" , \"functionName\" : \"<string>\" , \"abi\" : [ { \"type\" : \"error\" , \"inputs\" : [ \"<any>\" ], \"name\" : \"<string>\" } ], \"args\" : [ \"<any>\" ], \"value\" : \"0\" } ], \"chain\" : \"abstract\" , \"signer\" : { \"type\" : \"external-wallet\" , \"address\" : \"<string>\" , \"locator\" : \"<string>\" } }, \"onChain\" : { \"userOperation\" : { \"sender\" : \"<string>\" , \"nonce\" : \"<string>\" , \"callData\" : \"<string>\" , \"callGasLimit\" : \"<string>\" , \"verificationGasLimit\" : \"<string>\" , \"preVerificationGas\" : \"<string>\" , \"maxFeePerGas\" : \"<string>\" , \"maxPriorityFeePerGas\" : \"<string>\" , \"paymaster\" : \"<string>\" , \"paymasterVerificationGasLimit\" : \"<string>\" , \"paymasterData\" : \"<string>\" , \"paymasterPostOpGasLimit\" : \"<string>\" , \"signature\" : \"<string>\" , \"factory\" : \"<string>\" , \"factoryData\" : \"<string>\" }, \"userOperationHash\" : \"<string>\" , \"txId\" : \"<string>\" , \"explorerLink\" : \"<string>\" }, \"id\" : \"<string>\" , \"status\" : \"awaiting-approval\" , \"approvals\" : { \"pending\" : [ { \"signer\" : { \"type\" : \"external-wallet\" , \"address\" : \"<string>\" , \"locator\" : \"<string>\" }, \"message\" : \"<string>\" } ], \"submitted\" : [ { \"signature\" : \"<string>\" , \"submittedAt\" : \"2024-01-01T00:00:00.000Z\" , \"signer\" : { \"type\" : \"external-wallet\" , \"address\" : \"<string>\" , \"locator\" : \"<string>\" }, \"message\" : \"<string>\" , \"metadata\" : { \"deviceInfo\" : \"<string>\" , \"ipAddress\" : \"<string>\" , \"userAgent\" : \"<string>\" } } ], \"required\" : 123 }, \"createdAt\" : \"2024-01-01T00:00:00.000Z\" , \"completedAt\" : \"2024-01-01T00:00:00.000Z\" , \"error\" : { \"reason\" : \"build_failed\" , \"message\" : \"<string>\" }, \"sendParams\" : { \"token\" : \"<string>\" , \"params\" : { \"amount\" : \"<string>\" , \"recipient\" : \"<string>\" , \"recipientAddress\" : \"<string>\" } } } GET https://staging.crossmint.com/api https://www.crossmint.com/api / 2025-06-09 / wallets / {walletLocator} / transactions / {transactionId} Try it Get Transaction cURL Copy Ask AI curl --request GET \\ --url https://staging.crossmint.com/api/2025-06-09/wallets/{walletLocator}/transactions/{transactionId} \\ --header 'X-API-KEY: <x-api-key>' 200 404 Copy Ask AI { \"chainType\" : \"evm\" , \"walletType\" : \"smart\" , \"params\" : { \"calls\" : [ { \"address\" : \"<string>\" , \"functionName\" : \"<string>\" , \"abi\" : [ { \"type\" : \"error\" , \"inputs\" : [ \"<any>\" ], \"name\" : \"<string>\" } ], \"args\" : [ \"<any>\" ], \"value\" : \"0\" } ], \"chain\" : \"abstract\" , \"signer\" : { \"type\" : \"external-wallet\" , \"address\" : \"<string>\" , \"locator\" : \"<string>\" } }, \"onChain\" : { \"userOperation\" : { \"sender\" : \"<string>\" , \"nonce\" : \"<string>\" , \"callData\" : \"<string>\" , \"callGasLimit\" : \"<string>\" , \"verificationGasLimit\" : \"<string>\" , \"preVerificationGas\" : \"<string>\" , \"maxFeePerGas\" : \"<string>\" , \"maxPriorityFeePerGas\" : \"<string>\" , \"paymaster\" : \"<string>\" , \"paymasterVerificationGasLimit\" : \"<string>\" , \"paymasterData\" : \"<string>\" , \"paymasterPostOpGasLimit\" : \"<string>\" , \"signature\" : \"<string>\" , \"factory\" : \"<string>\" , \"factoryData\" : \"<string>\" }, \"userOperationHash\" : \"<string>\" , \"txId\" : \"<string>\" , \"explorerLink\" : \"<string>\" }, \"id\" : \"<string>\" , \"status\" : \"awaiting-approval\" , \"approvals\" : { \"pending\" : [ { \"signer\" : { \"type\" : \"external-wallet\" , \"address\" : \"<string>\" , \"locator\" : \"<string>\" }, \"message\" : \"<string>\" } ], \"submitted\" : [ { \"signature\" : \"<string>\" , \"submittedAt\" : \"2024-01-01T00:00:00.000Z\" , \"signer\" : { \"type\" : \"external-wallet\" , \"address\" : \"<string>\" , \"locator\" : \"<string>\" }, \"message\" : \"<string>\" , \"metadata\" : { \"deviceInfo\" : \"<string>\" , \"ipAddress\" : \"<string>\" , \"userAgent\" : \"<string>\" } } ], \"required\" : 123 }, \"createdAt\" : \"2024-01-01T00:00:00.000Z\" , \"completedAt\" : \"2024-01-01T00:00:00.000Z\" , \"error\" : { \"reason\" : \"build_failed\" , \"message\" : \"<string>\" }, \"sendParams\" : { \"token\" : \"<string>\" , \"params\" : { \"amount\" : \"<string>\" , \"recipient\" : \"<string>\" , \"recipientAddress\" : \"<string>\" } } } Headers ​ X-API-KEY string required API key required for authentication Path Parameters ​ walletLocator string required A wallet locator can be of the format: <walletAddress> email:<email>:<chainType>[:<walletType>] (walletType defaults to 'smart') userId:<userId>:<chainType>[:<walletType>] (white label user example) phoneNumber:<phoneNumber>:<chainType>[:<walletType>] twitter:<handle>:<chainType>[:<walletType>] x:<handle>:<chainType>[:<walletType>] me:<chainType>[:<walletType>] (Use when calling from the client side with a client API key) ​ transactionId string required Response 200 200 404 application/json The transaction has been successfully retrieved. EVM Smart Wallet EVM MPC",
    "chunk_index": 0,
    "word_count": 1000
  },
  {
    "id": "https://docs.crossmint.com/api-reference/wallets/get-transaction#chunk_0",
    "url": "https://docs.crossmint.com/api-reference/wallets/get-transaction",
    "title": "Get Transaction - Crossmint Docs",
    "content": ", \"message\" : \"<string>\" }, \"sendParams\" : { \"token\" : \"<string>\" , \"params\" : { \"amount\" : \"<string>\" , \"recipient\" : \"<string>\" , \"recipientAddress\" : \"<string>\" } } } Headers ​ X-API-KEY string required API key required for authentication Path Parameters ​ walletLocator string required A wallet locator can be of the format: <walletAddress> email:<email>:<chainType>[:<walletType>] (walletType defaults to 'smart') userId:<userId>:<chainType>[:<walletType>] (white label user example) phoneNumber:<phoneNumber>:<chainType>[:<walletType>] twitter:<handle>:<chainType>[:<walletType>] x:<handle>:<chainType>[:<walletType>] me:<chainType>[:<walletType>] (Use when calling from the client side with a client API key) ​ transactionId string required Response 200 200 404 application/json The transaction has been successfully retrieved. EVM Smart Wallet EVM MPC Wallet Solana Smart Wallet Solana MPC Wallet Stellar Smart Wallet Complete transaction response including status, signing requirements, and wallet type specific data Was this page helpful? Yes No Create Transaction Get Wallet Transactions Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 143
  },
  {
    "id": "https://docs.crossmint.com/api-reference/wallets/get-transactions#chunk_0",
    "url": "https://docs.crossmint.com/api-reference/wallets/get-transactions",
    "title": "Get Wallet Transactions - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Wallets Get Wallet Transactions Documentation API Reference SDK Reference CLI Solution Guides Changelog API Reference Introduction Wallets POST Create Wallet GET Get Wallet By Locator GET Get Wallet Balance POST Fund Wallet GET Get NFTs from Wallet POST Create Transaction GET Get Transaction GET Get Wallet Transactions POST Approve Transaction POST Create Signature GET Get All Signatures GET Get Signature POST Approve Signature POST Create Delegated Signer GET Get Delegated Signer POST Transfer Token NFTs POST Mint NFT PUT Mint NFT with ID POST Mint SFT GET Get All NFTs GET Mint Status PATCH Edit NFT DEL Burn NFT IP POST Create IP Collection PUT Create IP Collection (Idempotent) GET Get IP Collection GET Get All IP Collections GET Get IP Assets in Collection GET Get IP Asset POST Create IP Asset PUT Create IP Asset (Idempotent) PATCH Update IP Asset GET Get IP Action GET Get IP Asset License GET Get IP Asset Graph NFT Collections POST Create Collection PUT Create Collection (Idempotent) GET Get All Collections GET Get Collection Info PATCH Update Collection PUT Set Royalties GET Get Royalties Configuration DEL Remove Royalties PUT Set Base URI GET Get Base URI PUT Set Transferability GET Get Transferability NFT Templates POST Create Template PUT Create Template with ID GET Get Template GET Get All Templates PATCH Edit Template DEL Delete Template Verifiable Credentials POST Create Credential template POST Issue Credential GET Get Credential by Credential ID GET Get Credential by NFT ID GET Get Credential by NFT Locator GET Retrieve credential nfts POST Verify Credential DEL Revoke Credential Verifiable Credential Types POST Create Credential Type PUT Create Credential Type with Name GET Get a Credential Type Headless Checkout POST Create Order GET Get Order PATCH Edit Order GET Check Token Support Action Status GET Get Action Status Admin GET Get Usage Get Wallet Transactions cURL Copy Ask AI curl --request GET \\ --url https://staging.crossmint.com/api/2025-06-09/wallets/{walletLocator}/transactions \\ --header 'X-API-KEY: <x-api-key>' 200 404 Copy Ask AI { \"transactions\" : [ { \"chainType\" : \"evm\" , \"walletType\" : \"smart\" , \"params\" : { \"calls\" : [ { \"address\" : \"<string>\" , \"functionName\" : \"<string>\" , \"abi\" : [ { \"type\" : \"error\" , \"inputs\" : [ \"<any>\" ], \"name\" : \"<string>\" } ], \"args\" : [ \"<any>\" ], \"value\" : \"0\" } ], \"chain\" : \"abstract\" , \"signer\" : { \"type\" : \"external-wallet\" , \"address\" : \"<string>\" , \"locator\" : \"<string>\" } }, \"onChain\" : { \"userOperation\" : { \"sender\" : \"<string>\" , \"nonce\" : \"<string>\" , \"callData\" : \"<string>\" , \"callGasLimit\" : \"<string>\" , \"verificationGasLimit\" : \"<string>\" , \"preVerificationGas\" : \"<string>\" , \"maxFeePerGas\" : \"<string>\" , \"maxPriorityFeePerGas\" : \"<string>\" , \"paymaster\" : \"<string>\" , \"paymasterVerificationGasLimit\" : \"<string>\" , \"paymasterData\" : \"<string>\" , \"paymasterPostOpGasLimit\" : \"<string>\" , \"signature\" : \"<string>\" , \"factory\" : \"<string>\" , \"factoryData\" : \"<string>\" }, \"userOperationHash\" : \"<string>\" , \"txId\" : \"<string>\" , \"explorerLink\" : \"<string>\" }, \"id\" : \"<string>\" , \"status\" : \"awaiting-approval\" , \"approvals\" : { \"pending\" : [ { \"signer\" : { \"type\" : \"external-wallet\" , \"address\" : \"<string>\" , \"locator\" : \"<string>\" }, \"message\" : \"<string>\" } ], \"submitted\" : [ { \"signature\" : \"<string>\" , \"submittedAt\" : \"2024-01-01T00:00:00.000Z\" , \"signer\" : { \"type\" : \"external-wallet\" , \"address\" : \"<string>\" , \"locator\" : \"<string>\" }, \"message\" : \"<string>\" , \"metadata\" : { \"deviceInfo\" : \"<string>\" , \"ipAddress\" : \"<string>\" , \"userAgent\" : \"<string>\" } } ], \"required\" : 123 }, \"createdAt\" : \"2024-01-01T00:00:00.000Z\" , \"completedAt\" : \"2024-01-01T00:00:00.000Z\" , \"error\" : { \"reason\" : \"build_failed\" , \"message\" : \"<string>\" }, \"sendParams\" : { \"token\" : \"<string>\" , \"params\" : { \"amount\" : \"<string>\" , \"recipient\" : \"<string>\" , \"recipientAddress\" : \"<string>\" } } } ] } GET https://staging.crossmint.com/api https://www.crossmint.com/api / 2025-06-09 / wallets / {walletLocator} / transactions Try it Get Wallet Transactions cURL Copy Ask AI curl --request GET \\ --url https://staging.crossmint.com/api/2025-06-09/wallets/{walletLocator}/transactions \\ --header 'X-API-KEY: <x-api-key>' 200 404 Copy Ask AI { \"transactions\" : [ { \"chainType\" : \"evm\" , \"walletType\" : \"smart\" , \"params\" : { \"calls\" : [ { \"address\" : \"<string>\" , \"functionName\" : \"<string>\" , \"abi\" : [ { \"type\" : \"error\" , \"inputs\" : [ \"<any>\" ], \"name\" : \"<string>\" } ], \"args\" : [ \"<any>\" ], \"value\" : \"0\" } ], \"chain\" : \"abstract\" , \"signer\" : { \"type\" : \"external-wallet\" , \"address\" : \"<string>\" , \"locator\" : \"<string>\" } }, \"onChain\" : { \"userOperation\" : { \"sender\" : \"<string>\" , \"nonce\" : \"<string>\" , \"callData\" : \"<string>\" , \"callGasLimit\" : \"<string>\" , \"verificationGasLimit\" : \"<string>\" , \"preVerificationGas\" : \"<string>\" , \"maxFeePerGas\" : \"<string>\" , \"maxPriorityFeePerGas\" : \"<string>\" , \"paymaster\" : \"<string>\" , \"paymasterVerificationGasLimit\" : \"<string>\" , \"paymasterData\" : \"<string>\" , \"paymasterPostOpGasLimit\" : \"<string>\" , \"signature\" : \"<string>\" , \"factory\" : \"<string>\" , \"factoryData\" : \"<string>\" }, \"userOperationHash\" : \"<string>\" , \"txId\" : \"<string>\" , \"explorerLink\" : \"<string>\" }, \"id\" : \"<string>\" , \"status\" : \"awaiting-approval\" , \"approvals\" : { \"pending\" : [ { \"signer\" : { \"type\" : \"external-wallet\" , \"address\" : \"<string>\" , \"locator\" : \"<string>\" }, \"message\" : \"<string>\" } ], \"submitted\" : [ { \"signature\" : \"<string>\" , \"submittedAt\" : \"2024-01-01T00:00:00.000Z\" , \"signer\" : { \"type\" : \"external-wallet\" , \"address\" : \"<string>\" , \"locator\" : \"<string>\" }, \"message\" : \"<string>\" , \"metadata\" : { \"deviceInfo\" : \"<string>\" , \"ipAddress\" : \"<string>\" , \"userAgent\" : \"<string>\" } } ], \"required\" : 123 }, \"createdAt\" : \"2024-01-01T00:00:00.000Z\" , \"completedAt\" : \"2024-01-01T00:00:00.000Z\" , \"error\" : { \"reason\" : \"build_failed\" , \"message\" : \"<string>\" }, \"sendParams\" : { \"token\" : \"<string>\" , \"params\" : { \"amount\" : \"<string>\" , \"recipient\" : \"<string>\" , \"recipientAddress\" : \"<string>\" } } } ] } Headers ​ X-API-KEY string required API key required for authentication Path Parameters ​ walletLocator string required A wallet locator can be of the format: <walletAddress> email:<email>:<chainType>[:<walletType>] (walletType defaults to 'smart') userId:<userId>:<chainType>[:<walletType>] (white label user example) phoneNumber:<phoneNumber>:<chainType>[:<walletType>] twitter:<handle>:<chainType>[:<walletType>] x:<handle>:<chainType>[:<walletType>] me:<chainType>[:<walletType>] (Use when calling from the client side with a client API key) Query Parameters ​ page string default: 1",
    "chunk_index": 0,
    "word_count": 1000
  },
  {
    "id": "https://docs.crossmint.com/api-reference/wallets/get-transactions#chunk_0",
    "url": "https://docs.crossmint.com/api-reference/wallets/get-transactions",
    "title": "Get Wallet Transactions - Crossmint Docs",
    "content": ", \"completedAt\" : \"2024-01-01T00:00:00.000Z\" , \"error\" : { \"reason\" : \"build_failed\" , \"message\" : \"<string>\" }, \"sendParams\" : { \"token\" : \"<string>\" , \"params\" : { \"amount\" : \"<string>\" , \"recipient\" : \"<string>\" , \"recipientAddress\" : \"<string>\" } } } ] } Headers ​ X-API-KEY string required API key required for authentication Path Parameters ​ walletLocator string required A wallet locator can be of the format: <walletAddress> email:<email>:<chainType>[:<walletType>] (walletType defaults to 'smart') userId:<userId>:<chainType>[:<walletType>] (white label user example) phoneNumber:<phoneNumber>:<chainType>[:<walletType>] twitter:<handle>:<chainType>[:<walletType>] x:<handle>:<chainType>[:<walletType>] me:<chainType>[:<walletType>] (Use when calling from the client side with a client API key) Query Parameters ​ page string default: 1 ​ perPage string default: 10 Response 200 200 404 application/json The transactions have been successfully retrieved. List of transactions with their status, signing requirements, and wallet type specific data Was this page helpful? Yes No Get Transaction Approve Transaction Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 149
  },
  {
    "id": "https://docs.crossmint.com/api-reference/wallets/get-wallet-balance#chunk_0",
    "url": "https://docs.crossmint.com/api-reference/wallets/get-wallet-balance",
    "title": "Get Wallet Balance - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Wallets Get Wallet Balance Documentation API Reference SDK Reference CLI Solution Guides Changelog API Reference Introduction Wallets POST Create Wallet GET Get Wallet By Locator GET Get Wallet Balance POST Fund Wallet GET Get NFTs from Wallet POST Create Transaction GET Get Transaction GET Get Wallet Transactions POST Approve Transaction POST Create Signature GET Get All Signatures GET Get Signature POST Approve Signature POST Create Delegated Signer GET Get Delegated Signer POST Transfer Token NFTs POST Mint NFT PUT Mint NFT with ID POST Mint SFT GET Get All NFTs GET Mint Status PATCH Edit NFT DEL Burn NFT IP POST Create IP Collection PUT Create IP Collection (Idempotent) GET Get IP Collection GET Get All IP Collections GET Get IP Assets in Collection GET Get IP Asset POST Create IP Asset PUT Create IP Asset (Idempotent) PATCH Update IP Asset GET Get IP Action GET Get IP Asset License GET Get IP Asset Graph NFT Collections POST Create Collection PUT Create Collection (Idempotent) GET Get All Collections GET Get Collection Info PATCH Update Collection PUT Set Royalties GET Get Royalties Configuration DEL Remove Royalties PUT Set Base URI GET Get Base URI PUT Set Transferability GET Get Transferability NFT Templates POST Create Template PUT Create Template with ID GET Get Template GET Get All Templates PATCH Edit Template DEL Delete Template Verifiable Credentials POST Create Credential template POST Issue Credential GET Get Credential by Credential ID GET Get Credential by NFT ID GET Get Credential by NFT Locator GET Retrieve credential nfts POST Verify Credential DEL Revoke Credential Verifiable Credential Types POST Create Credential Type PUT Create Credential Type with Name GET Get a Credential Type Headless Checkout POST Create Order GET Get Order PATCH Edit Order GET Check Token Support Action Status GET Get Action Status Admin GET Get Usage Get Wallet Balance cURL Copy Ask AI curl --request GET \\ --url https://staging.crossmint.com/api/2025-06-09/wallets/{walletLocator}/balances \\ --header 'X-API-KEY: <x-api-key>' 200 400 Copy Ask AI [ { \"symbol\" : \"ETH\" , \"decimals\" : 18 , \"amount\" : \"18.8343253454\" , \"rawAmount\" : \"18834161225104097789\" , \"chains\" : { \"base\" : { \"contractAddress\" : \"0x123\" , \"locator\" : \"base:0x123\" , \"amount\" : \"18.833423432423\" , \"rawAmount\" : \"18834161225104097789\" }, \"solana\" : { \"mintHash\" : \"123123\" , \"locator\" : \"solana:132\" , \"amount\" : \"0.000000000000000\" , \"rawAmount\" : \"00000000000000000\" } } } ] GET https://staging.crossmint.com/api https://www.crossmint.com/api / 2025-06-09 / wallets / {walletLocator} / balances Try it Get Wallet Balance cURL Copy Ask AI curl --request GET \\ --url https://staging.crossmint.com/api/2025-06-09/wallets/{walletLocator}/balances \\ --header 'X-API-KEY: <x-api-key>' 200 400 Copy Ask AI [ { \"symbol\" : \"ETH\" , \"decimals\" : 18 , \"amount\" : \"18.8343253454\" , \"rawAmount\" : \"18834161225104097789\" , \"chains\" : { \"base\" : { \"contractAddress\" : \"0x123\" , \"locator\" : \"base:0x123\" , \"amount\" : \"18.833423432423\" , \"rawAmount\" : \"18834161225104097789\" }, \"solana\" : { \"mintHash\" : \"123123\" , \"locator\" : \"solana:132\" , \"amount\" : \"0.000000000000000\" , \"rawAmount\" : \"00000000000000000\" } } } ] This is an alpha API and subject to change. Headers ​ X-API-KEY string required API key required for authentication Path Parameters ​ walletLocator string required A wallet locator can be of the format: <walletAddress> email:<email>:<chainType>[:<walletType>] (walletType defaults to 'smart') userId:<userId>:<chainType>[:<walletType>] (white label user example) phoneNumber:<phoneNumber>:<chainType>[:<walletType>] twitter:<handle>:<chainType>[:<walletType>] x:<handle>:<chainType>[:<walletType>] me:<chainType>[:<walletType>] (Use when calling from the client side with a client API key) Query Parameters ​ chains string The blockchain(s) to query. Comma-separated list of chains ​ tokens string required The tokens to query. Comma-separated list of either tokens or token locator strings Response 200 200 400 application/json Returns the balance of the wallet for the given chain and currency Array of wallet balances per token Was this page helpful? Yes No Get Wallet By Locator Fund Wallet Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 629
  },
  {
    "id": "https://docs.crossmint.com/api-reference/wallets/get-wallet-by-locator#chunk_0",
    "url": "https://docs.crossmint.com/api-reference/wallets/get-wallet-by-locator",
    "title": "Get Wallet By Locator - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Wallets Get Wallet By Locator Documentation API Reference SDK Reference CLI Solution Guides Changelog API Reference Introduction Wallets POST Create Wallet GET Get Wallet By Locator GET Get Wallet Balance POST Fund Wallet GET Get NFTs from Wallet POST Create Transaction GET Get Transaction GET Get Wallet Transactions POST Approve Transaction POST Create Signature GET Get All Signatures GET Get Signature POST Approve Signature POST Create Delegated Signer GET Get Delegated Signer POST Transfer Token NFTs POST Mint NFT PUT Mint NFT with ID POST Mint SFT GET Get All NFTs GET Mint Status PATCH Edit NFT DEL Burn NFT IP POST Create IP Collection PUT Create IP Collection (Idempotent) GET Get IP Collection GET Get All IP Collections GET Get IP Assets in Collection GET Get IP Asset POST Create IP Asset PUT Create IP Asset (Idempotent) PATCH Update IP Asset GET Get IP Action GET Get IP Asset License GET Get IP Asset Graph NFT Collections POST Create Collection PUT Create Collection (Idempotent) GET Get All Collections GET Get Collection Info PATCH Update Collection PUT Set Royalties GET Get Royalties Configuration DEL Remove Royalties PUT Set Base URI GET Get Base URI PUT Set Transferability GET Get Transferability NFT Templates POST Create Template PUT Create Template with ID GET Get Template GET Get All Templates PATCH Edit Template DEL Delete Template Verifiable Credentials POST Create Credential template POST Issue Credential GET Get Credential by Credential ID GET Get Credential by NFT ID GET Get Credential by NFT Locator GET Retrieve credential nfts POST Verify Credential DEL Revoke Credential Verifiable Credential Types POST Create Credential Type PUT Create Credential Type with Name GET Get a Credential Type Headless Checkout POST Create Order GET Get Order PATCH Edit Order GET Check Token Support Action Status GET Get Action Status Admin GET Get Usage Get Wallet By Locator cURL Copy Ask AI curl --request GET \\ --url https://staging.crossmint.com/api/2025-06-09/wallets/{walletLocator} \\ --header 'X-API-KEY: <x-api-key>' 200 404 Copy Ask AI { \"chainType\" : \"evm\" , \"type\" : \"smart\" , \"owner\" : \"email:user@example.com\" , \"address\" : \"0x1234567890123456789012345678901234567890\" , \"config\" : { \"adminSigner\" : { \"type\" : \"external-wallet\" , \"address\" : \"0x1234567890123456789012345678901234567890\" , \"locator\" : \"external-wallet:0x1234567890123456789012345678901234567890\" } } } GET https://staging.crossmint.com/api https://www.crossmint.com/api / 2025-06-09 / wallets / {walletLocator} Try it Get Wallet By Locator cURL Copy Ask AI curl --request GET \\ --url https://staging.crossmint.com/api/2025-06-09/wallets/{walletLocator} \\ --header 'X-API-KEY: <x-api-key>' 200 404 Copy Ask AI { \"chainType\" : \"evm\" , \"type\" : \"smart\" , \"owner\" : \"email:user@example.com\" , \"address\" : \"0x1234567890123456789012345678901234567890\" , \"config\" : { \"adminSigner\" : { \"type\" : \"external-wallet\" , \"address\" : \"0x1234567890123456789012345678901234567890\" , \"locator\" : \"external-wallet:0x1234567890123456789012345678901234567890\" } } } Headers ​ X-API-KEY string required API key required for authentication Path Parameters ​ walletLocator string required A wallet locator can be of the format: <walletAddress> email:<email>:<chainType>[:<walletType>] (walletType defaults to 'smart') userId:<userId>:<chainType>[:<walletType>] (white label user example) phoneNumber:<phoneNumber>:<chainType>[:<walletType>] twitter:<handle>:<chainType>[:<walletType>] x:<handle>:<chainType>[:<walletType>] me:<chainType>[:<walletType>] (Use when calling from the client side with a client API key) Response 200 200 404 application/json The record has been successfully retreived. EVM wallet output Solana wallet output Aptos wallet output Sui wallet output Stellar wallet output Complete wallet configuration including type-specific settings Was this page helpful? Yes No Create Wallet Get Wallet Balance Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 549
  },
  {
    "id": "https://docs.crossmint.com/api-reference/wallets/register-delegated-key#chunk_0",
    "url": "https://docs.crossmint.com/api-reference/wallets/register-delegated-key",
    "title": "Create Delegated Signer - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Wallets Create Delegated Signer Documentation API Reference SDK Reference CLI Solution Guides Changelog API Reference Introduction Wallets POST Create Wallet GET Get Wallet By Locator GET Get Wallet Balance POST Fund Wallet GET Get NFTs from Wallet POST Create Transaction GET Get Transaction GET Get Wallet Transactions POST Approve Transaction POST Create Signature GET Get All Signatures GET Get Signature POST Approve Signature POST Create Delegated Signer GET Get Delegated Signer POST Transfer Token NFTs POST Mint NFT PUT Mint NFT with ID POST Mint SFT GET Get All NFTs GET Mint Status PATCH Edit NFT DEL Burn NFT IP POST Create IP Collection PUT Create IP Collection (Idempotent) GET Get IP Collection GET Get All IP Collections GET Get IP Assets in Collection GET Get IP Asset POST Create IP Asset PUT Create IP Asset (Idempotent) PATCH Update IP Asset GET Get IP Action GET Get IP Asset License GET Get IP Asset Graph NFT Collections POST Create Collection PUT Create Collection (Idempotent) GET Get All Collections GET Get Collection Info PATCH Update Collection PUT Set Royalties GET Get Royalties Configuration DEL Remove Royalties PUT Set Base URI GET Get Base URI PUT Set Transferability GET Get Transferability NFT Templates POST Create Template PUT Create Template with ID GET Get Template GET Get All Templates PATCH Edit Template DEL Delete Template Verifiable Credentials POST Create Credential template POST Issue Credential GET Get Credential by Credential ID GET Get Credential by NFT ID GET Get Credential by NFT Locator GET Retrieve credential nfts POST Verify Credential DEL Revoke Credential Verifiable Credential Types POST Create Credential Type PUT Create Credential Type with Name GET Get a Credential Type Headless Checkout POST Create Order GET Get Order PATCH Edit Order GET Check Token Support Action Status GET Get Action Status Admin GET Get Usage Create Delegated Signer cURL Copy Ask AI curl --request POST \\ --url https://staging.crossmint.com/api/2025-06-09/wallets/{walletLocator}/signers \\ --header 'Content-Type: application/json' \\ --header 'X-API-KEY: <x-api-key>' \\ --data '{ \"signer\": \"external-wallet:0x1234567890123456789012345678901234567890\", \"chain\": \"base\" }' 201 400 404 Copy Ask AI { \"type\" : \"external-wallet\" , \"id\" : \"cWtP7gmZbd98HbKUuGXx5Q\" , \"name\" : \"hgranger\" , \"publicKey\" : { \"x\" : \"38035223810536273945556366218149112558607829411547667975304293530457502824247\" , \"y\" : \"91117823763706733837104303008228095481082989039135234750508288790583476078729\" }, \"validatorContractVersion\" : \"0.2.0\" , \"locator\" : \"external-wallet:DzaYNi6XtWt9DNwFV61bzWEiaSxfTgWbFDgFmurJzwdo\" , \"address\" : \"DzaYNi6XtWt9DNwFV61bzWEiaSxfTgWbFDgFmurJzwdo\" , \"transaction\" : { \"chainType\" : \"solana\" , \"walletType\" : \"smart\" , \"onChain\" : { \"transaction\" : \"4B9yzZoEV45cngasy9dP2MVxhZ2iro72eqdKitTj62pqFYHk4wVoR4NCc3xkEamWbFGXLjVotyPrDqEn11WUYHoq98b5aKCSDUrLWaQDZgb3xLxF1EvaY82Vui7Ntbv682tYnu5Ngnv4Eun1wrDJ6r4aRsUSQ3XF3jvNq8bRMn4HavBjPyErQSgXX9ytCDKntCEQcY3wfMHYbRFg5zgFU1QCqhuoLa5oBpZLCUYT8DCYu3Ado7W4xzP5aCAAwVd2tj8iAnwJEujQvBnr7wWkf2mCS1cNoCTbCFAvNVaVaau6vXBWKZqS7sDNmUD3KLQVqLwxhLLNeRuvUTkD5VQ5D21VcDiYWQWQTuYYAcQ3RUhn4Vt4ymijgRGbUXZHoeN26UHoGSBFJJ7gjqCruAtFXQZxHRDKSWN9jhYXugPYVVXSpGFA5BYWBuztUtEMF4u96tk6YTgPGdkTgrQybkNxRwbVCbpsKRG1kAbjQgBxDLAX89eMCZVbzWXnAgGA6aDBQPLAyQru8awZBDasrirnxCSQq9cWwMLePQGhY5gJZykswFKtyYF4CHeto\" , \"lastValidBlockHeight\" : 343486121 }, \"id\" : \"30ef7527-eb5a-4862-92de-aa96947ee705\" , \"status\" : \"pending\" , \"approvals\" : { \"required\" : 1 , \"pending\" : [ { \"signer\" : { \"type\" : \"external-wallet\" , \"address\" : \"GsMTPi8utYnuWakS8uvPah3UKd13dWcAshirnNmXDr3d\" , \"locator\" : \"external-wallet:GsMTPi8utYnuWakS8uvPah3UKd13dWcAshirnNmXDr3d\" }, \"message\" : \"2kwN1iuY6Y6Br2i5D1QphaS28H7vDdAiwtABgtRdYqjx7s85rRwqF9y6iVBdv9dDZ8F1JAZo8iQdFBAx2Eg9tL3P4sbAznPZgkZcGrbUSCe5jTZ7ULZrcSd377SGEjsZcwx7h7ozrUKB6FnjHB7wGaCqEeeUXE2CfCjC1SjEc8ZzZeyNmeEv5hJSkGsK62syoAE4V5ScZs7idhxXWzpeJiRt3wfWJRevr1pJY7BBd8HaEYurXtXqwCox1uzQnnuZTiUNu7cUWUajYXBWUae4NJGJxmtFJvqnPAa5HXB4nZWXMDdcBis4tQkLCfFT6GXMauQTFCaKmcMgLRh218n51nTNopR7gTaY66ysRH536wmxt9dLqkS9okG3HF5GEXufXPLX6iT7e7\" } ], \"submitted\" : [] }, \"createdAt\" : \"2025-01-20T13:49:08.910Z\" } } POST https://staging.crossmint.com/api https://www.crossmint.com/api / 2025-06-09 / wallets / {walletLocator} / signers Try it Create Delegated Signer cURL Copy Ask AI curl --request POST \\ --url https://staging.crossmint.com/api/2025-06-09/wallets/{walletLocator}/signers \\ --header 'Content-Type: application/json' \\ --header 'X-API-KEY: <x-api-key>' \\ --data '{ \"signer\": \"external-wallet:0x1234567890123456789012345678901234567890\", \"chain\": \"base\" }' 201 400 404 Copy Ask AI { \"type\" : \"external-wallet\" , \"id\" : \"cWtP7gmZbd98HbKUuGXx5Q\" , \"name\" : \"hgranger\" , \"publicKey\" : { \"x\" : \"38035223810536273945556366218149112558607829411547667975304293530457502824247\" , \"y\" : \"91117823763706733837104303008228095481082989039135234750508288790583476078729\" }, \"validatorContractVersion\" : \"0.2.0\" , \"locator\" : \"external-wallet:DzaYNi6XtWt9DNwFV61bzWEiaSxfTgWbFDgFmurJzwdo\" , \"address\" : \"DzaYNi6XtWt9DNwFV61bzWEiaSxfTgWbFDgFmurJzwdo\" , \"transaction\" : { \"chainType\" : \"solana\" , \"walletType\" : \"smart\" , \"onChain\" : { \"transaction\" : \"4B9yzZoEV45cngasy9dP2MVxhZ2iro72eqdKitTj62pqFYHk4wVoR4NCc3xkEamWbFGXLjVotyPrDqEn11WUYHoq98b5aKCSDUrLWaQDZgb3xLxF1EvaY82Vui7Ntbv682tYnu5Ngnv4Eun1wrDJ6r4aRsUSQ3XF3jvNq8bRMn4HavBjPyErQSgXX9ytCDKntCEQcY3wfMHYbRFg5zgFU1QCqhuoLa5oBpZLCUYT8DCYu3Ado7W4xzP5aCAAwVd2tj8iAnwJEujQvBnr7wWkf2mCS1cNoCTbCFAvNVaVaau6vXBWKZqS7sDNmUD3KLQVqLwxhLLNeRuvUTkD5VQ5D21VcDiYWQWQTuYYAcQ3RUhn4Vt4ymijgRGbUXZHoeN26UHoGSBFJJ7gjqCruAtFXQZxHRDKSWN9jhYXugPYVVXSpGFA5BYWBuztUtEMF4u96tk6YTgPGdkTgrQybkNxRwbVCbpsKRG1kAbjQgBxDLAX89eMCZVbzWXnAgGA6aDBQPLAyQru8awZBDasrirnxCSQq9cWwMLePQGhY5gJZykswFKtyYF4CHeto\" , \"lastValidBlockHeight\" : 343486121 }, \"id\" : \"30ef7527-eb5a-4862-92de-aa96947ee705\" , \"status\" : \"pending\" , \"approvals\" : { \"required\" : 1 , \"pending\" : [ { \"signer\" : { \"type\" : \"external-wallet\" , \"address\" : \"GsMTPi8utYnuWakS8uvPah3UKd13dWcAshirnNmXDr3d\" , \"locator\" : \"external-wallet:GsMTPi8utYnuWakS8uvPah3UKd13dWcAshirnNmXDr3d\" }, \"message\" : \"2kwN1iuY6Y6Br2i5D1QphaS28H7vDdAiwtABgtRdYqjx7s85rRwqF9y6iVBdv9dDZ8F1JAZo8iQdFBAx2Eg9tL3P4sbAznPZgkZcGrbUSCe5jTZ7ULZrcSd377SGEjsZcwx7h7ozrUKB6FnjHB7wGaCqEeeUXE2CfCjC1SjEc8ZzZeyNmeEv5hJSkGsK62syoAE4V5ScZs7idhxXWzpeJiRt3wfWJRevr1pJY7BBd8HaEYurXtXqwCox1uzQnnuZTiUNu7cUWUajYXBWUae4NJGJxmtFJvqnPAa5HXB4nZWXMDdcBis4tQkLCfFT6GXMauQTFCaKmcMgLRh218n51nTNopR7gTaY66ysRH536wmxt9dLqkS9okG3HF5GEXufXPLX6iT7e7\" } ], \"submitted\" : [] }, \"createdAt\" : \"2025-01-20T13:49:08.910Z\" } } Headers ​ X-API-KEY string required API key required for authentication Path Parameters ​ walletLocator string required A wallet locator can be of the format: <walletAddress> email:<email>:<chainType>[:<walletType>] (walletType defaults to 'smart') userId:<userId>:<chainType>[:<walletType>] (white label user example) phoneNumber:<phoneNumber>:<chainType>[:<walletType>] twitter:<handle>:<chainType>[:<walletType>] x:<handle>:<chainType>[:<walletType>] me:<chainType>[:<walletType>] (Use when calling from the client side with a client API key) Body application/json EVM Solana Parameters for creating a EVM delegated signer Response 201 201 400 404 application/json The delegated signer has been successfully created. Passkey Signer API Key Signer External Wallet Signer Email Signer Phone Signer Passkey Signer API Key Signer External Wallet Signer Email Signer Phone Signer Complete delegated signer response including the signer and authorization transaction Response schema for a registered Passkey signer including validator contract details Was this page helpful? Yes No Approve Signature Get Delegated Signer Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 749
  },
  {
    "id": "https://docs.crossmint.com/api-reference/wallets/transfer-token#chunk_0",
    "url": "https://docs.crossmint.com/api-reference/wallets/transfer-token",
    "title": "Transfer Token - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Wallets Transfer Token Documentation API Reference SDK Reference CLI Solution Guides Changelog API Reference Introduction Wallets POST Create Wallet GET Get Wallet By Locator GET Get Wallet Balance POST Fund Wallet GET Get NFTs from Wallet POST Create Transaction GET Get Transaction GET Get Wallet Transactions POST Approve Transaction POST Create Signature GET Get All Signatures GET Get Signature POST Approve Signature POST Create Delegated Signer GET Get Delegated Signer POST Transfer Token NFTs POST Mint NFT PUT Mint NFT with ID POST Mint SFT GET Get All NFTs GET Mint Status PATCH Edit NFT DEL Burn NFT IP POST Create IP Collection PUT Create IP Collection (Idempotent) GET Get IP Collection GET Get All IP Collections GET Get IP Assets in Collection GET Get IP Asset POST Create IP Asset PUT Create IP Asset (Idempotent) PATCH Update IP Asset GET Get IP Action GET Get IP Asset License GET Get IP Asset Graph NFT Collections POST Create Collection PUT Create Collection (Idempotent) GET Get All Collections GET Get Collection Info PATCH Update Collection PUT Set Royalties GET Get Royalties Configuration DEL Remove Royalties PUT Set Base URI GET Get Base URI PUT Set Transferability GET Get Transferability NFT Templates POST Create Template PUT Create Template with ID GET Get Template GET Get All Templates PATCH Edit Template DEL Delete Template Verifiable Credentials POST Create Credential template POST Issue Credential GET Get Credential by Credential ID GET Get Credential by NFT ID GET Get Credential by NFT Locator GET Retrieve credential nfts POST Verify Credential DEL Revoke Credential Verifiable Credential Types POST Create Credential Type PUT Create Credential Type with Name GET Get a Credential Type Headless Checkout POST Create Order GET Get Order PATCH Edit Order GET Check Token Support Action Status GET Get Action Status Admin GET Get Usage Transfer Token cURL Copy Ask AI curl --request POST \\ --url https://staging.crossmint.com/api/2025-06-09/wallets/{walletLocator}/tokens/{tokenLocator}/transfers \\ --header 'Content-Type: application/json' \\ --header 'X-API-KEY: <x-api-key>' \\ --data '{ \"recipient\": \"0x1234567890123456789012345678901234567890\", \"signer\": \"external-wallet:0xdeadbeef\", \"amount\": \"42.69\", \"memo\": { \"type\": \"text\", \"value\": \"Hello, world!\" } }' 201 Copy Ask AI { \"chainType\" : \"evm\" , \"walletType\" : \"smart\" , \"params\" : { \"calls\" : [ { \"address\" : \"<string>\" , \"functionName\" : \"<string>\" , \"abi\" : [ { \"type\" : \"error\" , \"inputs\" : [ \"<any>\" ], \"name\" : \"<string>\" } ], \"args\" : [ \"<any>\" ], \"value\" : \"0\" } ], \"chain\" : \"abstract\" , \"signer\" : { \"type\" : \"external-wallet\" , \"address\" : \"<string>\" , \"locator\" : \"<string>\" } }, \"onChain\" : { \"userOperation\" : { \"sender\" : \"<string>\" , \"nonce\" : \"<string>\" , \"callData\" : \"<string>\" , \"callGasLimit\" : \"<string>\" , \"verificationGasLimit\" : \"<string>\" , \"preVerificationGas\" : \"<string>\" , \"maxFeePerGas\" : \"<string>\" , \"maxPriorityFeePerGas\" : \"<string>\" , \"paymaster\" : \"<string>\" , \"paymasterVerificationGasLimit\" : \"<string>\" , \"paymasterData\" : \"<string>\" , \"paymasterPostOpGasLimit\" : \"<string>\" , \"signature\" : \"<string>\" , \"factory\" : \"<string>\" , \"factoryData\" : \"<string>\" }, \"userOperationHash\" : \"<string>\" , \"txId\" : \"<string>\" , \"explorerLink\" : \"<string>\" }, \"id\" : \"<string>\" , \"status\" : \"awaiting-approval\" , \"approvals\" : { \"pending\" : [ { \"signer\" : { \"type\" : \"external-wallet\" , \"address\" : \"<string>\" , \"locator\" : \"<string>\" }, \"message\" : \"<string>\" } ], \"submitted\" : [ { \"signature\" : \"<string>\" , \"submittedAt\" : \"2024-01-01T00:00:00.000Z\" , \"signer\" : { \"type\" : \"external-wallet\" , \"address\" : \"<string>\" , \"locator\" : \"<string>\" }, \"message\" : \"<string>\" , \"metadata\" : { \"deviceInfo\" : \"<string>\" , \"ipAddress\" : \"<string>\" , \"userAgent\" : \"<string>\" } } ], \"required\" : 123 }, \"createdAt\" : \"2024-01-01T00:00:00.000Z\" , \"completedAt\" : \"2024-01-01T00:00:00.000Z\" , \"error\" : { \"reason\" : \"build_failed\" , \"message\" : \"<string>\" }, \"sendParams\" : { \"token\" : \"<string>\" , \"params\" : { \"amount\" : \"<string>\" , \"recipient\" : \"<string>\" , \"recipientAddress\" : \"<string>\" } } } POST https://staging.crossmint.com/api https://www.crossmint.com/api / 2025-06-09 / wallets / {walletLocator} / tokens / {tokenLocator} / transfers Try it Transfer Token cURL Copy Ask AI curl --request POST \\ --url https://staging.crossmint.com/api/2025-06-09/wallets/{walletLocator}/tokens/{tokenLocator}/transfers \\ --header 'Content-Type: application/json' \\ --header 'X-API-KEY: <x-api-key>' \\ --data '{ \"recipient\": \"0x1234567890123456789012345678901234567890\", \"signer\": \"external-wallet:0xdeadbeef\", \"amount\": \"42.69\", \"memo\": { \"type\": \"text\", \"value\": \"Hello, world!\" } }' 201 Copy Ask AI { \"chainType\" : \"evm\" , \"walletType\" : \"smart\" , \"params\" : { \"calls\" : [ { \"address\" : \"<string>\" , \"functionName\" : \"<string>\" , \"abi\" : [ { \"type\" : \"error\" , \"inputs\" : [ \"<any>\" ], \"name\" : \"<string>\" } ], \"args\" : [ \"<any>\" ], \"value\" : \"0\" } ], \"chain\" : \"abstract\" , \"signer\" : { \"type\" : \"external-wallet\" , \"address\" : \"<string>\" , \"locator\" : \"<string>\" } }, \"onChain\" : { \"userOperation\" : { \"sender\" : \"<string>\" , \"nonce\" : \"<string>\" , \"callData\" : \"<string>\" , \"callGasLimit\" : \"<string>\" , \"verificationGasLimit\" : \"<string>\" , \"preVerificationGas\" : \"<string>\" , \"maxFeePerGas\" : \"<string>\" , \"maxPriorityFeePerGas\" : \"<string>\" , \"paymaster\" : \"<string>\" , \"paymasterVerificationGasLimit\" : \"<string>\" , \"paymasterData\" : \"<string>\" , \"paymasterPostOpGasLimit\" : \"<string>\" , \"signature\" : \"<string>\" , \"factory\" : \"<string>\" , \"factoryData\" : \"<string>\" }, \"userOperationHash\" : \"<string>\" , \"txId\" : \"<string>\" , \"explorerLink\" : \"<string>\" }, \"id\" : \"<string>\" , \"status\" : \"awaiting-approval\" , \"approvals\" : { \"pending\" : [ { \"signer\" : { \"type\" : \"external-wallet\" , \"address\" : \"<string>\" , \"locator\" : \"<string>\" }, \"message\" : \"<string>\" } ], \"submitted\" : [ { \"signature\" : \"<string>\" , \"submittedAt\" : \"2024-01-01T00:00:00.000Z\" , \"signer\" : { \"type\" : \"external-wallet\" , \"address\" : \"<string>\" , \"locator\" : \"<string>\" }, \"message\" : \"<string>\" , \"metadata\" : { \"deviceInfo\" : \"<string>\" , \"ipAddress\" : \"<string>\" , \"userAgent\" : \"<string>\" } } ], \"required\" : 123 }, \"createdAt\" : \"2024-01-01T00:00:00.000Z\" , \"completedAt\" : \"2024-01-01T00:00:00.000Z\" , \"error\" : { \"reason\" : \"build_failed\" , \"message\" : \"<string>\" }, \"sendParams\" : { \"token\" : \"<string>\" , \"params\" : { \"amount\" : \"<string>\" , \"recipient\" : \"<string>\" , \"recipientAddress\" : \"<string>\" } } } Headers ​ X-API-KEY string required API key required for authentication ​ x-idempotency-key string Unique key to prevent duplicate transaction creation Path Parameters ​ walletLocator string required A",
    "chunk_index": 0,
    "word_count": 1000
  },
  {
    "id": "https://docs.crossmint.com/api-reference/wallets/transfer-token#chunk_0",
    "url": "https://docs.crossmint.com/api-reference/wallets/transfer-token",
    "title": "Transfer Token - Crossmint Docs",
    "content": ", \"locator\" : \"<string>\" }, \"message\" : \"<string>\" , \"metadata\" : { \"deviceInfo\" : \"<string>\" , \"ipAddress\" : \"<string>\" , \"userAgent\" : \"<string>\" } } ], \"required\" : 123 }, \"createdAt\" : \"2024-01-01T00:00:00.000Z\" , \"completedAt\" : \"2024-01-01T00:00:00.000Z\" , \"error\" : { \"reason\" : \"build_failed\" , \"message\" : \"<string>\" }, \"sendParams\" : { \"token\" : \"<string>\" , \"params\" : { \"amount\" : \"<string>\" , \"recipient\" : \"<string>\" , \"recipientAddress\" : \"<string>\" } } } Headers ​ X-API-KEY string required API key required for authentication ​ x-idempotency-key string Unique key to prevent duplicate transaction creation Path Parameters ​ walletLocator string required A wallet locator can be of the format: <walletAddress> email:<email>:<chainType>[:<walletType>] (walletType defaults to 'smart') userId:<userId>:<chainType>[:<walletType>] (white label user example) phoneNumber:<phoneNumber>:<chainType>[:<walletType>] twitter:<handle>:<chainType>[:<walletType>] x:<handle>:<chainType>[:<walletType>] me:<chainType>[:<walletType>] (Use when calling from the client side with a client API key) ​ tokenLocator string required A token locator that supports native tokens, fungible tokens, and NFTs across different chains. It can be of the format: chain:address[:tokenId] chain:currency chain:address Body application/json Base fields for all token transfers Response 201 - application/json The transaction has been successfully created. EVM Smart Wallet EVM MPC Wallet Solana Smart Wallet Solana MPC Wallet Stellar Smart Wallet Complete transaction response including status, signing requirements, and wallet type specific data Was this page helpful? Yes No Get Delegated Signer Mint NFT Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 227
  },
  {
    "id": "https://docs.crossmint.com/authentication/customization#chunk_0",
    "url": "https://docs.crossmint.com/authentication/customization",
    "title": "Customization | Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Guides Customization Documentation API Reference SDK Reference CLI Solution Guides Changelog Introduction About Crossmint Getting Started Using AI Assistants Platform Wallets Introduction Quickstarts ⚡ Guides Authentication Introduction Quickstart ⚡ Guides Login Methods User Profile Customization Server-Side Rendering (SSR) Advanced Tokenization (Minting) Introduction Integrate Checkout Introduction Integrate Advanced Topics Modal Customization Modal props Embedded Login Email Customization With Crossmint Auth, you can customize the authentication flow and email templates with your brand’s identity. ​ Modal Customization The CrossmintAuthProvider component allows you to customize the authentication modal appearance and content. Copy Ask AI < CrossmintAuthProvider authModalTitle = \"Sign in to My App\" termsOfServiceText = { < p > By continuing, you agree to our < a href = \"/terms\" > Terms of Service </ a > and { \" \" } < a href = \"/privacy\" > Privacy Policy </ a > </ p > } appearance = { { spacingUnit: \"8px\" , borderRadius: \"12px\" , colors: { inputBackground: \"#fffdf9\" , buttonBackground: \"#fffaf2\" , border: \"#835911\" , background: \"#FAF5EC\" , textPrimary: \"#5f2c1b\" , textSecondary: \"#835911\" , textLink: \"#1400cb\" , danger: \"#ff3333\" , accent: \"#602C1B\" , }, } } > { children } </ CrossmintAuthProvider > ​ Modal props Prop Type Description authModalTitle string Custom title displayed at the top of the authentication modal termsOfServiceText string | ReactNode Custom terms of service text displayed below the authentication form appearance UIConfig Styling configuration for the modal (see example above) The modal will also use your display name configured in the Crossmint Console. To learn more, see the “Email Customization” section below. ​ Embedded Login For a more integrated experience, you can use our embedded login component, which offers flexibility to display the login form in your own modal or as part of a split login screen. Copy Ask AI import { EmbeddedAuthForm , useAuth } from \"@crossmint/client-sdk-react-ui\" ; export default function Home () { const { user , status } = useAuth (); // \"in-progress\" | \"logged-in\" | \"logged-out\" return < div className = \"max-w-[150px]\" > { status === \"logged-in\" ? user . email : < EmbeddedAuthForm /> } </ div > ; } ​ Email Customization Email OTP is a login method that allows users to sign in to your app using their email address. They receive a one-time code via email that they can use to log in. You can customize the email template to align with your brand’s identity. We strongly recommend doing so, as it increases user trust and security. To modify the email template: In the Crossmint Console, click on Settings, and navigate to the Branding tab. Here, you can customize: The logo displayed in the email with your logo. The display name textbox to include your brand’s name. When customizing email text, avoid using terms like “airdrop”, “token”, or “crypto” as these can trigger spam filters and hurt email deliverability. Was this page helpful? Yes No User Profile Server-Side Rendering (SSR) Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 504
  },
  {
    "id": "https://docs.crossmint.com/authentication/introduction#chunk_0",
    "url": "https://docs.crossmint.com/authentication/introduction",
    "title": "Introduction to Authentication | Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Authentication Introduction Documentation API Reference SDK Reference CLI Solution Guides Changelog Introduction About Crossmint Getting Started Using AI Assistants Platform Wallets Introduction Quickstarts ⚡ Guides Authentication Introduction Quickstart ⚡ Guides Tokenization (Minting) Introduction Integrate Checkout Introduction Integrate Advanced Topics Key Characteristics Get started Authenticate users using web3 or traditional sign-in methods: Email OTP : passwordless sign-in using a one time code delivered to the user’s email. Social Accounts : Sign in with Google, Apple, X, and more. Farcaster : using the Sign In With Farcaster (SIWF) standard . External wallets : connect with crypto wallets for Web3 authentication. ​ Key Characteristics Seamless connection between wallets and user accounts Optionally create or link user wallets with all your user accounts, to have a single, unified identity system across your backend and web3 app. Securely authorize your users Authorize calls to your backend services, and to any of Crossmint’s products: minting, payments, subscriptions, etc. Drag and drop integration Setup is quick and easy. Launch your app in under 5 minutes. ​ Get started Quickstart Log-in your first user in less than 5 minutes. Create Wallets for your users More detailed guide on how to integrate wallets upon user login. User Profile Get and update user information. Talk to an expert Contact our sales team for advanced support. Was this page helpful? Yes No Migrate to Wallets SDK v2 Quickstart ⚡ Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 249
  },
  {
    "id": "https://docs.crossmint.com/authentication/login-methods#chunk_0",
    "url": "https://docs.crossmint.com/authentication/login-methods",
    "title": "Login Methods | Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Guides Login Methods Documentation API Reference SDK Reference CLI Solution Guides Changelog Introduction About Crossmint Getting Started Using AI Assistants Platform Wallets Introduction Quickstarts ⚡ Guides Authentication Introduction Quickstart ⚡ Guides Login Methods User Profile Customization Server-Side Rendering (SSR) Advanced Tokenization (Minting) Introduction Integrate Checkout Introduction Integrate Advanced Topics Crossmint Auth supports the following login methods: Email OTP : passwordless sign-in using a one time code delivered to the user’s email. Social Accounts : Sign in with Google, X, Farcaster, and more. External wallets : connect with crypto wallets for Web3 authentication. Use \"web3\" for all wallets, \"web3:evm-only\" for Ethereum-compatible wallets only, or \"web3:solana-only\" for Solana wallets only. To customize which login methods are shown to your users, use the loginMethods prop when initializing Crossmint Auth. By default, only email and Google are enabled. app/providers/Providers.tsx Copy Ask AI \"use client\" ; import { CrossmintProvider , CrossmintAuthProvider } from \"@crossmint/client-sdk-react-ui\" ; export default function Providers ({ children } : { children : React . ReactNode }) { return ( < CrossmintProvider apiKey = { process . env . NEXT_PUBLIC_CROSSMINT_API_KEY ?? \"\" } > < CrossmintAuthProvider loginMethods = { [ \"email\" , \"google\" , \"farcaster\" , \"twitter\" , \"web3\" ] } // Show email, Google, Farcaster, X (Twitter), and external wallets as login methods > { children } </ CrossmintAuthProvider > </ CrossmintProvider > ); } Was this page helpful? Yes No Quickstart ⚡ User Profile Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 255
  },
  {
    "id": "https://docs.crossmint.com/authentication/quickstart#chunk_0",
    "url": "https://docs.crossmint.com/authentication/quickstart",
    "title": "Quickstart ⚡ - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Authentication Quickstart ⚡ Documentation API Reference SDK Reference CLI Solution Guides Changelog Introduction About Crossmint Getting Started Using AI Assistants Platform Wallets Introduction Quickstarts ⚡ Guides Authentication Introduction Quickstart ⚡ Guides Tokenization (Minting) Introduction Integrate Checkout Introduction Integrate Advanced Topics Launching in Production Next steps Before you start Set up your project and get an API key. Auth with Wallets Quickstart See a full working example with auth and wallets. 1 Install the SDK Run the following command to install the SDK: npm yarn pnpm bun Copy Ask AI npm i @crossmint/client-sdk-react-ui 2 Add the Crossmint providers to your app Add the necessary Crossmint providers to your app. next.js create-react-app Copy Ask AI \"use client\" ; import { CrossmintProvider , CrossmintAuthProvider , CrossmintWalletProvider , } from \"@crossmint/client-sdk-react-ui\" ; export function Providers ({ children } : { children : React . ReactNode }) { return ( < CrossmintProvider apiKey = \"<crossmint-client-api-key>\" > < CrossmintAuthProvider > { children } </ CrossmintAuthProvider > </ CrossmintProvider > ); } 3 Add login and logout functionality next.js create-react-app Copy Ask AI \"use client\" ; import { useAuth } from \"@crossmint/client-sdk-react-ui\" ; export function AuthButton () { const { login , logout , user , jwt } = useAuth (); return ( < div className = \"flex gap-4\" > { user == null ? ( < button type = \"button\" onClick = { login } className = \"bg-blue-500 text-white font-bold py-2 px-4 rounded\" > Login </ button > ) : ( < button type = \"button\" onClick = { logout } className = \"bg-black text-white font-bold py-2 px-4 rounded border-2 border-blue-500\" > Logout </ button > ) } < p > User: { user ?. userId } </ p > < p > Email: { user ?. email ?? \"None\" } </ p > < p > Phone Number: { user ?. phoneNumber ?? \"None\" } </ p > < p > Farcaster username: { user ?. farcaster ?. username ?? \"None\" } </ p > < p > Google display name: { user ?. google ?. displayName ?? \"None\" } </ p > < p > JWT: { jwt } </ p > </ div > ); } ​ Launching in Production For production, the steps are almost identical, but some changes are required: Create a developer account on the production console Create a production client API key on the API Keys page with the API scopes users.create , users.read , wallets.read Replace your test API key with the production key ​ Next steps Read and update user information Use webhooks to get notified when a user signs up Create Smart Wallets on sign up Was this page helpful? Yes No Introduction Login Methods Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 470
  },
  {
    "id": "https://docs.crossmint.com/authentication/security#chunk_0",
    "url": "https://docs.crossmint.com/authentication/security",
    "title": "Secure Cookies | Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Advanced Secure Cookies Documentation API Reference SDK Reference CLI Solution Guides Changelog Introduction About Crossmint Getting Started Using AI Assistants Platform Wallets Introduction Quickstarts ⚡ Guides Authentication Introduction Quickstart ⚡ Guides Login Methods User Profile Customization Server-Side Rendering (SSR) Advanced Secure Cookies User Webhooks Tokenization (Minting) Introduction Integrate Checkout Introduction Integrate Advanced Topics 1. Configure Cookie Options 2. Custom Routes Implementation Token Refresh Route Logout Route 3. Client Configuration Authentication tokens are accessible to client-side JavaScript by default through non-HttpOnly cookies. For stronger security, you can store tokens in HttpOnly cookies, which are accessible only on the server side. This setup requires custom routes for refreshing tokens and logging out, using utilities from @crossmint/server-sdk . ​ 1. Configure Cookie Options When initializing the server SDK, configure secure cookie options: Copy Ask AI import { createCrossmint , CrossmintAuth } from \"@crossmint/server-sdk\" ; const crossmint = createCrossmint ({ apiKey: process . env . SERVER_CROSSMINT_API_KEY }); const crossmintAuth = CrossmintAuth . from ( crossmint , { cookieOptions: { httpOnly: true , secure: true , // Only send cookies over HTTPS domain: \".yourdomain.com\" , // Optional: specify cookie domain }, }); Note: The httpOnly flag only applies to the refresh token. The session JWT remains accessible to client-side JavaScript since it’s needed for API calls. ​ 2. Custom Routes Implementation ​ Token Refresh Route Next.js (App Router) Express.js Copy Ask AI import { createCrossmint , CrossmintAuth } from \"@crossmint/server-sdk\" ; import { NextRequest } from \"next/server\" ; const crossmint = createCrossmint ({ apiKey: process . env . SERVER_CROSSMINT_API_KEY ! }); const crossmintAuth = CrossmintAuth . from ( crossmint ); export async function POST ( request : NextRequest ) { return await crossmintAuth . handleCustomRefresh ( request ); } ​ Logout Route Next.js (App Router) Express.js Copy Ask AI import { createCrossmint , CrossmintAuth } from \"@crossmint/server-sdk\" ; import { NextRequest } from \"next/server\" ; const crossmint = createCrossmint ({ apiKey: process . env . SERVER_CROSSMINT_API_KEY ! }); const crossmintAuth = CrossmintAuth . from ( crossmint ); export async function POST ( request : NextRequest ) { return await crossmintAuth . logout ( request ); } ​ 3. Client Configuration Configure the client SDK to use your custom routes: TypeScript React Copy Ask AI import { createCrossmint , CrossmintAuth } from \"@crossmint/client-sdk-auth\" ; const crossmint = createCrossmint ({ apiKey: process . env . NEXT_PUBLIC_CLIENT_CROSSMINT_API_KEY ! }); const crossmintAuth = CrossmintAuth . from ( crossmint , { refreshRoute: \"/api/auth/refresh\" , logoutRoute: \"/api/auth/logout\" }); Note: Depending on the framework you’re using, you might need to set the whole URL in the refreshRoute and logoutRoute options. Was this page helpful? Yes No Server-Side Rendering (SSR) User Webhooks Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 460
  },
  {
    "id": "https://docs.crossmint.com/authentication/ssr#chunk_0",
    "url": "https://docs.crossmint.com/authentication/ssr",
    "title": "Server-Side Rendering (SSR) | Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Guides Server-Side Rendering (SSR) Documentation API Reference SDK Reference CLI Solution Guides Changelog Introduction About Crossmint Getting Started Using AI Assistants Platform Wallets Introduction Quickstarts ⚡ Guides Authentication Introduction Quickstart ⚡ Guides Login Methods User Profile Customization Server-Side Rendering (SSR) Advanced Tokenization (Minting) Introduction Integrate Checkout Introduction Integrate Advanced Topics Overview Installation Initialization Core Functionality Session Management User Profile Retrieval JWT Verification Crossmint Auth provides a flexible and simple authentication solution for your crypto server-side applications. This guide covers how to integrate and use Crossmint Auth across various server-side frameworks. ​ Overview Our server SDK allows you to: Manage user sessions Retrieve user profiles Verify JSON Web Tokens (JWTs) ​ Installation First, install the Crossmint Server SDK: Copy Ask AI npm install @crossmint/server-sdk ​ Initialization To use Crossmint Auth, you need to initialize it with your Server API key. This API requires the users.read scope. Copy Ask AI import { createCrossmint , CrossmintAuth } from \"@crossmint/server-sdk\" ; const crossmint = createCrossmint ({ apiKey: process . env . SERVER_CROSSMINT_API_KEY }); const crossmintAuth = CrossmintAuth . from ( crossmint ); ​ Core Functionality ​ Session Management The getSession method validates or refreshes a user’s session based on their JWT and refresh token. Copy Ask AI const { jwt , refreshToken , userId } = await crossmintAuth . getSession ( req , res ); This method: Fetches the current JWT and refresh token from the cookies with keys crossmint-jwt and crossmint-refresh-token . Checks if the current JWT is valid Refreshes the session if needed Stores the new JWT and refresh token in cookies Returns new auth materials and the user ID Next.js (App Router) Express.js Vanilla Node.js For other frameworks that do not expose standard request and response objects, such as Next.js using the App Router, you can pass in an object with jwt and refreshToken properties instead: middleware.ts getAuthSession.ts page.tsx Copy Ask AI import { NextResponse } from \"next/server\" ; import type { NextRequest } from \"next/server\" ; import { createCrossmint , CrossmintAuth } from \"@crossmint/server-sdk\" ; export async function middleware ( request : NextRequest ) { // Skip middleware for API routes and static files if ( request . nextUrl . pathname . startsWith ( \"/api\" ) || request . nextUrl . pathname . startsWith ( \"/_next\" )) { return NextResponse . next (); } const response = NextResponse . next (); const jwt = request . cookies . get ( \"crossmint-jwt\" )?. value ; const refreshToken = request . cookies . get ( \"crossmint-refresh-token\" )?. value ; if ( refreshToken == null ) { return response ; } try { const crossmint = createCrossmint ({ apiKey: process . env . SERVER_CROSSMINT_API_KEY || \"\" , }); const crossmintAuth = CrossmintAuth . from ( crossmint ); const { jwt : newJwt , refreshToken : newRefreshToken } = await crossmintAuth . getSession ({ jwt , refreshToken , }); // Only update response cookies if tokens have changed if ( newJwt !== jwt || newRefreshToken . secret !== refreshToken ) { response . cookies . set ( \"crossmint-jwt\" , newJwt ); response . cookies . set ( \"crossmint-refresh-token\" , newRefreshToken . secret ); } } catch ( _ ) { // If auth fails, clear cookies and redirect to home response . cookies . delete ( \"crossmint-jwt\" ); response . cookies . delete ( \"crossmint-refresh-token\" ); } return response ; } ​ User Profile Retrieval Fetch user details using the getUser method: Copy Ask AI const user = await crossmintAuth . getUser ( userId ); This provides access to user information such as email, phone number, and connected accounts (e.g., Google, Farcaster). ​ JWT Verification Verify JWTs independently using the verifyCrossmintJwt method: Copy Ask AI const decodedJwt = crossmintAuth . verifyCrossmintJwt ( token ); This is useful for validating tokens in middleware or specific endpoints. We expose our public keys for this purpose at https://www.crossmint.com/.well-known/jwks.json . Was this page helpful? Yes No Customization Secure Cookies Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 672
  },
  {
    "id": "https://docs.crossmint.com/authentication/user-profile#chunk_0",
    "url": "https://docs.crossmint.com/authentication/user-profile",
    "title": "User Profile | Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Guides User Profile Documentation API Reference SDK Reference CLI Solution Guides Changelog Introduction About Crossmint Getting Started Using AI Assistants Platform Wallets Introduction Quickstarts ⚡ Guides Authentication Introduction Quickstart ⚡ Guides Login Methods User Profile Customization Server-Side Rendering (SSR) Advanced Tokenization (Minting) Introduction Integrate Checkout Introduction Integrate Advanced Topics Reading User Data Server-side Response Format Client-side Crossmint Auth provides a way to retrieve and update user profile data, such as email, social login metadata, and more. Fields in the User Object The user object contains the following information: userId : User’s unique identifier. email : User’s email address. phoneNumber : User’s phone number. google : User’s Google account data. farcaster : User’s Farcaster account data. Google Account data contains: name : User’s Google display name. picture : User’s Google profile picture URL. Farcaster Account data contains: fid : User’s Farcaster ID. username : User’s Farcaster username. bio : User’s Farcaster bio. displayName : User’s Farcaster display name. pfpUrl : User’s Farcaster profile image URL. custody : User’s FID custody address. verifications : List of the user’s verified addresses. ​ Reading User Data This API requires the users.read scope. Server side : Requires a server-side API key. Client side : Requires a client-side API key, and a logged in user. ​ Server-side For server-side operations, use the @crossmint/server-sdk that provides a getUser function to fetch user information. Copy Ask AI import { createCrossmint , CrossmintAuth } from \"@crossmint/server-sdk\" ; const crossmint = createCrossmint ({ apiKey: SERVER_API_KEY }); const crossmintAuth = CrossmintAuth . from ( crossmint ); async function getUser ( userId : string ) { try { const user = await crossmintAuth . getUser ( userId ); console . log ( \"User data:\" , user ); } catch ( error ) { console . error ( \"Error fetching user data:\" , error ); } } ​ Response Format Copy Ask AI { \"userId\" : \"123\" , \"email\" : \"test@test.com\" , // Optional (if user was created with email) \"phoneNumber\" : \"123456789\" , // Optional (if user was created with phone number) \"google\" : { \"name\" : \"John Doe\" , \"picture\" : \"https://example.com/picture.jpg\" }, \"farcaster\" : { \"fid\" : \"123\" , \"username\" : \"johndoe\" , \"bio\" : \"Hello, I'm John Doe\" , \"displayName\" : \"John Doe\" , \"pfpUrl\" : \"https://example.com/pfp.jpg\" , \"custody\" : \"0x1234567890123456789012345678901234567890\" , \"verifications\" : [ \"0x1234567890123456789012345678901234567890\" ] } } ​ Client-side Use the useAuth react hook from @crossmint/client-sdk-react-ui to access the user object. If you would like to use a different framework, contact support React Copy Ask AI import { useAuth } from \"@crossmint/client-sdk-react-ui\" ; function User () { const { user } = useAuth (); if ( ! user ) { return < div > Loading user ...</ div > ; } return ( < div > < h1 > User </ h1 > < p > User ID : { user . userId }</ p > < p > Email : { user . email }</ p > < p > Phone Number : { user . phoneNumber }</ p > < p > Google Name : { user . google ?. name }</ p > < p > Google Picture : { user . google ?. picture }</ p > < p > Farcaster FID : { user . farcaster ?. fid }</ p > < p > Farcaster Username : { user . farcaster ?. username }</ p > < p > Farcaster Bio : { user . farcaster ?. bio }</ p > < p > Farcaster Display Name : { user . farcaster ?. displayName }</ p > < p > Farcaster PFP URL : { user . farcaster ?. pfpUrl }</ p > < p > Farcaster Custody : { user . farcaster ?. custody }</ p > < p > Farcaster Verifications : { user . farcaster ?. verifications }</ p > </ div > ); } Was this page helpful? Yes No Login Methods Customization Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 676
  },
  {
    "id": "https://docs.crossmint.com/authentication/webhooks#chunk_0",
    "url": "https://docs.crossmint.com/authentication/webhooks",
    "title": "User Webhooks | Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Advanced User Webhooks Documentation API Reference SDK Reference CLI Solution Guides Changelog Introduction About Crossmint Getting Started Using AI Assistants Platform Wallets Introduction Quickstarts ⚡ Guides Authentication Introduction Quickstart ⚡ Guides Login Methods User Profile Customization Server-Side Rendering (SSR) Advanced Secure Cookies User Webhooks Tokenization (Minting) Introduction Integrate Checkout Introduction Integrate Advanced Topics Webhook Events users.created users.updated Handling Webhooks ​ Webhook Events ​ users.created This webhook is triggered when a new user is created. Payload Copy Ask AI { \"type\" : \"users.created\" , \"status\" : \"success\" , \"data\" : { \"userId\" : \"123\" , // User's identifier \"email\" : \"test@test.com\" , // Optional (if user was created with email) \"phoneNumber\" : \"123456789\" // Optional (if user was created with phone number) } } ​ users.updated This webhook is triggered when a user’s email or phone number is successfully updated. Payload Copy Ask AI { \"type\" : \"users.updated\" , \"status\" : \"success\" , \"data\" : { \"actionId\" : \"1234\" , // Update action identifier \"userId\" : \"123\" , // User identifier \"oldEmail\" : \"test@test.com\" , // Optional (if user was created with email) \"newEmail\" : \"test2@test2.com\" , // Optional (if user was created with email) \"oldPhoneNumber\" : \"123456789\" , // Optional (if user was created with phone number) \"newPhoneNumber\" : \"987654321\" // Optional (if user was created with phone number) } } ​ Handling Webhooks To handle webhooks, you need to set up an endpoint in your application that can receive HTTP POST requests from Crossmint. Here’s an example of how you might handle a webhook in a Node.js application: Copy Ask AI // Example webhook handler app . post ( \"/webhooks\" , ( req , res ) => { const event = req . body ; switch ( event . type ) { case \"users.created\" : handleUserCreated ( event . data ); break ; case \"users.updated\" : handleUserUpdated ( event . data ); break ; default : console . log ( `Unhandled event type: ${ event . type } ` ); } res . sendStatus ( 200 ); }); Was this page helpful? Yes No Secure Cookies Introduction Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 369
  },
  {
    "id": "https://docs.crossmint.com/changelog/timeline#chunk_0",
    "url": "https://docs.crossmint.com/changelog/timeline",
    "title": "Changelog Timeline - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Changelog Changelog Timeline Documentation API Reference SDK Reference CLI Solution Guides Changelog Changelog Timeline Apr 03, 2025 Support for sign in with Ethereum and Solana on Crossmint Auth Users can now log in with external ethereum and solana wallets, and obtain a Crossmint JWT token for authorization against any backend and Crossmint APIs features wallets Apr 03, 2025 Enhanced Solana Transaction Signing Fixed signing for keypair in Solana sendTransaction method. This improvement ensures more reliable transaction signing when using Solana keypairs. improvements wallets Mar 27, 2025 Support for cNFT v2 on Core Collections Added support for minting cNFT v2 on Core collections, expanding the platform’s NFT creation capabilities. This enhancement allows users to perform more sophisticated operations with cNFTs such as burning, freezing and transferring as a collection owner. features minting Mar 25, 2025 Passkey Support for Delegated Signers Added passkey support as a delegated signer option for EVM wallets, enhancing security and user experience. This feature allows users to use passkeys as an authentication method for wallet operations. features wallets Mar 24, 2025 New Default Project Form Added a new default project form to improve the console onboarding experience. This allows users to easily set their project name on creation, instead of having a default name assigned to them. features console Mar, 14, 2025 SUI Chain Integration Added support for SUI chain integration. This new chain integration enables users to create and manage collections, mint NFTs, and perform transactions using SUI chain. new chains Feb, 26, 2025 Delegated Signer Support for Solana Smart Wallets Enhanced Solana smart wallet capabilities with delegated signer support, enabling more flexible wallet management and mainnet functionality. features wallets Feb, 18, 2025 Managed Collections Support for Avalanche Blockchain Added support for managed collections on the Avalanche blockchain, expanding our multi-chain capabilities for NFT management. features chains Feb, 12, 2025 Walrus Storage Integration: Decentralized Storage for NFT Metadata Introduced Walrus Network as a new decentralized storage solution for efficient and scalable NFT metadata hosting across multiple blockchains. new infrastructure Jan, 15, 2025 Sui Blockchain Support for Custodial Wallets Added support for Sui blockchain in Custodial Wallets V2, enabling wallet creation and management for this emerging blockchain. features wallets Jan, 08, 2025 ApeCoin Chain Integration Added support for ApeCoin chain with native APE currency integration. This new chain integration enables users to create and manage collections, mint NFTs, and perform transactions using APE as the native currency. new chains Jan, 08, 2025 EVM MPC Wallet Signature Support Added signature functionality for EVM MPC wallets, enhancing the security and capabilities of our wallet infrastructure for Ethereum Virtual Machine compatible chains. features wallets, security Jan, 08, 2025 Enhanced Wallet Security with Fund Amount Metrics Implemented comprehensive metrics tracking for custodial wallet funding to enhance security monitoring and prevent potential treasury drainage risks. improvements wallets, security Jan, 08, 2025 Enhanced Stable Wallets SDK and API Compatibility Improved SDK and API compatibility for stable wallets, ensuring seamless integration and enhanced functionality across the platform. improvements wallets Jan, 08, 2025 Hosted v3 Documentation Update Updated platform documentation to make hosted v3 the default, improving accessibility and organization of developer resources. changed infrastructure Jan, 07, 2025 Scroll Chain Mainnet Launch Launched full mainnet support for Scroll chain, enabling NFT minting and collection management with proven transaction capability on the Scroll network. new chains Sep 16, 2024 Send email delivery notifications to NFT recipients New feature allowing customizable email notifications to be sent to NFT recipients when minting, with support for different locales and branding options feature minting July 26, 2024 Sponsor fees for users on the checkout Added support for sponsor fee calculations during the checkout process new checkout June 05, 2024 Launching Orders: See who purchased your NFTs from the Console New feature allowing creators to track and view NFT purchase orders directly from the Console interface new console May 30, 2024 Crossmint now supports SKALE Launch of SKALE blockchain support for wallet creation, NFT collections, and minting on both testnet and mainnet environments new chains April 30, 2024 Adding Support for NFT Checkout on Apex Protocol Integration of NFT Checkout functionality for Apex Protocol smart contracts, enabling credit card and crypto payments new checkout April 04, 2024 Deprecating Polygon Mumbai and Releasing Polygon Amoy support on Staging Transition from Polygon Mumbai to Polygon Amoy testnet with timeline for Mumbai deprecation and Amoy integration changed chains Feb 15, 2024 New: You can now update compressed NFTs in Solana Added support for updating compressed NFTs on Solana blockchain with same pricing as minting operations new minting Feb 09, 2024 Addition of a new webhook for the third party contracts deployed and imported on Crossmint. New webhook event ‘nfts.create.failed’ added to track failed minting attempts for third-party contracts new minting Feb 02, 2024 Releasing Sepolia support on all EVM L2s Addition of Sepolia testnet support for all EVM chains and phased deprecation plan for Goerli testnet across all networks new chains Jan 11, 2024 Event identifiers property renamed on the Webhook payload Breaking changes to webhook event type names requiring updates to handle both old and new event identifiers for collection and NFT operations changed infrastructure Nov 30th, 2023 Announcing Branded Checkout v2 Launch of new modular checkout system with improved user experience and feature customization options for all Crossmint projects improvement checkout Nov 22nd, 2023 Pay with crypto is now available with Embedded Checkout Added support for cross-chain cryptocurrency payments in Embedded Checkout alongside existing credit card payment option feature checkout Nov 15th, 2023 Deprecating Support for Arbitrum on the Staging Developer Console Announcement of the deprecation of Arbitrum support in the staging developer console environment changed chains Nov 7th, 2023 Contract creation is now self-serve for Optimism Users can now create and deploy contracts on Optimism through a self-service process new chains Oct 31st, 2023 Minting API is now self-serve for four more EVM chains Self-serve Minting API support expanded to include Base, Optimism, Arbitrum, and Avalanche chains feature chains Oct",
    "chunk_index": 0,
    "word_count": 1000
  },
  {
    "id": "https://docs.crossmint.com/changelog/timeline#chunk_0",
    "url": "https://docs.crossmint.com/changelog/timeline",
    "title": "Changelog Timeline - Crossmint Docs",
    "content": "Embedded Checkout Added support for cross-chain cryptocurrency payments in Embedded Checkout alongside existing credit card payment option feature checkout Nov 15th, 2023 Deprecating Support for Arbitrum on the Staging Developer Console Announcement of the deprecation of Arbitrum support in the staging developer console environment changed chains Nov 7th, 2023 Contract creation is now self-serve for Optimism Users can now create and deploy contracts on Optimism through a self-service process new chains Oct 31st, 2023 Minting API is now self-serve for four more EVM chains Self-serve Minting API support expanded to include Base, Optimism, Arbitrum, and Avalanche chains feature chains Oct 28th, 2023 Support for Highlight.xyz on Crossmint Added integration support for Highlight.xyz NFT marketplace on the Crossmint platform new Oct 14th, 2023 Treasury Contract Upgrade Details of the Treasury smart contract upgrade and its new features improvement infrastructure Was this page helpful? Yes No Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 154
  },
  {
    "id": "https://docs.crossmint.com/cli/help#chunk_0",
    "url": "https://docs.crossmint.com/cli/help",
    "title": "Crossmint help - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Commands Crossmint help Documentation API Reference SDK Reference CLI Solution Guides Changelog CLI Getting started Commands crossmint login crossmint logout crossmint whoami crossmint help crossmint keys create crossmint keys list crossmint keys delete crossmint keys edit crossmint projects create crossmint projects select crossmint projects details Run the following command from your terminal to list all commands Copy Ask AI crossmint help ``` ## Options ``` $ crossmint --help <command> # Display help for command, including the supported flags $ crossmint -h <command> # Display help for command, including the supported flags ``` ## Example ``` Usage: crossmint [options] [command] Crossmint CLI Tool Options: -V, --version output the version number -h, --help display help for command Commands: keys API Keys management commands login Login to Crossmint logout Logout from Crossmint projects Project management commands whoami Show current user and environment help [command] display help for command ``` Was this page helpful? Yes No crossmint whoami crossmint keys create Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 178
  },
  {
    "id": "https://docs.crossmint.com/cli/install#chunk_0",
    "url": "https://docs.crossmint.com/cli/install",
    "title": "Get started with the Crossmint CLI - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation CLI Get started with the Crossmint CLI Documentation API Reference SDK Reference CLI Solution Guides Changelog CLI Getting started Commands Installation Command Reference The Crossmint CLI is a command-line tool that allows you to interact with Crossmint directly from your terminal. It can be installed via Homebrew or any javascript package managers and works on macOS, Linux, and Windows. ​ Installation To download and install Crossmint CLI, run the following command from your terminal: pnpm yarn npm brew Copy Ask AI pnpm add -g @crossmint/cli ​ Command Reference The Crossmint CLI provides the following commands: Command Description crossmint login Login to Crossmint crossmint logout Logout from Crossmint crossmint whoami Show current user and environment crossmint help List and explains all commands crossmint keys create Create a new API Key crossmint keys list [type] List all API Keys (optionally filter by type: server|client) crossmint keys delete <key-id> Delete an API Key crossmint keys edit <key-id> Edit the scopes of an API Key crossmint projects create Create a new project crossmint projects select Select a project crossmint projects details Show project details Refer to the individual command documentation for more detailed information on each command. Was this page helpful? Yes No crossmint login Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 222
  },
  {
    "id": "https://docs.crossmint.com/cli/keys/create#chunk_0",
    "url": "https://docs.crossmint.com/cli/keys/create",
    "title": "Crossmint keys create - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Commands Crossmint keys create Documentation API Reference SDK Reference CLI Solution Guides Changelog CLI Getting started Commands crossmint login crossmint logout crossmint whoami crossmint help crossmint keys create crossmint keys list crossmint keys delete crossmint keys edit crossmint projects create crossmint projects select crossmint projects details Example The keys create command allows you to create a new API key for your Crossmint project. To use it, run the following command from your terminal Copy Ask AI crossmint keys create Server-side keys are view-once in Production, make sure to copy your API key secret when it’s displayed, as it won’t be shown again. Client-side keys require selecting the app type and adding allowed origins—use domain URLs for web or package/bundle IDs for mobile. ​ Example Start the API key creation process: Copy Ask AI crossmint keys create Select the type of key you want to create: Copy Ask AI ? Select Key Usage: (Use arrow keys) Server side > Client side For client-side keys, select the application type: Copy Ask AI ? Select client platform: (Use arrow keys) > Web Mobile Specify the allowed origins for your key. For web enter the domain, eg: https://crossmint.com For mobile enter your Android Package name or IOS Bundle ID, eg: com.company.appname Enter multiple domains or app identifiers separated by a comma. Copy Ask AI ? Enter whitelisted domain or localhost (e.g., https://www.yourdomain.com) (separate multiple domains with a comma): https://www.crossmint.com Select the scopes you want to add to the key by pressing space. Once you are ready, press enter to create the key: Copy Ask AI ? Select scopes for client key: ● Read wallet (wallets.read) ● Create wallet (wallets.create) ○ Create Transaction (wallets.transactions.create) ○ Sign Transaction (wallets.transactions.sign) ○ Read Transactions (wallets.transactions.read) ○ Create Wallet Signatures (wallets.signatures.create) The CLI will display the created API key information, this includes the Key ID and Client Secret: Copy Ask AI ✅ API Key created successfully! Key ID: 67ff9c388687868382... 🔒 Key Secret: ck_production_3218u5TFZMGkK16uLbKfxDsJ4xtwSd2xtZRa9A8cbe64oRMe1J148XTGbuSvqmxB4k9TspLUAbKyt2RTqbArGBdkvARxkCg8S1tgwb4ie3gUNFw74vTuCUhSpu7ojkjGxY6epj... Was this page helpful? Yes No crossmint help crossmint keys list Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 356
  },
  {
    "id": "https://docs.crossmint.com/cli/keys/delete#chunk_0",
    "url": "https://docs.crossmint.com/cli/keys/delete",
    "title": "Crossmint keys delete - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Commands Crossmint keys delete Documentation API Reference SDK Reference CLI Solution Guides Changelog CLI Getting started Commands crossmint login crossmint logout crossmint whoami crossmint help crossmint keys create crossmint keys list crossmint keys delete crossmint keys edit crossmint projects create crossmint projects select crossmint projects details Example The keys delete command allows you to delete an existing API key from your Crossmint project. To use it, run the following command from your terminal Copy Ask AI crossmint keys delete < key-i d > Where <key-id> is the ID of the API key you want to delete. You can get the key id by running keys list command ​ Example Delete an API key: Copy Ask AI crossmint keys delete sk_test_abcd1234 You will be prompted to confirm the deletion: Copy Ask AI ? Are you sure you want to delete this API key? This action cannot be undone. (y/N) After confirming, you’ll see a success message: Copy Ask AI ✅ API Key deleted successfully! Note: Once an API key is deleted, any applications or services using that key will no longer be able to authenticate with the Crossmint API. Was this page helpful? Yes No crossmint keys list crossmint keys edit Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 221
  },
  {
    "id": "https://docs.crossmint.com/cli/keys/edit#chunk_0",
    "url": "https://docs.crossmint.com/cli/keys/edit",
    "title": "Crossmint keys edit - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Commands Crossmint keys edit Documentation API Reference SDK Reference CLI Solution Guides Changelog CLI Getting started Commands crossmint login crossmint logout crossmint whoami crossmint help crossmint keys create crossmint keys list crossmint keys delete crossmint keys edit crossmint projects create crossmint projects select crossmint projects details Example The keys edit command allows you to modify the scopes of an existing server API key. To use it, run the following command from your terminal Copy Ask AI crossmint keys edit < key-i d > Where <key-id> is the ID of the API key you want to edit. You can get the key id by running keys list command. ​ Example Edit an API key: Copy Ask AI crossmint keys edit sk_test_abcd1234 For client-side keys, edit the allowed origins for your key. Press <tab> for editing or <enter> for confirming the value. For web enter the domain, eg: https://crossmint.com For mobile enter your Android Package name or IOS Bundle ID, eg: com.company.appname Enter multiple domains or app identifiers separated by a comma. Copy Ask AI ? Enter whitelisted domain or localhost (e.g., https://www.yourdomain.com) (separate multiple domains with a comma): Press <tab> to edit or <enter> to confirm current value (https://www.crossmint.com) The CLI will display the current scopes and prompt you to select new ones: Copy Ask AI Current scopes: Wallets ? Select the new scopes for this key: (Press <space> to select, <a> to toggle all, <i> to invert selection, and <enter> to proceed) ❯◉ Wallets ◉ Minting ◯ Payments ◯ Authentication After selecting the new scopes, you’ll see a confirmation message: Copy Ask AI ✅ API Key updated successfully! Note: This command only works for server API keys, as client API keys do not have configurable scopes. Was this page helpful? Yes No crossmint keys delete crossmint projects create Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 319
  },
  {
    "id": "https://docs.crossmint.com/cli/keys/list#chunk_0",
    "url": "https://docs.crossmint.com/cli/keys/list",
    "title": "Crossmint keys list - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Commands Crossmint keys list Documentation API Reference SDK Reference CLI Solution Guides Changelog CLI Getting started Commands crossmint login crossmint logout crossmint whoami crossmint help crossmint keys create crossmint keys list crossmint keys delete crossmint keys edit crossmint projects create crossmint projects select crossmint projects details Example The keys list command displays all API keys associated with your Crossmint project. To use it, run the following command from your terminal Copy Ask AI crossmint keys list [type] Where [type] is an optional parameter to filter keys by type (server or client). ​ Example List all API keys: Copy Ask AI crossmint keys list Copy Ask AI ========= 1. Key ID: 67d444369323ea298a4ef9f8 Key Secret: ******************4jTa Type Server Created By guille.a@paella.dev Created 3/14/2025, 3:59:02 PM Scopes wallets.read, wallets.create, wallets:transactions.create, wallets:transactions.sign, wallets:transactions.read, wallets:signatures.create, wallets:signatures.read, wallets:nfts.read, wallets:balance.read, wallets.fund, wallets:messages.sign ========= 2. Key ID: 679217c403723242bd87d3e75 Key Secret: ck_production_AGUysPdnSg3rW2opefTqWAbfXRaCLtEBiYCSNL7 Jbm9L Type Client Created 1/23/2025, 11:19:48 AM Scopes wallets.read, wallets.create, wallets:nfts.read, wallets:transactions.create Whitelisted App IDs com.company.appname ========= List only server API keys: Copy Ask AI crossmint keys list server Copy Ask AI ========= 1. Key ID: 67d444369bbbea298a4ef932 Key Secret: ******************4jTa Type Server Created By guille.a@paella.dev Created 3/14/2025, 3:59:02 PM Scopes wallets.read, wallets.create, wallets:transactions.create, wallets:transactions.sign, wallets:transactions.read, wallets:signatures.create, wallets:signatures.read, wallets:nfts.read, wallets:balance.read, wallets.fund, wallets:messages.sign ========= Was this page helpful? Yes No crossmint keys create crossmint keys delete Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 238
  },
  {
    "id": "https://docs.crossmint.com/cli/login#chunk_0",
    "url": "https://docs.crossmint.com/cli/login",
    "title": "Crossmint login - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Commands Crossmint login Documentation API Reference SDK Reference CLI Solution Guides Changelog CLI Getting started Commands crossmint login crossmint logout crossmint whoami crossmint help crossmint keys create crossmint keys list crossmint keys delete crossmint keys edit crossmint projects create crossmint projects select crossmint projects details Example The login command authenticates you with the Crossmint platform. It allows you to access your account and manage API keys and projects through the CLI. To use it, run the following command from your terminal Copy Ask AI crossmint login ​ Example Start the login process: Copy Ask AI crossmint login Select an environment: Copy Ask AI ? Select environment: (Use arrow keys) > Production Staging The CLI will open a browser window to authorize your device. If you’re not signed in to Crossmint in the browser, you’ll need to login first. Once the device is authorized, you can close the browser and return to the terminal. Copy Ask AI ✅ Login successful! You are now authenticated in the Production environment. You’ll then be prompted to select a project: Copy Ask AI ? Select a project: (Use arrow keys) > My Project Website Integration Mobile App Was this page helpful? Yes No Getting started crossmint logout Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 223
  },
  {
    "id": "https://docs.crossmint.com/cli/logout#chunk_0",
    "url": "https://docs.crossmint.com/cli/logout",
    "title": "Crossmint logout - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Commands Crossmint logout Documentation API Reference SDK Reference CLI Solution Guides Changelog CLI Getting started Commands crossmint login crossmint logout crossmint whoami crossmint help crossmint keys create crossmint keys list crossmint keys delete crossmint keys edit crossmint projects create crossmint projects select crossmint projects details Example The logout command signs you out from the Crossmint platform by removing your session token from local storage. To use it, run the following command from your terminal Copy Ask AI crossmint logout ​ Example Sign out from Crossmint: Copy Ask AI crossmint logout After running the command, you’ll see a confirmation message: Copy Ask AI ✅ Logout successful! You are no longer authenticated. After logging out, you will need to use the login command to authenticate again before using other commands that require authentication. Was this page helpful? Yes No crossmint login crossmint whoami Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 162
  },
  {
    "id": "https://docs.crossmint.com/cli/projects/create#chunk_0",
    "url": "https://docs.crossmint.com/cli/projects/create",
    "title": "Crossmint projects create - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Commands Crossmint projects create Documentation API Reference SDK Reference CLI Solution Guides Changelog CLI Getting started Commands crossmint login crossmint logout crossmint whoami crossmint help crossmint keys create crossmint keys list crossmint keys delete crossmint keys edit crossmint projects create crossmint projects select crossmint projects details Options Example The projects create command allows you to create a new project in your Crossmint account. To use it, run the following command from your terminal Copy Ask AI crossmint projects create [options] ​ Options Option Description -n, --name <name> Give your project a name ​ Example Create a new project: Copy Ask AI crossmint projects create You’ll be prompted to enter a name for the project: Copy Ask AI ? Enter project name: My New Project After entering a name, you’ll see a confirmation message: Copy Ask AI ✔ ✅ Project created successfully! 📌 Project Details: Name: New Project ID: 4b0392a3-35c3-458c-a43e-32d2cdc65eda You’ll be ask to confirm if you want to select the created project for subsequent commands. Copy Ask AI ? Do you want to select this project? (Y/n) ``` You can also specify the project name directly using the `--name` option: ```bash crossmint projects create --name \"My New Project\" ``` Was this page helpful? Yes No crossmint keys edit crossmint projects select Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 232
  },
  {
    "id": "https://docs.crossmint.com/cli/projects/details#chunk_0",
    "url": "https://docs.crossmint.com/cli/projects/details",
    "title": "Crossmint projects details - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Commands Crossmint projects details Documentation API Reference SDK Reference CLI Solution Guides Changelog CLI Getting started Commands crossmint login crossmint logout crossmint whoami crossmint help crossmint keys create crossmint keys list crossmint keys delete crossmint keys edit crossmint projects create crossmint projects select crossmint projects details Example The projects details command displays information about the currently selected project. To use it, run the following command from your terminal Copy Ask AI crossmint projects details ​ Example View details of the current project: Copy Ask AI crossmint projects details You’ll see the information about your project: Copy Ask AI 📌 Project Details: Name: New Project ID: f5e37bee-1a81-4df1-8081-7670eee2a629 Wallet Type: Custodial This command is useful for verifying which project you’re currently working with and viewing its basic information. Was this page helpful? Yes No crossmint projects select Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 156
  },
  {
    "id": "https://docs.crossmint.com/cli/projects/select#chunk_0",
    "url": "https://docs.crossmint.com/cli/projects/select",
    "title": "Crossmint projects select - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Commands Crossmint projects select Documentation API Reference SDK Reference CLI Solution Guides Changelog CLI Getting started Commands crossmint login crossmint logout crossmint whoami crossmint help crossmint keys create crossmint keys list crossmint keys delete crossmint keys edit crossmint projects create crossmint projects select crossmint projects details Example The projects select command allows you to choose which Crossmint project you want to work with for subsequent commands. To use it, run the following command from your terminal Copy Ask AI crossmint projects select ​ Example Select a project: Copy Ask AI crossmint projects select You’ll be presented with a list of your projects: Copy Ask AI ? Select a project: (Use arrow keys) > My New Project Website Integration Mobile App Test Project After selecting a project, you’ll see a confirmation message: Copy Ask AI ✅ Project My New Project selected After selecting a project, commands that require a project context (like API key management) will use the selected project. Was this page helpful? Yes No crossmint projects create crossmint projects details Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 192
  },
  {
    "id": "https://docs.crossmint.com/cli/whoami#chunk_0",
    "url": "https://docs.crossmint.com/cli/whoami",
    "title": "Crossmint whoami - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Commands Crossmint whoami Documentation API Reference SDK Reference CLI Solution Guides Changelog CLI Getting started Commands crossmint login crossmint logout crossmint whoami crossmint help crossmint keys create crossmint keys list crossmint keys delete crossmint keys edit crossmint projects create crossmint projects select crossmint projects details Example The whoami command displays information about the currently authenticated user, the environment you’re working in and the selected project. To use it, run the following command from your terminal Copy Ask AI crossmint whoami ​ Example Check your current authentication status: Copy Ask AI crossmint whoami You’ll see output showing your email and environment: Copy Ask AI You are logged in to 🍀Crossmint as: user@example.com - Environment: Production - Selected Project: My New Project This command is useful for verifying your authentication status, checking which environment and project you’re working in. Was this page helpful? Yes No crossmint logout crossmint help Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 168
  },
  {
    "id": "https://docs.crossmint.com/introduction/about-crossmint#chunk_0",
    "url": "https://docs.crossmint.com/introduction/about-crossmint",
    "title": "About Crossmint - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Introduction About Crossmint Documentation API Reference SDK Reference CLI Solution Guides Changelog Introduction About Crossmint Getting Started Using AI Assistants Platform Wallets Introduction Quickstarts ⚡ Guides Authentication Introduction Quickstart ⚡ Guides Tokenization (Minting) Introduction Integrate Checkout Introduction Integrate Advanced Topics Explore the products Explore the solutions What makes Crossmint unique? More resources Crossmint is an all-in-one platform to integrate wallets, stablecoins, and other blockchain primitives into your product, AI agent, or app. Trusted by the world’s largest financial institutions including MoneyGram and Santander Bank, and thousands of start-ups. ​ Explore the products Wallets Create wallets for users, agents, and companies. Authentication Authenticate users with email, socials, or wallets. Checkout Sell tokens and 1 billion physical products. On and offramps Fund wallets with stablecoins or crypto. Tokenization Mint, distribute, and manage tokens at scale. ​ Explore the solutions Fintech Add stablecoins into any product or flow AI Agents Turn agents into economic actors Intellectual Property Register IP rights with Story Protocol ​ What makes Crossmint unique? One suite for all your needs , so you don’t have to orchestrate 5-10 vendors. In addition to the products above, Crossmint saves you from separate integrations with RPCs, data APIs, AML screening providers, KYC, and other ancilliary providers, offering everything you need in a fully integrated platform. Best-in-class UX for your users : no gas fees, passphrases, transaction approval prompts, or other blockchain gimmicks. Easy-to-use APIs , which don’t presume any blockchain experience, to get you started in minutes. Crossmint optionally takes care of gas fees and bills you in fiat, so you don’t have to touch crypto or set up a treasury wallet. No-code dashboards for anyone in your team to manage the program - even if they aren’t technical. Bank-grade security : battle-tested and trusted by major financial institutions and Fortune 500 companies like Santander Bank and Nestlé. SOC2 Type II, VASP licensed, and MiCA-ready. No vendor lock-in : change providers anytime with minimal user disruption. ​ More resources API Reference SDK Reference CLI Contact us Was this page helpful? Yes No Getting Started Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 363
  },
  {
    "id": "https://docs.crossmint.com/introduction/ai-assistants#chunk_0",
    "url": "https://docs.crossmint.com/introduction/ai-assistants",
    "title": "Using AI Assistants - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Introduction Using AI Assistants Documentation API Reference SDK Reference CLI Solution Guides Changelog Introduction About Crossmint Getting Started Using AI Assistants Platform Wallets Introduction Quickstarts ⚡ Guides Authentication Introduction Quickstart ⚡ Guides Tokenization (Minting) Introduction Integrate Checkout Introduction Integrate Advanced Topics Integrate with Cursor Integrate faster with Crossmint by ingesting the docs into your AI-based code helpers (like Cursor, GitHub Copilot, etc.). Markdown docs AI assistant ready docs ​ Integrate with Cursor Navigate to Cursor Settings > Features > Docs Select “Add new doc” and paste the following URL: Copy Ask AI https://docs.crossmint.com/llms-full.txt Use @docs -> Crossmint to reference Crossmint’s docs in your code. Was this page helpful? Yes No Getting Started Supported Chains Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 135
  },
  {
    "id": "https://docs.crossmint.com/introduction/getting-started#chunk_0",
    "url": "https://docs.crossmint.com/introduction/getting-started",
    "title": "Getting Started - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Introduction Getting Started Documentation API Reference SDK Reference CLI Solution Guides Changelog Introduction About Crossmint Getting Started Using AI Assistants Platform Wallets Introduction Quickstarts ⚡ Guides Authentication Introduction Quickstart ⚡ Guides Tokenization (Minting) Introduction Integrate Checkout Introduction Integrate Advanced Topics Before you can start integrating Crossmint into your application, you need to create a Crossmint account and set up a new project in the Staging Console. This guide will walk you through those steps. 1 Create an account in staging Open Crossmint’s staging console and create an account Ready for launch? When it’s time to go live, simply create an account in the production console and replicate the resources you need. 2 Create your first project If you’ve just created an account for the first time, you’ll be taken directly to project creation process. Add the name to your project and continue. 3 Get your API keys In the overview of your project you will find the client and server API keys you need to integrate Crossmint into your application. 4 Start building Now that your project is created in the Console, you can start integrating Crossmint products into your application. Wallets Create wallets for users, agents, and companies. Authentication Authenticate users with email, socials, or wallets. Checkout Sell tokens and 1 billion physical products. On and offramps Fund wallets with stablecoins or crypto. Tokenization Mint, distribute, and manage tokens at scale. Verifiable Credentials Issue and verify W3C credentials. Was this page helpful? Yes No About Crossmint Using AI Assistants Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 271
  },
  {
    "id": "https://docs.crossmint.com/introduction/platform/account-verification#chunk_0",
    "url": "https://docs.crossmint.com/introduction/platform/account-verification",
    "title": "Account Verification - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Platform Account Verification Documentation API Reference SDK Reference CLI Solution Guides Changelog Introduction About Crossmint Getting Started Using AI Assistants Platform Supported Chains Staging vs Production Account Verification Project & Team Management API Keys Webhooks Wallets Introduction Quickstarts ⚡ Guides Authentication Introduction Quickstart ⚡ Guides Tokenization (Minting) Introduction Integrate Checkout Introduction Integrate Advanced Topics Enabling certain Crossmint products requires a quick seller KYC and collection review: Product Requirement Tokenization No review required Wallets No review required Fiat Checkout Quick seller KYC & Collection Review (only for primary sales. Not required for marketplaces) Crypto Checkout Collection Review required. No KYC required. Claims Page Quick seller KYC & Collection Review Reviews are only required in production. Staging does not require account or collection review for any product. Please note that each distinct project you create via the Crossmint Console will require a separate review. Confirm that your collection is submitted for verification with all of the relevant project details to ensure timely review. If your collection is still early in development, please refer to our staging environment for all testing. Reviews can take up to 3 business days. For faster reviews, consider upgrading to the Pro subscription plan, where reviews are expedited under 24hrs. Upgrade from the billing tab of the console. Verify your Account Verify your Collection ​ Account Verification To enable credit card payments on primaries or set up a hosted claims page, sellers are required to complete a quick KYC . You only have to verify a project once, and can create as many collections as you wish within that project. New projects require additional verification. Cross-chain payments do not require account verification. Sellers on marketplaces are also not required to KYC. I am having trouble verifying Account Verification requires a valid government ID and a selfie. Ensure all photos are well lit but without glare, and uncover your face removing eyewear and pulling long hair behind ears. I am a launchpad or require verifying many creators Crossmint offers a collection registration API and tools to verify creators and collections at scale. To learn more, contact us . Was this page helpful? Yes No Staging vs Production Project & Team Management Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 383
  },
  {
    "id": "https://docs.crossmint.com/introduction/platform/api-keys/client-side#chunk_0",
    "url": "https://docs.crossmint.com/introduction/platform/api-keys/client-side",
    "title": "Client-side Keys - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation API Keys Client-side Keys Documentation API Reference SDK Reference CLI Solution Guides Changelog Introduction About Crossmint Getting Started Using AI Assistants Platform Supported Chains Staging vs Production Account Verification Project & Team Management API Keys Overview Rate Limits Scopes Server-side Keys Client-side Keys JWT Authentication Webhooks Wallets Introduction Quickstarts ⚡ Guides Authentication Introduction Quickstart ⚡ Guides Tokenization (Minting) Introduction Integrate Checkout Introduction Integrate Advanced Topics Create a Client-side Key Setting Authorized Origins Web Origins Mobile App Identifiers Select Scopes JWT Authentication Using a Client-side Key Initializing an SDK Direct API Call From Client ​ Create a Client-side Key Navigate to the API Keys section of the developer console and click the “Create new key” button in the client-side keys section. Staging API Keys Production API Keys ​ Setting Authorized Origins Client-side keys are exposed in the application and thus require additional security measures. The minimum requirement is to whitelist URLs that requests can be sent from. Client-side keys support two types of origins: ​ Web Origins For web applications, you need to add the domains that requests will be sent from. In development, you’ll need to add the local domain you test your application from. This is commonly http://localhost followed by a port number such as 3000 , 5173 , etc. For example, when developing with NextJS, the default origin you need to authorize is http://localhost:3000 . The expected format for web origins is a full URL with protocol, such as https://www.yourdomain.com or http://localhost:3000 . ​ Mobile App Identifiers For mobile applications, you need to add the bundle identifiers for iOS apps or package names for Android apps. The expected format is: iOS: Bundle ID (e.g., com.company.appname ) Android: Package name (e.g., com.company.appname ) You can only register either web origins or mobile app identifiers for a single API key, not both. If you need both types, you’ll need to create separate API keys. When you create a production API key you will need to authorize your production domain or app identifiers to use the API key. You can add multiple authorized domains or app identifiers for an API key to make requests from. Type in the domain or app identifier that you want to authorize and then click the ”+ Add new origin” button. ​ Select Scopes Within the modal that opens, toggle the required scopes you want to enable. You may need to expand an accordion for the product area you’re working on to expose additional scope options. For more information on API Key scopes visit the scopes page or the API Reference. API Scopes Complete list of available API scopes API Reference Detailed docs for all API endpoints ​ JWT Authentication Finally, select the option to require a JWT if your application or use case requires it. Enabing this setting will require that users are authenticated to permit API requests. The Wallets SDK requires this option to be enabled. It is optional for other client side APIs. For more information on the options, refer to the JWT Authentication section. If you choose to enable the JWT Authentication for your client-side API key, there are additional configurations that must be made. You can choose between Crossmint authentication (easiest), third party auth providers such as Dynamic, Auth0, Stytch, Privy or Firebase (medium), or integrating with custom solutions where you generate your own JWTs (advanced). You can find more information and guidance in the JWT Authentication section. ​ Using a Client-side Key There are a few different approaches to using a client-side key. The most common option is passing it to the init function for a supported SDK. There are also some cases where you’ll pass the key as a header in a raw API call from custom code, similar to how a server-side key works. ​ Initializing an SDK The most common way you’ll leverage a client-side API key is by passing it to the init function for a supported SDK. See the examples below. crossmint-wallets-sdk.ts credentials-init.ts auth-example.tsx Copy Ask AI import { CrossmintWallets , createCrossmint } from \"@crossmint/wallets-sdk\" ; const crossmint = createCrossmint ({ apiKey: process . env . NEXT_PUBLIC_CLIENT_SIDE_KEY ?? \"\" , }); const crossmintWallets = CrossmintWallets . from ( crossmint ); const wallet = await crossmintWallets . getOrCreateWallet ({ chain: \"<your-chain>\" , signer: { type: \"<signer-type>\" , }, }); ​ Direct API Call From Client The Headless Checkout is one example where you may be writing custom API calls from your application to create orders. In this case, you set the client-side API key as a header named X-API-KEY , much like you would when making a server-side API call. Copy Ask AI const createOrder = async ( orderInput : any ) => { try { const res = await fetch ( `https://staging.crossmint.com/api/2022-06-09/orders` , { method: \"POST\" , headers: { \"Content-Type\" : \"application/json\" , \"x-api-key\" : process . env . NEXT_PUBLIC_CLIENT_SIDE_KEY , }, body: JSON . stringify ( orderInput ), }); const order = await res . json (); setOrder ( order . order ); setClientSecret ( order . clientSecret ); } catch ( e ) { console . error ( e ); throw new Error ( \"Failed to create order\" ); } }; Was this page helpful? Yes No Server-side Keys JWT Authentication Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 889
  },
  {
    "id": "https://docs.crossmint.com/introduction/platform/api-keys/jwt-authentication#chunk_0",
    "url": "https://docs.crossmint.com/introduction/platform/api-keys/jwt-authentication",
    "title": "JWT Authentication - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation API Keys JWT Authentication Documentation API Reference SDK Reference CLI Solution Guides Changelog Introduction About Crossmint Getting Started Using AI Assistants Platform Supported Chains Staging vs Production Account Verification Project & Team Management API Keys Overview Rate Limits Scopes Server-side Keys Client-side Keys JWT Authentication Webhooks Wallets Introduction Quickstarts ⚡ Guides Authentication Introduction Quickstart ⚡ Guides Tokenization (Minting) Introduction Integrate Checkout Introduction Integrate Advanced Topics Crossmint Authentication Third Party Authentication Custom JWT Auth JWT-based authentication is a mechanism in which you can authorize a call to a Crossmint API, scoping such calls to impact resources related to a single end-user on your platform. You have three options available when enabling this option. Crossmint Authentication - With an easy to use react SDK you can add user creation and authentication to your application. Crossmint handles the generation of JWTs and you’re able to quickly create a robust application with user access controls. Third Party Authentication providers - There are several quality authentication providers in the market and you may already be using one of them. You can continue to use your existing auth tooling and enable Crossmint Wallets on top of them with minimal changes. Custom JWT - This option is for providers not yet included with turn-key support or custom built solutions where you issue your own JWTs. You must be able to provide a JWKS endpoint to enable Crossmint to authenticate tokens. Crossmint’s Wallets SDK requires JWT Authentication be enabled. ​ Crossmint Authentication This option makes the most sense if you’re starting a new application and do not have a pre-existing auth provider. You may also want to swap out your existing auth provider if you wish to consolidate your API providers and handle everything with Crossmint. To use this option, select the Crossmint Auth option within the JWT Authentication section of the API keys page in the Developer Console. ​ Third Party Authentication For projects that have already implemented authentication using one of the supported providers, you can provide Crossmint with the appropriate project/environment/app ID from the settings page of the third party. Supported providers include: Dynamic, Auth0, Stytch, Privy, and Firebase. To use this option, select the 3P Auth providers option, then choose your provider from the dropdown. Next, you’ll need to find the appropriate ID that your provider gives you to identify your project. This can typically be found within the settings pane of their web interface. ​ Custom JWT Auth If your project is using an auth provider not listed in the 3P providers list or is a home-grown JWT solution, you can choose the Custom tokens option. You will need to be able to provide a JWKS endpoint that Crossmint can use to authenticate the JWTs. For a detailed guide on implementing this approach, check out the Custom JWT Authentication Guide . Was this page helpful? Yes No Client-side Keys Overview Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 498
  },
  {
    "id": "https://docs.crossmint.com/introduction/platform/api-keys/overview#chunk_0",
    "url": "https://docs.crossmint.com/introduction/platform/api-keys/overview",
    "title": "Overview - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation API Keys Overview Documentation API Reference SDK Reference CLI Solution Guides Changelog Introduction About Crossmint Getting Started Using AI Assistants Platform Supported Chains Staging vs Production Account Verification Project & Team Management API Keys Overview Rate Limits Scopes Server-side Keys Client-side Keys JWT Authentication Webhooks Wallets Introduction Quickstarts ⚡ Guides Authentication Introduction Quickstart ⚡ Guides Tokenization (Minting) Introduction Integrate Checkout Introduction Integrate Advanced Topics Staging vs. Production Keys Server-side vs. Client-side Keys More information API keys are required to authorize requests against the Crossmint APIs. By using an API key, Crossmint knows which project is making the call, and can deduct credits from your balance. ​ Staging vs. Production Keys First, determine if you need a staging (testing) or production API key. Staging API Keys Generate API keys for testing in the staging developer console Production API Keys Generate API keys for going live in the production developer console ​ Server-side vs. Client-side Keys Server-side API keys are used in server-to-server communications or in code running on a server. These keys are not exposed to the end users and can have broader permissions because they are considered more secure, being stored and used in controlled environments. The majority of Crossmint APIs require a server-side API key. For a comprehensive list of APIs available refer to the API Reference . Client-side API keys are used in code that runs on the client-side, such as in web browsers or mobile apps. These keys are exposed to the end user and are therefore less secure. They typically have more restrictive permissions to minimize security risks. When creating a client-side API key, you also need to configure authorized origins that are allowed to make calls to the endpoint. Client-side keys are required for building with the Wallets SDK , Authentication, and Headless Checkout . You can also perform some custodial wallet actions with these key types. Finally, the Verifiable Credentials SDK also offers some features via client-side keys. ​ More information Rate Limits Information about standard rate limits and exceptions API Scopes Complete list of available API scopes Server-side Keys How to create and use server-side API keys Client-side Keys How to create and use client-side API keys Was this page helpful? Yes No Project & Team Management Rate Limits Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 397
  },
  {
    "id": "https://docs.crossmint.com/introduction/platform/api-keys/rate-limits#chunk_0",
    "url": "https://docs.crossmint.com/introduction/platform/api-keys/rate-limits",
    "title": "Rate Limits - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation API Keys Rate Limits Documentation API Reference SDK Reference CLI Solution Guides Changelog Introduction About Crossmint Getting Started Using AI Assistants Platform Supported Chains Staging vs Production Account Verification Project & Team Management API Keys Overview Rate Limits Scopes Server-side Keys Client-side Keys JWT Authentication Webhooks Wallets Introduction Quickstarts ⚡ Guides Authentication Introduction Quickstart ⚡ Guides Tokenization (Minting) Introduction Integrate Checkout Introduction Integrate Advanced Topics Base Limits Exceptions Rate limits prevent individual users from clogging the network. If a limit is exceeded, Crossmint will respond with HTTP 429 and require a brief waiting period before making additional requests. The rate limits on self-serve plans are the following: To increase the base rate limits, contact us . ​ Base Limits Method(s) Rate Limit POST 120 requests per minute per project PUT Same as above PATCH Same as above DELETE Same as above GET 360 requests per minute per project ​ Exceptions API Route Method Rate Limit Mint NFT /api/2022-06-09/collections/{collectionId}/nfts POST 600 req/min/project Mint NFT (Idempotent) /api/2022-06-09/collections/{collectionId}/nfts/{nftName} PUT 600 req/min/project Collection Info /api/2022-06-09/collections/{collectionId} GET 600 req/min/project Mint Status /api/2022-06-09/collections/{collectionId}/nfts/{id} GET 600 req/min/project Was this page helpful? Yes No Overview Scopes Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 209
  },
  {
    "id": "https://docs.crossmint.com/introduction/platform/api-keys/scopes#chunk_0",
    "url": "https://docs.crossmint.com/introduction/platform/api-keys/scopes",
    "title": "Scopes - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation API Keys Scopes Documentation API Reference SDK Reference CLI Solution Guides Changelog Introduction About Crossmint Getting Started Using AI Assistants Platform Supported Chains Staging vs Production Account Verification Project & Team Management API Keys Overview Rate Limits Scopes Server-side Keys Client-side Keys JWT Authentication Webhooks Wallets Introduction Quickstarts ⚡ Guides Authentication Introduction Quickstart ⚡ Guides Tokenization (Minting) Introduction Integrate Checkout Introduction Integrate Advanced Topics Wallet APIs Authentication Tokenization (Minting) APIs Checkout APIs Project Administration Below is a complete list of the API scopes available. You can also find the scope a specific API requires in the API Reference section. ​ Wallet APIs Scope Description Server Key Client Key wallets.read Retrieve all wallets for a user. ✅ ✅ wallets.create Create a wallet for a user. ✅ ✅ wallets:nfts.read Fetch the NFTs owned by a specific wallet address. ✅ ✅ wallets:balance.read Get the balance of a specific wallet address. ✅ ✅ wallets:transactions.create Create a transaction from a user’s wallet. ✅ ✅ wallets:transactions.sign Sign a transaction from a user’s wallet. ✅ ✅ wallets:transactions.read Read transactions from a user’s wallet. ✅ ✅ wallets:signatures.create Create a signature for a wallet. ✅ ✅ wallets:signatures.read Read a signature for a wallet. ✅ ✅ wallets.fund Send funds to a wallet. ✅ ✅ wallets:nfts.transfer Transfer an NFT from a user’s wallet. ✅ wallets:messages.sign Sign a message from a user’s wallet. ✅ When using the Wallets SDK you must use a client-side API key. ​ Authentication Scope Description Server Key Client Key users.create Create users / allow them to sign up. ✅ users.read Get profile info for user accounts. ✅ ​ Tokenization (Minting) APIs Scope Description Server Key Client Key nfts.create Mint your NFTs and deliver them to a wallet or to an email address. ✅ nfts.update Update a minted NFT’s metadata on IPFS (image, description, name…). ✅ nfts.read Retrieve all metadata for an NFT. ✅ nfts.delete Burn a specific NFT within a collection. ✅ nfts.transfer Transfer an NFT to a different wallet. ✅ collections.create Create a collection of NFTs. ✅ collections.update Update information for an existing collection (image, name, royalties…). ✅ collections.read Retrieve the information about a specific collection. ✅ credentials.read Fetch credentials, some endpoints will only work with a server side key. ✅ ✅ credentials.decrypt Decrypt credentials, mainly used by our client side SDK. ✅ ✅ credentials:templates.create Create a template for your credentials. ✅ credentials.create Issue your credentials and create credential types ✅ credentials.delete Revoke a credential issued to a subject. ✅ ​ Checkout APIs Scope Description Server Key Client Key orders.create Create an order for headless checkout. ✅ ✅ orders.read Get an existing order for headless checkout. ✅ ✱ orders.update Update an existing order for headless checkout. ✅ ✱ When updating or reading order status from the client-side, you must pass the clientSecret returned in the create-order call as an authorization header. The clientSecret provides the authorization and an API Key is not required in this use case. See this guide in the Headless Checkout docs. ​ Project Administration Scope Description Server Key Client Key billing.readonly Get balance in credits for a project. ✅ projects:usage.read Get usage for the different products in a project ✅ Was this page helpful? Yes No Rate Limits Server-side Keys Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 549
  },
  {
    "id": "https://docs.crossmint.com/introduction/platform/api-keys/server-side#chunk_0",
    "url": "https://docs.crossmint.com/introduction/platform/api-keys/server-side",
    "title": "Server-side Keys - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation API Keys Server-side Keys Documentation API Reference SDK Reference CLI Solution Guides Changelog Introduction About Crossmint Getting Started Using AI Assistants Platform Supported Chains Staging vs Production Account Verification Project & Team Management API Keys Overview Rate Limits Scopes Server-side Keys Client-side Keys JWT Authentication Webhooks Wallets Introduction Quickstarts ⚡ Guides Authentication Introduction Quickstart ⚡ Guides Tokenization (Minting) Introduction Integrate Checkout Introduction Integrate Advanced Topics Create a Server-side Key Select Scopes Using a Server-side Key Server-side API keys must be stored securely! Enable only the scopes you need, and no more, and do NOT expose your keys on the frontend of your app, or your github code repository. ​ Create a Server-side Key Navigate to the API Keys section of the developer console and click the “Create new key” button in the server-side keys section. Staging API Keys Production API Keys ​ Select Scopes Production server-side keys follow a “view once” policy When you create a server-side API key in the production environment, the key secret will only be shown once during creation. After you close the dialog or navigate away, you will not be able to view the key secret again. Within the modal that opens, toggle the required scopes on and click the “Create server key” button at the bottom. You may need to expand an accordion for the product area you’re working on to expose additional scope options. You can determine the scopes you need by visiting the API reference page for the API(s) you need to interact with. API Scopes Complete list of available API scopes API Reference Detailed docs for all API endpoints ​ Using a Server-side Key If you’re using the API Playground you can add your API key in the Authorization section and this will set it as a header when making the request. When calling the APIs from server-side code, you set the X-API-KEY header however the target language or library expects it. See some examples below: cURL JavaScript Copy Ask AI curl --request POST \\ --url https://staging.crossmint.com/api/v1-alpha1/wallets \\ --header 'Content-Type: application/json' \\ --header 'X-API-KEY: YOUR_API_KEY' \\ --data '{ \"email\": \"test@test.com\", \"chain\": \"polygon-amoy\" }' All of the API routes in the API Reference include code examples for many popular programming languages. Was this page helpful? Yes No Scopes Client-side Keys Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 399
  },
  {
    "id": "https://docs.crossmint.com/introduction/platform/projects-and-user-management#chunk_0",
    "url": "https://docs.crossmint.com/introduction/platform/projects-and-user-management",
    "title": "Project and Team Management - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Platform Project and Team Management Documentation API Reference SDK Reference CLI Solution Guides Changelog Introduction About Crossmint Getting Started Using AI Assistants Platform Supported Chains Staging vs Production Account Verification Project & Team Management API Keys Webhooks Wallets Introduction Quickstarts ⚡ Guides Authentication Introduction Quickstart ⚡ Guides Tokenization (Minting) Introduction Integrate Checkout Introduction Integrate Advanced Topics Projects Team Members ​ Managing Projects A project is a group of token collections, user wallets, API keys, billing information, and more. If you are working with different teams or clients, you can create different projects to seggregate sensitive information and tool access. Alternatively, you can issue different API keys within the same project, but bear in mind they will share the same billing account. Every developer account automatically includes a project named Default Project . You can create new projects and alternate between them using the selector within the console, as illustrated in the screenshot below. ​ Privacy Policy Projects have an option to register a link to your company’s privacy policy. If set, this link will be shown to your users when they’re using any Crossmint-managed user interface, such as the Checkout, where user information is collected. A privacy policy is required by law if you want to later those users’ personally identifiable information, such as their email address. If you don’t already have a privacy policy, you can generate and host one using tools like Termly . Note: Failure to add a privacy policy will result in email addresses being hidden. ​ Cases Requiring a Privacy Policy to Access User Data Use Case Privacy Policy Required Payments (payment button) Yes Payments (embedded checkout) Yes Payments (headless checkout) No Mint API or console No Wallet APIs or console No ​ Steps to Add a Privacy Policy Link * Go to the General Settings tab Access the Settings page from the sidear. Include the Privacy Policy Link In the project settings, locate the section for adding a privacy policy. Paste the URL of your privacy policy generated from Termly or any other source. Verify Email Visibility After adding the privacy policy link, check to ensure that email addresses are now visible. If the link is not included, emails will remain hidden to protect user data. Following these steps will ensure compliance with data protection laws and enable the visibility of email addresses in your project settings. ​ FAQs Why does Crossmint require my project's privacy policy? Crossmint requires your project’s privacy policy to comply with data protection laws and ensure the privacy and security of user data. Without it, email addresses and other sensitive information will be hidden. I have already configured the privacy policy URL, why can't I see the user identifier of some users? Older users who joined before the privacy policy was added haven’t accepted the new policy. Therefore, their identifiers remain hidden. Why can't I delete the privacy policy of my project? Deleting the privacy policy is restricted to ensure compliance with data protection laws and maintain user privacy and security. Was this page helpful? Yes No Account Verification Overview Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 532
  },
  {
    "id": "https://docs.crossmint.com/introduction/platform/staging-vs-production#chunk_0",
    "url": "https://docs.crossmint.com/introduction/platform/staging-vs-production",
    "title": "Staging vs Production Environments - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Platform Staging vs Production Environments Documentation API Reference SDK Reference CLI Solution Guides Changelog Introduction About Crossmint Getting Started Using AI Assistants Platform Supported Chains Staging vs Production Account Verification Project & Team Management API Keys Webhooks Wallets Introduction Quickstarts ⚡ Guides Authentication Introduction Quickstart ⚡ Guides Tokenization (Minting) Introduction Integrate Checkout Introduction Integrate Advanced Topics Differences between the Environments FAQ Crossmint’s console and first-party wallet operate in two different environments: Staging: free, for testing. Production: for your live projects. Blockchain operations incur credit costs. You may access them from https://staging.crossmint.com , and https://www.crossmint.com . Staging provides free self-serve access to most functionality. ​ Differences between the Environments Staging Production URL https://staging.crossmint.com https://www.crossmint.com Payments Test credit cards Accepts real credit cards API Credits Free to test (no API credits required) API credits required for some endpoints Verification Checkout does not require KYC or collection verification Checkout requires KYC and collection verification Blockchains Testnets like Sepolia, and Amoy Mainnets ​ FAQ Does staging activity appear in the production account, and viceversa? No, collections created in one environment will not appear in the other. Typically, you would start developing your project in staging, and replicate and launch in production when you feel ready. Was this page helpful? Yes No Supported Chains Account Verification Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 232
  },
  {
    "id": "https://docs.crossmint.com/introduction/platform/webhooks/add-endpoint#chunk_0",
    "url": "https://docs.crossmint.com/introduction/platform/webhooks/add-endpoint",
    "title": "Add an Endpoint - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Webhooks Add an Endpoint Documentation API Reference SDK Reference CLI Solution Guides Changelog Introduction About Crossmint Getting Started Using AI Assistants Platform Supported Chains Staging vs Production Account Verification Project & Team Management API Keys Webhooks Overview Add an Endpoint Verify Webhooks Wallets Introduction Quickstarts ⚡ Guides Authentication Introduction Quickstart ⚡ Guides Tokenization (Minting) Introduction Integrate Checkout Introduction Integrate Advanced Topics FAQs To add an endpoint, provide a URL you control and select the event types you want to listen to. Navigate to the Webhooks page in the console. Click Add Endpoint . Provide the URL where you want to receive messages. Select the event types you want to listen to. Click Create . ​ FAQs What types of events can I subscribe to with webhooks? There are many events available to subscribe to from all our products. Some examples include: Collection creation NFT minting NFT edits Transaction confirmations Transaction failures You can see the full list of events in the Crossmint Console, under Integrate > Webhooks and the Event Catalog tab. How can I verify that a webhook request is legitimate? To verify a webhook request is legitimate, you need to verify the signature and timestamp. You can learn more about it in the Verify webhooks section. How do I handle webhook retries? Crossmint automatically retries webhooks if your endpoint doesn’t acknowledge its receipt, or throws an error. We will attempt to deliver the webhook 8 times: Immediately 5 seconds 5 minutes 30 minutes 2 hours 5 hours 10 hours 10 hours (in addition to the previous) If, after these attempts, we’re unable to deliver the message, we will mark it as failed. Inside the Webhooks page, you can manually resend the webhook. What HTTP response code should my webhook endpoint return? To indicate that a webhook has been processed, return a 2xx (status code 200-299) response to the webhook message within a 15 seconds timeframe. Why are my webhooks failing? Some typical reasons why webhooks fail are: Check that the enpdpoint URL is correct and that it’s expecting a POST request Check that the endpoint is reachable from the public internet. Make sure that CSRF protection is disabled for this endpoint. Check that the endpoint is returning a 2xx response code Check that the payload signature and timestamp are verified correctly. Remember not to modify the body string of the webhook before processing it. Was this page helpful? Yes No Overview Verify Webhooks Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 426
  },
  {
    "id": "https://docs.crossmint.com/introduction/platform/webhooks/overview#chunk_0",
    "url": "https://docs.crossmint.com/introduction/platform/webhooks/overview",
    "title": "Overview - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Webhooks Overview Documentation API Reference SDK Reference CLI Solution Guides Changelog Introduction About Crossmint Getting Started Using AI Assistants Platform Supported Chains Staging vs Production Account Verification Project & Team Management API Keys Webhooks Overview Add an Endpoint Verify Webhooks Wallets Introduction Quickstarts ⚡ Guides Authentication Introduction Quickstart ⚡ Guides Tokenization (Minting) Introduction Integrate Checkout Introduction Integrate Advanced Topics Crossmint’s platform operations—including wallet transactions, payment processing, NFT minting, and credential issuance—often require blockchain interactions or other asynchronous processing. These operations can take anywhere from a few seconds to several minutes depending on network conditions. Webhooks allow you to listen for events across Crossmint’s platform and automatically trigger reactions in your application when these operations complete. Some cases where you may want to listen for event notifications include: Wallet operations : Track transfer approvals, transaction completions, or failures Payment processing : Monitor checkout lifecycle from quote creation to delivery completion NFT operations : Get notified when mints succeed, collections are created, or tokens are transferred Credential issuance : Receive updates when verifiable credentials are successfully issued Database updates : Automatically update your records with transaction IDs, token details, or user information Customer notifications : Send emails or push notifications when operations complete Webhooks are how services notify each other of events. At their core, they are simply POST requests to a pre-determined endpoint. The endpoint can be any URL you choose, and you can add them from the console . Your server must return a 2xx HTTP status quickly so the webhook is marked as delivered. Was this page helpful? Yes No JWT Authentication Add an Endpoint Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 287
  },
  {
    "id": "https://docs.crossmint.com/introduction/platform/webhooks/verify-webhooks#chunk_0",
    "url": "https://docs.crossmint.com/introduction/platform/webhooks/verify-webhooks",
    "title": "Verify Webhooks - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Webhooks Verify Webhooks Documentation API Reference SDK Reference CLI Solution Guides Changelog Introduction About Crossmint Getting Started Using AI Assistants Platform Supported Chains Staging vs Production Account Verification Project & Team Management API Keys Webhooks Overview Add an Endpoint Verify Webhooks Wallets Introduction Quickstarts ⚡ Guides Authentication Introduction Quickstart ⚡ Guides Tokenization (Minting) Introduction Integrate Checkout Introduction Integrate Advanced Topics Because of the way webhooks work, attackers can impersonate services by simply sending a fake webhook to an endpoint. Think about it: it’s just an HTTP POST from an unknown source. This can create a potential security vulnerability for many applications, or at the very least, a source of errors. To prevent this, Crossmint signs every webhook and its metadata with a unique key for each endpoint. Use this signature to verify that the webhook indeed comes from Crossmint, and process it only if it does. You can get the signing key secret from the Webhooks page in the console. To find it, go to the endpoint details and look for the Signing Secret section. Using a library Manual verification We are going to use the Svix open-source library to verify webhooks. First, install the relevant libraries for your language: Javascript Python Rust Go Java Kotlin Ruby C# PHP CLI Copy Ask AI npm install svix // Or yarn add svix Next, verify webhooks using the code below. The payload is the raw (string) body of the request, and the headers are the headers passed in the request. You need to use the raw request body when verifying webhooks, as the cryptographic signature is sensitive to even the slightest changes. Watch out for frameworks that parse the request as JSON and then stringify it, as this will break the signature verification. See examples below for how to get the raw request body with different frameworks. Remember to get the signature secret from the endpoint details in the console. Javascript Python Rust Go Java Kotlin Ruby C# PHP CLI Copy Ask AI import { Webhook } from \"svix\" ; const secret = \"whsec_MfKQ9r8GKYqrTwjUPD8ILPZIo2LaLaSw\" ; // These were all sent from the server const headers = { \"svix-id\" : \"msg_p5jXN8AQM9LWM0D4loKWxJek\" , \"svix-timestamp\" : \"1614265330\" , \"svix-signature\" : \"v1,g0hM9SsE+OTPJTGt/tmIKtSyZlE3uFJELVlNIOLJ1OE=\" , }; const payload = '{\"test\": 2432232314}' ; const wh = new Webhook ( secret ); // Throws on error, returns the verified content on success const payload = wh . verify ( payload , headers ); Was this page helpful? Yes No Add an Endpoint Overview Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 434
  },
  {
    "id": "https://docs.crossmint.com/introduction/supported-chains#chunk_0",
    "url": "https://docs.crossmint.com/introduction/supported-chains",
    "title": "Supported Chains - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Platform Supported Chains Documentation API Reference SDK Reference CLI Solution Guides Changelog Introduction About Crossmint Getting Started Using AI Assistants Platform Supported Chains Staging vs Production Account Verification Project & Team Management API Keys Webhooks Wallets Introduction Quickstarts ⚡ Guides Authentication Introduction Quickstart ⚡ Guides Tokenization (Minting) Introduction Integrate Checkout Introduction Integrate Advanced Topics Testnets Refer to the table below to see which chains are supported for which product categories. Blockchain │ Smart Wallets MPC Wallets Minting Checkout Onramp Mainnet Label Testnet Label Apex │ - - - ✅ ✅ apex - Atleta │ ✱ ✅ ✅ ✅ ✅ atleta atleta-testnet ApeChain │ ✅ ✅ ✅ ✅ ✅ apechain curtis Aptos │ ✱ ✅ ✅ ✱ ✱ aptos aptos Arbitrum One │ ✅ ✅ ✅ ✅ ✅ arbitrum arbitrum-sepolia Arbitrum Nova │ ✅ ✅ ✅ ✅ ✅ arbitrumnova arbitrum-sepolia Astar │ ✱ ✅ ✅ ✅ ✅ astar-zkevm zkyoto Avalanche │ ✱ ✅ ✅ ✅ ✅ avalanche avalanche-fuji Avalanche Subnets │ ✱ ✱ ✱ ✱ ✱ avalanche-subnet avalanche-subnet-testnet Base │ ✅ ✅ ✅ ✅ ✅ base base-sepolia Boss │ - - - ✅ - boss - BSC │ ✅ ✱ ✱ ✱ ✱ bsc bsc-testnet Chiliz │ ✱ ✅ ✅ ✅ ✅ chiliz chiliz-spicy-testnet Coti │ ✱ ✅ ✅ ✅ ✅ coti coti-testnet Ethereum │ ✅ ✅ ✱ ✅ ✅ ethereum ethereum-sepolia Flow │ ✱ ✅ ✅ ✅ ✱ flow flow-testnet Hedera EVM │ - ✅ ✅ ✅ ✅ hedera hedera-testnet Mantle │ ✅ ✅ ✅ ✅ ✅ mantle mantle-testnet Mode │ ✅ ✅ ✅ ✅ ✅ mode mode-sepolia Monad │ ✱ ✱ ✱ ✱ ✱ monad monad-testnet Optimism │ ✅ ✅ ✅ ✅ ✅ optimism optimism-sepolia Polygon │ ✅ ✅ ✅ ✅ ✅ polygon polygon-amoy Rari │ ✱ ✅ ✅ ✅ ✅ rari rari-testnet Sei │ ✅ ✅ ✅ ✅ ✅ sei-pacific-1 sei-atlantic-2-testnet Scroll │ ✅ ✅ ✅ ✅ ✅ scroll scroll-sepolia Solana │ ✅ ✅ ✅ ✅ ✅ solana solana Stellar │ ✱ ✱ ✱ ✱ ✱ stellar stellar-testnet Shape │ ✅ ✅ ✅ ✅ ✅ shape shape-sepolia SKALE │ ✱ ✅ ✅ ✅ ✅ skale-nebula skale-nebula-testnet Soneium │ ✱ ✅ ✅ ✅ ✅ soneium soneium-minato-testnet Story │ ✅ ✅ ✅ ✱ ✱ story-mainnet story-testnet Sui │ ✱ ✱ ✅ ✱ ✱ sui - U2U │ ✱ ✅ ✅ ✅ ✅ u2u u2u-testnet Xion │ ✱ ✅ ✅ ✅ ✅ xion xion-testnet Xai │ ✱ ✅ ✅ ✅ ✅ xai xai-sepolia-testnet Zenchain │ ✱ ✅ ✅ ✅ ✅ zenchain zenchain-testnet Zora │ ✅ ✅ ✅ ✅ ✅ zora zora-sepolia Other EVM chains │ ✱ ✱ ✱ ✱ ✱ Legend: ✅ Supported ✱ Available, but not self-serve. Contact us to request it for your project. - Not supported Notes: Fungible token checkout available self service only in Solana. Contact us for other chains. Building on a different chain? Contact us. We launch new chains regularly and yours is likely in the pipeline. ​ Testnets You can access testnets by using the staging console . Read more about the different environments here . Please refer to the supported chains table above for details about which testnet the staging environment targets. If there is not a specific testnet listed for a chain it is not supported in staging. Was this page helpful? Yes No Using AI Assistants Staging vs Production Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 569
  },
  {
    "id": "https://docs.crossmint.com/minting/introduction#chunk_0",
    "url": "https://docs.crossmint.com/minting/introduction",
    "title": "Minting Tools Introduction | Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Tokenization (Minting) Introduction Documentation API Reference SDK Reference CLI Solution Guides Changelog Introduction About Crossmint Getting Started Using AI Assistants Platform Wallets Introduction Quickstarts ⚡ Guides Authentication Introduction Quickstart ⚡ Guides Tokenization (Minting) Introduction Integrate Checkout Introduction Integrate Advanced Topics Key Characteristics Quickstarts Get Started FAQs It takes months to build secure and reliable minting infrastructure: Write and maintain token smart contracts Build a backend for orchestrating all blockchain transactions Securely administer keys and crypto balances Add queueing, batching, RPC redundancy, priority/gas fee estimations, e2e observability… Crossmint manages all of this for you via a suite of APIs to create, update, delete and manage tokens of any type through REST APIs, available on any chain. ​ Key Characteristics Get started in 5 minutes Easiest developer experience in the market. Launch today. No blockchain experience required Forget about smart contracts, IPFS, wallet and key management… Modular platform Let Crossmint handle all the infrastructure, or combine it with your own. Best-in-class security SOC-II certified, audited smart contracts, and keys guarded by Fireblocks. Ready to scale Handle millions of tokens an hour and save on customer support. Multi-chain Tap into 40+ chains with one single integration. ​ Quickstarts Non-Fungible Tokens (NFTs) Mint unique digital assets you can own, transfer, and verify authentically in under 5 minutes Semi-Fungible Tokens (SFTs) Mint limited sets of identical digital assets in under 5 minutes Verifiable Credentials (VCs) Mint credentials that users control, share, and verify anywhere in under 5 minutes. Intellectual Property (IP) Mint IP credentials for creators to secure their work, in under 5 minutes. ​ Get Started Console Get API keys and manage collections. API Reference Test any API in seconds directly from the docs. Talk to an expert Contact our sales team for advanced support. ​ FAQs Is there vendor lock-in? No, you can migrate providers anytime, transfering ownership of the smart contracts to an external wallet. Can I transfer ownership of the smart contract to an external wallet? Yes, you can transfer ownership at any time. However, note that Crossmint APIs (eg. minting, editing NFTs) may stop working on that contract unless you whitelist Crossmint on the contract to continue executing those actions. If you transfer ownership of the contract to your own wallet, you are responsible for ensuring the security of that wallet. How does Crossmint manage billing? When you create an account, Crossmint automatically creates a gas station to manage network fees on your behalf. You will be billed in fiat and Crossmint will ensure you never run out of funds to support customer operations. This eliminates the need to build a cryptoaccounting system, execute recurring and expensive crypto purchases, holding the FX risk, and automating treasury operations. How does Crossmint manage minting keys? When you create an account, Crossmint will automatically create a dedicated MPC vault to secure your token contracts which you can manage via API. You get one vault per project , in case you are working with multiple teams. You can transfer ownership of the contracts to an external wallet at any time. Was this page helpful? Yes No User Webhooks Quickstart ⚡ Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 537
  },
  {
    "id": "https://docs.crossmint.com/minting/nfts/integrate/bring-your-own-contract#chunk_0",
    "url": "https://docs.crossmint.com/minting/nfts/integrate/bring-your-own-contract",
    "title": "Use Your Own Smart Contract | Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Integrate Bring Your Own Contract Documentation API Reference SDK Reference CLI Solution Guides Changelog Introduction About Crossmint Getting Started Using AI Assistants Platform Wallets Introduction Quickstarts ⚡ Guides Authentication Introduction Quickstart ⚡ Guides Tokenization (Minting) Introduction Integrate NFTs Quickstart ⚡ Integrate Create Collections Define Metadata Mint Tokens Configure Admin Functions Mint In Bulk Update NFTs Manage Delivery Set up a Claims Page List for Sale Bring Your Own Contract Webhooks & Status APIs Pricing SFTs Credentials IP Checkout Introduction Integrate Advanced Topics Prerequisites Integration Guide 1. Register Your Smart Contract 2. Contract Review 3. Mint NFTs Contract Function Parameters Example: Minting with a Custom Contract Best Practices FAQs Crossmint allows you to use your own smart contract while leveraging our infrastructure for minting NFTs. This guide will walk you through the process of integrating your custom smart contract with Crossmint. ​ Prerequisites Before you can use your own smart contract with Crossmint, ensure that: Your smart contract has a free minting function that allows Crossmint to mint NFTs without paying any fees. Your smart contract complies with the ERC721 standard (for NFTs) or ERC1155 standard (for SFTs). Currently, this feature is only available for EVM chains. Support for Solana and other chains is coming soon. ​ Integration Guide ​ 1. Register Your Smart Contract First, you need to register your smart contract with Crossmint: cURL Copy Ask AI curl --request POST \\ --url https://staging.crossmint.com/api/2022-06-09/collections/custom \\ --header 'Content-Type: application/json' \\ --header 'X-API-KEY: <api-key>' \\ --data '{ \"chain\": \"polygon\", \"contractAddress\": \"0x123...\", \"metadata\": { \"name\": \"My Custom Collection\", \"description\": \"A collection using my own smart contract\" } }' ​ 2. Contract Review After registering your contract, the Crossmint team will review it to ensure compatibility with our infrastructure. This typically takes 1-2 business days. During the review process, we’ll verify that your contract has the necessary free minting function and complies with the required standards. ​ 3. Mint NFTs Once your contract is approved, you can start minting NFTs using the Crossmint API: cURL Copy Ask AI curl --request POST \\ --url https://staging.crossmint.com/api/2022-06-09/collections/{collectionId}/nfts \\ --header 'Content-Type: application/json' \\ --header 'X-API-KEY: <api-key>' \\ --data '{ \"recipient\": \"polygon:0x123...\", \"contractFunction\": { \"name\": \"mintTo\", \"params\": [ { \"name\": \"to\", \"type\": \"address\", \"value\": \"$RECIPIENT_ADDRESS\" }, { \"name\": \"tokenId\", \"type\": \"uint256\", \"value\": \"1\" } ] } }' The $RECIPIENT_ADDRESS placeholder will be automatically replaced with the recipient’s address by Crossmint. ​ Contract Function Parameters When using your own smart contract, you need to specify the contract function to call and its parameters: name : The name of the function in your smart contract that mints NFTs. params : An array of parameters to pass to the function. name : The parameter name as defined in your smart contract. type : The parameter type (e.g., address, uint256, string). value : The value to pass to the parameter. You cannot pass custom metadata as a parameter. Metadata is controlled at the smart contract level when using your own contract. ​ Example: Minting with a Custom Contract Here’s an example of minting an NFT using a custom contract with a mintTo function: Copy Ask AI const apiKey = \"YOUR_API_KEY\" ; const collectionId = \"your-custom-collection-id\" ; const env = \"staging\" ; // or \"www\" for production const recipient = \"polygon:0x123...\" ; // Recipient's wallet address const url = `https:// ${ env } .crossmint.com/api/2022-06-09/collections/ ${ collectionId } /nfts` ; const options = { method: \"POST\" , headers: { accept: \"application/json\" , \"content-type\" : \"application/json\" , \"x-api-key\" : apiKey , }, body: JSON . stringify ({ recipient , contractFunction: { name: \"mintTo\" , params: [ { name: \"to\" , type: \"address\" , value: \"$RECIPIENT_ADDRESS\" , }, { name: \"tokenId\" , type: \"uint256\" , value: \"42\" , }, ], }, }), }; fetch ( url , options ) . then (( response ) => response . json ()) . then (( data ) => console . log ( \"NFT minted:\" , data )) . catch (( error ) => console . error ( \"Error minting NFT:\" , error )); ​ Best Practices When using your own smart contract with Crossmint: Test Thoroughly : Test your contract integration in the staging environment before moving to production. Function Visibility : Ensure your minting function has the appropriate visibility and access controls. Gas Optimization : Optimize your contract to minimize gas costs for minting operations. Error Handling : Implement proper error handling in your contract to provide meaningful error messages. ​ FAQs Can I use an existing deployed contract? Yes, you can use an existing deployed contract as long as it meets the prerequisites mentioned above. What if my contract doesn't have a free minting function? Your contract must have a function that allows Crossmint to mint NFTs without paying any fees. If your contract doesn’t have this, you’ll need to modify it or deploy a new version. Can I use Crossmint's email delivery with my own contract? Yes, you can still use Crossmint’s email delivery system with your own contract. Just specify an email recipient in the mint request. How do I handle token IDs with my custom contract? Token ID management depends on your contract implementation. You can either pass a specific token ID as a parameter or let your contract handle token ID assignment internally. Was this page helpful? Yes No List for Sale Webhooks & Status APIs Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 903
  },
  {
    "id": "https://docs.crossmint.com/minting/nfts/integrate/configure-admin-functions#chunk_0",
    "url": "https://docs.crossmint.com/minting/nfts/integrate/configure-admin-functions",
    "title": "Configure NFT Admin Functions | Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Integrate Configure Admin Functions Documentation API Reference SDK Reference CLI Solution Guides Changelog Introduction About Crossmint Getting Started Using AI Assistants Platform Wallets Introduction Quickstarts ⚡ Guides Authentication Introduction Quickstart ⚡ Guides Tokenization (Minting) Introduction Integrate NFTs Quickstart ⚡ Integrate Create Collections Define Metadata Mint Tokens Configure Admin Functions Mint In Bulk Update NFTs Manage Delivery Set up a Claims Page List for Sale Bring Your Own Contract Webhooks & Status APIs Pricing SFTs Credentials IP Checkout Introduction Integrate Advanced Topics Admin Transfer Admin Burn Requirements Crossmint provides admin functions that allow you to control your NFTs throughout their lifecycle. ​ Admin Transfer The NFT Admin Transfer API allows collection owners to transfer NFTs between user wallets. Admin transfers only work for Solana cNFTs. Contact us if you want to access to this API. ​ Admin Burn The Burn NFT API allows collection owners to permanently remove NFTs from circulation. Once an NFT is burned, this action cannot be reversed. ​ Requirements To use admin functions: Your collection must be of a supported type (Solana cNFTs for transfers, Solana cNFTs or EVM for burns) Your API key must have the appropriate scopes ( nfts.transfer for transfers, nfts.delete for burns) You must be the collection owner or have admin privileges Was this page helpful? Yes No Mint Tokens Mint In Bulk Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 241
  },
  {
    "id": "https://docs.crossmint.com/minting/nfts/integrate/create-collections#chunk_0",
    "url": "https://docs.crossmint.com/minting/nfts/integrate/create-collections",
    "title": "How to Deploy an NFT Collection via API | Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Integrate Create Collections Documentation API Reference SDK Reference CLI Solution Guides Changelog Introduction About Crossmint Getting Started Using AI Assistants Platform Wallets Introduction Quickstarts ⚡ Guides Authentication Introduction Quickstart ⚡ Guides Tokenization (Minting) Introduction Integrate NFTs Quickstart ⚡ Integrate Create Collections Define Metadata Mint Tokens Configure Admin Functions Mint In Bulk Update NFTs Manage Delivery Set up a Claims Page List for Sale Bring Your Own Contract Webhooks & Status APIs Pricing SFTs Credentials IP Checkout Introduction Integrate Advanced Topics 1. Create and Deploy an NFT collection 2. Check the status of your collection 3. List all collections under your project A collection is a container of NFTs, used by applications like marketplaces and wallets to group NFTs together. Crossmint allows you to create managed collections via API or directly from the console. Crossmint has a library of pre-audited smart contracts which work for most major use cases. However, you can also bring your own contract if you already have one. Crossmint supports non-fungible and semi-fungible tokens (editions), free and paid mints, and builds on open ERC and Metaplex standards. On EVM chains, ERC-721 and ERC-1155 contracts are supported, while on Solana, Metaplex standard programs and compressed NFT programs are supported. See the list of supported blockchains here ​ 1. Create and Deploy an NFT collection The first time you mint an NFT on a specific blockchain, Crossmint will assign it, and any subsequent mints, to a default collection for that chain. You can create additional collections from the console or in a single API call (requires the API key scope collections.create ): cURL Copy Ask AI curl --request POST \\ --url https://staging.crossmint.com/api/2022-06-09/collections/ \\ --header 'content-type: application/json' \\ --header 'x-api-key: <X_API_KEY>' \\ --data ' { \"chain\": \"polygon\", \"metadata\": { \"name\": \"A new collection\", \"imageUrl\": \"https://www.crossmint.com/assets/crossmint/logo.png\", \"description\": \"A new collection with its own dedicated smart contract\" } } ' The collection details you provide will be displayed to your customers on marketplaces and other interfaces. Sell your collection items If you intend to sell the NFTs in your collection, read the guide on how to enable payments first. ​ 2. Check the status of your collection It takes a few seconds (up to a minute, depending on the blockchain and how congested it is) to deploy a collection. You can use the following API to check collection status API to check what the status of a collection is. For example: cURL Copy Ask AI curl --request GET \\ --url https://staging.crossmint.com/api/2022-06-09/collections/default-solana \\ --header 'x-client-secret: <CLIENT_SECRET>' \\ --header 'x-project-id: <PROJECT_ID>' ​ 3. List all collections under your project cURL Copy Ask AI curl --request GET \\ --url https://staging.crossmint.com/api/2022-06-09/collections/ \\ --header 'x-client-secret: <CLIENT_SECRET>' \\ --header 'x-project-id: <PROJECT_ID>' API Reference Test any API in seconds directly from the docs. Talk to an expert Contact our sales team for support. Was this page helpful? Yes No Quickstart ⚡ Define Metadata Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 495
  },
  {
    "id": "https://docs.crossmint.com/minting/nfts/integrate/define-metadata#chunk_0",
    "url": "https://docs.crossmint.com/minting/nfts/integrate/define-metadata",
    "title": "NFT Metadata Explained | Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Integrate Define Metadata Documentation API Reference SDK Reference CLI Solution Guides Changelog Introduction About Crossmint Getting Started Using AI Assistants Platform Wallets Introduction Quickstarts ⚡ Guides Authentication Introduction Quickstart ⚡ Guides Tokenization (Minting) Introduction Integrate NFTs Quickstart ⚡ Integrate Create Collections Define Metadata Mint Tokens Configure Admin Functions Mint In Bulk Update NFTs Manage Delivery Set up a Claims Page List for Sale Bring Your Own Contract Webhooks & Status APIs Pricing SFTs Credentials IP Checkout Introduction Integrate Advanced Topics Metadata Standards Crossmint Metadata Storage Supported Storage Providers Configuring Storage FAQs Metadata in the context of NFTs includes essential information such as the name, description, and media (e.g., images, videos) associated with the asset. ​ Metadata Standards Collection and NFT metadata (e.g. title, description, image) must be specified in JSON format and follow industry conventions to ensure it renders appropriately across wallets and marketplaces. Crossmint supports rich metadata like audio, video, and HTML. To include rich metadata, simply populate animation_url as specified in the links below. File size limits Crossmint’s standard plan has a 10mb file size limit. For larger uploads, you must upgrade to a premium plan or handle the upload yourself. Metadata standards differ slightly across blockchains: EVM chains Solana Aptos EVM chains follow the OpenSea standard. Refer to their official documentation to see what attributes can be included and how. Note that name and image are mandatory fields. EVM Metadata Example Copy Ask AI { \"name\" : \"Crossmint Test NFT\" , \"description\" : \"Created with the Crossmint minting API\" , \"image\" : \"https://bafkreiexjl6kw4khdxkrt6dojgacscnzvrys47t472l2t7d6r2ss65kifq.ipfs.nftstorage.link/\" , \"external_url\" : \"https://docs.crossmint.com\" , \"attributes\" : [ { \"trait_type\" : \"background\" , \"value\" : \"black\" }, { \"trait_type\" : \"flavor\" , \"value\" : \"minty\" } ] } ​ Crossmint Metadata Storage Metadata must be stored somewhere to be accessible and verifiable on the blockchain. Crossmint automatically uploads and validates metadata for you on decentralized storage solutions, ensuring a seamless minting experience. ​ Supported Storage Providers Crossmint supports two primary storage providers: IPFS (InterPlanetary File System) (Default): A widely adopted decentralized storage standard ensuring compatibility across blockchain ecosystems by enabling peer-to-peer file storage and retrieval. Walrus Network : A new decentralized storage solution designed for efficient and scalable metadata hosting. Walrus is currently not supported for EVM NFT templates. If you are interested in using Arweave for metadata storage, please contact us for further information. ​ Configuring Storage By default, Crossmint uses IPFS to store metadata and media. However, if you prefer to use Walrus, you can configure this in the Crossmint Console under Settings > General . If you prefer to upload and manage media files independently, you can pass a direct URL to the Mint API and set the reuploadLinkedFiles flag to false . This prevents Crossmint from automatically reuploading media files to decentralized storage. ​ FAQs What type of files can I store? You may store any text and image file. Additionally, you may include multi-media files such as GLTF, GLB, WEBM, MP4, M4V, OGV, and OGG, along with the audio-only extensions MP3, WAV, and OGA. Please stored them as animation_url . In addition, animation_url also supports HTML pages, allowing you to build rich experiences and interactive NFTs using JavaScript canvas, WebGL, and more. Scripts and relative paths within the HTML page are also supported. However, access to browser extensions is not supported. What's the maximum file size? The maximum file size is 10mb. For larger files, you must upgrade to an enterprise plan or upload the metadata yourself and pass the URI to the API. Can I store the metadata on a centralized server? Yes. You must handle the upload yourself and pass the URL to the API. Was this page helpful? Yes No Create Collections Mint Tokens Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 639
  },
  {
    "id": "https://docs.crossmint.com/minting/nfts/integrate/list-for-sale#chunk_0",
    "url": "https://docs.crossmint.com/minting/nfts/integrate/list-for-sale",
    "title": "NFT Marketplace and Royalty Setup | Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Integrate List for Sale Documentation API Reference SDK Reference CLI Solution Guides Changelog Introduction About Crossmint Getting Started Using AI Assistants Platform Wallets Introduction Quickstarts ⚡ Guides Authentication Introduction Quickstart ⚡ Guides Tokenization (Minting) Introduction Integrate NFTs Quickstart ⚡ Integrate Create Collections Define Metadata Mint Tokens Configure Admin Functions Mint In Bulk Update NFTs Manage Delivery Set up a Claims Page List for Sale Bring Your Own Contract Webhooks & Status APIs Pricing SFTs Credentials IP Checkout Introduction Integrate Advanced Topics Sell Tokens How It Works Configure a Collection for Sale Set Up a Checkout Set Collection Royalties Add / Edit Royalties Get Royalty Information Disable Royalties Implementation Examples Marketplace Profile Key Marketplace Profile Elements FAQs When selling NFTs on secondary markets, you can configure royalties to receive a percentage of each sale and optimize your collection’s marketplace profile to attract buyers. ​ Sell Tokens The minting guide showed you how to create NFTs. In this guide you will learn how to enable Crossmint’s Checkout so you can sell them to your customers using cryptocurrency or credit card. ​ How It Works You can set a price in crypto (ETH, MATIC, SOL or USDC). For imported and secondary collections, payouts arrive instantly. For managed collections, payouts arrive after a 24-hour withholding period. Your customers can pay with crypto or credit card. You pay credits for NFT gas, user pays only for the item. ​ Configure a Collection for Sale Using the console Using the API Create an NFT collection and navigate to it in the console. Upload NFT “templates” for all the NFTs you wish to list for sale. You can do so from the “NFTs” tab in the console, or by using the API . Navigate to the Checkout entry on the navbar in the collections page. Follow the wizard to enable payments. (Production only) Verify your account and collection . Not required in staging. Share the url or QR code with your users. ​ Set Up a Checkout Now that your collection accepts payments, the next step is to integrate one of Crossmint’s Checkout variants into your app or website, and start accepting sales. There are two ways to integrate: Hosted Checkout Add a button to your site which opens a checkout in a pop-up or new tab. Embedded Checkout Insert a checkout inside your site for maximum control over the user experience. ​ Set Collection Royalties With royalties, you can receive revenue when your NFTs are traded on secondary markets. Crossmint allows you to configure royalties for a collection via API and (soon) directly from the console. You just have to specify the % of royalties and where you want those funds to be sent. Royalties are defined at the collection level, not at the NFT level. Updating the royalties of a collection will update all NFTs, including the ones which have already been minted. This API follows royalty standards compatible with virtually all marketplaces. However, note that some marketplaces have determined to not honor royalties, so transactions occuring there may not generate additional revenue. Available self-serve for ERC-721 collections in EVM chains. Please contact us for ERC-1155 or Solana support. Endpoint Description Add / Edit Royalties Add or edit royalties Get Royalty Information Get royalty information Disable Royalties Disable royalties ​ Add / Edit Royalties To add or edit royalties for a collection, use the following API endpoint: cURL Copy Ask AI curl --request POST \\ --url https://staging.crossmint.com/api/v1-alpha1/minting/collections/{collectionId}/royalties \\ --header 'Content-Type: application/json' \\ --header 'X-API-KEY: <api-key>' \\ --data '{ \"recipients\": [ { \"address\": \"0x123...\", \"percentage\": 5 } ] }' ​ Get Royalty Information To retrieve the current royalty configuration for a collection: cURL Copy Ask AI curl --request GET \\ --url https://staging.crossmint.com/api/v1-alpha1/minting/collections/{collectionId}/royalties \\ --header 'X-API-KEY: <api-key>' ​ Disable Royalties To disable royalties for a collection: cURL Copy Ask AI curl --request DELETE \\ --url https://staging.crossmint.com/api/v1-alpha1/minting/collections/{collectionId}/royalties \\ --header 'X-API-KEY: <api-key>' ​ Implementation Examples Setting up royalties for a new collection Copy Ask AI // Example: Setting up royalties for a new collection const apiKey = \"YOUR_API_KEY\" ; const collectionId = \"your-collection-id\" ; const env = \"staging\" ; // or \"www\" for production // Define royalty recipients const royaltyRecipients = [ { address: \"0x123abc...\" , // Creator wallet basisPoints: 5 // 5% royalty }, { address: \"0x456def...\" , // Community fund wallet basisPoints: 2.5 // 2.5% royalty } ]; // Set up royalties const url = `https:// ${ env } .crossmint.com/api/v1-alpha1/minting/collections/{collectionId}/royalties` ; const options = { method: \"POST\" , headers: { \"Content-Type\" : \"application/json\" , \"X-API-KEY\" : apiKey }, body: JSON . stringify ({ recipients: royaltyRecipients }) }; fetch ( url , options ) . then ( response => response . json ()) . then ( data => console . log ( \"Royalties configured:\" , data )) . catch ( error => console . error ( \"Error configuring royalties:\" , error )); ​ Marketplace Profile Optimizing your collection’s profile on marketplaces like OpenSea, Rarible, and others can significantly impact your NFT sales and visibility. At this time, updating your collection profile on OpenSea, Rarible, and other marketplaces requires manual work and is limited to enterprise clients. ​ Key Marketplace Profile Elements When working with our enterprise team to configure your marketplace profile, consider these important elements: Collection Banner : A high-quality banner image that represents your brand Collection Logo : A distinctive logo that’s recognizable at small sizes Collection Description : A compelling description of your project and its value External Links : Links to your website, social media, and community channels Category Tags : Appropriate categories that help collectors discover your NFTs ​ FAQs How are royalties enforced on different marketplaces? Royalty enforcement varies by marketplace. Some marketplaces like OpenSea have made royalties optional, while others still enforce them. Crossmint implements royalties according to blockchain standards, but cannot guarantee enforcement across all marketplaces. Can I set different royalty percentages for different NFTs in the same collection? No, royalties are set at the collection level and apply",
    "chunk_index": 0,
    "word_count": 1000
  },
  {
    "id": "https://docs.crossmint.com/minting/nfts/integrate/list-for-sale#chunk_0",
    "url": "https://docs.crossmint.com/minting/nfts/integrate/list-for-sale",
    "title": "NFT Marketplace and Royalty Setup | Crossmint Docs",
    "content": "sizes Collection Description : A compelling description of your project and its value External Links : Links to your website, social media, and community channels Category Tags : Appropriate categories that help collectors discover your NFTs ​ FAQs How are royalties enforced on different marketplaces? Royalty enforcement varies by marketplace. Some marketplaces like OpenSea have made royalties optional, while others still enforce them. Crossmint implements royalties according to blockchain standards, but cannot guarantee enforcement across all marketplaces. Can I set different royalty percentages for different NFTs in the same collection? No, royalties are set at the collection level and apply to all NFTs within that collection. If you need different royalty structures, consider creating separate collections. How quickly do royalty changes take effect? Royalty changes take effect immediately for new listings. For existing listings on marketplaces, the timing depends on how frequently each marketplace refreshes metadata. What's the maximum royalty percentage I can set? While technically there’s no upper limit, most marketplaces and collectors expect royalties between 2.5% and 10%. Setting royalties too high may discourage secondary market activity. Was this page helpful? Yes No Set up a Claims Page Bring Your Own Contract Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 204
  },
  {
    "id": "https://docs.crossmint.com/minting/nfts/integrate/manage-delivery#chunk_0",
    "url": "https://docs.crossmint.com/minting/nfts/integrate/manage-delivery",
    "title": "NFT Delivery Management | Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Integrate Manage Delivery Documentation API Reference SDK Reference CLI Solution Guides Changelog Introduction About Crossmint Getting Started Using AI Assistants Platform Wallets Introduction Quickstarts ⚡ Guides Authentication Introduction Quickstart ⚡ Guides Tokenization (Minting) Introduction Integrate NFTs Quickstart ⚡ Integrate Create Collections Define Metadata Mint Tokens Configure Admin Functions Mint In Bulk Update NFTs Manage Delivery Set up a Claims Page List for Sale Bring Your Own Contract Webhooks & Status APIs Pricing SFTs Credentials IP Checkout Introduction Integrate Advanced Topics Specify Recipients Send NFT to Wallet Address Examples Send NFT to Email Address Examples Send NFT to a Twitter/X account Examples Send NFT by userId Examples Customize Delivery Emails Edit the email template Enable email delivery Console API FAQs Crossmint provides flexible options for delivering NFTs to recipients and customizing the delivery experience. This guide covers how to specify different types of recipients and how to customize the email notifications they receive. ​ Specify Recipients You can deliver NFTs to three kinds of recipients when using minting APIs: Wallet address : directly specify a wallet address, which could be a user owned wallet (e.g. MetaMask, Phantom, etc.) or a wallet you manage. Email address : in this modality, Crossmint automatically generates a secure MPC backed custodial wallet for the email, and delivers the NFT inside. User identifier : in this modality, Crossmint automatically generates a wallet and associates it with an user ID from your application, and delivers the NFT inside. You must build the interface for users to access this wallet. Check out the create-wallet endpoint in the API reference if you wish to pre-create a wallet prior to invoking the mint API. ​ Send NFT to Wallet Address To mint an NFT directly to an existing blockchain address, the following recipient format is used: Copy Ask AI < chain > : < address > For a full list of chain names, refer to the Supported Chains page. ​ Examples EVM: polygon:0x123... Solana: solana:3Q5... Aptos: aptos:0x0f07... ​ Send NFT to Email Address To mint an NFT and send it to an email address, the following recipient format is used: Copy Ask AI email: <email_address>:<chain> ​ Examples EVM: email:demo@test.com:polygon Solana: email:demo@test.com:solana Minting to an email address is not currently supported on Aptos. The NFT can then be accessed by logging into Crossmint with the specified email address: for staging/testnet NFTs: https://staging.crossmint.com/user/collection for mainnet NFTs: https://www.crossmint.com/user/collection ​ Send NFT to a Twitter/X account To mint an NFT to a Twitter/X account, the following recipient format is used: Copy Ask AI twitter: <twitter_handle>:<chain> ​ Examples EVM: twitter:@username:polygon Solana: twitter:@username:solana ​ Send NFT by userId This method allows you to deliver NFTs by directly specifying the user identifier of the recipient in your system. Crossmint will fetch a custodial wallet linked to that user identifier inside your project or, if none exists, create one on the fly. Then the NFT will be delivered there. This way, you don’t need to keep a mapping between your user identifiers and their wallets, just pass your user id and crossmint takes care of the rest. Enterprise feature. Contact us for access. Wallets created with the userId option cannot be accessed by logging into Crossmint.com. To mint an NFT to this type of recipient, follow this format: Copy Ask AI userId: <userIdentifier>:<chain> ​ Examples EVM: userId:user1234:polygon Solana: userId:user1234:solana ​ Customize Delivery Emails Email delivery notifications can be customized to align with your branding and communication needs. This section will walk you through how to configure your email template. ​ Edit the email template To adjust the visual presentation and branding of your email notifications: In the Crossmint Console, click on Settings, and navigate to the Branding tab. Select Deliver NFT via email from the dropdown options. Here, you can customize: The logo displayed in the email with your logo. This will default to Crossmint’s logo, unless specified otherwise. The main button’s color . This will default to #04AA6D (Crossmint’s green). The display name textbox to include your brand’s name. This will be empty, by default. As you make adjustments, you can preview the changes. Once satisfied, save your changes and now they will apply to all future minting email notifications, related to this project. Emails now reflect your project’s brand identity while providing essential delivery information to recipients. ​ Enable email delivery You should make sure email delivery notifications are enabled for the customized email to reach your users. For new projects created after Sep 16,2024 , the “sendNotification” parameter is set to true by default, meaning mint recipients will automatically receive email notifications. For legacy projects, created before Sep 16 2024, “sendNotification” is set to false until March 14, 2025. If you choose so, you can enable email notifications for legacy projects by explicitly turning the feature on via API or via the Console. ​ Console To send email notifications to NFT recipients: Navigate to an unminted NFT part of a Collection in the Crossmint Console. Click on the more options button and select Mint & send NFT . Ensure the Notify recipient via email option is selected. Enter the recipient’s email address and press Mint. The recipient will receive an email delivery notification for their newly minted NFT. ​ API To do the same programmatically, you can configure two new parameters: sendNotification (boolean): Determines whether the recipient will receive an email notification. Default value: true for new projects created after Sep 16, 2024. For legacy projects (created before Sep 16, 2024), this feature will default to false until March 14, 2025, unless explicitly set to true . locale (string): Specifies the language for the email content. Default is en-US for English. We support all locales (i.e. “es-ES” for Spanish). ​ FAQs Can recipients change their email preferences? Yes, recipients can manage their email preferences through their Crossmint account settings. What happens if an email address is invalid? If an email address is invalid, the NFT will still be minted but the notification will fail",
    "chunk_index": 0,
    "word_count": 1000
  },
  {
    "id": "https://docs.crossmint.com/minting/nfts/integrate/manage-delivery#chunk_0",
    "url": "https://docs.crossmint.com/minting/nfts/integrate/manage-delivery",
    "title": "NFT Delivery Management | Crossmint Docs",
    "content": "true for new projects created after Sep 16, 2024. For legacy projects (created before Sep 16, 2024), this feature will default to false until March 14, 2025, unless explicitly set to true . locale (string): Specifies the language for the email content. Default is en-US for English. We support all locales (i.e. “es-ES” for Spanish). ​ FAQs Can recipients change their email preferences? Yes, recipients can manage their email preferences through their Crossmint account settings. What happens if an email address is invalid? If an email address is invalid, the NFT will still be minted but the notification will fail to deliver. The NFT will be associated with the email address in Crossmint’s system, but the recipient won’t receive a notification. Can I send NFTs to multiple recipients at once? Currently, each API call mints to a single recipient. For bulk operations, you’ll need to make multiple API calls. See the Mint In Bulk guide for more information. How do I track if an email notification was delivered? Crossmint doesn’t currently provide delivery tracking for email notifications. For critical notifications, consider implementing your own email delivery system alongside Crossmint’s. Was this page helpful? Yes No Update NFTs Set up a Claims Page Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 212
  },
  {
    "id": "https://docs.crossmint.com/minting/nfts/integrate/mint-in-bulk#chunk_0",
    "url": "https://docs.crossmint.com/minting/nfts/integrate/mint-in-bulk",
    "title": "Bulk NFT Minting | Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Integrate Mint In Bulk Documentation API Reference SDK Reference CLI Solution Guides Changelog Introduction About Crossmint Getting Started Using AI Assistants Platform Wallets Introduction Quickstarts ⚡ Guides Authentication Introduction Quickstart ⚡ Guides Tokenization (Minting) Introduction Integrate NFTs Quickstart ⚡ Integrate Create Collections Define Metadata Mint Tokens Configure Admin Functions Mint In Bulk Update NFTs Manage Delivery Set up a Claims Page List for Sale Bring Your Own Contract Webhooks & Status APIs Pricing SFTs Credentials IP Checkout Introduction Integrate Advanced Topics Enterprise Solutions Bulk Minting Capabilities Bulk Minting via Crossmint Console Step 1: Access the Batch Upload Feature Step 2: Prepare Your Metadata Step 3: Upload Your Metadata CSV Step 4: Upload Media Files Step 5: Complete the Upload Monitoring Bulk Operations Crossmint’s infrastructure is designed to handle high-volume minting operations efficiently, allowing you to scale your NFT projects to serve thousands or even millions of users. ​ Enterprise Solutions For enterprise customers with very high volume requirements, Crossmint offers additional capabilities: Enterprise bulk minting features are available for high-volume projects. Please contact us to discuss your specific requirements. ​ Bulk Minting Capabilities Crossmint’s platform offers several advantages for bulk minting operations: High Throughput : Mint thousands of NFTs per hour with optimized transaction batching Cost Efficiency : Reduce gas costs through intelligent transaction scheduling Queue Management : Automatic handling of transaction queues and retries Observability : Track the status of all minting operations in real-time Gas Optimization : Automatic gas price adjustments based on network conditions ​ Bulk Minting via Crossmint Console The Crossmint Console provides an easy-to-use interface for uploading and minting NFTs in bulk. Here’s how to use it: ​ Step 1: Access the Batch Upload Feature In the Crossmint Console, navigate to your collection and select the “Batch upload” option. ​ Step 2: Prepare Your Metadata Before uploading your assets, you need to prepare them properly: You can upload up to 1,000 NFT collectibles at once Download the example CSV file provided by Crossmint to use as a template Prepare your metadata according to the template format ​ Step 3: Upload Your Metadata CSV Add a CSV file named metadata.csv with your NFT metadata Click the “Upload CSV” button to upload your prepared file ​ Step 4: Upload Media Files Prepare your NFT media files (images, animations, videos) Crossmint supports various formats (PNG, JPEG, GIF etc.) Each file must be under 10MB in size All media files should be in the same folder, not in subfolders Click “Upload media files” to upload your prepared media ​ Step 5: Complete the Upload After uploading both your metadata CSV and media files, click the “Upload” button to start the batch minting process. ​ Monitoring Bulk Operations When minting in bulk, it’s essential to track the status of your operations: Webhooks : Set up webhooks to receive real-time notifications about mint completions and failures Status API : Use the action status API to check the status of individual minting operations Console Dashboard : Monitor your minting operations through the Crossmint Console Was this page helpful? Yes No Configure Admin Functions Update NFTs Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 534
  },
  {
    "id": "https://docs.crossmint.com/minting/nfts/integrate/mint-tokens#chunk_0",
    "url": "https://docs.crossmint.com/minting/nfts/integrate/mint-tokens",
    "title": "How to Mint Tokens in a Single API Call (NFTs) | Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Integrate Mint Tokens Documentation API Reference SDK Reference CLI Solution Guides Changelog Introduction About Crossmint Getting Started Using AI Assistants Platform Wallets Introduction Quickstarts ⚡ Guides Authentication Introduction Quickstart ⚡ Guides Tokenization (Minting) Introduction Integrate NFTs Quickstart ⚡ Integrate Create Collections Define Metadata Mint Tokens Configure Admin Functions Mint In Bulk Update NFTs Manage Delivery Set up a Claims Page List for Sale Bring Your Own Contract Webhooks & Status APIs Pricing SFTs Credentials IP Checkout Introduction Integrate Advanced Topics Advanced Guides Unique Assets (ERC-721) Editions (ERC-1155) Compressed NFTs Non-transferrable NFTs To mint and airdrop unique digital assets, you can follow the guide on the Quickstart . For more detail, please check the API reference . You can watch a quick video tutorial for this here . The API also has an idempotent version which prevents you from calling the same API action multiple times and mitigates the risk of unwanted NFT duplicates. ​ Advanced Guides Dynamic NFTs List for Sale Webhooks & Status APIs Bring your own Contract Was this page helpful? Yes No Define Metadata Configure Admin Functions Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 201
  },
  {
    "id": "https://docs.crossmint.com/minting/nfts/integrate/pricing#chunk_0",
    "url": "https://docs.crossmint.com/minting/nfts/integrate/pricing",
    "title": "Crossmint Minting Service Pricing | Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Integrate Pricing Documentation API Reference SDK Reference CLI Solution Guides Changelog Introduction About Crossmint Getting Started Using AI Assistants Platform Wallets Introduction Quickstarts ⚡ Guides Authentication Introduction Quickstart ⚡ Guides Tokenization (Minting) Introduction Integrate NFTs Quickstart ⚡ Integrate Create Collections Define Metadata Mint Tokens Configure Admin Functions Mint In Bulk Update NFTs Manage Delivery Set up a Claims Page List for Sale Bring Your Own Contract Webhooks & Status APIs Pricing SFTs Credentials IP Checkout Introduction Integrate Advanced Topics Chain operations pricing ​ Chain operations pricing All values shown in USD. Chain Create Collection Update Collection Mint NFTs Update Royalty Update Metadata Aptos $0.10 Not supported $0.01 Not supported Not supported Arbitrum* $0.03 + gas $0.03 + gas $0.03 + gas $0.03 + gas $0.03 + gas Arbitrum Nova* $0.01 + gas $0.01 + gas $0.01 + gas $0.01 + gas $0.01 + gas Avalanche* $0.10 + gas $0.10 + gas $0.10 + gas $0.10 + gas $0.10 + gas Base* $0.08 + gas $0.08 + gas $0.08 + gas $0.08 + gas $0.08 + gas BSC* $0.01 + gas $0.01 + gas $0.01 + gas $0.01 + gas $0.01 + gas Chiliz $1 $0.20 $0.50 $0.20 $0.20 Mode $0.05 $0.05 $0.05 $0.05 $0.05 Optimism* $0.06 + gas $0.06 + gas $0.06 + gas $0.06 + gas $0.06 + gas Polygon $0.50 $0.50 $0.10 $0.50 $0.05 Rari $0.20 $0.20 $0.20 $0.20 $0.20 Sei $0.05 $0.01 $0.01 $0.01 $0.01 Shape $2 $2 $2 $2 $2 Solana $8 Not supported $0.02 Not supported $0.02 Skale Nebula $0.01 $0.01 $0.01 $0.01 $0.01 Viction $0.01 $0.01 $0.01 $0.01 $0.01 Xai $0.01 $0.01 $0.01 $0.01 $0.01 Zora* $0.08 + gas $0.08 + gas $0.08 + gas $0.08 + gas $0.08 + gas *For some chains (Arbitrum, Arbitrum Nova, Avalanche, Base, BSC, Optimism, and Zora), gas fees are added to the base price. Gas fees are determined at the time the operation is submitted and depend on blockchain network congestion. For more details, or to discuss custom pricing for large operations volumes, contact our sales team . Was this page helpful? Yes No Webhooks & Status APIs Quickstart ⚡ Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 374
  },
  {
    "id": "https://docs.crossmint.com/minting/nfts/integrate/set-up-a-claims-page#chunk_0",
    "url": "https://docs.crossmint.com/minting/nfts/integrate/set-up-a-claims-page",
    "title": "Set up an NFT Claims Page | Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Integrate Set up a Claims Page Documentation API Reference SDK Reference CLI Solution Guides Changelog Introduction About Crossmint Getting Started Using AI Assistants Platform Wallets Introduction Quickstarts ⚡ Guides Authentication Introduction Quickstart ⚡ Guides Tokenization (Minting) Introduction Integrate NFTs Quickstart ⚡ Integrate Create Collections Define Metadata Mint Tokens Configure Admin Functions Mint In Bulk Update NFTs Manage Delivery Set up a Claims Page List for Sale Bring Your Own Contract Webhooks & Status APIs Pricing SFTs Credentials IP Checkout Introduction Integrate Advanced Topics Key Characteristics Guide FAQs The minting guide showed you how to create NFTs. In this guide you will learn how to set up a website where users can claim those NFTs into their wallets, for free. ​ Key Characteristics Easy to set up : no coding required. No wallet required : users can claim an NFT to their existing wallet, or, if they didn’t have one, enter an email address and have a wallet created on the fly. Bot protection : comes with signature protected mint function, reCAPTCHA, Cloudflare rate-limiting, and optional password protection. Blockchain-less UX : users don’t need to sign any transaction, nor pay gas fees. If you want users to pay the gas fees when claiming a token, you can do so by enabling payments for your collection with a price of 0. ​ Guide Video Walkthrough Create an NFT collection and navigate to it in the console. Upload NFT “templates” for all the NFTs you wish to list for claiming. You can do so from the “NFTs” tab in the console, or by using the API . Navigate to the Claims entry on the left navbar in the collections page. Follow the wizard to deploy a claims page. It is recommended to set a password, so that only those who know it can claim. (Optional) Customize the branding of your page. (Production only) Verify your account and collection . Not required in staging. Share the url or QR code with your users. ​ FAQs How can I track who has claimed an NFT? There are multiple ways: The claims page shows the number of items claimed By setting up webhooks to listen to mint events (Coming soon) Using the Crossmint console Can I gate my claims page? To prevent unwanted users from minting your NFTs, you can require a password for the claim. This can be activated from the Claims page on the console. Was this page helpful? Yes No Manage Delivery List for Sale Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 433
  },
  {
    "id": "https://docs.crossmint.com/minting/nfts/integrate/update-nfts#chunk_0",
    "url": "https://docs.crossmint.com/minting/nfts/integrate/update-nfts",
    "title": "How to Create Dynamic NFTs | Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Integrate Update NFTs Documentation API Reference SDK Reference CLI Solution Guides Changelog Introduction About Crossmint Getting Started Using AI Assistants Platform Wallets Introduction Quickstarts ⚡ Guides Authentication Introduction Quickstart ⚡ Guides Tokenization (Minting) Introduction Integrate NFTs Quickstart ⚡ Integrate Create Collections Define Metadata Mint Tokens Configure Admin Functions Mint In Bulk Update NFTs Manage Delivery Set up a Claims Page List for Sale Bring Your Own Contract Webhooks & Status APIs Pricing SFTs Credentials IP Checkout Introduction Integrate Advanced Topics Using the Edit NFT API Prerequisites Implementation Using Off-chain Metadata Use Cases for Dynamic NFTs Best Practices FAQs Dynamic NFTs are tokens whose content changes over time. There are two ways to achieve this with Crossmint: Using Crossmint’s Edit NFT API Storing the metadata offchain and updating it on your database. To use this option, set the property reuploadLinkedFiles to false when minting an NFT. ​ Using the Edit NFT API The Edit NFT API allows you to update the metadata of an existing NFT, including its name, description, image, and attributes. This is useful for creating NFTs that evolve over time or need to be updated based on external events. ​ Prerequisites Ensure your API key is a server-side key with the nfts.update scope You need the collection ID and NFT ID from the minting process ​ Implementation cURL Copy Ask AI curl --request PATCH \\ --url https://staging.crossmint.com/api/2022-06-09/collections/{collectionId}/nfts/{nftId} \\ --header 'Content-Type: application/json' \\ --header 'X-API-KEY: <api-key>' \\ --data '{ \"metadata\": { \"description\": \"My updated NFT description!\", \"image\": \"https://www.crossmint.com/assets/crossmint/updated-image.png\", \"name\": \"Evolved NFT\", \"attributes\": [ { \"trait_type\": \"level\", \"value\": \"2\" } ] }, \"reuploadLinkedFiles\": true }' ​ Using Off-chain Metadata You can also store the metadata off-chain and update it directly: When minting the NFT, set reuploadLinkedFiles to false Use your own server to host the metadata Update the metadata on your server as needed Copy Ask AI // Example: Minting with off-chain metadata const apiKey = \"YOUR_API_KEY\" ; const chain = \"polygon-amoy\" ; // or \"ethereum-sepolia\", \"base-sepolia\", etc. const env = \"staging\" ; // or \"www\" for production const recipientEmail = \"TEST_EMAIL_ADDRESS\" ; const recipientAddress = `email: ${ recipientEmail } : ${ chain } ` ; // The URL to your metadata server const metadataImgUrl = \"https://your-server.com/metadata/token123.png\" ; const url = `https:// ${ env } .crossmint.com/api/2022-06-09/collections/default/nfts` ; const options = { method: \"POST\" , headers: { accept: \"application/json\" , \"content-type\" : \"application/json\" , \"x-api-key\" : apiKey , }, body: JSON . stringify ({ recipient: recipientAddress , metadata: { name: \"Dynamic NFT\" , description: \"This NFT will update over time\" , image: metadataImgUrl , }, reuploadLinkedFiles: false , }), }; fetch ( url , options ) . then (( response ) => response . json ()) . then (( data ) => console . log ( data )) . catch (( error ) => console . error ( \"Error:\" , error )); ​ Use Cases for Dynamic NFTs Dynamic NFTs enable a wide range of applications: Game Assets : NFTs that evolve as players progress Membership Passes : NFTs that update based on membership status Event Tickets : NFTs that change before, during, and after events Digital Collectibles : NFTs that evolve based on real-world events Loyalty Programs : NFTs that update based on customer activity ​ Best Practices When implementing dynamic NFTs: Plan for Updates : Design your NFT with future updates in mind Versioning : Consider including version information in your metadata Event Triggers : Define clear conditions for when updates should occur User Communication : Inform users about how and when their NFTs might change Testing : Thoroughly test update mechanisms before implementation ​ FAQs How often can I update an NFT? With Crossmint’s Edit API, you can update NFTs as needed, but consider blockchain transaction costs and network congestion. For very frequent updates, consider using off-chain metadata. Will updates to an NFT affect its provenance or value? Updates don’t change the token ID or ownership history, but the perceived value may change based on the nature of the updates. It’s important to communicate your update policy to collectors. Can I schedule updates to happen automatically? Crossmint doesn’t provide native scheduling, but you can implement scheduled updates using your own backend services that call the Edit API at specified times. Do all marketplaces support dynamic NFTs? Most marketplaces will display the current state of your NFT’s metadata, but the frequency of metadata refreshes may vary by marketplace. Was this page helpful? Yes No Mint In Bulk Manage Delivery Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 761
  },
  {
    "id": "https://docs.crossmint.com/minting/nfts/integrate/webhooks-and-status-apis#chunk_0",
    "url": "https://docs.crossmint.com/minting/nfts/integrate/webhooks-and-status-apis",
    "title": "Minting Webhooks and Status APIs | Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Integrate Webhooks and Status APIs Documentation API Reference SDK Reference CLI Solution Guides Changelog Introduction About Crossmint Getting Started Using AI Assistants Platform Wallets Introduction Quickstarts ⚡ Guides Authentication Introduction Quickstart ⚡ Guides Tokenization (Minting) Introduction Integrate NFTs Quickstart ⚡ Integrate Create Collections Define Metadata Mint Tokens Configure Admin Functions Mint In Bulk Update NFTs Manage Delivery Set up a Claims Page List for Sale Bring Your Own Contract Webhooks & Status APIs Pricing SFTs Credentials IP Checkout Introduction Integrate Advanced Topics Ways to check the status of an action Creating NFT collections and minting or editing NFTs are operations that must be sent to a blockchain. Transaction confirmation on the blockchain can take a few seconds, but during network congestion, it may take several minutes. Webhooks and the action status API allow you to stay up to date on the status of these asynchronous operations. Some cases where you may want to listen to when transactions are confirmed include: Notifying your customers via email that their NFT is ready to access Updating your database with the NFT id for the user Showing in your website that that the mint has been successful ​ Ways to check the status of an action Model Best for Mechanism Pull (query for updates) Quick testing Action Status API Push (get notified) Scalable apps in production Webhooks Action Status APIs Webhooks ​ Action Status APIs Call the following API to check the status of an action: cURL Copy Ask AI env =< staging | www > YOUR_API_KEY =< ENTER_YOUR_API_KEY > actionId =< ENTER_YOUR_actionId > curl --request GET \\ --url https:// ${ env } .crossmint.com/api/2022-06-09/actions/ ${ actionId } \\ --header 'accept: application/json' \\ --header 'x-api-key: YOUR_API_KEY' API Reference Where can I find the actionId and API_KEY? actionID is returned from any async API calls you perform. YOUR_API_KEY can be found in the Developers -> API Keys tab of the Production or Staging consoles. Was this page helpful? Yes No Bring Your Own Contract Pricing Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 350
  },
  {
    "id": "https://docs.crossmint.com/minting/quickstarts/credentials#chunk_0",
    "url": "https://docs.crossmint.com/minting/quickstarts/credentials",
    "title": "Verifiable Credentials API | Issue and Verify Credentials",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Credentials Quickstart ⚡ Documentation API Reference SDK Reference CLI Solution Guides Changelog Introduction About Crossmint Getting Started Using AI Assistants Platform Wallets Introduction Quickstarts ⚡ Guides Authentication Introduction Quickstart ⚡ Guides Tokenization (Minting) Introduction Integrate NFTs SFTs Credentials Quickstart ⚡ Integrate IP Checkout Introduction Integrate Advanced Topics What are credentials? Integration steps 1. Create a Developer Account 2. Get an API Key 3. Create a Credential Template 4. Issue a Credential 5. Retrieve a Credential 6. Verify a Credential 7. Revoke a Credential (Optional) Learn More In this quickstart you will learn how to create, issue, and verify credentials. ​ What are credentials? A digital credential is an electronic record issued by a trusted source that certifies specific information about a person or entity. Crossmint makes it easy to issue, manage, and verify credentials onchain, following the W3C VC standard . Verifiable Credentials is an Enterprise feature. Contact Sales for access. ​ Integration steps ​ 1. Create a Developer Account To get started, create a developer account in the Crossmint Staging Console . Open that link, sign in, and accept the dialog to continue. Crossmint offers two consoles: staging , for development and testing, and production . ​ 2. Get an API Key Once you log in to the console, the next step is to create an API key . Click the \"Integrate\" tab and click on the \"API Keys\" option on top. Within the “Server-side keys” section, click the “Create new key” button in the top right. Then, check the scopes credentials.create , credentials.read , and credentials:templates.create under the “Verifiable Credentials” category and create your key. Save this key for the next step. ​ 3. Create a Credential Template Every Verifiable Credential must belong to a template. Verifiable Credentials within a template share the same schema (referred to as “type” in the template definition), default-metadata, encryption, storage, and chain configurations. A credential template is equivalent to an NFT collection. For the purpose of this quickstart, we will create a template with the following parameters: Type: crossmint:bedea4c5-4cea-425b-99c7-797ecbc8bc13:CourseCompletionCertificate . Types allow you to specify the attributes you are interested in certifying. They also act as a protective measure, preventing the addition of unauthorized fields and, as a result, the tampering of the Verifiable Credential. You can define your own . Encryption: none . This means the Verifiable Credential data will be stored in plain text. To encrypt the data, read about the supported encryption modalities . Storage: crossmint . This means the Verifiable Credential data will be stored by Crossmint. To store the data at the location of your choice, or in decentralized storage, read about the supported storage modalities . The credential’s revocation state is stored in the chain provided ( polygon-amoy ), along with public (non-confidential) metadata related to your credential’s template. createTemplate.js Copy Ask AI const apiKey = \"YOUR_API_KEY\" ; const env = \"staging\" ; // or \"www\" const url = `https:// ${ env } .crossmint.com/api/v1-alpha1/credentials/templates` ; const options = { method: \"POST\" , headers: { accept: \"application/json\" , \"content-type\" : \"application/json\" , \"x-api-key\" : apiKey , }, body: JSON . stringify ({ credentials: { type: \"crossmint:bedea4c5-4cea-425b-99c7-797ecbc8bc13:CourseCompletionCertificate\" , encryption: \"none\" , storage: \"crossmint\" , subject: { properties: { course: { type: \"string\" , title: \"Course\" , description: \"Course name\" , }, grade: { type: \"string\" , title: \"Grade\" , description: \"Grade received\" , }, }, required: [ \"course\" , \"grade\" ], }, }, metadata: { name: \"Certificate of Completion\" , description: \"A certificate issued upon completion of a course\" , imageUrl: \"https://www.crossmint.com/assets/crossmint/logo.png\" , }, chain: \"polygon-amoy\" , }), }; fetch ( url , options ) . then (( res ) => res . json ()) . then (( json ) => console . log ( json )) . catch (( err ) => console . error ( \"error:\" + err )); Example response JSON Copy Ask AI { \"id\" : \"a9e3016b-66f0-40ab-8d72-6546fddc7b72\" , \"metadata\" : { \"description\" : \"A certificate issued upon completion of a course\" , \"name\" : \"Certificate of Completion\" , \"imageUrl\" : \"ipfs://QmaToZn4VEjF7q4CAudPaNka6AD484xuuEZSXmTLJPDLVE\" }, \"fungibility\" : \"non-fungible\" , \"onChain\" : { \"chain\" : \"polygon-amoy\" , \"type\" : \"erc-721\" }, \"subscription\" : { \"enabled\" : false }, \"actionId\" : \"a9e3016b-66f0-40ab-8d72-6546fddc7b72\" } Save the id from the response as your TEMPLATE_ID for the next step. ​ 4. Issue a Credential With a template created, we can start issuing credentials. To do this, we need to enter the subject’s email address, or wallet address, if they have one. Then, we need to specify the exact data required by the Verifiable Credential type, i.e. course name and grade. The credential’s contents are identified by the “subject” key within the credential. If you don’t include an expiration date, the credential will not expire. You can always revoke the credential in the future, if necessary. issueCredential.js Copy Ask AI const apiKey = \"YOUR_API_KEY\" ; const env = \"staging\" ; // or \"www\" const templateId = \"YOUR_TEMPLATE_ID\" ; const recipientEmail = \"TEST_EMAIL_ADDRESS\" ; const url = `https:// ${ env } .crossmint.com/api/v1-alpha1/credentials/templates/ ${ templateId } /vcs` ; const options = { method: \"POST\" , headers: { accept: \"application/json\" , \"content-type\" : \"application/json\" , \"x-api-key\" : apiKey , }, body: JSON . stringify ({ recipient: `email: ${ recipientEmail } :polygon-amoy` , credential: { // The CourseCompletionCertificate credential type requires course and grade declarations subject: { course: \"Blockchain 101\" , grade: \"A\" , }, expiresAt: \"2034-02-02\" , }, }), }; fetch ( url , options ) . then (( res ) => res . json ()) . then (( json ) => console . log ( json )) . catch (( err ) => console . error ( \"error:\" + err )); Example response JSON Copy Ask AI { \"id\" : \"6728f773-61af-4732-a34f-b5a50d8b9872\" , \"onChain\" : { \"status\" : \"pending\" , \"chain\" : \"polygon-amoy\" , \"contractAddress\" : \"0x45c9597b5441289C134E554990cdb647f65df5FB\" }, \"credentialId\" : \"urn:uuid:e6b3dc76-a337-437b-ac1b-3d330e66e1a6\" , \"actionId\" : \"6728f773-61af-4732-a34f-b5a50d8b9872\" } Save the credential id from the response for the next step. ​ 5. Retrieve a Credential ​​You can retrieve",
    "chunk_index": 0,
    "word_count": 1000
  },
  {
    "id": "https://docs.crossmint.com/minting/quickstarts/credentials#chunk_0",
    "url": "https://docs.crossmint.com/minting/quickstarts/credentials",
    "title": "Verifiable Credentials API | Issue and Verify Credentials",
    "content": "\"2034-02-02\" , }, }), }; fetch ( url , options ) . then (( res ) => res . json ()) . then (( json ) => console . log ( json )) . catch (( err ) => console . error ( \"error:\" + err )); Example response JSON Copy Ask AI { \"id\" : \"6728f773-61af-4732-a34f-b5a50d8b9872\" , \"onChain\" : { \"status\" : \"pending\" , \"chain\" : \"polygon-amoy\" , \"contractAddress\" : \"0x45c9597b5441289C134E554990cdb647f65df5FB\" }, \"credentialId\" : \"urn:uuid:e6b3dc76-a337-437b-ac1b-3d330e66e1a6\" , \"actionId\" : \"6728f773-61af-4732-a34f-b5a50d8b9872\" } Save the credential id from the response for the next step. ​ 5. Retrieve a Credential ​​You can retrieve a Verifiable Credential using different identifiers associated with the credential itself or the NFT associated with the credential. Get Verifiable Credential by ID uses the format: urn:uuid:<UUID> Get Verifiable Credential by NFT Locator uses the format: <chain>:<contractAddress>:<tokenId> Get Verifiable Credential by NFT ID uses crossmint’s internal NFT ID getCredential.js Copy Ask AI const apiKey = \"YOUR_API_KEY\" ; const env = \"staging\" ; // or \"www\" const credentialId = \"YOUR_CREDENTIAL_ID\" ; const url = `https:// ${ env } .crossmint.com/api/v1-alpha1/credentials/ ${ credentialId } ` ; const options = { method: \"GET\" , headers: { accept: \"application/json\" , \"x-api-key\" : apiKey , }, }; fetch ( url , options ) . then (( res ) => res . json ()) . then (( json ) => console . log ( json )) . catch (( err ) => console . error ( \"error:\" + err )); Example response JSON Copy Ask AI { \"unencryptedCredential\" : { \"id\" : \"urn:uuid:e6b3dc76-a337-437b-ac1b-3d330e66e1a6\" , \"credentialSubject\" : { \"course\" : \"Blockchain 101\" , \"grade\" : \"A\" , \"id\" : \"did:polygon-amoy:0x2da3151C266185c4861b45277dbbe56Cb613963e\" }, \"validUntil\" : \"2034-02-02\" , \"nft\" : { \"tokenId\" : \"1\" , \"chain\" : \"polygon-amoy\" , \"contractAddress\" : \"0x45c9597b5441289C134E554990cdb647f65df5FB\" }, \"issuer\" : { \"id\" : \"did:polygon-amoy:0x1785A5DE9e0F06791393739De496a0a2c9ACA855\" }, \"type\" : [ \"VerifiableCredential\" , \"Course completion\" ], \"validFrom\" : \"2025-05-28T14:31:03.514Z\" , \"@context\" : [ \"https://www.w3.org/ns/credentials/v2\" ], \"proof\" : { \"verificationMethod\" : \"did:polygon-amoy:0x1785A5DE9e0F06791393739De496a0a2c9ACA855#evmAddress\" , \"created\" : \"2025-05-28T14:31:03.514Z\" , \"proofPurpose\" : \"assertionMethod\" , \"type\" : \"EthereumEip712Signature2021\" , \"proofValue\" : \"0x17f624a23b620de2867dbefbeb5214e5693a4b470897302f91f870383d4f5ee7754600d1fb72b73c926fed56aac20724ce87d49e0078e0b13f02734a199ceaa61b\" , \"eip712\" : [ Object ] } } } ​ 6. Verify a Credential Verifying a credential can be done in different ways, the easiest one is to call the verify API route. You can also accomplish this with the SDK . To verify a credential’s validity via API use the following script: verifyCredential.js Copy Ask AI const apiKey = \"YOUR_API_KEY\" ; const env = \"staging\" ; // or \"www\" const credentialId = \"YOUR_CREDENTIAL_ID\" ; const url = `https:// ${ env } .crossmint.com/api/v1-alpha1/credentials/verification/verify` ; const options = { method: \"POST\" , headers: { \"accept\" : \"application/json\" , \"content-type\" : \"application/json\" , \"x-api-key\" : apiKey , }, body: JSON . stringify ({ // paste credential object here credential : { id: \"urn:uuid:e6b3dc76-a337-437b-ac1b-3d330e66e1a6\" , ... } }) }; fetch ( url , options ) . then (( res ) => res . json ()) . then (( json ) => console . log ( json )) . catch (( err ) => console . error ( \"error:\" + err )); Example response JSON Copy Ask AI { isValid : true } ​ 7. Revoke a Credential (Optional) To revoke a credential, you can directly use the revoke credential API : revokeCredential.js Copy Ask AI const apiKey = \"YOUR_API_KEY\" ; const env = \"staging\" ; // or \"www\" const credentialId = \"YOUR_CREDENTIAL_ID\" ; const url = `https:// ${ env } .crossmint.com/api/v1-alpha1/credentials/ ${ credentialId } ` ; const options = { method: \"DELETE\" , headers: { accept: \"application/json\" , \"x-api-key\" : apiKey , }, }; fetch ( url , options ) . then (( res ) => res . json ()) . then (( json ) => console . log ( json )) . catch (( err ) => console . error ( \"error:\" + err )); Example response JSON Copy Ask AI { \"actionId\" : \"15bfe43c-3d5d-4d03-9e20-6dbaf01f038f\" , \"action\" : \"nfts.delete\" , \"status\" : \"pending\" , \"data\" : { \"chain\" : \"polygon-amoy\" , \"collection\" : { \"id\" : \"a9e3016b-66f0-40ab-8d72-6546fddc7b72\" , \"contractAddress\" : \"0x45c9597b5441289C134E554990cdb647f65df5FB\" }, \"token\" : { \"id\" : \"6728f773-61af-4732-a34f-b5a50d8b9872\" , \"tokenId\" : \"1\" } }, \"startedAt\" : \"2025-05-28T16:53:11.000Z\" , \"resource\" : \"https://staging.crossmint.com/api/2022-06-09/collections/a9e3016b-66f0-40ab-8d72-6546fddc7b72/nfts/15bfe43c-3d5d-4d03-9e20-6dbaf01f038f\" } ​ Learn More For more detailed information about Verifiable Credentials, please visit the dedicated Verifiable Credentials section which includes comprehensive guides on: Create Credential Types Learn how to define the structure of your credentials. Create Credential Templates Create reusable templates for your credentials. Issue Credentials Issue credentials to users. Verify Credentials Verify the authenticity of credentials. Was this page helpful? Yes No Quickstart ⚡ Create Credential Types Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 765
  },
  {
    "id": "https://docs.crossmint.com/minting/quickstarts/ip#chunk_0",
    "url": "https://docs.crossmint.com/minting/quickstarts/ip",
    "title": "IP Asset API | Create and Manage Intellectual Property Assets",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation IP Quickstart ⚡ Documentation API Reference SDK Reference CLI Solution Guides Changelog Introduction About Crossmint Getting Started Using AI Assistants Platform Wallets Introduction Quickstarts ⚡ Guides Authentication Introduction Quickstart ⚡ Guides Tokenization (Minting) Introduction Integrate NFTs SFTs Credentials IP Quickstart ⚡ Checkout Introduction Integrate Advanced Topics What are IP credentials? Integration steps 1. Create a Developer Account 2. Get an API Key 3. Create an IP Collection 4. Create an IP Asset 5. Retrieve an IP Asset 6. Update an IP Asset Learn More In this quickstart you will learn how to create and manage intellectual property (IP) assets. Contact sales to enable this API on your project. ​ What are IP credentials? IP credentials are onchain records of intellectual property rights and authorship, enabled by Story Protocol’s infrastructure and issued using Crossmint’s APIs. ​ Integration steps ​ 1. Create a Developer Account To get started, create a developer account in the Crossmint Staging Console . Open that link, sign in, and accept the dialog to continue. Crossmint offers two consoles: staging , for development and testing, and production . ​ 2. Get an API Key Once you log in to the console, the next step is to create an API key . Click the \"Integrate\" tab and click on the \"API Keys\" option on top. Within the “Server-side keys” section, click the “Create new key” button in the top right. Then, check the necessary scopes under the “Minting API” category: nfts.create , nfts.read , collections.create , nfts.update and create your key. Save this key for the next step. ​ 3. Create an IP Collection First, let’s create an IP collection to hold our IP assets: createIPCollection.js Copy Ask AI const apiKey = \"YOUR_API_KEY\" ; const env = \"staging\" ; // or \"www\" const url = `https:// ${ env } .crossmint.com/api/v1/ip/collections` ; const options = { method: \"POST\" , headers: { accept: \"application/json\" , \"content-type\" : \"application/json\" , \"x-api-key\" : apiKey , }, body: JSON . stringify ({ metadata: { description: \"A collection of intellectual property assets\" , name: \"My IP Collection\" , symbol: \"MPA\" , }, chain: \"story-testnet\" , }), }; fetch ( url , options ) . then (( res ) => res . json ()) . then (( json ) => console . log ( json )) . catch (( err ) => console . error ( \"error:\" + err )); Example response Here is an example response returned from the API call above: JSON Copy Ask AI { \"id\" : \"7f5e653d-2c9d-4025-98c8-8245c128ad10\" , \"actionId\" : \"7f5e653d-2c9d-4025-98c8-8245c128ad10\" , \"metadata\" : { \"name\" : \"My IP Collection\" , \"symbol\" : \"MPA\" , \"description\" : \"A collection of intellectual property assets\" }, \"onChain\" : { \"chain\" : \"story-testnet\" } } Save the collection id from the response for the next step. ​ 4. Create an IP Asset Now, let’s create an IP asset within our collection: createIPAsset.js Copy Ask AI const apiKey = \"YOUR_API_KEY\" ; const env = \"staging\" ; // or \"www\" const collectionId = \"YOUR_COLLECTION_ID\" ; const url = `https:// ${ env } .crossmint.com/api/v1/ip/collections/ ${ collectionId } /ipassets` ; const options = { method: \"POST\" , headers: { accept: \"application/json\" , \"content-type\" : \"application/json\" , \"x-api-key\" : apiKey , }, body: JSON . stringify ({ owner: \"email:creator@example.com:story-testnet\" , nftMetadata: { name: \"Snowflake Funk\" , description: \"A disco song for the winter holidays\" , image: \"https://cdn2.suno.ai/image_large_c001fd6e-d6cd-474f-a7b6-6e6a9b3e2515.jpeg\" , }, ipAssetMetadata: { title: \"Snowflake Funk\" , createdAt: \"2025-02-11T11:13:00\" , ipType: \"music\" , creators: [ { name: \"John Doe\" , email: \"john.doe@example.com\" , crossmintUserLocator: \"email:john.doe@example.com:story-testnet\" , contributionPercent: 100 , }, ], media: [ { name: \"Snowflake Funk\" , url: \"https://cdn1.suno.ai/c001fd6e-d6cd-474f-a7b6-6e6a9b3e2515.mp3\" , mimeType: \"audio/mpeg\" , }, ], attributes: [ { key: \"Suno Artist\" , value: \"InfluentialCoda427\" , }, { key: \"Source\" , value: \"Suno.com\" , }, ], }, }), }; fetch ( url , options ) . then (( res ) => res . json ()) . then (( json ) => console . log ( json )) . catch (( err ) => console . error ( \"error:\" + err )); Example response Here is an example response returned from the API call above: JSON Copy Ask AI { \"id\" : \"49b9e141-8fd8-45dc-9646-13a3439c6f20\" , \"actionId\" : \"49b9e141-8fd8-45dc-9646-13a3439c6f20\" , \"nftMetadata\" : { \"name\" : \"Snowflake Funk\" , \"image\" : \"https://cdn2.suno.ai/image_large_c001fd6e-d6cd-474f-a7b6-6e6a9b3e2515.jpeg\" , \"description\" : \"A disco song for the winter holidays\" }, \"ipAssetMetadata\" : { \"title\" : \"Snowflake Funk\" , \"createdAt\" : \"2025-02-11T11:13:00\" , \"creators\" : [ { \"name\" : \"John Doe\" , \"email\" : \"john.doe@example.com\" , \"crossmintUserLocator\" : \"email:john.doe@example.com:story-testnet\" , \"contributionPercent\" : 100 } ], \"media\" : [ { \"name\" : \"Snowflake Funk\" , \"url\" : \"https://cdn1.suno.ai/c001fd6e-d6cd-474f-a7b6-6e6a9b3e2515.mp3\" , \"mimeType\" : \"audio/mpeg\" } ], \"attributes\" : [ { \"key\" : \"Suno Artist\" , \"value\" : \"InfluentialCoda427\" }, { \"key\" : \"Source\" , \"value\" : \"Suno.com\" } ], \"ipType\" : \"music\" }, \"licenseTerms\" : [ { \"type\" : \"non-commercial-social-remixing\" } ], \"onChain\" : { \"chain\" : \"story-testnet\" , \"contractAddress\" : \"0x82a72DfFb175DF8AB6d3C2E3888D5314a50C30D0\" , \"status\" : \"pending\" } } Save the IP asset id from the response for the next steps. ​ 5. Retrieve an IP Asset To retrieve an IP asset: getIPAsset.js Copy Ask AI const apiKey = \"YOUR_API_KEY\" ; const env = \"staging\" ; // or \"www\" const collectionId = \"YOUR_COLLECTION_ID\" ; const ipAssetId = \"YOUR_IP_ASSET_ID\" ; const url = `https:// ${ env } .crossmint.com/api/v1/ip/collections/ ${ collectionId } /ipassets/ ${ ipAssetId } ` ; const options = { method: \"GET\" , headers: { accept: \"application/json\" , \"x-api-key\" : apiKey , }, }; fetch ( url , options ) . then (( res ) => res . json ()) . then (( json ) => console . log ( json )) . catch (( err ) => console . error ( \"error:\" + err )); Example response Here is an example response returned from the API call above: JSON Copy Ask AI { \"id\" : \"49b9e141-8fd8-45dc-9646-13a3439c6f20\" , \"actionId\" : \"49b9e141-8fd8-45dc-9646-13a3439c6f20\" , \"nftMetadata\" : { \"name\" : \"Snowflake Funk\" , \"image\" : \"ipfs://QmYA9HyvoPmxvsMx216MFkoydtrA1sSxX5A5ixeu5S9VKF\" , \"description\" : \"A",
    "chunk_index": 0,
    "word_count": 1000
  },
  {
    "id": "https://docs.crossmint.com/minting/quickstarts/ip#chunk_0",
    "url": "https://docs.crossmint.com/minting/quickstarts/ip",
    "title": "IP Asset API | Create and Manage Intellectual Property Assets",
    "content": "options = { method: \"GET\" , headers: { accept: \"application/json\" , \"x-api-key\" : apiKey , }, }; fetch ( url , options ) . then (( res ) => res . json ()) . then (( json ) => console . log ( json )) . catch (( err ) => console . error ( \"error:\" + err )); Example response Here is an example response returned from the API call above: JSON Copy Ask AI { \"id\" : \"49b9e141-8fd8-45dc-9646-13a3439c6f20\" , \"actionId\" : \"49b9e141-8fd8-45dc-9646-13a3439c6f20\" , \"nftMetadata\" : { \"name\" : \"Snowflake Funk\" , \"image\" : \"ipfs://QmYA9HyvoPmxvsMx216MFkoydtrA1sSxX5A5ixeu5S9VKF\" , \"description\" : \"A disco song for the winter holidays\" }, \"ipAssetMetadata\" : { \"title\" : \"Snowflake Funk\" , \"createdAt\" : \"2025-02-11T11:13:00\" , \"creators\" : [ { \"name\" : \"John Doe\" , \"email\" : \"john.doe@example.com\" , \"crossmintUserLocator\" : \"email:john.doe@example.com:story-testnet\" , \"contributionPercent\" : 100 } ], \"media\" : [ { \"name\" : \"Snowflake Funk\" , \"url\" : \"https://cdn1.suno.ai/c001fd6e-d6cd-474f-a7b6-6e6a9b3e2515.mp3\" , \"mimeType\" : \"audio/mpeg\" } ], \"attributes\" : [ { \"key\" : \"Suno Artist\" , \"value\" : \"InfluentialCoda427\" }, { \"key\" : \"Source\" , \"value\" : \"Suno.com\" } ], \"ipType\" : \"music\" }, \"licenseTerms\" : [ { \"type\" : \"non-commercial-social-remixing\" , \"uri\" : \"\" } ], \"onChain\" : { \"chain\" : \"story-testnet\" , \"contractAddress\" : \"0x82a72DfFb175DF8AB6d3C2E3888D5314a50C30D0\" , \"status\" : \"success\" , \"ipAssetId\" : \"0xe20936B1C974E7C550b483243719A1B1886D2c6c\" , \"tokenId\" : \"1\" , \"txId\" : \"0x4e505bcd429960d3031bd8d1f27bb7ffd2cfa251498c12c16cf2375a14d2bd51\" , \"owner\" : \"0x1a042BBEFb116072E6AEF8304f9B7D15aA2b4BCF\" , \"explorerLink\" : \"https://aeneid.explorer.story.foundation/ipa/0xe20936B1C974E7C550b483243719A1B1886D2c6c\" } } ​ 6. Update an IP Asset If needed, you can update an IP asset: updateIPAsset.js Copy Ask AI const apiKey = \"YOUR_API_KEY\" ; const env = \"staging\" ; // or \"www\" const collectionId = \"YOUR_COLLECTION_ID\" ; const ipAssetId = \"YOUR_IP_ASSET_ID\" ; const url = `https:// ${ env } .crossmint.com/api/v1/ip/collections/ ${ collectionId } /ipassets/ ${ ipAssetId } ` ; const options = { method: \"PATCH\" , headers: { accept: \"application/json\" , \"content-type\" : \"application/json\" , \"x-api-key\" : apiKey , }, body: JSON . stringify ({ ipAssetMetadata: { title: \"Snowflake Funk\" , createdAt: \"2025-02-11T11:13:00\" , ipType: \"music\" , creators: [ { name: \"John Doe\" , email: \"john.doe@example.com\" , crossmintUserLocator: \"email:john.doe@example.com:story-testnet\" , contributionPercent: 90 , }, { name: \"Frank L\" , crossmintUserLocator: \"email:frank.l@example.com:story-testnet\" , contributionPercent: 10 , }, ], }, }), }; fetch ( url , options ) . then (( res ) => res . json ()) . then (( json ) => console . log ( json )) . catch (( err ) => console . error ( \"error:\" + err )); Example response Here is an example response returned from the API call above: JSON Copy Ask AI { \"id\" : \"75a45061-febb-4344-84d6-959276a5696a\" , \"actionId\" : \"75a45061-febb-4344-84d6-959276a5696a\" , \"nftMetadata\" : { \"name\" : \"Snowflake Funk\" , \"image\" : \"ipfs://QmYA9HyvoPmxvsMx216MFkoydtrA1sSxX5A5ixeu5S9VKF\" , \"description\" : \"A disco song for the winter holidays\" }, \"ipAssetMetadata\" : { \"title\" : \"Snowflake Funk\" , \"createdAt\" : \"2025-02-11T11:13:00\" , \"creators\" : [ ... ], \"ipType\" : \"music\" }, \"licenseTerms\" : [ { \"type\" : \"non-commercial-social-remixing\" , \"uri\" : \"\" } ], \"onChain\" : { \"chain\" : \"story-testnet\" , \"contractAddress\" : \"0x82a72DfFb175DF8AB6d3C2E3888D5314a50C30D0\" , \"status\" : \"pending\" } } ​ Learn More For more detailed information about IP assets, please refer to the API reference: Create IP Collection Learn how to create IP collections. Create IP Asset Create IP assets within collections. Update IP Asset Update existing IP assets. Get IP Assets Retrieve IP assets from collections. Was this page helpful? Yes No Webhook Introduction Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 570
  },
  {
    "id": "https://docs.crossmint.com/minting/quickstarts/nfts#chunk_0",
    "url": "https://docs.crossmint.com/minting/quickstarts/nfts",
    "title": "NFT Minting API | Create and Airdrop NFTs at Scale",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation NFTs Quickstart ⚡ Documentation API Reference SDK Reference CLI Solution Guides Changelog Introduction About Crossmint Getting Started Using AI Assistants Platform Wallets Introduction Quickstarts ⚡ Guides Authentication Introduction Quickstart ⚡ Guides Tokenization (Minting) Introduction Integrate NFTs Quickstart ⚡ Integrate SFTs Credentials IP Checkout Introduction Integrate Advanced Topics Integration steps View your NFTs Launching in Production Learn More In this quickstart you will learn how to create a unique NFT and deliver it to a wallet or email address. ​ Integration steps EVM Chains Solana Compressed NFTs (Solana) ​ 1. Create a Developer Account To get started, create a developer account in the Crossmint Staging Console . Open that link, sign in, and accept the dialog to continue. Crossmint offers two consoles: staging , for development and testing, and production . ​ 2. Get an API Key Once you log in to the console, the next step is to create an API key . Click the \"Integrate\" tab and click on the \"API Keys\" option on top. Within the “Server-side keys” section, click the “Create new key” button in the top right. Then, check the scopes nfts.create and nfts.read under the “Minting API” category and create your key. Save this key for the next step. ​ 3. Mint an NFT We’re almost there! With our key created, we’re now going to write a small function that creates an NFT and delivers it to a user. Create a file (e.g. mintNFT.js ) and enter this code into it: mintNFT.js Copy Ask AI const apiKey = \"YOUR_API_KEY\" ; const chain = \"polygon-amoy\" ; // or \"ethereum-sepolia\", \"base-sepolia\", etc. const env = \"staging\" ; // or \"www\" const recipientEmail = \"TEST_EMAIL_ADDRESS\" ; const recipientAddress = `email: ${ recipientEmail } : ${ chain } ` ; const url = `https:// ${ env } .crossmint.com/api/2022-06-09/collections/default/nfts` ; const options = { method: \"POST\" , headers: { accept: \"application/json\" , \"content-type\" : \"application/json\" , \"x-api-key\" : apiKey , }, body: JSON . stringify ({ recipient: recipientAddress , metadata: { name: \"Crossmint Test NFT\" , image: \"https://picsum.photos/400\" , description: \"My first NFT using Crossmint\" , }, }), }; fetch ( url , options ) . then (( res ) => res . json ()) . then (( json ) => console . log ( json )) . catch (( err ) => console . error ( \"error:\" + err )); This code creates an NFT, uploads it to the blockchain, and delivers it to a user wallet , attached to the email address provided. Before running it, be sure to fill in values for: YOUR_API_KEY with the key obtained in the prior step. TEST_EMAIL_ADDRESS with an email address you control, for testing. Now, run the mintNFT.js script. Copy Ask AI node mintNFT.js After a few seconds, it should return a response indicating the mint has started processing. Check the full response and save its actionId property , as you’ll use it later. Example response Here is an example response returned from the API call above: JSON Copy Ask AI { \"id\" : \"b3f61f22-c30e-424d-a5ab-d0cbc5c41aab\" , \"onChain\" : { \"status\" : \"pending\" , \"chain\" : \"polygon-amoy\" , \"contractAddress\" : \"0x921Bc21bf3Fd6568cdC2C904F75b83556062c3d0\" }, \"actionId\" : \"b3f61f22-c30e-424d-a5ab-d0cbc5c41aab\" } ​ 4. Confirm Delivery of the NFT The mint has started processing. However, blockchains can take a few seconds (or, at times of extreme network congestion, even minutes) to confirm the operation. Before showing the user a success screen, the next step is checking the status of the mint. To do this, grab the actionId received at the end of step 3 and use it alongside your API key in one of the snippets below. mintStatus.js cURL Copy Ask AI const apiKey = \"<YOUR_API_KEY>\" ; const env = \"staging\" ; // or \"www\" const actionId = \"<MINT_ACTION_ID>\" ; const url = `https:// ${ env } .crossmint.com/api/2022-06-09/actions/ ${ actionId } ` ; const options = { method: \"GET\" , headers: { \"X-API-KEY\" : apiKey }, }; fetch ( url , options ) . then (( response ) => response . json ()) . then (( response ) => console . log ( response )) . catch (( err ) => console . error ( err )); Example response Here is an example response from calling the status API: JSON Copy Ask AI { \"actionId\" : \"b3f61f22-c30e-424d-a5ab-d0cbc5c41aab\" , \"action\" : \"nfts.create\" , \"status\" : \"success\" , \"data\" : { \"collection\" : { ... }, \"recipient\" : { ... }, \"token\" : { ... } }, \"startedAt\" : \"2025-05-27T02:41:08.000Z\" , \"completedAt\" : \"2025-05-27T02:41:40.000Z\" , \"resource\" : \"https://staging.crossmint.com/api/2022-06-09/collections/default-polygon-amoy/nfts/b3f61f22-c30e-424d-a5ab-d0cbc5c41aab\" } Pay attention to the “status” field. Once it says “success”: Congratulations. You have minted your first NFT 🥷 🎉 For scalable production applications, consider using webhooks to determine when your NFT has been minted, instead of periodically polling for its status via the API. ​ View your NFTs If the NFTs were delivered to an email address , the recipient can see them by: Logging into their wallet from Crossmint’s website . For staging, they must use https://staging.crossmint.com . From your website if you use embedded wallets . See the API for getting the NFTs in a wallet. If the NFTs were delivered to a wallet address , the user will be able to see them there directly, connecting to testnet if needed, or on the testnet blockchain explorer. And voilá, there’s your NFT! Now think of all the cool things you can build with this, at scale :) ​ Launching in Production For production, the steps are almost identical, but some changes are required: Create a developer account on the production console . Add credits to your account from Billing & Usage . Then, create a production key on the API Keys page with the same API scopes. Modify all code snippets with const env = \"www\" , so they use the production APIs. You may also need to change the chain variable to match your production blockchain. Check the guide with best practices ​ Learn More Create collections",
    "chunk_index": 0,
    "word_count": 1000
  },
  {
    "id": "https://docs.crossmint.com/minting/quickstarts/nfts#chunk_0",
    "url": "https://docs.crossmint.com/minting/quickstarts/nfts",
    "title": "NFT Minting API | Create and Airdrop NFTs at Scale",
    "content": "things you can build with this, at scale :) ​ Launching in Production For production, the steps are almost identical, but some changes are required: Create a developer account on the production console . Add credits to your account from Billing & Usage . Then, create a production key on the API Keys page with the same API scopes. Modify all code snippets with const env = \"www\" , so they use the production APIs. You may also need to change the chain variable to match your production blockchain. Check the guide with best practices ​ Learn More Create collections Learn how to create and manage NFT collections. Mint NFTs and other tokens Check out more advanced options for minting digital assets. Edit NFTs Update and delete tokens after minting. Was this page helpful? Yes No Introduction Create Collections Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 149
  },
  {
    "id": "https://docs.crossmint.com/minting/quickstarts/sfts#chunk_0",
    "url": "https://docs.crossmint.com/minting/quickstarts/sfts",
    "title": "SFT Minting API | Create Semi-Fungible Tokens at Scale",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation SFTs Quickstart ⚡ Documentation API Reference SDK Reference CLI Solution Guides Changelog Introduction About Crossmint Getting Started Using AI Assistants Platform Wallets Introduction Quickstarts ⚡ Guides Authentication Introduction Quickstart ⚡ Guides Tokenization (Minting) Introduction Integrate NFTs SFTs Quickstart ⚡ Credentials IP Checkout Introduction Integrate Advanced Topics What are SFTs? Integration steps 1. Create a Developer Account 2. Get an API Key 3. Create an SFT collection 4. Create a template within that collection 5. Mint an SFT from a template 6. Confirm Delivery of the SFT View your SFTs Launching in Production Learn More In this quickstart you will learn how to create semi-fungible tokens (SFTs) and deliver them to a wallet or email address. ​ What are SFTs? SFTs (semi-fungible tokens) follow the ERC-1155 standard. Each token is a replica of a predefined template. Each collection (smart contract) can contain multiple templates, which can contain many tokens. This API only supports EVM chains self-serve. Contact us if you need support for another chain. ​ Integration steps ​ 1. Create a Developer Account To get started, create a developer account in the Crossmint Staging Console . Open that link, sign in, and accept the dialog to continue. Crossmint offers two consoles: staging , for development and testing, and production . ​ 2. Get an API Key Once you log in to the console, the next step is to create an API key . Click the \"Integrate\" tab and click on the \"API Keys\" option on top. Within the “Server-side keys” section, click the “Create new key” button in the top right. Then, check the scopes nfts.create , nfts.read , and collections.create under the “Minting API” category and create your key. Save this key for the next step. ​ 3. Create an SFT collection With our key created, we’re now going to create an SFT collection to hold our templates. createCollection.js Copy Ask AI const apiKey = \"YOUR_API_KEY\" ; const env = \"staging\" ; // or \"www\" const url = `https:// ${ env } .crossmint.com/api/2022-06-09/collections` ; const options = { method: \"POST\" , headers: { accept: \"application/json\" , \"content-type\" : \"application/json\" , \"x-api-key\" : apiKey , }, body: JSON . stringify ({ chain: \"polygon-amoy\" , fungibility: \"semi-fungible\" , metadata: { name: \"My SFT Collection\" , imageUrl: \"https://www.crossmint.com/assets/crossmint/logo.png\" , description: \"A new collection with its own dedicated smart contract\" , }, }), }; fetch ( url , options ) . then (( res ) => res . json ()) . then (( json ) => console . log ( json )) . catch (( err ) => console . error ( \"error:\" + err )); Example response JSON Copy Ask AI { \"id\" : \"5263650e-6d43-4ed3-9e31-0cf593d076a4\" , \"metadata\" : { \"name\" : \"My SFT Collection\" , \"description\" : \"A new collection with its own dedicated smart contract\" , \"imageUrl\" : \"https://www.crossmint.com/assets/crossmint/logo.png\" , \"symbol\" : \"XMINT\" }, \"fungibility\" : \"semi-fungible\" , \"onChain\" : { \"chain\" : \"polygon-amoy\" , \"type\" : \"erc-1155\" }, \"actionId\" : \"5263650e-6d43-4ed3-9e31-0cf593d076a4\" } Save the id from the response as your COLLECTION_ID for the next steps. ​ 4. Create a template within that collection Now, let’s create a template within our collection: createTemplate.js Copy Ask AI const apiKey = \"YOUR_API_KEY\" ; const env = \"staging\" ; // or \"www\" const collectionId = \"YOUR_COLLECTION_ID\" ; const url = `https:// ${ env } .crossmint.com/api/2022-06-09/collections/ ${ collectionId } /templates` ; const options = { method: \"POST\" , headers: { accept: \"application/json\" , \"content-type\" : \"application/json\" , \"x-api-key\" : apiKey , }, body: JSON . stringify ({ onChain: { tokenId: \"1\" , }, supply: { limit: 10 , }, metadata: { name: \"My template\" , image: \"https://www.crossmint.com/assets/crossmint/logo.png\" , description: \"A new token template for my ERC1155 collection\" , }, }), }; fetch ( url , options ) . then (( res ) => res . json ()) . then (( json ) => console . log ( json )) . catch (( err ) => console . error ( \"error:\" + err )); Example response JSON Copy Ask AI { \"templateId\" : \"58b0c1aa-e457-48dd-bb55-5a27e6a92f74\" , \"metadata\" : { \"name\" : \"My template\" , \"image\" : \"ipfs://bafkreigbqsmxzkbjgbwtj6exfdt5z3t3swgoysf7hr6vjzddqnmykj6x2u\" , \"description\" : \"A new token template for my ERC1155 collection\" }, \"onChain\" : { \"tokenId\" : \"1\" }, \"supply\" : { \"limit\" : \"10\" , \"minted\" : \"0\" } } Save the templateId from the response for the next step. ​ 5. Mint an SFT from a template Now, let’s mint an SFT from our template and send it to a wallet or email address: mintSFT.js Copy Ask AI const apiKey = \"YOUR_API_KEY\" ; const env = \"staging\" ; // or \"www\" const collectionId = \"YOUR_COLLECTION_ID\" ; const templateId = \"YOUR_TEMPLATE_ID\" ; const recipientEmail = \"TEST_EMAIL_ADDRESS\" ; const url = `https:// ${ env } .crossmint.com/api/2022-06-09/collections/ ${ collectionId } /sfts` ; const options = { method: \"POST\" , headers: { accept: \"application/json\" , \"content-type\" : \"application/json\" , \"x-api-key\" : apiKey , }, body: JSON . stringify ({ templateId: templateId , recipient: `email: ${ recipientEmail } :polygon-amoy` , amount: 1 , }), }; fetch ( url , options ) . then (( res ) => res . json ()) . then (( json ) => console . log ( json )) . catch (( err ) => console . error ( \"error:\" + err )); Example response JSON Copy Ask AI { \"actionId\" : \"a91c15e3-60f2-4a45-bf1a-cee508981667\" , \"action\" : \"nfts.create\" , \"status\" : \"pending\" , \"data\" : { \"chain\" : \"polygon-amoy\" , \"collection\" : { \"id\" : \"84e3d617-9c1b-4e7a-9686-522a9ea7c520\" , \"contractAddress\" : \"0x9b8ab8949bd7E73E61945b88F7fe12151f98ad3C\" }, \"recipient\" : { \"walletAddress\" : \"0xcFDc00Cf926A5053f9Cdf004e6DF17e6dEB2E146\" , \"email\" : \"test@example.com\" }, \"token\" : { \"id\" : \"a91c15e3-60f2-4a45-bf1a-cee508981667\" } }, \"startedAt\" : \"2024-01-02T22:05:01.000Z\" , \"resource\" : \"https://staging.crossmint.com/api/2022-06-09/actions/a91c15e3-60f2-4a45-bf1a-cee508981667\" } ​ 6. Confirm Delivery of the SFT The mint has started processing. However, blockchains can take a few seconds (or, at times of extreme network congestion, even minutes) to confirm the operation. Before showing the user a success screen, the next step is checking the status of the mint. To do",
    "chunk_index": 0,
    "word_count": 1000
  },
  {
    "id": "https://docs.crossmint.com/minting/quickstarts/sfts#chunk_0",
    "url": "https://docs.crossmint.com/minting/quickstarts/sfts",
    "title": "SFT Minting API | Create Semi-Fungible Tokens at Scale",
    "content": "\"status\" : \"pending\" , \"data\" : { \"chain\" : \"polygon-amoy\" , \"collection\" : { \"id\" : \"84e3d617-9c1b-4e7a-9686-522a9ea7c520\" , \"contractAddress\" : \"0x9b8ab8949bd7E73E61945b88F7fe12151f98ad3C\" }, \"recipient\" : { \"walletAddress\" : \"0xcFDc00Cf926A5053f9Cdf004e6DF17e6dEB2E146\" , \"email\" : \"test@example.com\" }, \"token\" : { \"id\" : \"a91c15e3-60f2-4a45-bf1a-cee508981667\" } }, \"startedAt\" : \"2024-01-02T22:05:01.000Z\" , \"resource\" : \"https://staging.crossmint.com/api/2022-06-09/actions/a91c15e3-60f2-4a45-bf1a-cee508981667\" } ​ 6. Confirm Delivery of the SFT The mint has started processing. However, blockchains can take a few seconds (or, at times of extreme network congestion, even minutes) to confirm the operation. Before showing the user a success screen, the next step is checking the status of the mint. To do this, grab the actionId received at the end of step 5 and use it alongside your API key in one of the snippets below. mintStatus.js cURL Copy Ask AI const apiKey = \"<YOUR_API_KEY>\" ; const env = \"staging\" ; // or \"www\" const actionId = \"<MINT_ACTION_ID>\" ; const url = `https:// ${ env } .crossmint.com/api/2022-06-09/actions/ ${ actionId } ` ; const options = { method: \"GET\" , headers: { \"X-API-KEY\" : apiKey }, }; fetch ( url , options ) . then (( response ) => response . json ()) . then (( response ) => console . log ( response )) . catch (( err ) => console . error ( err )); Example response Here is an example response from calling the status API: JSON Copy Ask AI { \"actionId\" : \"a91c15e3-60f2-4a45-bf1a-cee508981667\" , \"action\" : \"nfts.create\" , \"status\" : \"success\" , \"data\" : { \"collection\" : {}, \"recipient\" : {}, \"token\" : {} }, \"startedAt\" : \"2024-01-02T22:05:01.000Z\" , \"completedAt\" : \"2024-01-02T22:06:04.000Z\" , \"resource\" : \"https://staging.crossmint.com/api/2022-06-09/actions/a91c15e3-60f2-4a45-bf1a-cee508981667\" } Pay attention to the “status” field. Once it says “success”: Congratulations. You have minted your first SFT 🥷 🎉 For scalable production applications, consider using webhooks to determine when your SFT has been minted, instead of periodically polling for its status via the API. ​ View your SFTs If the SFTs were delivered to an email address , the recipient can see them by: Logging into their wallet from Crossmint’s website . For staging, they must use https://staging.crossmint.com . From your website if you use embedded wallets . See the API for getting the NFTs in a wallet. If the SFTs were delivered to a wallet address , the user will be able to see them there directly, connecting to testnet if needed, or on the testnet blockchain explorer. And voilá, there’s your SFT! Now think of all the cool things you can build with this, at scale :) ​ Launching in Production For production, the steps are almost identical, but some changes are required: Create a developer account on the production console . Add credits to your account from Billing & Usage . Then, create a production key on the API Keys page with the same API scopes. Modify all code snippets with const env = \"www\" , so they use the production APIs. You may also need to change the chain variable to match your production blockchain. Check the guide with best practices ​ Learn More Create collections Learn how to create and manage SFT collections. Mint NFTs and other tokens Check out more advanced options for minting. Edit & Burn NFTs Update and delete tokens after minting. Was this page helpful? Yes No Pricing Quickstart ⚡ Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 557
  },
  {
    "id": "https://docs.crossmint.com/minting/verifiable-credentials/integrate/create-credential-templates#chunk_0",
    "url": "https://docs.crossmint.com/minting/verifiable-credentials/integrate/create-credential-templates",
    "title": "How to Deploy a Verifiable Credential Template via API | Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Integrate Create Credential Templates Documentation API Reference SDK Reference CLI Solution Guides Changelog Introduction About Crossmint Getting Started Using AI Assistants Platform Wallets Introduction Quickstarts ⚡ Guides Authentication Introduction Quickstart ⚡ Guides Tokenization (Minting) Introduction Integrate NFTs SFTs Credentials Quickstart ⚡ Integrate Create Credential Types Create Credential Templates Issue Credentials Retrieve Credentials Decrypt Credentials Verify Credentials Revoke Credentials Credential Storage Credential Encryption Delegated Signature Webhook IP Checkout Introduction Integrate Advanced Topics 1. Create a Credential Template 2. Check the status of your template A Verifiable Credential template is equivalent to an NFT collection. Similar to how a NFT collection groups NFTs together, a Verifiable Credential template references the credential type and additional credential configurations that credentials adhere to. Every Verifiable Credential must belong to a template. When defining a template, the issuer initially specifies a credentials object. Within that the following needs to be provided: type (required): A credential’s private data schema is referred to as “type”. Types act as a protective measure, preventing the addition of unauthorized fields and, as a result, the tampering of the Verifiable Credential. You can define your own . encryption (required): The method chosen to protect the credential’s private data. If set to none the credential’s private data will be stored in plain text. To encrypt and protect the credential’s private data, read about the supported encryption modalities . storage (required): The location where credentials defined by this template will be stored. Such storage can be on Crossmint, another company’s database, or decentralized storage. Read about the supported storage modalities . The template issuer must then specify the template’s public metadata: metadata (required): A template’s public name, description and imageUrl. Name is required, while the other attributes are optional. Finally, the issuer provides information on: chain (required): The blockchain where the credential’s contract and associated NFTs will be registered. Verifiable Credentials supports all EVM chains. Interested in launching your verifiable credentials on a specific blockchain? Get in touch . delegatedSignature (optional): A non-custodial wallet of choice to be used for signing credential issuance. By default, the issuer’s Crossmint-managed custodial wallet will be used. Read more about delegated signatures here . ​ 1. Create a Credential Template To issue a Verifiable Credential you have to first create the template that this credential will adhere to. You can do so via a single API call (requires the API key scope templates.create ): createTemplate.js Copy Ask AI const myApiKey = \"<YOUR_API_KEY>\" ; // Replace with key from step 2 const templateParams = { credentials: { type: \"crossmint:5fe6040e-07a1-48bb-97a3-b588a7e927d2:CourseCompletionCertificate\" , encryption: \"none\" , storage: \"crossmint\" , }, metadata: { name: \"Satoshi University Credentials\" , description: \"Credentials accredited by Satoshi University\" , imageUrl: \"https://picsum.photos/400\" , }, chain: \"polygon-amoy\" , }; const options = { method: \"POST\" , headers: { \"X-API-KEY\" : myApiKey , \"Content-Type\" : \"application/json\" , }, body: JSON . stringify ( templateParams ), }; fetch ( \"https://staging.crossmint.com/api/v1-alpha1/credentials/templates/\" , options ) . then (( response ) => response . json ()) . then (( response ) => console . log ( JSON . stringify ( response ))) . catch (( err ) => console . error ( err )); The template’s metadata will be used by default for the NFT metadata, unless explicitly set when issuing a new credential. ​ 2. Check the status of your template It takes a few seconds (up to a minute, depending on the blockchain and how congested it is) to deploy a template. To check the template’s status, you will need the nfts.create API scope and run the following code. checkTemplateStatus.js Copy Ask AI const templateId = \"<YOUR_TEMPLATE_ID>\" ; const options = { method: \"GET\" , headers: { \"X-API-KEY\" : \"<YOUR_API_KEY>\" } }; fetch ( `https://staging.crossmint.com/api/2022-06-09/actions/ ${ templateId } ` , options ) . then (( response ) => response . json ()) . then (( response ) => console . log ( response )) . catch (( err ) => console . error ( err )); API Reference Test any API in seconds directly from the docs. Talk to an expert Contact our sales team for support. Was this page helpful? Yes No Create Credential Types Issue Credentials Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 707
  },
  {
    "id": "https://docs.crossmint.com/minting/verifiable-credentials/integrate/create-credential-types#chunk_0",
    "url": "https://docs.crossmint.com/minting/verifiable-credentials/integrate/create-credential-types",
    "title": "Create Credential Types - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Integrate Create Credential Types Documentation API Reference SDK Reference CLI Solution Guides Changelog Introduction About Crossmint Getting Started Using AI Assistants Platform Wallets Introduction Quickstarts ⚡ Guides Authentication Introduction Quickstart ⚡ Guides Tokenization (Minting) Introduction Integrate NFTs SFTs Credentials Quickstart ⚡ Integrate Create Credential Types Create Credential Templates Issue Credentials Retrieve Credentials Decrypt Credentials Verify Credentials Revoke Credentials Credential Storage Credential Encryption Delegated Signature Webhook IP Checkout Introduction Integrate Advanced Topics Example Types Proof of Employment Course Completion Certificates Membership Credentials Event Participation Certificates Types Creation Quickstart Types Creation Deep Dive Type schema structure Explanation of Each Part: Important Notes: Type import Important Notes for Import: In the realm of Verifiable Credentials, each credential must be associated with a schema. The credential’s schema is referred to as “type”. Credential types outline the attributes and their respective data types that the credential contains. The purpose of types is to ensure the credential’s authenticity. Types allow you to specify the attributes you are interested in certifying and act as a protective measure, preventing the addition of unauthorized attributes and, as a result, the tampering of the Verifiable Credential. It’s important to note that all credentials within a single template will share the same type. Trying to issue or verify a credential with different field names or types will result in an error. By adhering to this structure, we maintain the integrity and verifiability of the credentials, ensuring they serve their purpose effectively. ​ Example Types Credentials play a crucial role in verifying and validating various aspects of identity, achievement, and authorization. Below are some examples of credential types you can create and manage through Crossmint: ​ Proof of Employment Purpose: Issued to individuals that want to prove their employment. Name: ProofOfEmployment Copy Ask AI ProofOfEmployment { position : string ; department : string ; startDate : string ; } The payload used to create this type is the following: Copy Ask AI { \"$schema\" : \"https://json-schema.org/draft/2020-12/schema\" , \"title\" : \"Proof of Employment\" , \"description\" : \"Schema for verifying employment details\" , \"type\" : \"object\" , \"properties\" : { \"credentialSubject\" : { \"type\" : \"object\" , \"properties\" : { \"position\" : { \"type\" : \"string\" }, \"department\" : { \"type\" : \"string\" }, \"startDate\" : { \"type\" : \"string\" } }, \"required\" : [ \"position\" , \"department\" , \"startDate\" ], \"additionalProperties\" : false } } } To reference this example type in your credential template definition, use crossmint:bfb292e7-2700-4924-9213-478f3d71f2d8:ProofOfEmployment . ​ Course Completion Certificates Purpose: Issued to students upon the successful completion of a course. The certificate may indicate that the student has mastered a specific skill or knowledge. Type: CourseCompletionCertificate Copy Ask AI CourseCompletionCertificate { course : string ; grade : string ; } If you want to use this example type in your credential template definition, you can reference it as crossmint:bfb292e7-2700-4924-9213-478f3d71f2d8:CourseCompletionCertificate . ​ Membership Credentials Purpose: Provided to individuals who are members of a specific organization or club. The certificate may grant access to exclusive resources and events. Name: Membership Copy Ask AI Membership { organizationName : string ; membershipType : string ; issueDate : string ; benefits : string []; status : string ; } If you want to use this example type in your credential template definition, you can reference it as crossmint:bfb292e7-2700-4924-9213-478f3d71f2d8:Membership . ​ Event Participation Certificates Purpose: Issued to individuals who attend or participate in specific events. Name: EventParticipation Copy Ask AI EventParticipation { eventName : string ; eventDate : string ; location : string ; description : string ; } If you want to use this example type in your credential template definition, you can reference it as crossmint:bfb292e7-2700-4924-9213-478f3d71f2d8:EventParticipation . ​ Types Creation Quickstart This example creates a custom type, CourseCompletionCertificate , for a credential that represents a course completion. The credential will contain two fields: course and passed . createType.js Copy Ask AI const typeName = \"CourseCompletionCertificate\" ; const schema = { $schema: \"https://json-schema.org/draft/2020-12/schema\" , title: \"Course completion\" , description: \"Describes the course completed and the assigned grade\" , type: \"object\" , properties: { credentialSubject: { type: \"object\" , properties: { course: { type: \"string\" , }, grade: { type: \"string\" , }, id: { // Optional, will be added automatically type: \"string\" , }, }, required: [ \"course\" , \"grade\" ], additionalProperties: false , }, }, }; const options = { method: \"PUT\" , headers: { \"X-API-KEY\" : \"YOUR_API_KEY\" , \"Content-Type\" : \"application/json\" , }, body: JSON . stringify ( schema ), }; fetch ( `https://staging.crossmint.com/api/v1-alpha1/credentials/types/ ${ typeName } ` , options ) . then (( response ) => response . json ()) . then (( response ) => console . log ( JSON . stringify ( response ))) . catch (( err ) => console . error ( err )); Copy the createType.js file in the tab above, add your API key to the X-API-KEY header (or create one if you haven’t already) and run via node. Copy Ask AI node createType.js The response, shown below, includes the credential type name. Response Copy Ask AI { \"id\" : \"crossmint:bfb292e7-2700-4924-9213-478f3d71f2d8:CourseCompletionCertificate\" , // Internal type id \"typeSchema\" : { \"$schema\" : \"https://json-schema.org/draft/2020-12/schema\" , \"title\" : \"Course completion\" , // Veryfiable credential `type` name. \"description\" : \"Describes the course completed and the assigned grade\" , \"type\" : \"object\" , \"properties\" : { \"credentialSubject\" : { \"type\" : \"object\" , \"properties\" : { \"course\" : { \"type\" : \"string\" }, \"grade\" : { \"type\" : \"string\" }, \"id\" : { \"type\" : \"string\" } }, \"required\" : [ \"course\" , \"grade\" ], \"additionalProperties\" : false } }, \"$id\" : \"https://staging.crossmint.com/api/v1-alpha1/credentials/types/crossmint:bfb292e7-2700-4924-9213-478f3d71f2d8:CourseCompletionCertificate\" // External schema URI } } The type id defined will be used when you create your credential template . You can also utilize the POST /credentials/types/ endpoint to generate a random uuid for the new credential type. For internal use within Crossmint, reference the type using id . The $id will be included as the credentials schema by Crossmint but should not be used to",
    "chunk_index": 0,
    "word_count": 1000
  },
  {
    "id": "https://docs.crossmint.com/minting/verifiable-credentials/integrate/create-credential-types#chunk_0",
    "url": "https://docs.crossmint.com/minting/verifiable-credentials/integrate/create-credential-types",
    "title": "Create Credential Types - Crossmint Docs",
    "content": "\"type\" : \"string\" }, \"grade\" : { \"type\" : \"string\" }, \"id\" : { \"type\" : \"string\" } }, \"required\" : [ \"course\" , \"grade\" ], \"additionalProperties\" : false } }, \"$id\" : \"https://staging.crossmint.com/api/v1-alpha1/credentials/types/crossmint:bfb292e7-2700-4924-9213-478f3d71f2d8:CourseCompletionCertificate\" // External schema URI } } The type id defined will be used when you create your credential template . You can also utilize the POST /credentials/types/ endpoint to generate a random uuid for the new credential type. For internal use within Crossmint, reference the type using id . The $id will be included as the credentials schema by Crossmint but should not be used to reference the type in Crossmint APIs. Example of a credentials using the type \"crossmint:bfb292e7-2700-4924-9213-478f3d71f2d8:CourseCompletionCertificate\" just created. Example Credential Copy Ask AI { \"id\" : \"urn:uuid:820b09e8-bd6d-4680-b2b1-b564169fde8a\" , \"credentialSubject\" : { \"course\" : \"Math\" , \"grade\" : \"A\" , \"id\" : \"did:polygon-amoy:0x1B887669437644aA348c518844660ef8d63bd643\" }, \"nft\" : { \"tokenId\" : \"7\" , \"chain\" : \"polygon-amoy\" , \"contractAddress\" : \"0xb14Bf8EEa68026a2746350059389Bd119CFB8E29\" }, \"issuer\" : { \"id\" : \"did:polygon-amoy:0xd9d8BA9D5956f78E02F4506940f42ac2dAB9DABd\" }, \"type\" : [ \"VerifiableCredential\" , \"Course completion\" // Schema.title ], \"validFrom\" : \"2024-11-19T18:41:30.503Z\" , \"@context\" : [ \"https://www.w3.org/ns/credentials/v2\" ], \"credentialSchema\" : { \"id\" : \"https://staging.crossmint.com/api/v1-alpha1/credentials/types/crossmint:bfb292e7-2700-4924-9213-478f3d71f2d8:CourseCompletionCertificate\" , // Schema.$id \"type\" : \"JsonSchema\" }, \"proof\" : { ... } } ​ Types Creation Deep Dive In the realm of Verifiable Credentials, types are defined using the JSON schema. For more details, refer to the W3C VC JSON Schema . When calling the create type API an invalid JSON schema will result in an error. ​ Type schema structure Below is an example of a JSON schema structure for defining a credential type: Example Schema Payload Copy Ask AI { \"$schema\" : \"https://json-schema.org/draft/2020-12/schema\" , \"title\" : \"Example nested schema\" , \"description\" : \"A schema capturing a human name and a nested `additionalInfo` object\" , \"type\" : \"object\" , \"properties\" : { \"credentialSubject\" : { \"type\" : \"object\" , \"properties\" : { \"firstName\" : { \"type\" : \"string\" }, \"id\" : { // This will be added automatically, is not necessary \"type\" : \"string\" }, \"additionalInfo\" : { \"type\" : \"object\" , \"properties\" : { \"age\" : { \"type\" : \"integer\" }, \"isActive\" : { \"type\" : \"boolean\" }, \"tags\" : { // Optional, therefore is not added to `required` \"type\" : \"array\" , \"items\" : { \"type\" : \"string\" } } }, \"required\" : [ \"age\" , \"isActive\" ], \"additionalProperties\" : false // Needs to be repeated for each nested object } }, \"required\" : [ \"firstName\" , \"additionalInfo\" ], \"additionalProperties\" : false } } } ​ Explanation of Each Part: $schema : This should always be set to “ https://json-schema.org/draft/2020-12/schema ”. $id : This field should NOT be defined, will be generated by Crossmint and returned in the response. title : Represents the name of the type. description : A brief description of the schema. type : Must be set to “object”. properties : Must include credentialSubject as an object. ​ Important Notes: The credential subject is the section that needs to be defined. Any field or nested field can be added, as long as it is valid JSON schema. The credentialSubject.properties.id will be automatically added with the type “string”, this is used to specify the wallet and therefore the identity of the subject. additionalProperties should always be set to false to prevent unauthorized fields from being added. All specified fields should be marked as required unless they are optional. This ensures that missing fields will trigger an error during schema validation. additionalProperties and required apply only at the level they are specified. For nested objects, these need to be repeated. ​ Type import If you already have a JSON schema type, you can easily import it by calling the same endpoint with the following structure: importType.js Copy Ask AI const payload = { $id: \"https://raw.githubusercontent.com/decentralized-identity/credential-schemas/main/schemas/ExampleEntity/ExampleNameSchema.json\" , }; const options = { method: \"POST\" , headers: { \"X-API-KEY\" : \"YOUR_API_KEY\" , \"Content-Type\" : \"application/json\" , }, body: JSON . stringify ( schema ), }; fetch ( `https://staging.crossmint.com/api/v1-alpha1/credentials/types` , options ) . then (( response ) => response . json ()) . then (( response ) => console . log ( JSON . stringify ( response ))) . catch (( err ) => console . error ( err )); Response Copy Ask AI { \"id\" : \"crossmint:e62564a7-06eb-4f65-b389-eb3b7a4f6f98:10ede8a6\" , \"typeSchema\" : { \"$id\" : \"https://raw.githubusercontent.com/decentralized-identity/credential-schemas/main/schemas/ExampleEntity/ExampleNameSchema.json\" , \"$schema\" : \"https://json-schema.org/draft/2020-12/schema\" , \"title\" : \"Example Name schema\" , \"description\" : \"A schema capturing a human name\" , \"type\" : \"object\" , \"properties\" : { \"credentialSubject\" : { \"type\" : \"object\" , \"properties\" : { \"firstName\" : { \"type\" : \"string\" }, \"id\" : { \"type\" : \"string\" } }, \"required\" : [ \"firstName\" ], \"additionalProperties\" : false } } } } ​ Important Notes for Import: All notes for type creation apply here as well. credentialSubject.properties.id will not be added for imported schemas. If the original schema does not include this specification, the resulting credentials will not include the user wallet in the subject.id . To know the subject of a credential, checking the NFT owner will be necessary. To follow along and test the API calls use a tool like Postman or our API playground . API Reference Test any API in seconds directly from the docs. Talk to an expert Contact our sales team for support. Was this page helpful? Yes No Quickstart ⚡ Create Credential Templates Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 896
  },
  {
    "id": "https://docs.crossmint.com/minting/verifiable-credentials/integrate/decrypt-credentials#chunk_0",
    "url": "https://docs.crossmint.com/minting/verifiable-credentials/integrate/decrypt-credentials",
    "title": "Decrypt Credentials - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Integrate Decrypt Credentials Documentation API Reference SDK Reference CLI Solution Guides Changelog Introduction About Crossmint Getting Started Using AI Assistants Platform Wallets Introduction Quickstarts ⚡ Guides Authentication Introduction Quickstart ⚡ Guides Tokenization (Minting) Introduction Integrate NFTs SFTs Credentials Quickstart ⚡ Integrate Create Credential Types Create Credential Templates Issue Credentials Retrieve Credentials Decrypt Credentials Verify Credentials Revoke Credentials Credential Storage Credential Encryption Delegated Signature Webhook IP Checkout Introduction Integrate Advanced Topics As a credential issuer you can use the retrieval endpoints and Crossmint will autodecrypt the credential for you. As a verifier, however, working with encryption modalities to decrypt credentials requires deep understanding of their APIs, managing cryptographic operations securely, and handling user signature interactions. The Verifiable Credentials SDK encapsulates all this functionality for verifiers, ensuring secure and seamless decryption. Upon a verifier’s request, the SDK prompts the credential subject to sign a message proving they are the credential subject, and approving the credential’s decryption. Once the subject approves, Crossmint decrypts the credential for the verifier to verify. If the credentials are encrypted using the Lit protocol, in order to decrypt them, the SDK provides a Lit.decrypt(encryptedCredential) function. If the credentials are encrypted using Crossmint, the SDK provides a CrossmintMetamaskDecrypt().decrypt(encryptedCredential) function that decrypts the credential, assuming the user has a Metamask wallet. For the support of additional wallets during decryption, review our SDK reference. A Crossmint API key ( credentials.decrypt ) is needed when: Crossmint has encrypted the data ( crossmint-recoverable encryption modality) Data is encrypted via Lit but the verifier wants to delegate Lit network billing to Crossmint Decryption will not work server-side when using Lit. In both cases, the user will be prompted to sign a message with their wallet to authenticate the decryption, then the credential will be decrypted. decrypt.ts Response Copy Ask AI import * as sdk from '@crossmint/client-sdk-verifiable-credentials' ; sdk . CrossmintAPI . init ( 'YOUR_API_KEY' ); const encryptedCredential = < encryptedCredentialObject >; if ( collection . metadata . credentialMetadata . encryption . type == VerifiableCredentialEncryptionType . DECENTRALIZED_LIT ){ const decryptedData = await new sdk . Lit ( \"staging\" ). decrypt ( encryptedCredential ); } else if ( collection . metadata . credentialMetadata . encryption . type == VerifiableCredentialEncryptionType . CROSSMINT_RECOVERABLE ){ const decryptedData = await new sdk . CrossmintMetamaskDecrypt (). decrypt ( encryptedCredential ); } else { throw new Error ( \"Not supported\" ) } console . log ( \"Decrypted credential:\" , decryptedData ); The decrypted credential content can now be reviewed and verified by the verifier. Was this page helpful? Yes No Retrieve Credentials Verify Credentials Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 443
  },
  {
    "id": "https://docs.crossmint.com/minting/verifiable-credentials/integrate/delegated-signatures#chunk_0",
    "url": "https://docs.crossmint.com/minting/verifiable-credentials/integrate/delegated-signatures",
    "title": "Delegated Signature - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Integrate Delegated Signature Documentation API Reference SDK Reference CLI Solution Guides Changelog Introduction About Crossmint Getting Started Using AI Assistants Platform Wallets Introduction Quickstarts ⚡ Guides Authentication Introduction Quickstart ⚡ Guides Tokenization (Minting) Introduction Integrate NFTs SFTs Credentials Quickstart ⚡ Integrate Create Credential Types Create Credential Templates Issue Credentials Retrieve Credentials Decrypt Credentials Verify Credentials Revoke Credentials Credential Storage Credential Encryption Delegated Signature Webhook IP Checkout Introduction Integrate Advanced Topics Template Creation Request Payload Response Format DID Web DID Credential issuers, by default, sign credentials using their custodial wallet, managed by Crossmint. This means that Crossmint handles the management of the wallet used for signing, providing a default and streamlined solution for issuers. If an issuer wants to sign credentials using a separate wallet they own, they can do so by providing a signing endpoint. This endpoint is essentially a service or URL that the issuer can set up, which Crossmint will use to access the issuer’s chosen wallet for signing credentials. Delegated signature and encryption are not concurrently supported for the moment, so it is advised to also use delegated storage for sensitive data. ​ Template Creation Upon template creation, customers can specify parameters that configure the delegatedSignature specification: issuerDid : The desired issuer DID represents the entity that will be issuing the credentials. endpoint : The signing endpoint is the URL or endpoint where the credential signing process takes place token : The Auth token for the endpoint is a secure token used to authenticate requests to the signing endpoint. This token ensures that only authorized entities can access the signing endpoint. Copy Ask AI { ...standard_template_params, delegatedSignature : { issuerDid : \"did:polygon:<0xADDRESS>\" , endpoint : \"string\" , token : \"string\" } } The credential issuance process remains unchanged, except for one crucial modification. Instead of directly calling wallet.signTypedData(payload) using Crossmint’s wallet, Crossmint sends the payload to a designated endpoint. This endpoint is responsible for wrapping the signTypedData call and performing the necessary security checks to ensure only authorized payloads are processed, preventing arbitrary or malicious data from being signed. ​ Request Payload Crossmint will POST to the given endpoint with the following payload: Copy Ask AI { \"issuer\" : \"did:polygon:<0xADDRESS>\" , \"domain\" : \"ethers.TypedDataDomain\" , \"types\" : \"Record<string, Array<ethers.TypedDataField>>\" , \"message\" : \"<credential_object_to_sign>\" , \"token\" : \"<auth_token>\" } ​ Response Format The endpoint should return a response with the following format: Copy Ask AI { \"credential\" : \"<credential_object_to_sign>\" , \"issuer\" : \"<address>\" , \"signature\" : \"string\" } ​ DID The issuer’s identity is represented by a DID . The DID is a string that uniquely identifies the issuer. The easiest way to provide a DID is to send the issuer’s wallet address as DID, setting issuerDid to \"did:{chain}:{address}\" . ​ Web DID Crossmint also supports Web DID . This allows issuer’s to be identified by a domain name, setting issuerDid to \"did:web:issuer.com\" . webDID leverages existing web domain reputation to establish trust around decentralized identities. The issuer must have a DID Document hosted at https://issuer.com/.well-known/did.json for the webDID mapping to work properly. The DID document, among other useful information, needs to contain the “service” attribute, stating the issuer’s wallet address: The issuer’s wallet is the wallet that will be used to sign the credential and verifiers can recognize this wallet by its related webDID. Copy Ask AI { \"id\" : \"did:web:myissuer.com\" , \"service\" : [ { \"id\" : \"did:web:myissuer.com#wallet\" , \"type\" : \"wallet\" , \"serviceEndpoint\" : \"chain:<0xADDRESS>\" } ] // ... other properties like verificationMethod, authentication, etc. } Was this page helpful? Yes No Credential Encryption Webhook Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 611
  },
  {
    "id": "https://docs.crossmint.com/minting/verifiable-credentials/integrate/encrypt-credentials#chunk_0",
    "url": "https://docs.crossmint.com/minting/verifiable-credentials/integrate/encrypt-credentials",
    "title": "Credential Encryption - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Integrate Credential Encryption Documentation API Reference SDK Reference CLI Solution Guides Changelog Introduction About Crossmint Getting Started Using AI Assistants Platform Wallets Introduction Quickstarts ⚡ Guides Authentication Introduction Quickstart ⚡ Guides Tokenization (Minting) Introduction Integrate NFTs SFTs Credentials Quickstart ⚡ Integrate Create Credential Types Create Credential Templates Issue Credentials Retrieve Credentials Decrypt Credentials Verify Credentials Revoke Credentials Credential Storage Credential Encryption Delegated Signature Webhook IP Checkout Introduction Integrate Advanced Topics Create an encrypted credential template Encrypted credential object Retrieve an encrypted credential Verifiable Credentials can be used to store sensitive information. In such cases, it’s crucial to use encrypted credentials to ensure data privacy and security. The encryption process is designed so that only the credential subject and the credential issuer can decrypt the credential. This ensures that sensitive information is only accessible to the relevant parties. Once the credential is decrypted, it can be verified by anyone. This allows for the credential’s authenticity to be confirmed while still maintaining the privacy of its content. The process of encryption and decryption can be automated using the Crossmint API and SDK. This provides a seamless and secure way to handle sensitive information within Verifiable Credentials. Encryption will make credential issuance and retrieval slower due to the encryption and decryption process. ​ Create an encrypted credential template When creating a template , you can specify an encryption parameter to determine the encryption modality you will use. The possible values for this parameter are: crossmint-recoverable : This option is ideal when users prioritize the convenience and security of having a fallback recovery mechanism. Crossmint will take care of encrypting the credential. The user will be required to prove ownership of the subject wallet to decrypt the credential. As a fallback mechanism, the key is also shared with the credential issuer. decentralized-lit : This option is better suited for users who prioritize full decentralization and privacy. The credential is encrypted and decrypted using the Lit protocol . The user will be required to prove ownership of the subject wallet to decrypt the credential. none : The certificate is not encrypted. For example, the encryption field part of the template creation request below is set to crossmint-recoverable . Copy Ask AI { \"metadata\" : { \"name\" : \"Template Name\" , \"description\" : \"Encrypted credentials template\" }, \"chain\" : \"polygon\" , \"credentials\" : { \"type\" : \"MyCustomType\" , \"encryption\" : \"crossmint-recoverable\" } } During credential creation, the Crossmint API encrypts the credential and sets an access rule that only the credential subject and the credential issuer can decrypt the credential. Credentials issued from this template will be encrypted for you. Behind the scenes: The Crossmint API encrypts the certificate’s private data and sets an access rule that only the credential subject and issuer can decrypt the credential. Crossmint triggers a webhook to the issuer after a successful credential creation. Issuer receives via webhook the credential content and the encryption key. As a fallback a copy of the encryption key is sent to the issuer. ​ Encrypted credential object An encrypted credential consists of a ‘credentialId’ and a base64 encoded encrypted payload. Copy Ask AI { \"credentialId\" : \"urn:uuid:<credential_id>\" , \"payload\" : \"base64_encoded_cipher_text\" } ​ Retrieve an encrypted credential You can leverage the standard retrieval Crossmint API endpoint to retrieve an encrypted credential: GET https://staging.crossmint.com/api/v1-alpha1/credentials/{credentialId} Hitting the GET credentials/{credentialId} endpoint as the issuer will automatically decrypt the credential for you and return both the clear and ciphertext. In case of successful autodecryption, the response object will be: Copy Ask AI { \"encryptedCredential\" : { \"credentialId\" : \"urn:uuid:<credential_id>\" , \"payload\" : \"base64_encoded_cipher_text\" }, \"unencryptedCredential\" : \"<credential_obj>\" , \"decryptionError\" : undefined } For information on how to decrypt a credential, see here . Was this page helpful? Yes No Credential Storage Delegated Signature Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 645
  },
  {
    "id": "https://docs.crossmint.com/minting/verifiable-credentials/integrate/issue-credentials#chunk_0",
    "url": "https://docs.crossmint.com/minting/verifiable-credentials/integrate/issue-credentials",
    "title": "Issue Credentials - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Integrate Issue Credentials Documentation API Reference SDK Reference CLI Solution Guides Changelog Introduction About Crossmint Getting Started Using AI Assistants Platform Wallets Introduction Quickstarts ⚡ Guides Authentication Introduction Quickstart ⚡ Guides Tokenization (Minting) Introduction Integrate NFTs SFTs Credentials Quickstart ⚡ Integrate Create Credential Types Create Credential Templates Issue Credentials Retrieve Credentials Decrypt Credentials Verify Credentials Revoke Credentials Credential Storage Credential Encryption Delegated Signature Webhook IP Checkout Introduction Integrate Advanced Topics 1. Issue a Credential 2. Check the status of your credential With both a credential type and template defined, we can proceed to issue a credential. ​ 1. Issue a Credential First and foremost, the issuer must specify a valid recipient for the credential: recipient (required): Issuer must specify a credential recipient. This can be done via email:${userEmail}:${chain} or {wallet address} . In addition, the issuer must specify a credential object containing: subject (required): Object matching a defined credential type’s schema, with values relevant to the recipient. The credential’s contents are identified by the “subject” key within the credential, following W3C naming standards . The credential subject (credential.subject) must respect the schema of the chosen Verifiable Credential type. You cannot add additional fields, nor exclude any that were previously set. expiresAt (required): Specify date, in form such as 2034-02-02 (ISO) or none to imply infinite expiration. If you don’t include an expiration date, you must revoke the credential via burning to invalidate it. Finally, the issuer can provide optional public metadata related to the specific credential, as such: metadata (optional): NFT metadata is inherited from the VC template metadata. Metadata attributes can be set by the customer to override metadata definition inherited by baseURI. To issue your first credential, copy the issueCredential.js file from below, add your API key, and templateId (that was returned to you in the previous step), and run the file from your terminal. issueCredential.js Response Copy Ask AI const userEmail = \"user@email.com\" ; // Replace with recipient email const templateId = \"YOUR_TEMPLATE_ID\" ; // Replace with ID from previous step const credentialParams = { recipient: `email: ${ userEmail } :polygon-amoy` , credential: { // The CourseCompletionCertificate credential type requires course and grade declarations subject: { course: \"Blockchain 101\" , grade: \"A\" , }, expiresAt: \"2034-02-02\" , }, }; const options = { method: \"POST\" , headers: { \"X-API-KEY\" : \"YOUR_API_KEY\" , \"Content-Type\" : \"application/json\" , }, body: JSON . stringify ( credentialParams ), }; fetch ( `https://staging.crossmint.com/api/v1-alpha1/credentials/templates/ ${ templateId } /vcs` , options ) . then (( response ) => response . json ()) . then (( response ) => console . log ( JSON . stringify ( response ))) . catch (( err ) => console . error ( err )); Copy Ask AI node issueCredential.js ​ 2. Check the status of your credential You can set up a webhook to know when the Verifiable Credential NFT minting is completed, or call the action status API with the returned actionId . To check the template’s status you will need the nfts.create API scope and run the following code. checkTemplateStatus.js Copy Ask AI const actionId = \"<YOUR_ACTION_ID>\" ; // Returned from previous step const options = { method: \"GET\" , headers: { \"X-API-KEY\" : \"<YOUR_API_KEY>\" } }; fetch ( `https://staging.crossmint.com/api/2022-06-09/actions/ ${ actionId } ` , options ) . then (( response ) => response . json ()) . then (( response ) => console . log ( response )) . catch (( err ) => console . error ( err )); API Reference Test any API in seconds directly from the docs. Talk to an expert Contact our sales team for support. Was this page helpful? Yes No Create Credential Templates Retrieve Credentials Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 628
  },
  {
    "id": "https://docs.crossmint.com/minting/verifiable-credentials/integrate/retrieve-credentials#chunk_0",
    "url": "https://docs.crossmint.com/minting/verifiable-credentials/integrate/retrieve-credentials",
    "title": "Retrieve Credentials - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Integrate Retrieve Credentials Documentation API Reference SDK Reference CLI Solution Guides Changelog Introduction About Crossmint Getting Started Using AI Assistants Platform Wallets Introduction Quickstarts ⚡ Guides Authentication Introduction Quickstart ⚡ Guides Tokenization (Minting) Introduction Integrate NFTs SFTs Credentials Quickstart ⚡ Integrate Create Credential Types Create Credential Templates Issue Credentials Retrieve Credentials Decrypt Credentials Verify Credentials Revoke Credentials Credential Storage Credential Encryption Delegated Signature Webhook IP Checkout Introduction Integrate Advanced Topics Verifiable Credential API Verifiable Credentials SDK Retrieving and effectively presenting credentials is essential for issuers, verifiers, and credential subjects. However, doing so requires interfacing with the blockchain, 3rd party services to fetch NFTs, all while at the same time struggling with unpredictable network issues, and data inconsistency. Crossmint’s Verifiable Credentials API and SDK simplify credential management, allowing you to seamlessly retrieve and use verifiable credentials where they matter most. ​ Verifiable Credential API Crossmint’s Verifiable Credentials API is primarily meant to be used by issuers. It’s designed for robust backend operations, enabling seamless, automated credential retrieval without requiring user interaction. The API integrates with your existing server-side infrastructure, ensuring efficient and scalable credential management. With the API, you can implement complex business logic, providing unparalleled control and customization. ​​You can retrieve a Verifiable Credential via the Crossmint API using different identifiers associated with the credential itself, or the NFT associated with the credential. Get Verifiable Credential by ID uses the format: urn:uuid:<UUID> Get Verifiable Credential by NFT Locator uses the format: <chain>:<contractAddress>:<tokenId> Get Verifiable Credential by NFT ID uses crossmint’s internal NFT ID There is no access control on credential retrieval. Credential data is public and can be retrieved by anyone. Choose to encrypt your credentials if you need to protect your data. Credential retrieval via the crossmint API will not work for delegated storage . To retrieve the credential, copy the retrieveCredential.js file from below, use your API key, the credentialId , and run the file from your terminal. retrieveCredential.js Response Copy Ask AI const options = { method: \"GET\" , headers: { \"X-API-KEY\" : \"YOUR_API_KEY\" , }, }; fetch ( `https://staging.crossmint.com/api/v1-alpha1/credentials/ ${ credentialId } ` , options ) . then (( response ) => response . json ()) . then (( response ) => console . log ( JSON . stringify ( response ))) . catch (( err ) => console . error ( err )); Copy Ask AI node retrieveCredential.js ​ Verifiable Credentials SDK Crossmint’s Verifiable Credentials SDK is primarily meant to be used by verifiers. Using the Verifiable Credentials client-side SDK is advantageous in scenarios where direct interaction with the user’s wallet is preferred, directly integrating their credentials with your browser-based application. Wallet Integration : The Verifiable Credentials SDK is designed to work smoothly with any wallet, providing a streamlined experience for both users and verifiers. This reduces friction and improves the user experience. Efficient Retrieval : Once the wallet is connected, the SDK can directly interact with it to retrieve credentials. Instead of dealing with multiple API calls, the SDK surfaces credential retrieval capabilities that matter most to verifiers, such as fetching credentials based on specific filter conditions, i.e. type and issuer. User Approvals : The SDK takes care of prompting the user, when applicable, to approve transactions, such as decryption requests, enhancing security and the user’s confidence in the application. Using the SDK requires a Crossmint developer account and a client-side API key scoped to credentials.read and credentials.decrypt . Go to the Developers -> API Keys tab, click on New API Key in the Client-side keys section, and select the API key scopes. You can download the SDK here . The SDKs offer functions to easily retrieve and filter NFTs associated with credentials. For example, the getCredentialNFTs function fetches all VC NFTs in a wallet and lets you filter by credential type or issuer. Below, we show how easy it is to retrieve academic credentials from a user’s wallet. index.ts Response Copy Ask AI import * as sdk from '@crossmint/client-sdk-verifiable-credentials' ; sdk . CrossmintAPI . init ( 'YOUR_API_KEY' ); const wallet = \"USER_WALLET\" ; const filters = { // typeId represents an academic credential schema type: < typeId > }; const credentials = await sdk . getCredentialNFTs ( \"polygon\" , wallet , filters ); console . log ( 'Academic credentials retrieved successfully:' , credentials ); Now that the credential is retrieved, it’s important to decrypt it and verify it. In case the endpoint is called by the issuer the credential will be automatically decrypted. API Reference Test any API in seconds directly from the docs. Talk to an expert Contact our sales team for support. Was this page helpful? Yes No Issue Credentials Decrypt Credentials Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 792
  },
  {
    "id": "https://docs.crossmint.com/minting/verifiable-credentials/integrate/revoke-credentials#chunk_0",
    "url": "https://docs.crossmint.com/minting/verifiable-credentials/integrate/revoke-credentials",
    "title": "Revoke Credentials - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Integrate Revoke Credentials Documentation API Reference SDK Reference CLI Solution Guides Changelog Introduction About Crossmint Getting Started Using AI Assistants Platform Wallets Introduction Quickstarts ⚡ Guides Authentication Introduction Quickstart ⚡ Guides Tokenization (Minting) Introduction Integrate NFTs SFTs Credentials Quickstart ⚡ Integrate Create Credential Types Create Credential Templates Issue Credentials Retrieve Credentials Decrypt Credentials Verify Credentials Revoke Credentials Credential Storage Credential Encryption Delegated Signature Webhook IP Checkout Introduction Integrate Advanced Topics To revoke a credential, you can directly use the revoke credential API . Burning the NFT associated with the credential via the burn-nft API accomplishes the same result. Issuers can revoke a Verifiable Credential without the subject’s intermediation. To revoke the credential, copy the revokeCredential.js file from below, use your API key, the credentialId, and run the file from your terminal. revokeCredential.js Copy Ask AI const options = { method: \"DELETE\" , headers: { \"X-API-KEY\" : \"YOUR_API_KEY\" , }, }; fetch ( `https://staging.crossmint.com/api/v1-alpha1/credentials/ ${ credentialId } ` , options ) . then (( response ) => response . json ()) . then (( response ) => console . log ( JSON . stringify ( response ))) . catch (( err ) => console . error ( err )); Copy Ask AI node revokeCredential.js API Reference Test any API in seconds directly from the docs. Talk to an expert Contact our sales team for support. Was this page helpful? Yes No Verify Credentials Credential Storage Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 255
  },
  {
    "id": "https://docs.crossmint.com/minting/verifiable-credentials/integrate/store-credentials#chunk_0",
    "url": "https://docs.crossmint.com/minting/verifiable-credentials/integrate/store-credentials",
    "title": "Credential Storage - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Integrate Credential Storage Documentation API Reference SDK Reference CLI Solution Guides Changelog Introduction About Crossmint Getting Started Using AI Assistants Platform Wallets Introduction Quickstarts ⚡ Guides Authentication Introduction Quickstart ⚡ Guides Tokenization (Minting) Introduction Integrate NFTs SFTs Credentials Quickstart ⚡ Integrate Create Credential Types Create Credential Templates Issue Credentials Retrieve Credentials Decrypt Credentials Verify Credentials Revoke Credentials Credential Storage Credential Encryption Delegated Signature Webhook IP Checkout Introduction Integrate Advanced Topics Crossmint Crossmint Private Decentralized Storage Delegated Storage When creating a template , you can specify a storage parameter to determine where the credential payload will be stored. The possible values for this parameter are: crossmint crossmint-private delegated decentralized-ipfs ​ Crossmint With this option, credentials are stored on the Crossmint database. This is the most flexible solution and is compatible with all other features. There is not access control on credential retrieval, credential data is public and can be retrieved by anyone, use encrypted credentials if you need to protect the data. ​ Crossmint Private This option is designed for integrated systems in which the issuer is also the verifier. Credentials are stored by Crossmint, but only the issuer can retrieve the credential payload. Because the credential issuer is also the credential verifier, there is no need to encrypt the credentials. ​ Decentralized Storage This option is the most open and transparent solution as it will store the credential to a decentralized storage (IPFS). All retrieval API endpoints will still be available and will proxy the request to ipfs. Encrypting the payload is suggested to avoid private credential data being exposed to be public. Credential issuance will be slower than other storage options. ​ Delegated Storage This option is designed for the enterprise, giving the issuer full control over the credentials. With delegated storage, no reference to the data is stored on Crossmint databases. The credential is returned to the issuer via the webhook and the issuer is responsible for storing it. All Crossmint retrieval endpoints will consequently be disabled. A delegatedStorageEndpoint parameter must be added when creating the credential template that specifies the endpoint where the credential can be retrieved (can be set to a dummy value like “unknown” if not desired). This endpoint will be saved in the contract metadata and can be used by users to retrieve the credential associated with their NFT. Issuers can protect content privacy by encrypting the payload. For delegated storage, if the credential is not catched by the webhook, it will be lost. Read more about webhooks here . Was this page helpful? Yes No Revoke Credentials Credential Encryption Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 447
  },
  {
    "id": "https://docs.crossmint.com/minting/verifiable-credentials/integrate/verify-credentials#chunk_0",
    "url": "https://docs.crossmint.com/minting/verifiable-credentials/integrate/verify-credentials",
    "title": "Verify Credentials - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Integrate Verify Credentials Documentation API Reference SDK Reference CLI Solution Guides Changelog Introduction About Crossmint Getting Started Using AI Assistants Platform Wallets Introduction Quickstarts ⚡ Guides Authentication Introduction Quickstart ⚡ Guides Tokenization (Minting) Introduction Integrate NFTs SFTs Credentials Quickstart ⚡ Integrate Create Credential Types Create Credential Templates Issue Credentials Retrieve Credentials Decrypt Credentials Verify Credentials Revoke Credentials Credential Storage Credential Encryption Delegated Signature Webhook IP Checkout Introduction Integrate Advanced Topics API SDK Independent Verification Verification is a crucial step in the process of handling Verifiable Credentials. To ensure a credential is valid, the following checks are performed: Credential Structure: The credential should not be malformed. It must adhere to the correct structure as defined by the credential type . Signature Validation: The credential’s signature must be valid and match the identity of the issuer. This ensures that the credential was indeed issued by the claimed issuer and hasn’t been tampered with. Attribute Check: No additional attributes should have been added to the credential beyond what’s defined in its schema. This prevents unauthorized modifications to the credential. Expiration Check: The credential should not have expired. Credentials often have a validity period after which they are no longer considered valid. Revocation Check: The credential should not have been revoked by the issuer. Even if a credential is valid and hasn’t expired, it may have been revoked by the issuer for various reasons. By performing these checks, we can ensure the authenticity and validity of a Verifiable Credential. Verifying a credential can happen either via the Crossmint API or SDK. ​ API To verify a credential on the server-side use the Crossmint API and the following endpoint, passing the retrieved unencrypted credential JSON. verifyCredential.js Response Copy Ask AI const options = { method: \"POST\" , headers: { \"X-API-KEY\" : \"YOUR_API_KEY\" , \"Content-Type\" : \"application/json\" , }, body: `{\"credential\": ${ JSON . stringify ( credential . unencryptedCredential ) } }` , }; fetch ( \"https://staging.crossmint.com/api/v1-alpha1/credentials/verification/verify\" , options ) . then (( response ) => response . json ()) . then (( response ) => console . log ( JSON . stringify ( response ))) . catch (( err ) => console . error ( err )); Verifying a credential via the API will require a Crossmint developer account. ​ SDK With the Verifiable Credentials client-side SDK, the verification process is performed locally, eliminating the need for interaction with Crossmint. Consequently, there is no need for a Crossmint developer account to verify the credential. Install the @crossmint/client-sdk-verifiable-credentials npm package and call the verifyCredential function passing a VerifiableCredential object, as shown below. decrypt.ts Response Copy Ask AI import * as sdk from '@crossmint/client-sdk-verifiable-credentials' ; sdk . CrossmintAPI . init ( 'YOUR_API_KEY' ); const decryptedCredential = < CredentialObject >; const verificationResult = await sdk . verifyCredential ( decryptedCredential ); console . log ( 'Verification result:' , verificationResult ); Verifying the status of the NFT related to the credential requires connection to the internet in order to access blockchain state. For details on the SDK functionality, review our SDK reference documentation . ​ Independent Verification Since Crossmint’s Verifiable Credentials are based on the W3C standard , you can use any library that supports this standard to verify a credential. The W3C Verifiable Credentials standard ensures interoperability across different platforms and systems, enhancing the reliability and security of the credential verification process. Crossmint verification is stricter and performs additional checks that are not part of the W3C standard. For example, that no additional fields have been added to the credential. API Reference Test any API in seconds directly from the docs. Talk to an expert Contact our sales team for support. Was this page helpful? Yes No Decrypt Credentials Revoke Credentials Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 633
  },
  {
    "id": "https://docs.crossmint.com/minting/verifiable-credentials/integrate/webhooks#chunk_0",
    "url": "https://docs.crossmint.com/minting/verifiable-credentials/integrate/webhooks",
    "title": "Webhook - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Integrate Webhook Documentation API Reference SDK Reference CLI Solution Guides Changelog Introduction About Crossmint Getting Started Using AI Assistants Platform Wallets Introduction Quickstarts ⚡ Guides Authentication Introduction Quickstart ⚡ Guides Tokenization (Minting) Introduction Integrate NFTs SFTs Credentials Quickstart ⚡ Integrate Create Credential Types Create Credential Templates Issue Credentials Retrieve Credentials Decrypt Credentials Verify Credentials Revoke Credentials Credential Storage Credential Encryption Delegated Signature Webhook IP Checkout Introduction Integrate Advanced Topics Setting Up a Webhook Webhooks are a critical component in the management and distribution of verifiable credentials, providing real-time notifications and seamless integration for issuers. Here’s why webhooks enhance the credential issuance process: Automatic Credential Retrieval : Upon issuance, the credential is sent directly to the issuer through the webhook payload. This eliminates the need for issuers to manually call getCredential() . This functionality is especially crucial when the issuer opts for delegated storage; without catching the webhook, the credential could be lost, as there would be no subsequent retrieval. Notification of Credential Issuance Failure : Webhooks provide immediate alerts if the credential issuance process fails. This enables issuers to quickly identify and address issues, ensuring a reliable and efficient credential issuance process. Secure Storage of Encryption Keys : In scenarios involving encryption via the “crossmint-recoverable” encryption type, the webhook stores the encryption key for the recipient subject. This ensures that, in case of any fallback, the key is readily available, maintaining the security and accessibility of the encrypted credentials. Immediate Access to Credential Pass Links : Issuers can instantly receive a link to the wallet credential pass via the webhook. This link can then be forwarded to the subject, ensuring a swift and efficient delivery of credentials. If you choose not to use a webhook, you can query for the credential’s status via the status API . ​ Setting Up a Webhook First, you need to setup a webhook in the developer console. Once that is done either programmatically or via the Dev Console, the webhook payload received, looks as follows: Copy Ask AI data:{ credential : credentialObject or encryptedCredentialObjcet pass: wallet pass object secret: encryption key } The events you can monitor are: credential.creation.succeeded Will be emitted when the credential creation process is complete. The issued credential, credential pass, and encryption key will be contained in the data.credential field, data.pass field, and data.secret field, respectively. In case of encrypted credential templates, the issued credential returned will be encrypted. credential.creation.failed Will be emitted when the credential creation process fails. The error will be contained in the data.error field. Was this page helpful? Yes No Delegated Signature Quickstart ⚡ Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 449
  },
  {
    "id": "https://docs.crossmint.com/payments/advanced/accesslists#chunk_0",
    "url": "https://docs.crossmint.com/payments/advanced/accesslists",
    "title": "Access Controls - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Advanced Topics Access Controls Documentation API Reference SDK Reference CLI Solution Guides Changelog Introduction About Crossmint Getting Started Using AI Assistants Platform Wallets Introduction Quickstarts ⚡ Guides Authentication Introduction Quickstart ⚡ Guides Tokenization (Minting) Introduction Integrate Checkout Introduction Integrate Advanced Topics Testing Tips USDC Support Receipt Customization Improving Conversion Component Properties Marketplaces & Launchpads Webhooks Purchases of Multiple NFTs Collection Registration and Verification API Access Controls Dynamic Price and Quantity Mint to Specific Template Checking Supported Tokens Create New Collection Register External Collection Access Lists Geofencing ​ Access Lists Accesslist support is a premium feature. To get started, contact sales Crossmint allows you to whitelist both wallet and email addresses. Once the team has approved your request, you will need to provide the following information: Your Crossmint clientId or collectionId for the collection. The list of wallet and email addresses to be included in the accesslist. If you whitelist users’ email addresses, Crossmint will create wallets associated with those email addresses and provide them to you for inclusion in the accesslist. Users will then be able to authenticate during the purchase and execute the transaction. EVM Solana You can set up accesslists using Merkle Trees or inserting the list of whitelisted addresses directly on the smart contract: ​ A. Merkle Tree Accesslists While using Merkle Trees is more gas-efficient, it involves a slightly more complex setup. Here is an example accesslist mint function: See Example Solidity Copy Ask AI //SPDX-License-Identifier: Unlicense pragma solidity ^0.8.0 ; import \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\" ; import \"@openzeppelin/contracts/token/ERC721/ERC721.sol\" ; import \"@openzeppelin/contracts/access/Ownable.sol\" ; contract Accesslist is ERC721 , Ownable { bytes32 public merkleRoot; uint256 public nextTokenId; mapping ( address => bool ) public claimed; constructor () ERC721 (\"ExampleNFT\", \"NFT\") { merkleRoot = 0x0 ; } function isWhiteListed ( bytes32 [] memory proof , bytes32 leaf ) public view returns ( bool ) { return MerkleProof. verify (proof, merkleRoot, leaf); } function setMerkleRoot ( bytes32 merkleRoot_ ) external onlyOwner { merkleRoot = merkleRoot_; } function mint ( address to , bytes32 [] calldata merkleProof ) public payable { require (claimed[to] == false , \"already claimed\" ); claimed[to] = true ; require ( isWhiteListed ( merkleProof, keccak256 ( abi . encodePacked (to)) ), \"invalid merkle proof\" ); nextTokenId ++ ; _mint (to, nextTokenId); } } ​ B. Mapping-Based Accesslists The most straightforward method of whitelisting involves maintaining a mapping of the whitelisted addresses within your smart contract. This approach is faster but consumes more gas and savvy developers may be able to determine the addresses of the accesslist. See Example Solidity Copy Ask AI mapping ( address => uint256 ) public whitelistMapping; Solidity Copy Ask AI function presale ( address _to , uint256 _count ) external payable { // ensure _to address has tokens left to mint require (whitelistMapping[_to] > 0 , \"no whitelist tokens for user\" ); // decrement mapping for user whitelistMapping[_to] -= _count; // presale minting logic here } ​ Geofencing Geofencing support is a premium feature only available to customers on a paid plan. To get started, contact sales Crossmint supports geofencing capabilities through our Customer Success Engineering (CSE) team. Our CSE team can work with you to block transactions from specific countries or geographic regions via Stripe rules. To set up geofencing for your project, please contact our sales team to discuss your specific requirements and implementation details. Was this page helpful? Yes No Collection Registration and Verification API Dynamic Price and Quantity Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 588
  },
  {
    "id": "https://docs.crossmint.com/payments/advanced/component-properties#chunk_0",
    "url": "https://docs.crossmint.com/payments/advanced/component-properties",
    "title": "Component Properties - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Advanced Topics Component Properties Documentation API Reference SDK Reference CLI Solution Guides Changelog Introduction About Crossmint Getting Started Using AI Assistants Platform Wallets Introduction Quickstarts ⚡ Guides Authentication Introduction Quickstart ⚡ Guides Tokenization (Minting) Introduction Integrate Checkout Introduction Integrate Advanced Topics Testing Tips USDC Support Receipt Customization Improving Conversion Component Properties Marketplaces & Launchpads Webhooks Purchases of Multiple NFTs Collection Registration and Verification API Access Controls Dynamic Price and Quantity Mint to Specific Template Checking Supported Tokens Create New Collection Register External Collection Common Properties Specific Properties & Hooks If you are using our previous version of embedded checkout, please refer to the old component properties guide ​ Common Properties These properties are shared between both the Embedded and Hosted checkout components. ​ lineItems object | array required Specifies the NFTs to purchase. Can be a single item or array of items. lineItems properties ​ collectionLocator string Collection identifier in one of these formats: crossmint:<_YOUR_COLLECTION_ID_>[:_TEMPLATE_ID_] - For collections created in Crossmint Console Template ID is optional and requires template minting to be enabled If template minting is disabled and a template ID is provided, the mint will fail with an error <blockchain>:<contract-address> - For collections using direct contract addresses (e.g., polygon-amoy:0xF3d2d7b5666f579DcE385b2d53c54AB1b09Ef563 ) When using template minting, append the templateId to the collection locator: crossmint:collectionId:templateId . Template minting must be enabled in the Crossmint Console or the mint will fail with an error. See the Mint to Specific Template guide for details on enabling template minting and error handling. ​ tokenLocator string For secondary sales (buying existing NFTs). Token identifier in one of these formats: EVM chains: <blockchain>:<contractAddress>:<tokenId> Solana: <blockchain>:<tokenAddress> Using tokenLocator doesn’t require registering the collection in Crossmint Console. Use either collectionLocator (for primary sales) or tokenLocator (for secondary sales), not both. ​ callData object Arguments passed to your contract’s mint function: Solidity Copy Ask AI // Example mint function function mint ( address to , // Auto-filled by Crossmint uint256 quantity , uint256 totalPrice ) public payable { // ... } Parameter names must match your contract’s function arguments exactly. Do not pass the recipient argument (e.g. to ) in callData. Crossmint handles this automatically. ​ payment object required Configuration for payment methods. payment properties ​ crypto object required Crypto payment settings: Copy Ask AI { enabled : true , // Enable/disable crypto payments defaultChain : \"ethereum\" | \"polygon\" | \"solana\" , // Optional: preferred blockchain defaultCurrency : \"eth\" | \"matic\" | \"sol\" | 'usdc' // Optional: preferred currency } ​ fiat object required Card & wallet payment settings: Copy Ask AI { enabled : true , // Enable/disable fiat payments defaultCurrency : \"usd\" | \"eur\" | \"gbp\" , // Optional: preferred currency } Embedded Checkout supports additional payment method customization. See our Embedded Checkout payment methods guide for details. ​ receiptEmail string Optional email address where purchase receipt will be sent ​ defaultMethod string Sets the default payment tab: fiat or crypto ​ recipient object Delivery details for the NFTs. You must specify either email OR wallet address, not both: recipient properties ​ email string NFTs delivered to user’s Crossmint wallet linked to this email ​ walletAddress string NFTs delivered directly to this blockchain address When not provided, user will be prompted during checkout. ​ locale string Sets the checkout interface language. en-US de-DE es-ES fr-FR it-IT ja-JP ko-KR pt-PT ru-RU th-TH tr-TR uk-UA vi-VN zh-CN zh-TW Klingon ​ Specific Properties & Hooks Hosted Checkout Embedded Checkout React Hooks The hosted checkout button is only available for React applications. For full customization options, please use our Headless Checkout . The following properties are available for the CrossmintHostedCheckout component: ​ appearance object Customization options for the hosted checkout. See our UI Customization guide for complete details. Notable appearance options: Display mode: display: \"popup\" | \"new-tab\" (default: “popup”) Background overlay: overlay.enabled: false to disable the gray background Button theme: theme.button: \"light\" | \"dark\" | \"crossmint\" (default: “light”) Checkout theme: theme.checkout: \"light\" | \"dark\" (default: “light”) Was this page helpful? Yes No Improving Conversion Marketplaces & Launchpads Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 687
  },
  {
    "id": "https://docs.crossmint.com/payments/advanced/dynamic-quantity-and-price#chunk_0",
    "url": "https://docs.crossmint.com/payments/advanced/dynamic-quantity-and-price",
    "title": "Dynamic Price and Quantity - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Advanced Topics Dynamic Price and Quantity Documentation API Reference SDK Reference CLI Solution Guides Changelog Introduction About Crossmint Getting Started Using AI Assistants Platform Wallets Introduction Quickstarts ⚡ Guides Authentication Introduction Quickstart ⚡ Guides Tokenization (Minting) Introduction Integrate Checkout Introduction Integrate Advanced Topics Testing Tips USDC Support Receipt Customization Improving Conversion Component Properties Marketplaces & Launchpads Webhooks Purchases of Multiple NFTs Collection Registration and Verification API Access Controls Dynamic Price and Quantity Mint to Specific Template Checking Supported Tokens Create New Collection Register External Collection If you are using our previous version of the hosted checkout, please refer to the old dynamic pricing and quantity guide See the below examples to understand how to implement dynamic pricing or quantity into your dApp. The examples below use the Hosted Checkout , but the same approach is compatible with the Embedded Checkout as well. React Copy Ask AI import { useState } from 'react' ; import { CrossmintProvider , CrossmintHostedCheckout } from \"@crossmint/client-sdk-react-ui\" ; function App () { const [ mintAmount , setMintAmount ] = useState ( 1 ); const nftCost = 0.001 ; const apiClientId = '_YOUR_API_CLIENT_ID_' ; const collectionId = '_YOUR_COLLECTION_ID_' ; const handleDecrement = () => { if ( mintAmount <= 1 ) return ; setMintAmount ( mintAmount - 1 ); } const handleIncrement = () => { if ( mintAmount >= 3 ) return ; setMintAmount ( mintAmount + 1 ); } return ( < CrossmintProvider apiKey = { apiClientId } > <> < button onClick = { handleDecrement } > - </ button > < input readOnly type = \"number\" value = { mintAmount } /> < button onClick = { handleIncrement } > + </ button > < CrossmintHostedCheckout lineItems = { { collectionId: collectionId , callData: { totalPrice: ( nftCost * mintAmount ). toString (), _quantity: mintAmount // the `_quantity` property should match what is in your mint function // your custom minting arguments... } } } /> </> </ CrossmintProvider > ); } export default App ; Was this page helpful? Yes No Access Controls Mint to Specific Template Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 366
  },
  {
    "id": "https://docs.crossmint.com/payments/advanced/improving-conversion#chunk_0",
    "url": "https://docs.crossmint.com/payments/advanced/improving-conversion",
    "title": "Improving Conversion - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Advanced Topics Improving Conversion Documentation API Reference SDK Reference CLI Solution Guides Changelog Introduction About Crossmint Getting Started Using AI Assistants Platform Wallets Introduction Quickstarts ⚡ Guides Authentication Introduction Quickstart ⚡ Guides Tokenization (Minting) Introduction Integrate Checkout Introduction Integrate Advanced Topics Testing Tips USDC Support Receipt Customization Improving Conversion Component Properties Marketplaces & Launchpads Webhooks Purchases of Multiple NFTs Collection Registration and Verification API Access Controls Dynamic Price and Quantity Mint to Specific Template Checking Supported Tokens Create New Collection Register External Collection 1. Safely allow high-risk transactions by enabling escrow How does escrow work? 2. Ensure your checkout has the right locale 3. Choose the best payment methods 4. Further customize your checkout flow Here are a selection of best practices you can follow to optimize conversion on your checkout flow. ​ 1. Safely allow high-risk transactions by enabling escrow Escrow features only affect credit card conversion Crossmint offers the highest credit card approval rate in the industry: a 95-98% approval rate, compared to 55% industry benchmark. To protect sellers against credit card fraud, Crossmint runs a proprietary anti-fraud algorithm that scores every prospective buyer, and determines whether they can purchase or not. On occasion, some payments flagged as risky may actually come from a legitimate buyer, if they were for example using an abnormal number of cards or purchasing from an unexpected location or VPN. Crossmint allows you to turn on an optional “escrow” feature, where certain high risk transactions will be allowed, but the user won’t receive their item until they complete a challenge post purchase. This usually increases conversion 1-2% on average. See example of a failed transaction without escrow If you’re using the Embedded Checkout this message will be returned in the payment:process.rejected event. Enabling escrow requires speaking to the Crossmint team or your assigned Customer Success Engineer. ​ How does escrow work? With escrow enabled, high-risk transactions go through a different flow. Crossmint will approve the transaction, but deposit the NFT in temporary custody until the buyer completes a quick, always automatic, verification process. This improves conversion while adding an extra step to only the riskiest transactions that would otherwise be blocked. Crossmint dynamically scales the challenge based on the riskiness of the buyer - for some, a simple email verificaiton; for the riskiest buyers, a KYC verification. This ensures legitimate buyers can buy your NFT’s, no matter their payment method, increasing your overall conversion. You, the seller, get paid regardless of if the buyer fails the challenge. Crossmint takes the transaction risk and verification burden for you. Escrow works on all collections created via Crossmint’s smart contracts. External collections, imported into Crossmint console, require manual review before enabling escrow, to ensure the NFT is transferable post purchase. ​ 2. Ensure your checkout has the right locale Improper locales can significantly reduce conversion. Double check that your checkout is configured to work in the locales you have customers. You can manage the locale in your integrated checkout components , or your payment order objects. ​ 3. Choose the best payment methods You may have data that shows your customers convert better with one payment method over another one. Customizing your checkout to feature these preferred payment methods by default is a good way to improve your conversion. Embedded Checkout - Set the default payment method as your customers most preferred one (i.e. Apple Pay, Sol, etc.) Headless Checkout - you have full control over your UI. Put the payment method your customers prefer as default option, and pre-fill as much information as you can. ​ 4. Further customize your checkout flow You may know your customer very well, and what exactly increases conversion for them: large images, progress bars, loyalty point reward offers. Building these bespoke checkout experiences can increase your conversion. Embedded or headless checkout are more customizable checkout tools. Was this page helpful? Yes No Receipt Customization Component Properties Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 668
  },
  {
    "id": "https://docs.crossmint.com/payments/advanced/marketplaces-and-launchpads#chunk_0",
    "url": "https://docs.crossmint.com/payments/advanced/marketplaces-and-launchpads",
    "title": "Marketplaces & Launchpads - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Advanced Topics Marketplaces & Launchpads Documentation API Reference SDK Reference CLI Solution Guides Changelog Introduction About Crossmint Getting Started Using AI Assistants Platform Wallets Introduction Quickstarts ⚡ Guides Authentication Introduction Quickstart ⚡ Guides Tokenization (Minting) Introduction Integrate Checkout Introduction Integrate Advanced Topics Testing Tips USDC Support Receipt Customization Improving Conversion Component Properties Marketplaces & Launchpads Webhooks Purchases of Multiple NFTs Collection Registration and Verification API Access Controls Dynamic Price and Quantity Mint to Specific Template Checking Supported Tokens Create New Collection Register External Collection If you are using our previous version of the hosted checkout, please refer to the old multiple digital asset purchases guide Additional services offered to marketplaces and launchpads Crossmint offers additional services to marketplaces and launchpads, including: Custom branding and email receipts Dedicated Slack channel with Crossmint’s support team Custom SLAs APIs to register new collections programmatically Increased purchase limits Cart mode and ability to sweep the floor …and more Marketplaces Launchpads ​ Integrating Crossmint into a marketplace Integrating Crossmint into a marketplace can be as simple as adding five lines of code, depending on the level of customization required. The following snippet would be sufficient to render a button that enables the purchase of one of your listings with credit card. EVM Solana Copy Ask AI < CrossmintProvider apiKey = \"_YOUR_CLIENT_API_KEY_\" > < CrossmintHostedCheckout lineItems = { { tokenLocator: \"ethereum:0xbC…307e:7777\" , callData: { totalPrice: \"0.1\" } } } /> </ CrossmintProvider > Contact sales to get started. If you are building a new marketplace, use one of the supported contracts for a faster integration. If you are looking for help building a marketplace, contact us and the Crossmint team will introduce you to the right partner. ​ FAQs What marketplaces are supported Blockchain Supported Marketplaces Ethereum OpenSea (Seaport), Rarible, LooksRare, X2Y2, Foundation, Manifold, Zora, Blur, SuperRare, NFTX, Sudoswap Polygon OpenSea (Seaport), Magic Eden, Rarible, OKX, Element Optimism OpenSea (Seaport), Zora, OKX Arbitrum OpenSea (Seaport), OKX Base OpenSea (Seaport), Zora, Element Zora OpenSea (Seaport), Zora Avalanche OpenSea (Seaport), OKX, Element BSC OKX, Element Solana Magic Eden, Tensor Supported contracts Crossmint supports a wide range of contracts across chains, including: Blockchain Contract EVM Reservoir, Rarible, Seaport, OpenSea, Zora, LooksRare, X2Y2, 0x, Foundation, CoinbaseNFT, Sudoswap, Manifold Solana Auction House, Magic Eden API, Hyperspace, Exchange.art Custom integrations available only for enterprise clients. Where can I test it? You can see a live implementation of the payment button on Tensor . What is the maximum transaction limit? The default transaction limit is 7,000 USD. If you need a higher limit, contact us Was this page helpful? Yes No Component Properties Webhooks Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 452
  },
  {
    "id": "https://docs.crossmint.com/payments/advanced/mint-to-specific-template#chunk_0",
    "url": "https://docs.crossmint.com/payments/advanced/mint-to-specific-template",
    "title": "Mint to Specific Template - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Advanced Topics Mint to Specific Template Documentation API Reference SDK Reference CLI Solution Guides Changelog Introduction About Crossmint Getting Started Using AI Assistants Platform Wallets Introduction Quickstarts ⚡ Guides Authentication Introduction Quickstart ⚡ Guides Tokenization (Minting) Introduction Integrate Checkout Introduction Integrate Advanced Topics Testing Tips USDC Support Receipt Customization Improving Conversion Component Properties Marketplaces & Launchpads Webhooks Purchases of Multiple NFTs Collection Registration and Verification API Access Controls Dynamic Price and Quantity Mint to Specific Template Checking Supported Tokens Create New Collection Register External Collection Overview Supported Collection Types Enabling Template Minting Using Template IDs Error Handling ​ Overview When minting NFTs from a collection with multiple templates, you can specify which template to mint to using your Crossmint integration. This feature must be explicitly enabled in the Crossmint Console. This gives you control over exactly which template gets minted when processing a purchase, rather than relying on random template selection. ​ Supported Collection Types Template minting is supported for Managed EVM collections only: Managed ERC-721 and ERC-1155 collections created in the Crossmint Console Template minting is not available for: Solana collections Aptos collections ​ Enabling Template Minting Follow these steps in the Crossmint Console to enable template-specific minting: Go to your collection in the Crossmint Console Navigate to the “Payments” section Under “NFT Template Settings”, enable “Mint to specific NFT Template” ​ Using Template IDs If template-specific minting is disabled for your collection and you pass a template ID in the collection locator, the request will fail with an error. Make sure to enable this feature in the Console before using template IDs. To see all your available templates, navigate to the “NFTs” section in the Console for your managed collection. You can also get all your available templates for a collection using the NFT Template API . Once enabled, specify which template to mint by adding the template ID to your collection locator. The collection locator format without templateId is: Copy Ask AI crossmint:<collectionId> and with templateId is: Copy Ask AI crossmint:<collectionId>:<templateId> The templateId portion is optional with mint to specific template enabled. If omitted, the system will use your collection’s default minting behavior. Here’s how to implement template minting in your integration: Embedded Checkout v3 Headless Checkout Add the template ID to your collection locator string: Copy Ask AI < CrossmintProvider apiKey = { clientApiKey } > < CrossmintEmbeddedCheckout lineItems = { { // For a specific template: collectionLocator: `crossmint: ${ collectionId } : ${ templateId } ` , // Or for random template selection: // collectionLocator: `crossmint:${collectionId}`, callData: { totalPrice: \"0.001\" , quantity: 1 , }, } } /> </ CrossmintProvider > ​ Error Handling When implementing template minting, handle these potential error cases: Template Minting Disabled Error message: “Error - Mint to specific template must be enabled in Crossmint console” Occurs when: Using a template ID while the feature is disabled in the console Resolution: Enable template minting in the console settings Invalid Template ID Error message: Transaction fails with template validation error Occurs when: The specified template ID doesn’t exist in the collection Resolution: Verify the template ID exists in your collection No Code Storefront Mint to specific template is not currently supported on No Code Storefront. If you’d like this feature, please reach out to your CSE rep Here’s how to handle these errors in your code: Embedded Checkout v3 Headless Checkout Copy Ask AI try { < CrossmintProvider apiKey = { clientApiKey } > < CrossmintEmbeddedCheckout lineItems = { { collectionLocator: `crossmint: ${ collectionId } : ${ templateId } ` , callData: { totalPrice: \"0.001\" , quantity: 1 , }, } } onError = { ( error ) => { if ( error . message . includes ( \"must be enabled\" )) { // Template minting is disabled console . error ( \"Please enable template minting in the console\" ); } else if ( error . message . includes ( \"template\" )) { // Invalid template ID console . error ( \"Invalid template ID provided\" ); } } } /> </ CrossmintProvider > } catch ( error ) { // Handle other errors console . error ( \"Minting failed:\" , error ); } Was this page helpful? Yes No Dynamic Price and Quantity Checking Supported Tokens Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 725
  },
  {
    "id": "https://docs.crossmint.com/payments/advanced/receipt-customization#chunk_0",
    "url": "https://docs.crossmint.com/payments/advanced/receipt-customization",
    "title": "Receipt Customization - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Advanced Topics Receipt Customization Documentation API Reference SDK Reference CLI Solution Guides Changelog Introduction About Crossmint Getting Started Using AI Assistants Platform Wallets Introduction Quickstarts ⚡ Guides Authentication Introduction Quickstart ⚡ Guides Tokenization (Minting) Introduction Integrate Checkout Introduction Integrate Advanced Topics Testing Tips USDC Support Receipt Customization Improving Conversion Component Properties Marketplaces & Launchpads Webhooks Purchases of Multiple NFTs Collection Registration and Verification API Access Controls Dynamic Price and Quantity Mint to Specific Template Checking Supported Tokens Create New Collection Register External Collection Elements that can be customized Elements that cannot be customized Customizing the order receipt that gets sent to your users’ email addresses is possible under our Enterprise plan. ​ Elements that can be customized Subject : the subject of the email. Header : the header of the email. Body : the body of the receipt within the email. Company logo : you can add your company logo. Remove Crossmint’s links : you can also remove Crossmint’s social links and buttons (included in the default receipt sent). Remove transaction hash : you can also remove the transaction hash (included in the default receipt sent). ​ Elements that cannot be customized You cannot include the user’s name in the receipt as this information is not always available. You cannot remove the “Payment powered by Crossmint” message on the footer for compliance. Please contact your Crossmint customer success engineer and provide them with the above information. What does the default purchase receipt look like? Here is an example of the default purchase receipt that is emailed to users: What does a customized purchase receipt look like? Here is an example of a customized purchase receipt that is emailed to users: Was this page helpful? Yes No USDC Support Improving Conversion Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 311
  },
  {
    "id": "https://docs.crossmint.com/payments/advanced/registration-and-verification-api#chunk_0",
    "url": "https://docs.crossmint.com/payments/advanced/registration-and-verification-api",
    "title": "Collection Registration and Verification API - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Advanced Topics Collection Registration and Verification API Documentation API Reference SDK Reference CLI Solution Guides Changelog Introduction About Crossmint Getting Started Using AI Assistants Platform Wallets Introduction Quickstarts ⚡ Guides Authentication Introduction Quickstart ⚡ Guides Tokenization (Minting) Introduction Integrate Checkout Introduction Integrate Advanced Topics Testing Tips USDC Support Receipt Customization Improving Conversion Component Properties Marketplaces & Launchpads Webhooks Purchases of Multiple NFTs Collection Registration and Verification API Access Controls Dynamic Price and Quantity Mint to Specific Template Checking Supported Tokens Create New Collection Register External Collection Before you get started: Collection Registration and Verification process Get Collection status FAQs Crossmint provides an API to facilitate collection registration and verification. This functionality is for launchpads that want to use Crossmint’s checkout and allow their users to go through the KYC and collection verification flow. ​ Before you get started: Contact your Crossmint customer success engineer to request the collections.write scope be added to an existing API key. You will need to provide the projectId associated with the API key you will be using. Your contract also needs to meet certain requirements. Please refer to the Register External Collection documentation page for further information. Please do not share your API key secret with the Crossmint team or anyone else. ​ Collection Registration and Verification process Once a user has created a collection on your launchpad, you can optionally choose to register the collection with Crossmint to enable Credit Card payments. This API abstracts away much of the complexity involved from the user when they perform KYC and the collection verification process. As the launchpad, you will pass information about the collection as parameters to the API. Crossmint will then return a URL where the user can complete the KYC and collection verification. This API call’s structure is as follows: Hosted Checkout Sample code for the collection registration and verification API. Click on “Response” to see what a successful response will look like. JavaScript Response (Successful) Copy Ask AI // Define the API URL const apiUrl = \"https://staging.crossmint.com/api/v1-alpha1/collections\" ; // Set up the request body with actual data instead of placeholders const requestBody = { chain: \"ethereum\" , // replace with actual chain name contractType: \"erc-721\" , // choose between \"erc-721\" or \"erc-1155\" or \"thirdweb-drop\" or \"candy-machine\" args: { contractAddress: \"0x123...\" , // replace with actual contract address mintFunctionName: \"mintUSDC(address,uint256)\" , // specify the mint function abi: [], // provide the actual contract ABI array toParamName: \"toAddress\" , // specify the 'to' parameter name in the mint function erc20MintCurrency: \"usdc\" , // the ERC20 currency to be used for minting }, metadata: { title: \"<collection_title>\" , // replace '<collection_title>' with the actual collection name description: \"<description>\" , // replace `<description>` with the actual collection's description imageUrl: \"<image_url>\" , // replace '<image_url>' with actual URL to an image }, ownership: \"external\" , // optional - if you are regestering the collection on behalf of a creator or yourself, choose \"external\". Else, choose \"self\". category: \"Art\" , // specify the verification category - this expedites the collection review scopes: [ \"payments:credit-card\" ], // required scopes- \"payments:cross-chain\" or \"payments:credit-card\", must specify at least one }; // Set up the request options const requestOptions = { method: \"POST\" , headers: { 'Content-Type' : 'application/json' , 'X-API-KEY' : '<api-key>' , // replace '<api-key>' with the API Key that has the scope `collections.write` }, body: JSON . stringify ( requestBody ), // Convert the JavaScript object to a JSON string }; // Make the fetch request fetch ( apiUrl , requestOptions ) . then (( response ) => response . json ()) // Parsing the JSON response . then (( data ) => console . log ( \"Success:\" , data )) . catch (( error ) => console . error ( \"Error:\" , error )); The returned URL must be the URL that your user needs to be directed to. The user can complete the verification with that URL. ​ Get Collection status You can check the status of your user’s verification with the get collection status endpoint. Upon a successful request, the verification status for the seller and collection may have either of the following values: verified - The user has successfully completed the verification. failed - The verification failed. crossmint-review - It is being reviewed by the Crossmint team. unverified - The user has not initiated or completed the verification process. JavaScript Response (Successful) Copy Ask AI // Replace '<collectionId>' with the collectionId returned in the successful POST response const collectionId = 'your_collection_id' ; // Replace 'your_collection_id' with the actual ID const apiUrl = `https://staging.crossmint.com/api/v1-alpha1/collections/ ${ collectionId } ` ; // Set up the request options const requestOptions = { method: 'GET' , headers: { 'X-API-KEY' : '<api-key>' , /// replace '<api-key>' with your API Key 'Content-Type' : 'application/json' , } }; // Make the fetch request fetch ( apiUrl , requestOptions ) . then ( response => { if ( ! response . ok ) { throw new Error ( 'Network response was not ok: ' + response . statusText ); } return response . json (); // Parse the JSON from the response }) . then ( data => console . log ( 'Success:' , data )) // Handle the parsed data . catch ( error => console . error ( 'Error:' , error )); // Handle any errors ​ FAQs What are the possible inputs for the category parameter? You can find all the possible inputs below: VerificationCategory inputs Copy Ask AI VerificationCategory { LOYALTY : \"loyalty\" , ART : \"art\" , MUSIC : \"music\" , GAMING : \"gaming\" , TICKETING : \"ticketing\" , CHARITY : \"charity\" , OTHER : \"other\" , } Does every collection require seller's KYC and collection verification? The verification requirement varies by the payment type selected for the collection. Credit card: Seller and collection status must be “verified”. Crypto: Only collection status must be “verified”. Was this page helpful? Yes No Purchases of Multiple NFTs Access Controls Assistant",
    "chunk_index": 0,
    "word_count": 1000
  },
  {
    "id": "https://docs.crossmint.com/payments/advanced/registration-and-verification-api#chunk_0",
    "url": "https://docs.crossmint.com/payments/advanced/registration-and-verification-api",
    "title": "Collection Registration and Verification API - Crossmint Docs",
    "content": "possible inputs for the category parameter? You can find all the possible inputs below: VerificationCategory inputs Copy Ask AI VerificationCategory { LOYALTY : \"loyalty\" , ART : \"art\" , MUSIC : \"music\" , GAMING : \"gaming\" , TICKETING : \"ticketing\" , CHARITY : \"charity\" , OTHER : \"other\" , } Does every collection require seller's KYC and collection verification? The verification requirement varies by the payment type selected for the collection. Credit card: Seller and collection status must be “verified”. Crypto: Only collection status must be “verified”. Was this page helpful? Yes No Purchases of Multiple NFTs Access Controls Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 109
  },
  {
    "id": "https://docs.crossmint.com/payments/advanced/selling-multiple-nfts#chunk_0",
    "url": "https://docs.crossmint.com/payments/advanced/selling-multiple-nfts",
    "title": "Purchases of Multiple NFTs - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Advanced Topics Purchases of Multiple NFTs Documentation API Reference SDK Reference CLI Solution Guides Changelog Introduction About Crossmint Getting Started Using AI Assistants Platform Wallets Introduction Quickstarts ⚡ Guides Authentication Introduction Quickstart ⚡ Guides Tokenization (Minting) Introduction Integrate Checkout Introduction Integrate Advanced Topics Testing Tips USDC Support Receipt Customization Improving Conversion Component Properties Marketplaces & Launchpads Webhooks Purchases of Multiple NFTs Collection Registration and Verification API Access Controls Dynamic Price and Quantity Mint to Specific Template Checking Supported Tokens Create New Collection Register External Collection FAQ If you are using our previous version of embedded checkout, please refer to the old multiple NFT purchases guide You can enable users to purchase multiple NFTs in a single transaction using either CrossmintEmbeddedCheckout or CrossmintPayButton : Hosted Checkout Embedded Checkout Primary Sales Marketplaces - EVM Marketplaces - Solana Copy Ask AI < CrossmintProvider apiKey = \"_YOUR_CLIENT_API_KEY_\" > < CrossmintHostedCheckout lineItems = { [ { collectionLocator: \"crossmint:_YOUR_COLLECTION_ID_\" , callData: { totalPrice: \"0.001\" , _quantity: 1 , // matches your contract's parameter name } }, { collectionLocator: \"crossmint:_YOUR_COLLECTION_ID_\" , callData: { totalPrice: \"0.002\" , _quantity: 2 , } } ] } /> </ CrossmintProvider > For external EVM contracts registered in Crossmint Console, ensure the attribute name in callData matches the parameter name in your mint function. For example: If your mint function has the signature: mintTo(address _to, uint256 _amount) then use _amount instead of quantity . See our Register External Collection guide for details on registering your contract. All line items must use the same collectionLocator and be on the same blockchain. ​ FAQ What happens if some of the transactions fail? Fiat purchases When a user submits an order, Crossmint puts a hold on their credit card and attempts the purchase of the NFTs. If the transaction fails, the funds are released instantly (though it may take some time to be reflected on the bank statement) so the customer is never charged. If an order results in a mix of successful and failed purchase attempts, Crossmint will only charge for the transactions that went through and return the rest instantly. Users will receive an email receipt with the final transaction amount. Crypto purchases If a transaction fails, Crossmint will return the full amount to the buyer. Any gas fees incurred will be subsidized by Crossmint. Do all NFTs must be on the same blockchain? Yes, all NFTs in a single order must be on the same blockchain. Was this page helpful? Yes No Webhooks Collection Registration and Verification API Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 437
  },
  {
    "id": "https://docs.crossmint.com/payments/advanced/supported-tokens#chunk_0",
    "url": "https://docs.crossmint.com/payments/advanced/supported-tokens",
    "title": "How to Check Supported Tokens for Crossmint Payments | Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Advanced Topics Checking Supported Tokens Documentation API Reference SDK Reference CLI Solution Guides Changelog Introduction About Crossmint Getting Started Using AI Assistants Platform Wallets Introduction Quickstarts ⚡ Guides Authentication Introduction Quickstart ⚡ Guides Tokenization (Minting) Introduction Integrate Checkout Introduction Integrate Advanced Topics Testing Tips USDC Support Receipt Customization Improving Conversion Component Properties Marketplaces & Launchpads Webhooks Purchases of Multiple NFTs Collection Registration and Verification API Access Controls Dynamic Price and Quantity Mint to Specific Template Checking Supported Tokens Create New Collection Register External Collection Introduction Prerequisites Getting Started Token Locator Format Checking Token Support Using JavaScript Sample Response Integrating with Your Checkout Flow Example: Pre-checkout Validation Best Practices Next Steps FAQ Enterprise feature. Contact us for access. ​ Introduction Before integrating a memecoin or token using Crossmint’s checkout, it’s important to verify that it’s supported by Crossmint. This guide will show you how to use the Crossmint API to check if a specific token is supported and what features are available for it. ​ Prerequisites 1 Create a server-side API key Get your API keys from the Crossmint Console Once you log in to the console, the next step is to create an API key . Click the \"Integrate\" tab and click on the \"API Keys\" option on top. More info on creating API keys here 2 Enable the orders.create scope Make sure the orders.create scope is enabled for your API key. ​ Getting Started The Supported Tokens API allows you to query the status of any token to determine if it’s supported by Crossmint and what features are available. Endpoint : https://www.crossmint.com/api/v1-alpha2/tokens/:tokenLocator Method : GET Authentication : Requires either a server or client API key ​ Token Locator Format Currently, memecoin checkout only supports the Solana network. The token locator follows this format: Copy Ask AI network:tokenAddress Example: TRUMP: solana:6p6xgHyF7AeE6TZkSmFsko444wqoP15icUSqi2jfGiPN ​ Checking Token Support ​ Using JavaScript Here’s how to check if a token is supported using JavaScript: Copy Ask AI // Example usage const apiKey = \"your-api-key\" ; // Replace with your actual API key const tokenLocator = \"solana:6p6xgHyF7AeE6TZkSmFsko444wqoP15icUSqi2jfGiPN\" ; // Example: TRUMP token const checkTokenSupport = async ( apiKey , tokenLocator ) => { try { const response = await fetch ( `https://www.crossmint.com/api/v1-alpha2/tokens/ ${ tokenLocator } ` , { method: \"GET\" , headers: { \"X-API-KEY\" : apiKey , \"Content-Type\" : \"application/json\" , }, }); const data = await response . json (); return data ; } catch ( error ) { console . error ( \"Error checking token support:\" , error ); throw error ; } }; checkTokenSupport ( apiKey , tokenLocator ) . then (( result ) => { console . log ( \"Token support details:\" , result ); if ( result . available ) { console . log ( \"This token is supported by Crossmint!\" ); } else { console . log ( \"This token is not currently supported.\" ); } console . log ( \"Available features:\" , result . features ); }) . catch (( err ) => { console . error ( \"Failed to check token support:\" , err ); }); ​ Sample Response A successful response will look similar to this: Copy Ask AI { \"token\" : \"solana:6p6xgHyF7AeE6TZkSmFsko444wqoP15icUSqi2jfGiPN\" , \"available\" : true , \"features\" : { \"creditCardPayment\" : true } } ​ Integrating with Your Checkout Flow Once you’ve confirmed that a token is supported, you can use the information from the API response to customize your checkout experience. ​ Example: Pre-checkout Validation Here’s an example of how to incorporate token support checking before initiating a checkout: Copy Ask AI const initiateCheckout = async ( apiKey , tokenLocator , amount , recipientWallet ) => { // First, check if the token is supported const tokenSupport = await checkTokenSupport ( apiKey , tokenLocator ); if ( ! tokenSupport . available ) { throw new Error ( \"This token is not currently supported by Crossmint.\" ); } if ( ! tokenSupport . features . creditCardPayment ) { throw new Error ( \"Credit card payment is not available for this token.\" ); } // If we get here, the token is supported with credit card checkout // Proceed with creating an order const orderResponse = await fetch ( \"https://www.crossmint.com/api/2022-06-09/orders\" , { method: \"POST\" , headers: { \"X-API-KEY\" : apiKey , \"Content-Type\" : \"application/json\" , }, body: JSON . stringify ({ lineItems: { tokenLocator: tokenLocator , executionParameters: { mode: \"exact-in\" , amount: amount , maxSlippageBps: \"500\" , }, }, payment: { method: \"stripe-payment-element\" , receiptEmail: \"user@example.com\" , // Replace with user's email }, recipient: { walletAddress: recipientWallet , }, }), }); return await orderResponse . json (); }; ​ Best Practices Cache Results (with caution) : Token support status can change, but for frequently accessed tokens, consider caching results for a short period (e.g., 1 hour) to reduce API calls. Handle Errors Gracefully : Implement proper error handling to provide clear feedback to users when a token is not supported. Check Before Displaying Options : Only display payment methods that are actually available for the token. ​ Next Steps Credit Card Memecoin Checkout Now that you can check token support, learn how to implement a credit card checkout for memecoins Order Lifecycle Understand the lifecycle of orders in Crossmint’s checkout flow ​ FAQ Can I request support for a specific token? Yes, if you’d like to request support for a token that is currently unsupported, please contact our support team or your account manager. What happens if I try to process a transaction for an unsupported token? Transactions for unsupported tokens will fail. This is why it’s crucial to check token support before initiating a checkout process. Are all payment methods available for all supported tokens? No, each token may have different available payment features. The API response includes a features object that specifies which payment methods are available for each token. Is there a limit to how many tokens I can check? The API is rate-limited to 50 requests per second. For most applications,",
    "chunk_index": 0,
    "word_count": 1000
  },
  {
    "id": "https://docs.crossmint.com/payments/advanced/supported-tokens#chunk_0",
    "url": "https://docs.crossmint.com/payments/advanced/supported-tokens",
    "title": "How to Check Supported Tokens for Crossmint Payments | Crossmint Docs",
    "content": "please contact our support team or your account manager. What happens if I try to process a transaction for an unsupported token? Transactions for unsupported tokens will fail. This is why it’s crucial to check token support before initiating a checkout process. Are all payment methods available for all supported tokens? No, each token may have different available payment features. The API response includes a features object that specifies which payment methods are available for each token. Is there a limit to how many tokens I can check? The API is rate-limited to 50 requests per second. For most applications, this should be more than sufficient. Was this page helpful? Yes No Mint to Specific Template Create New Collection Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 129
  },
  {
    "id": "https://docs.crossmint.com/payments/advanced/testing-tips#chunk_0",
    "url": "https://docs.crossmint.com/payments/advanced/testing-tips",
    "title": "Testing Tips - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Advanced Topics Testing Tips Documentation API Reference SDK Reference CLI Solution Guides Changelog Introduction About Crossmint Getting Started Using AI Assistants Platform Wallets Introduction Quickstarts ⚡ Guides Authentication Introduction Quickstart ⚡ Guides Tokenization (Minting) Introduction Integrate Checkout Introduction Integrate Advanced Topics Testing Tips USDC Support Receipt Customization Improving Conversion Component Properties Marketplaces & Launchpads Webhooks Purchases of Multiple NFTs Collection Registration and Verification API Access Controls Dynamic Price and Quantity Mint to Specific Template Checking Supported Tokens Create New Collection Register External Collection Limits in Staging Test Credit Card Numbers Advanced Card Testing Reviewing Orders in the Developer Console ​ Limits in Staging In order to preserve testnet ETH/tokens, Crossmint imposes very low upper bound limits on NFT prices in the staging environment. The default limit on production is USD 0.75 − 0.75 - 0.75 − 1,500 per transaction. To avoid issues, set the totalPrice and the onchain NFT price to no more than: Ethereum (Sepolia): 0.000005 ETH (this applies for other EVM chains as well) Polygon (Amoy): 0.005 MATIC Solana (Devnet): 0.001 SOL USDC (all chains): $10 Other chains: the equivalent of $0.10 in the native token The minimum credit card charge amount is $0.50. Even though the price of the NFT at the above rates will often be less the $0.01, the checkout will still show $0.50. This will be less of an issue on production when you’re charging full price. ​ Test Credit Card Numbers When testing the Checkout and credit card payments on staging you’ll need to use test card numbers. You can use these cards to test the flow end-to-end without actually processing real payments. You can use the following test credit card numbers: 4242424242424242 (Visa) 4000056655665556 (Visa Debit) 5555555555554444 (Mastercard) 5200828282828210 (Mastercard Debit) For CVV or CVC , use any 3 digit number For Expiry Date or MM/YY , enter any future date ​ Advanced Card Testing If you want to simulate purchases from different countries , decline conditions , or other brands refer to the Stripe documentation for more test card numbers. ​ Reviewing Orders in the Developer Console You can get insights into the purchases being made against your collection by navigating to the Orders tab for your collection in the Developer Console. You can use this to get insights about orders in production, but also to see the status of orders when testing out your integration in the staging environment. When looking for pre-completion phase orders while testing Headless Checkout , you’ll need to enter the order ID in the search box. This is because the console view purposefully has a reduced list of status options for filtering. Was this page helpful? Yes No Status Codes USDC Support Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 468
  },
  {
    "id": "https://docs.crossmint.com/payments/advanced/usdc-support#chunk_0",
    "url": "https://docs.crossmint.com/payments/advanced/usdc-support",
    "title": "USDC Support - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Advanced Topics USDC Support Documentation API Reference SDK Reference CLI Solution Guides Changelog Introduction About Crossmint Getting Started Using AI Assistants Platform Wallets Introduction Quickstarts ⚡ Guides Authentication Introduction Quickstart ⚡ Guides Tokenization (Minting) Introduction Integrate Checkout Introduction Integrate Advanced Topics Testing Tips USDC Support Receipt Customization Improving Conversion Component Properties Marketplaces & Launchpads Webhooks Purchases of Multiple NFTs Collection Registration and Verification API Access Controls Dynamic Price and Quantity Mint to Specific Template Checking Supported Tokens Create New Collection Register External Collection Ensure you are using a supported USDC token Validate your collection meets the requirements By denominating your collection in USDC, you can eliminate price volatility, and offer a more accessible experience to users. If you are using our previous version of embedded checkout, please refer to the old USDC support guide ​ Ensure you are using a supported USDC token First of all, make sure your collection is denominated in one of the USDC token addresses supported by Crossmint. Chain Network USDC Token Address USDXM Token Address USDC.e is only supported on previously registered integrations on Polygon mainnet. Please use the native USDC address for new projects. If you need some testnet USDC you can mint it freely from the contract or from this faucet app that uses the same testnet token contracts as the Checkout tools. Crossmint Testnet USDXM Faucet ​ Validate your collection meets the requirements EVM Solana In addition to the standard requirements, keep in mind: The mint function should be nonpayable . The USDC token has 6 decimals instead of 18 like ETH, Matic, and most other tokens. The totalPrice attribute in the callData of your lineItems should be in units of USDC . If your intended price is 100 USD, then you will set totalPrice to 100 e.g. totalPrice=\"100\" . Your ERC-20 transfer call must request the funds from msg.sender instead of the address parameter. This allows Crossmint to pay from our fleet of treasury wallets and deliver the NFTs directly to the user’s wallet. See an example mint function below. Solidity Copy Ask AI function mintUSDC ( address _to ) public { // pre payment logic here // note that you need to transfer from msg.sender, NOT the _to address tokenInstance. transferFrom ( msg.sender , address ( this ), priceUSDC ); // actual minting logic here } Copy Ask AI < CrossmintProvider apiKey = \"_YOUR_CLIENT_API_KEY_\" > < CrossmintEmbeddedCheckout lineItems = { { collectionLocator: \"crossmint:_YOUR_COLLECTION_ID_\" , callData: { totalPrice: \"100\" , // 100 USDC quantity: 1 , } } } /> </ CrossmintProvider > The totalPrice attribute in the callData of your lineItems should be in units of USDC. If your intended price is 100 USD, then you will set totalPrice to 100 e.g. totalPrice=\"100\" . Using a thirdweb contract? Add a claim phase with currency type USDC . In staging. you must use Custom ERC-20 and specify one of the token address listed above. In mainnet, you should select the default USDC option. Was this page helpful? Yes No Testing Tips Receipt Customization Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 523
  },
  {
    "id": "https://docs.crossmint.com/payments/advanced/webhooks#chunk_0",
    "url": "https://docs.crossmint.com/payments/advanced/webhooks",
    "title": "Webhooks - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Advanced Topics Webhooks Documentation API Reference SDK Reference CLI Solution Guides Changelog Introduction About Crossmint Getting Started Using AI Assistants Platform Wallets Introduction Quickstarts ⚡ Guides Authentication Introduction Quickstart ⚡ Guides Tokenization (Minting) Introduction Integrate Checkout Introduction Integrate Advanced Topics Testing Tips USDC Support Receipt Customization Improving Conversion Component Properties Marketplaces & Launchpads Webhooks Purchases of Multiple NFTs Collection Registration and Verification API Access Controls Dynamic Price and Quantity Mint to Specific Template Checking Supported Tokens Create New Collection Register External Collection Webhooks Overview Webhook Systems by Checkout Version Checkout V2 Webhooks (Legacy) Checkout V3 Webhooks (Current) Setting Up Webhooks 1. Create an endpoint route 2. Configure the endpoint 3. Example Webhook Responses 4. Pass Custom Arguments (Optional) 5. Pre & Post Processing 6. Configure in Crossmint Console 6. Security Testing Webhooks ​ Webhooks Overview Webhooks allow you to track the status of payments and order lifecycle events in your application. They provide real-time notifications for various events like payment processing, NFT minting, and order fulfillment. ​ Webhook Systems by Checkout Version Crossmint offers different webhook systems for Checkout V2 and V3: ​ Checkout V2 Webhooks (Legacy) The Checkout V2 webhook system provides basic payment tracking with a single event type: purchase.succeeded - Triggered when an NFT has been successfully purchased and delivered ​ Checkout V3 Webhooks (Current) The Checkout V3 webhook system offers comprehensive order lifecycle tracking with multiple event types: Quote Phase orders.quote.created - Triggered when a new order is created orders.quote.updated - Triggered when order details are modified Payment Phase orders.payment.succeeded - Triggered when payment is successfully processed orders.payment.failed - Triggered when payment fails Delivery Phase orders.delivery.initiated - Triggered when delivery begins orders.delivery.completed - Triggered when delivery succeeds orders.delivery.failed - Triggered when delivery fails ​ Setting Up Webhooks ​ 1. Create an endpoint route Using a standard nodejs API server, create an endpoint. I don't have a webserver or want to test locally You can test locally by installing ngrok and creating a routed endpoint to a specified port. > Note : Use ngrok only for testing. In production, ensure your endpoint is properly secured with HTTPS and appropriate access controls. ​ 2. Configure the endpoint Your endpoint should: Handle POST requests only Parse webhook events from the request body Respond with a 200 status code to acknowledge receipt Your server must return a 2xx HTTP status quickly so the webhook is marked as delivered. Example handler: Copy Ask AI // endpoint.js export default function handler ( req , res ) { if ( req . method === \"POST\" ) { console . log ( `[webhook] Event received:` , req . body ); } res . status ( 200 ). json ({}); } Don’t be strict with payload validations as Crossmint may add new fields to the webhooks as products evolve. Your server must return a 2xx HTTP status quickly so the webhook is marked as delivered. ​ 3. Example Webhook Responses Checkout V2: purchase.succeeded EVM Solana Copy Ask AI { \"type\" : \"purchase.succeeded\" , \"status\" : \"success\" , \"walletAddress\" : \"<EVM_ADDRESS>\" , \"projectId\" : \"<PROJECT_ID>\" , \"collectionId\" : \"<COLLECTION_ID>\" , \"clientId\" : \"<CLIENT_ID>\" , \"txId\" : \"<TX_ID>\" , \"contractAddress\" : \"<CONTRACT_ADDRESS>\" , \"tokenIds\" : [ <TOKEN_IDS> ], // only present for EVM collections \"passThroughArgs\" : \"<YOUR_ARGS_JSON>\" // only if whPassThroughArgs set } Checkout V3: orders.quote.created Copy Ask AI { \"type\" : \"orders.quote.created\" , \"payload\" : { \"totalPrice\" : { \"amount\" : \"0.50\" , \"currency\" : \"usd\" }, \"lineItems\" : [ { \"metadata\" : { \"title\" : \"Collection Name\" , \"description\" : \"Collection Description\" , \"imageUrl\" : \"https://...\" }, \"price\" : { \"amount\" : \"0.50\" , \"currency\" : \"usd\" }, \"quantity\" : 1 } ] } } Checkout V3: orders.payment.succeeded Copy Ask AI { \"type\" : \"orders.payment.succeeded\" , \"payload\" : { \"orderIdentifier\" : \"7723139d-fba3-474d-8e52-0ac7512d5c7b\" , \"paymentMethodType\" : \"credit-card\" , \"totalPrice\" : { \"amount\" : \"0.50\" , \"currency\" : \"usd\" } } } Checkout V3: orders.delivery.completed Copy Ask AI { \"type\" : \"orders.delivery.completed\" , \"payload\" : { \"orderIdentifier\" : \"7723139d-fba3-474d-8e52-0ac7512d5c7b\" , \"txId\" : \"0x2e69f11dae7869b92e3d5eaf4cadd50c48b5c6803d1232815f979d744521ad4c\" , \"contractAddress\" : \"0xE04Cf294985282Ddc088E6433c064cfB85eD9EdA\" , \"tokenIds\" : [ \"3\" ], \"recipient\" : { \"walletAddress\" : \"0x...\" } } } ​ 4. Pass Custom Arguments (Optional) Custom arguments (whPassThroughArgs) are only supported in Checkout V2 webhooks. This feature is not available in Checkout V3 webhooks (orders.*). You can pass custom arguments through Checkout V2 webhooks to track additional information: User IDs (If you want additional security, sign this ID with a custom key, or send it as a signed JWT, and verify its integrity later on your server) Timestamps Product SKUs Custom metadata Example of passing arguments: Copy Ask AI function NFTSalePage () { const whArgs = { uid: 123424 , sku: 123123123 , metadata: { custom: \"data\" }, }; const whArgsSerialized = JSON . stringify ( whArgs ); return ( < CrossmintPayButton projectId = \"_YOUR_PROJECT_ID_\" collectionId = \"_YOUR_COLLECTION_ID_\" whPassThroughArgs = { whArgsSerialized } /> ); } Then, extract them on the server: Copy Ask AI export default function handler ( req , res ) { const { whPassThroughArgs } = req . body ; if ( whPassThroughArgs ) { const whArgsDeserialized = JSON . parse ( whPassThroughArgs ); console . log ( whArgsDeserialized ); } res . status ( 200 ). json ({}); } ​ 5. Pre & Post Processing Add your pre and post processing logic when setting up your webhook listener. For example, you can call back to your database when a certain id has succeeded or even use Sendgrid or EmailJS to send an email to a recipient when a mint completes. ​ 6. Configure in Crossmint Console Navigate to the Webhooks page in the console Click Add Endpoint Enter your endpoint URL Select the webhook events to receive Click Create ​ 6. Security For security, verify webhook signatures using the signing secret from your endpoint details page: See the Verify Webhooks guide for implementation details. ​ Testing Webhooks Use test card number 4242 4242 4242 4242 for successful payments",
    "chunk_index": 0,
    "word_count": 1000
  },
  {
    "id": "https://docs.crossmint.com/payments/advanced/webhooks#chunk_0",
    "url": "https://docs.crossmint.com/payments/advanced/webhooks",
    "title": "Webhooks - Crossmint Docs",
    "content": "For example, you can call back to your database when a certain id has succeeded or even use Sendgrid or EmailJS to send an email to a recipient when a mint completes. ​ 6. Configure in Crossmint Console Navigate to the Webhooks page in the console Click Add Endpoint Enter your endpoint URL Select the webhook events to receive Click Create ​ 6. Security For security, verify webhook signatures using the signing secret from your endpoint details page: See the Verify Webhooks guide for implementation details. ​ Testing Webhooks Use test card number 4242 4242 4242 4242 for successful payments Use 4000 0000 0000 4954 to test payment failures Monitor webhook deliveries in the Console Watch a video tutorial Was this page helpful? Yes No Marketplaces & Launchpads Purchases of Multiple NFTs Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 142
  },
  {
    "id": "https://docs.crossmint.com/payments/embedded/customize/localization#chunk_0",
    "url": "https://docs.crossmint.com/payments/embedded/customize/localization",
    "title": "Localization - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Customize Localization Documentation API Reference SDK Reference CLI Solution Guides Changelog Introduction About Crossmint Getting Started Using AI Assistants Platform Wallets Introduction Quickstarts ⚡ Guides Authentication Introduction Quickstart ⚡ Guides Tokenization (Minting) Introduction Integrate Checkout Introduction Integrate Plan Your Integration Hosted (pop-up) Embedded Overview Quickstarts ⚡ Integrate Customize UI Customization Localization React Hooks Upgrade to V3 Headless (API) Advanced Topics Currencies and Languages Available How to Adjust the Currency and Language Translate the checkout to the user's language and allow them to pay in their local currency. The default checkout is in English and USD. Crossmint will automatically detect the location of the buyer and adjust language and currency accordingly, unless otherwise specified by you. ​ Currencies and Languages Available Variable Possible Values Description locale en-US de-DE es-ES fr-FR it-IT ja-JP ko-KR pt-PT ru-RU th-TH tr-TR uk-UA vi-VN zh-CN zh-TW Klingon Language displayed to the user in the checkout interface payment.fiat.defaultCurrency usd aud eur gbp hkd inr jpy krw sgd vnd Default fiat currency for payments in the checkout interface (default: USD) ​ How to Adjust the Currency and Language To customize the language use the property locale and for currency, set defaultCurrency . Here’s an example: Copy Ask AI < CrossmintProvider apiKey = \"_YOUR_CLIENT_API_KEY_\" > < CrossmintEmbeddedCheckout locale = \"es-ES\" // Change locale to Spanish lineItems = { { collectionLocator: \"crossmint:_YOUR_COLLECTION_ID_\" , callData: { // your callData args }, } } payment = { { crypto: { enabled: true , }, fiat: { enabled: true , defaultCurrency: \"eur\" , // Change default currency to be Euro }, } } /> </ CrossmintProvider > Was this page helpful? Yes No UI Customization React Hooks Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 295
  },
  {
    "id": "https://docs.crossmint.com/payments/embedded/guides/apple-pay#chunk_0",
    "url": "https://docs.crossmint.com/payments/embedded/guides/apple-pay",
    "title": "Apple Pay Integration Guide - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Integrate Apple Pay Integration Guide Documentation API Reference SDK Reference CLI Solution Guides Changelog Introduction About Crossmint Getting Started Using AI Assistants Platform Wallets Introduction Quickstarts ⚡ Guides Authentication Introduction Quickstart ⚡ Guides Tokenization (Minting) Introduction Integrate Checkout Introduction Integrate Plan Your Integration Hosted (pop-up) Embedded Overview Quickstarts ⚡ Integrate Payment Methods Production Launch Apple Pay Integration Guide Item Selection Custom Payer Specify Recipient Customize Upgrade to V3 Headless (API) Advanced Topics Prerequisites Download the Apple Validation File Setup Instructions Step 1: Host the Apple Developer Merchant ID Domain Association File Example Setup Using Next.js App Router Example Setup Using Next.js Page Router Example Setup Using Vite Step 2: Test Apple Pay Local Testing To enable Apple Pay on your site, follow these steps: ​ Prerequisites HTTPS Hosting : Your site must be hosted on HTTPS to ensure secure transactions. Domain Validation : Provide your domain to our support team for validation. ​ Download the Apple Validation File Before proceeding, download the Apple Developer Merchant ID Domain Association File: Download the Apple Developer Merchant ID Domain Association File ​ Setup Instructions ​ Step 1: Host the Apple Developer Merchant ID Domain Association File You need to host the following endpoint on your server and return the Apple .txt validation file as plain text: Copy Ask AI https://[your-domain]/.well-known/apple-developer-merchantid-domain-association ​ Example Setup Using Next.js App Router Option 1: Using the Public Folder Create a Public Folder : In your Next.js project, create the .well-known folder inside your public directory. Add the Validation File : Paste the Apple verification txt with no extension in public/.well-known/ . Filename: apple-developer-merchantid-domain-association Option 2: Using a Route Create the Route Structure : In your Next.js project, create a folder at: Path: app/.well-known/apple-developer-merchantid-domain-association/ Add a route.ts File : Inside the folder, create a route.ts file with the following content: route.ts Copy Ask AI import { NextResponse } from \"next/server\" ; export async function GET () { return new NextResponse ( \"TXT-CONTENT\" , { headers: { \"Content-Type\" : \"text/plain\" , }, }); } Replace 'TXT-CONTENT' with the actual content of your Apple validation file. ​ Example Setup Using Next.js Page Router Create a Public Folder : In your Next.js project, create the .well-known folder inside your public directory. Add the Validation File : Paste the Apple verification txt with no extension in public/.well-known/ . Filename: apple-developer-merchantid-domain-association ​ Example Setup Using Vite Create a Public Folder : In your Vite project, create the .well-known folder inside your public directory. Add the Validation File : Paste the Apple verification txt with no extension in public/.well-known/ . Filename: apple-developer-merchantid-domain-association ​ Step 2: Test Apple Pay Test Apple Pay on Safari (macOS) or any iOS device once setup is complete. ​ Local Testing We recommend using ngrok to test your setup locally. Ngrok allows you to expose your local server to the internet securely. If possible, use a fixed domain with ngrok for consistent testing. For further assistance, please contact our support team. Was this page helpful? Yes No Production Launch Item Selection Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 521
  },
  {
    "id": "https://docs.crossmint.com/payments/embedded/guides/custom-payer#chunk_0",
    "url": "https://docs.crossmint.com/payments/embedded/guides/custom-payer",
    "title": "Custom Payer - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Integrate Custom Payer Documentation API Reference SDK Reference CLI Solution Guides Changelog Introduction About Crossmint Getting Started Using AI Assistants Platform Wallets Introduction Quickstarts ⚡ Guides Authentication Introduction Quickstart ⚡ Guides Tokenization (Minting) Introduction Integrate Checkout Introduction Integrate Plan Your Integration Hosted (pop-up) Embedded Overview Quickstarts ⚡ Integrate Payment Methods Production Launch Apple Pay Integration Guide Item Selection Custom Payer Specify Recipient Customize Upgrade to V3 Headless (API) Advanced Topics Overview Quick Integration Payer Configuration Popular Wallet Solutions RainbowKit Web3Modal Best Practices Related Resources ​ Overview While Crossmint provides built-in wallet support, you can also integrate your own wallet solution using the payer prop. This is useful when: You’re already using a wallet connection solution (like RainbowKit, Web3Modal, or ConnectKit) You want to customize the transaction signing flow You need to support specific wallets or chains ​ Quick Integration Here’s a simple example using wagmi and viem : Copy Ask AI import { CrossmintEmbeddedCheckout } from \"@crossmint/client-sdk-react-ui\" ; import { useAccount , useWalletClient } from \"wagmi\" ; import { Hex , parseTransaction } from \"viem\" ; function Checkout () { const { data : walletClient } = useWalletClient (); const { address } = useAccount (); // Map of supported chains to their IDs const chainIds = { \"base-sepolia\" : 84532 , \"polygon-amoy\" : 80002 , } as const ; if ( ! address || ! walletClient ) { return < p > Connect your wallet to continue </ p > ; } return ( < CrossmintEmbeddedCheckout lineItems = { { collectionLocator: \"crossmint:__YOUR_COLLECTION_ID__\" , callData: { totalPrice: \"0.001\" , quantity: 1 , }, } } payment = { { crypto: { // Enable crypto payment, this example only uses Crypto enabled: true , payer: { address , initialChain: \"base-sepolia\" , supportedChains: [ \"base-sepolia\" , \"polygon-amoy\" ], handleChainSwitch : async ( chain ) => { await walletClient . switchChain ({ id: chainIds [ chain ], }); }, handleSignAndSendTransaction : async ( serializedTx ) => { try { const tx = parseTransaction ( serializedTx as Hex ); const hash = await walletClient . sendTransaction ({ to: tx . to , value: tx . value , data: tx . data ?? \"0x\" , gas: tx . gas , chainId: tx . chainId , }); return { success: true , txId: hash }; } catch ( error ) { return { success: false , errorMessage: error instanceof Error ? error . message : \"Transaction failed\" , }; } }, }, }, // Disable fiat payment fiat: { enabled: false }, } } /> ); } When the user clicks the hosted checkout button, our SDK will first call handleChainSwitch to ensure the correct network is set, then handleSignAndSendTransaction to complete the purchase. ​ Payer Configuration The payer prop accepts the following configuration: Property Type Description address string The wallet address of the payer initialChain PayerSupportedBlockchains The initial blockchain (e.g. “polygon”, “ethereum”, “base-sepolia”) supportedChains PayerSupportedBlockchains[] Optional list of supported chains. Defaults to initialChain if not specified handleChainSwitch (chain: PayerSupportedBlockchains) => Promise<void> Function to handle chain switching handleSignAndSendTransaction (serializedTx: string) => Promise<TransactionResponse> Function to handle transaction signing and sending, where TransactionResponse is either { success: true, txId: string } or { success: false, errorMessage: string } ​ Popular Wallet Solutions You can integrate Crossmint with popular Web3 solutions: ​ RainbowKit Copy Ask AI import { useConnectModal } from \"@rainbow-me/rainbowkit\" ; // Similar implementation as above, but using RainbowKit's hooks ​ Web3Modal Copy Ask AI import { useWeb3Modal } from \"@web3modal/react\" ; // Similar implementation as above, but using Web3Modal's hooks ​ Best Practices Error Handling : Always return clear error messages in handleSignAndSendTransaction Chain Support : Be explicit about supported chains to avoid runtime errors User Experience : Show loading states during chain switches and transactions Wallet Connection : Ensure wallet is connected before showing checkout ​ Related Resources Payment Methods React Hooks Testing Tips Was this page helpful? Yes No Item Selection Specify Recipient Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 670
  },
  {
    "id": "https://docs.crossmint.com/payments/embedded/guides/hooks#chunk_0",
    "url": "https://docs.crossmint.com/payments/embedded/guides/hooks",
    "title": "React Hooks - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Customize React Hooks Documentation API Reference SDK Reference CLI Solution Guides Changelog Introduction About Crossmint Getting Started Using AI Assistants Platform Wallets Introduction Quickstarts ⚡ Guides Authentication Introduction Quickstart ⚡ Guides Tokenization (Minting) Introduction Integrate Checkout Introduction Integrate Plan Your Integration Hosted (pop-up) Embedded Overview Quickstarts ⚡ Integrate Customize UI Customization Localization React Hooks Upgrade to V3 Headless (API) Advanced Topics Setup Requirements useCrossmintCheckout Return Values Order Phases Complete Example Best Practices Migration from Previous Version Related Resources If you are using our previous version of embedded checkout, please refer to the old events guide ​ Setup Requirements The Crossmint hooks must be used within components wrapped by both CrossmintProvider and CrossmintCheckoutProvider : Copy Ask AI import { CrossmintProvider , CrossmintCheckoutProvider , useCrossmintCheckout } from \"@crossmint/client-sdk-react-ui\" ; function App () { return ( < CrossmintProvider apiKey = \"YOUR_API_KEY\" > < CrossmintCheckoutProvider > < YourCheckoutComponent /> </ CrossmintCheckoutProvider > </ CrossmintProvider > ); } ​ useCrossmintCheckout The useCrossmintCheckout hook provides access to the checkout state and allows you to build custom UI experiences. ​ Return Values Property Type Description order Order | undefined The current order object containing all order details orderClientSecret string | undefined The client secret for the current order ​ Order Phases The order can be in one of the following phases: quote - Initial phase where price quotes are being generated payment - Payment is being processed delivery - NFTs are being delivered to the recipient completed - Order has been successfully completed For more information on the order lifecycle, see our Order Lifecycle guide. Here's how you can use the order data to track the purchase progress: Copy Ask AI function PurchaseStatus () { const { order } = useCrossmintCheckout (); // Create a custom notification based on the current phase const getMessage = () => { if ( ! order ) return \"Initializing...\" ; switch ( order . phase ) { case \"quote\" : return `Preparing order: ${ order . lineItems . length } items` ; case \"payment\" : return `Processing ${ order . payment . method } payment` ; case \"delivery\" : return \"Delivering NFTs to wallet...\" ; case \"completed\" : return \"Purchase successful!\" ; } }; return < div className = \"status-message\" > { getMessage () } </ div > ; } For more information on the order object, see our Order Properties section. ​ Complete Example Here’s a full example showing how to implement a custom checkout experience: Copy Ask AI import { CrossmintProvider , CrossmintCheckoutProvider , CrossmintEmbeddedCheckout , useCrossmintCheckout , } from \"@crossmint/client-sdk-react-ui\" ; function CheckoutPage () { return ( < CrossmintProvider apiKey = \"YOUR_API_KEY\" > < CrossmintCheckoutProvider > < div className = \"checkout-container\" > < CrossmintEmbeddedCheckout lineItems = { { collectionLocator: \"crossmint:your-collection-id\" , callData: { totalPrice: \"0.001\" , quantity: 1 , }, } } payment = { { crypto: { enabled: true }, fiat: { enabled: true }, } } /> < CheckoutStatus /> </ div > </ CrossmintCheckoutProvider > </ CrossmintProvider > ); } function CheckoutStatus () { const { order } = useCrossmintCheckout (); if ( ! order ) { return < div > Loading... </ div > ; } switch ( order . phase ) { case \"completed\" : return < div > Purchase complete! </ div > ; case \"delivery\" : return < div > Delivering your NFTs... </ div > ; case \"payment\" : return < div > Processing payment... </ div > ; case \"quote\" : return < div > Preparing your order... </ div > ; } } ​ Best Practices Provider Setup : Always ensure components using hooks are wrapped with both required providers Error Handling : Handle undefined states when accessing order properties Loading States : Provide appropriate loading UI while the order state is initializing Type Safety : Take advantage of TypeScript support for better development experience ​ Migration from Previous Version If you’re migrating from the previous version, note these key differences: The event system has been replaced with the useCrossmintCheckout hook Order status is now accessed through the hook instead of event listeners Custom UI is built using React components instead of event handlers Components must be wrapped with required providers The new hook-based approach provides a more React-friendly experience and better TypeScript support compared to the previous event system. ​ Related Resources UI Customization Payment Methods Order Lifecycle Testing Tips Was this page helpful? Yes No Localization Upgrade to V3 Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 754
  },
  {
    "id": "https://docs.crossmint.com/payments/embedded/guides/item-selection#chunk_0",
    "url": "https://docs.crossmint.com/payments/embedded/guides/item-selection",
    "title": "Item Selection - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Integrate Item Selection Documentation API Reference SDK Reference CLI Solution Guides Changelog Introduction About Crossmint Getting Started Using AI Assistants Platform Wallets Introduction Quickstarts ⚡ Guides Authentication Introduction Quickstart ⚡ Guides Tokenization (Minting) Introduction Integrate Checkout Introduction Integrate Plan Your Integration Hosted (pop-up) Embedded Overview Quickstarts ⚡ Integrate Payment Methods Production Launch Apple Pay Integration Guide Item Selection Custom Payer Specify Recipient Customize Upgrade to V3 Headless (API) Advanced Topics Supported Item Types Item Locator Formats Item Selection Examples Multiple Item Orders Accessing Item Data in React Components The Embedded Checkout allows you to specify which items your users can purchase using the lineItems property. This guide explains how to configure item selection for different asset types. ​ Supported Item Types Crossmint supports purchasing various types of digital and physical assets: Digital Assets Non-Fungible Tokens (NFTs) Semi-Fungible Tokens (SFTs) Fungible Tokens (FTs) including USDC (onramp) and memecoins Physical Products Amazon products Shopify products Flights: Closed alpha. Contact us if you are interested to try it out Coming Soon: Hotels, food delivery, and more All items available for purchase must comply with Crossmint's terms of service and legal requirements. Non-Fungible Collections and Fungible tokens must be reviewed and approved by Crossmint before being available in production. ​ Item Locator Formats You'll use one of these locator formats in your lineItems : Digital Assets - New Tokens Digital Assets - Existing Tokens Physical Products collectionLocator - For minting new tokens: crossmint:<_YOUR_COLLECTION_ID_> - For collections created in Crossmint Console (e.g. crossmint:9c82ef99-617f-497d-9abb-fd355291681b ) crossmint:<_YOUR_COLLECTION_ID_>:<_TEMPLATE_ID_> - For collections created in Crossmint Console where a specific NFT template is desired (e.g. crossmint:9c82ef99-617f-497d-9abb-fd355291681b:silver-pass ) <blockchain>:<contract-address> - Using direct contract addresses for external collections registered in Crossmint Console (e.g. ethereum:0x71c7656ec7ab88b098defb751b7401b5f6d897). ​ Item Selection Examples collectionLocator collectionLocator - imported contract tokenLocator - EVM tokenLocator - Solana productLocator Copy Ask AI < CrossmintProvider apiKey = \"_YOUR_CLIENT_API_KEY_\" > < CrossmintEmbeddedCheckout lineItems = { { collectionLocator: \"crossmint:_YOUR_COLLECTION_ID_\" , // Crossmint managed collection // collectionLocator: \"crossmint:_YOUR_COLLECTION_ID_:_TEMPLATE_ID_\", // With specific template callData: { totalPrice: \"5.00\" , quantity: 1 , // matches your contract's parameter name }, } } /> </ CrossmintProvider > For external EVM contracts registered in Crossmint Console, ensure the attribute name in callData matches the parameter name in your mint function. For example: If your mint function has the signature: mintTo(address _to, uint256 _amount) then use _amount instead of quantity . See our Register External Collection guide for details on registering your contract. The buyerCreatorRoyaltyPercent parameter controls how much of the creator royalty percentage the buyer pays when purchasing Solana NFTs through marketplaces. Marketplace Requirements: Magic Eden : Required parameter Tensor : Optional (defaults to NFT's on-chain royalty percentage) Hadeswap : Optional (defaults to 100%) Parameter Details: Range : Must be between 0 and 100 (inclusive) Impact : Always affects final price calculation by applying royalty fees Validation : Throws error if outside valid range Automatic 100% Enforcement: The system automatically overrides this parameter to 100% when: Compressed NFTs : Detected when getAssetProof() returns valid proof data Royalty-enforced NFTs : Detected when NFT has MIP1 or Cardinal Token Manager protection ​ Multiple Item Orders You can enable users to purchase multiple items in a single transaction by providing an array of line items: collectionLocator tokenLocator productLocator Copy Ask AI lineItems = { [ { // First item - Managed collection collectionLocator: \"crossmint:_YOUR_COLLECTION_ID_\" , callData: { totalPrice: \"5.00\" , quantity: 1 } }, { // Second item - Managed collection with template collectionLocator: \"crossmint:_YOUR_COLLECTION_ID_:_TEMPLATE_ID_\" , callData: { totalPrice: \"10.00\" , quantity: 2 } }, { // Third item - External collection collectionLocator: \"ethereum:0x71c7656ec7ab88b098defb751b7401b5f6d897\" , callData: { totalPrice: \"15.00\" , quantity: 1 } } ]} Multiple Item Limitations: Maximum limit of 15 items per order collectionLocator & tokenLocator : All items must be on the same blockchain productLocator : Multiple items only supported in Headless Checkout (not Hosted or Embedded Checkout) productLocator : All items must be from the same ecommerce platform (e.g., all Amazon or all Shopify, but not mixed) ​ Accessing Item Data in React Components When using Embedded Checkout, you can access the current order’s item data using the useCrossmintCheckout hook: Copy Ask AI import { useCrossmintCheckout } from \"@crossmint/client-sdk-react-ui\" ; function YourComponent () { const { order } = useCrossmintCheckout (); // Access line items data const lineItems = order ?. lineItems || []; return ( < div > { lineItems . map (( item , index ) => ( < div key = { index } > < h3 > { item . metadata ?. name } </ h3 > < p > Price: { item . quote ?. totalPrice ?. amount } { item . quote ?. totalPrice ?. currency } </ p > </ div > )) } </ div > ); } The useCrossmintCheckout hook must be used within components wrapped by both CrossmintProvider and CrossmintCheckoutProvider . Was this page helpful? Yes No Apple Pay Integration Guide Custom Payer Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 835
  },
  {
    "id": "https://docs.crossmint.com/payments/embedded/guides/payment-methods#chunk_0",
    "url": "https://docs.crossmint.com/payments/embedded/guides/payment-methods",
    "title": "Payment Methods - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Integrate Payment Methods Documentation API Reference SDK Reference CLI Solution Guides Changelog Introduction About Crossmint Getting Started Using AI Assistants Platform Wallets Introduction Quickstarts ⚡ Guides Authentication Introduction Quickstart ⚡ Guides Tokenization (Minting) Introduction Integrate Checkout Introduction Integrate Plan Your Integration Hosted (pop-up) Embedded Overview Quickstarts ⚡ Integrate Payment Methods Production Launch Apple Pay Integration Guide Item Selection Custom Payer Specify Recipient Customize Upgrade to V3 Headless (API) Advanced Topics Overview Quick Integration Fiat Payments Credit Cards & Digital Wallets Crypto Payments Native Wallet Support Cross-Chain Support Customizing the Default Experience Test Price Limits and Test Credit Cards Best Practices Related Resources If you are using our previous version of embedded checkout, please refer to the old crypto payments guide ​ Overview Crossmint’s Embedded Checkout makes it easy to accept multiple payment methods. Users can pay: With credit/debit cards Using Apple Pay or Google Pay Using ETH, SOL, USDC, EURC, or other supported tokens Using cross-chain crypto on supported chains ​ Quick Integration Enable all payment methods with just a few lines of code: Copy Ask AI < CrossmintEmbeddedCheckout lineItems = { { collectionLocator: `crossmint: ${ collectionId } ` , callData: { totalPrice: \"0.001\" , quantity: 1 , }, } } payment = { { crypto: { enabled: true , // Enable crypto payments }, fiat: { enabled: true , // Enable fiat payments }, } } /> ​ Fiat Payments ​ Credit Cards & Digital Wallets Embedded Checkout provides a seamless fiat payment experience supporting: All major credit and debit cards Apple Pay for iOS/Safari users Google Pay for Android/Chrome users You can configure which fiat payment methods to enable: Copy Ask AI payment = {{ fiat : { enabled : true , // By default, all payment methods are enabled if you don't specify any. allowedMethods : { card : true , // Enable/disable credit cards applePay : true , // Enable/disable Apple Pay googlePay : true , // Enable/disable Google Pay }, defaultCurrency : \"usd\" // Set default currency } }} ​ Crypto Payments ​ Native Wallet Support Embedded Checkout works with any Web3 wallet, including: MetaMask Coinbase Wallet WalletConnect Phantom Users can pay with ETH, SOL, stablecoins (USDC, EURC), or other supported tokens on their preferred chain. Enable crypto payments with: Copy Ask AI payment = {{ crypto : { enabled : true , defaultChain : \"ethereum\" , // Optional: Set default blockchain defaultCurrency : \"usdc\" // Optional: Set default currency (usdc, eurc, eth) } }} ​ Cross-Chain Support The checkout supports paying with funds from any supported blockchain, even if the digital asset is on a different chain. For example, a user could pay for a digital asset on Polygon using ETH from their Ethereum wallet. The checkout handles all necessary conversions automatically. ​ Customizing the Default Experience Set a default payment method to guide users: Copy Ask AI payment = {{ defaultMethod : \"fiat\" , // or \"crypto\" crypto : { enabled : true }, fiat : { enabled : true } }} ​ Test Price Limits and Test Credit Cards When building your applications using the staging environment, you can use various test credit cards numbers to see the entire process end-to-end, without actually having to transact using a real credit card. Check out the Testing Tips page for more info on price limits and test card numbers . ​ Best Practices Enable Multiple Payment Methods: Offer both fiat and crypto options to maximize conversion Set Default Currency: Choose a default that matches your target market Test All Flows: Use test cards and test wallets to verify the complete payment experience Handle Events: Use the useCrossmintCheckout hook to track payment status and handle completion ​ Related Resources Price Limits Test Credit Card Numbers Order Lifecycle Customizing Appearance React Hooks Was this page helpful? Yes No Crossmint Checkout React Native SDK Quickstart Production Launch Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 661
  },
  {
    "id": "https://docs.crossmint.com/payments/embedded/guides/production-launch#chunk_0",
    "url": "https://docs.crossmint.com/payments/embedded/guides/production-launch",
    "title": "Production Launch - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Integrate Production Launch Documentation API Reference SDK Reference CLI Solution Guides Changelog Introduction About Crossmint Getting Started Using AI Assistants Platform Wallets Introduction Quickstarts ⚡ Guides Authentication Introduction Quickstart ⚡ Guides Tokenization (Minting) Introduction Integrate Checkout Introduction Integrate Plan Your Integration Hosted (pop-up) Embedded Overview Quickstarts ⚡ Integrate Payment Methods Production Launch Apple Pay Integration Guide Item Selection Custom Payer Specify Recipient Customize Upgrade to V3 Headless (API) Advanced Topics From Staging to Production with Embedded Checkout General Launch Checklist Launch Checklist ​ From Staging to Production with Embedded Checkout Embedded checkout in production requires enablement by the Customer Success Engineering team. Contact Crossmint’s team to get access. Crossmint provides two developer environments : staging and production. It's recommended to test end-to-end on staging before moving to production. ​ General Launch Checklist Complete the following general steps on each tab to launch your checkout in production: Verify your Account Verify your Collection Limits ​ Account Verification To launch in production, you must verify your project account in the production console . Additionally, if as a seller you choose to accept credit card payments, you are required to complete a simple KYC which takes 2 minutes on average to complete. You only have to verify a project once, and can create as many collections as you wish within that project. New projects require additional verification. For full details on the project and collection verification process, requirements, and troubleshooting, please read our account verification documentation . ​ Launch Checklist Change your API keys to the production versions. Ensure your production API key has the appropriate scopes enabled, such as orders.create . Update your collection ID to the production one. As needed, change your passed-in props to be production ready (e.g. make email , payment , lineItems programmatically filled). See Code Example Production Staging Copy Ask AI < CrossmintProvider apiKey = \"YOUR_PROD_API_KEY\" > < CrossmintEmbeddedCheckout lineItems = { { collectionLocator: \"crossmint:YOUR_PROD_COLLECTION_ID\" , callData: { totalPrice: \"0.25\" , quantity: 1 , }, } } payment = { { crypto: { enabled: true }, fiat: { enabled: true }, } } recipient = { { email: \"steve@gmail.com\" , } } /> </ CrossmintProvider > Was this page helpful? Yes No Payment Methods Apple Pay Integration Guide Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 392
  },
  {
    "id": "https://docs.crossmint.com/payments/embedded/guides/specify-recipient#chunk_0",
    "url": "https://docs.crossmint.com/payments/embedded/guides/specify-recipient",
    "title": "Specify Recipient - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Integrate Specify Recipient Documentation API Reference SDK Reference CLI Solution Guides Changelog Introduction About Crossmint Getting Started Using AI Assistants Platform Wallets Introduction Quickstarts ⚡ Guides Authentication Introduction Quickstart ⚡ Guides Tokenization (Minting) Introduction Integrate Checkout Introduction Integrate Plan Your Integration Hosted (pop-up) Embedded Overview Quickstarts ⚡ Integrate Payment Methods Production Launch Apple Pay Integration Guide Item Selection Custom Payer Specify Recipient Customize Upgrade to V3 Headless (API) Advanced Topics Digital Products Physical Products Specifying the Recipient Recipient by Email Recipient by Wallet Address Physical Product Recipients You can deliver items to three kinds of recipients when using Crossmint: ​ Digital Products For digital items (NFTs, tokens, etc.), you can specify one of the following recipient types: Email address : Crossmint automatically generates a secure MPC-backed custodial wallet for the user's email and delivers the item inside that new wallet. Email addresses are case-insensitive. Wallet address : Directly specify a blockchain wallet address. Receipt will be delivered to the email address specified in payment.receiptEmail . This could be a user-owned wallet (e.g., MetaMask, Phantom, etc.) or a wallet you manage. The format depends on the blockchain: - Ethereum/EVM chains : 0x1234567890abcdef1234567890abcdef12345678 - Solana : 5FHneW46xGXgs5mUiveU4sbTyGBzmstUspZC92UhjJM694ty - Other chains : Contact support for format requirements ​ Physical Products For physical items, you must provide: Email address : Required for receipt delivery (legal requirement) Physical address : Required shipping information including name, address, city, state, postal code, and country ​ Specifying the Recipient For Embedded Checkout, you specify the recipient by adding a recipient object to your checkout component. The recipient can be specified by email, wallet address, or physical address for physical products. ​ Recipient by Email When specifying a recipient by email, Crossmint will automatically create a secure custodial wallet on the fly for that email address: React Copy Ask AI < CrossmintProvider apiKey = \"YOUR_API_KEY\" > < CrossmintEmbeddedCheckout recipient = { { email: \"user@example.com\" , // Email address of the recipient } } // other properties removed for brevity /> </ CrossmintProvider > The recipient will be able to access their purchased items by logging into their Crossmint wallet in staging or mainnet . ​ Recipient by Wallet Address To deliver items directly to a specific blockchain wallet address: React Copy Ask AI < CrossmintProvider apiKey = \"YOUR_API_KEY\" > < CrossmintEmbeddedCheckout recipient = { { walletAddress: \"0x1234567890abcdef1234567890abcdef12345678\" , // For EVM chains // walletAddress: \"5FHneW46xGXgs5mUiveU4sbTyGBzmstUspZC92UhjJM694ty\" // For Solana } } // other properties removed for brevity /> </ CrossmintProvider > ​ Physical Product Recipients Physical Address Format Extend the recipient object with the physicalAddress object. These are the properties (note the required vs optional fields): JSON Format JSX Format Copy Ask AI { \"recipient\" : { \"email\" : \"user@example.com\" , \"physicalAddress\" : { \"name\" : \"John Doe\" , // required - Full name of the recipient \"line1\" : \"123 Main St\" , // required - Street address, P.O. box, company name, c/o \"line2\" : \"Apt 4B\" , // optional - Apartment, suite, unit, building, floor, etc. \"city\" : \"San Francisco\" , // required - City, district, suburb, town, or village \"state\" : \"CA\" , // required for US addresses - State, county, province, or region \"postalCode\" : \"94105\" , // required - ZIP or postal code \"country\" : \"US\" // required - Two-letter country code (ISO 3166-1 alpha-2) } } } Note: You must include the email address of the recipient in the recipient object so an email receipt can be sent to the customer (this is a legal requirement for physical product deliveries). Currently, only US addresses are supported for physical product deliveries. When purchasing physical products, you can specify a physical address for delivery: React Copy Ask AI < CrossmintProvider apiKey = \"YOUR_API_KEY\" > < CrossmintEmbeddedCheckout recipient = { { email: \"user@example.com\" , physicalAddress: { name: \"John Doe\" , line1: \"123 Main St\" , line2: \"Apt 4B\" , // optional city: \"San Francisco\" , state: \"CA\" , postalCode: \"94105\" , country: \"US\" , }, } } // other properties removed for brevity /> </ CrossmintProvider > Was this page helpful? Yes No Custom Payer UI Customization Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 700
  },
  {
    "id": "https://docs.crossmint.com/payments/embedded/guides/ui-customization#chunk_0",
    "url": "https://docs.crossmint.com/payments/embedded/guides/ui-customization",
    "title": "UI Customization - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Customize UI Customization Documentation API Reference SDK Reference CLI Solution Guides Changelog Introduction About Crossmint Getting Started Using AI Assistants Platform Wallets Introduction Quickstarts ⚡ Guides Authentication Introduction Quickstart ⚡ Guides Tokenization (Minting) Introduction Integrate Checkout Introduction Integrate Plan Your Integration Hosted (pop-up) Embedded Overview Quickstarts ⚡ Integrate Customize UI Customization Localization React Hooks Upgrade to V3 Headless (API) Advanced Topics Quick Start Customization Options Background Customization Solid Background Colors Custom Fonts Global Variables Component Rules Common Examples Modern Dark Theme Minimal Light Theme Related Resources If you are using our previous version of embedded checkout, please refer to the old UI customization guide ​ Quick Start The checkout UI can be customized using the appearance prop: Copy Ask AI < CrossmintEmbeddedCheckout appearance = { { fonts: [{ cssSrc: \"https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600&display=swap\" }], variables: { fontFamily: \"Inter, system-ui, sans-serif\" , colors: { backgroundPrimary: \"#ffffff\" , textPrimary: \"#000000\" , accent: \"#0074D9\" , }, }, } } /> ​ Customization Options ​ Background Customization The embedded checkout component has a transparent background by default. The backgroundPrimary color in the appearance configuration only affects internal components (inputs, cards, etc.) within the iframe, not the iframe body itself. To customize the overall background, wrap the component in a div with your desired background styling: ​ Solid Background Colors Copy Ask AI { /* Tailwind CSS */ } < div className = \"bg-gray-900\" > < CrossmintEmbeddedCheckout { ... props } /> </ div > ; { /* Custom CSS */ } < div style = { { backgroundColor: \"#1a1a1a\" } } > < CrossmintEmbeddedCheckout { ... props } /> </ div > ; Remember that the backgroundPrimary color in your appearance configuration should complement your wrapper background for the best visual result. ​ Custom Fonts Load custom fonts using the fonts array: Copy Ask AI appearance = {{ fonts : [ { cssSrc: \"https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600&display=swap\" }, { cssSrc: \"https://fonts.googleapis.com/css2?family=Roboto:wght@400;500;700&display=swap\" } ] }} ​ Global Variables Control the overall look and feel with these global variables: Copy Ask AI appearance = {{ variables : { // Typography fontFamily : \"Inter, system-ui, sans-serif\" , fontSizeUnit : \"16px\" , // Spacing spacingUnit : \"1rem\" , borderRadius : \"8px\" , // Colors colors : { borderPrimary : \"#E0E0E0\" , backgroundPrimary : \"#FFFFFF\" , textPrimary : \"#000000\" , textSecondary : \"#666666\" , danger : \"#FF0000\" , warning : \"#FFA500\" , accent : \"#0074D9\" } } }} ​ Component Rules Input Visibility Control the visibility of specific inputs: Copy Ask AI appearance = {{ rules : { DestinationInput : { display : \"hidden\" // Hides the wallet address input }, ReceiptEmailInput : { display : \"hidden\" // Hides the email input } } }} When hiding inputs, make sure to provide the corresponding values via props: For hidden DestinationInput , provide recipient.walletAddress For hidden ReceiptEmailInput , provide payment.receiptEmail Labels Customize label styling: Copy Ask AI appearance = {{ rules : { Label : { font : { family : \"Inter\" , size : \"14px\" , weight : \"500\" , }, colors : { text : \"#333333\" , }, }, }, }} Input Fields Style input fields: Copy Ask AI appearance = {{ rules : { Input : { borderRadius : \"8px\" , font : { family : \"Inter\" , size : \"16px\" , weight : \"400\" , }, colors : { text : \"#000000\" , background : \"#FFFFFF\" , border : \"#E0E0E0\" , boxShadow : \"none\" , placeholder : \"#999999\" , }, hover : { colors : { border : \"#0074D9\" , }, }, focus : { colors : { border : \"#0074D9\" , boxShadow : \"0 0 0 2px rgba(0,116,217,0.2)\" , }, }, }, }, }} Tabs Customize tab appearance: Copy Ask AI appearance = {{ rules : { Tab : { borderRadius : \"4px\" , font : { family : \"Inter\" , size : \"14px\" , weight : \"500\" , }, colors : { text : \"#666666\" , background : \"transparent\" , }, selected : { colors : { text : \"#000000\" , background : \"#F5F5F5\" , }, }, hover : { colors : { background : \"#F0F0F0\" , }, }, }, }, }} Primary Buttons Style primary buttons: Copy Ask AI appearance = {{ rules : { PrimaryButton : { borderRadius : \"8px\" , font : { family : \"Inter\" , size : \"16px\" , weight : \"600\" }, colors : { text : \"#FFFFFF\" , background : \"#0074D9\" }, hover : { colors : { background : \"#0063B8\" } }, disabled : { colors : { text : \"#FFFFFF\" , background : \"#CCCCCC\" } } } } }} ​ Common Examples ​ Modern Dark Theme Copy Ask AI appearance = {{ variables : { fontFamily : \"Inter, system-ui, sans-serif\" , colors : { backgroundPrimary : \"#1A1A1A\" , textPrimary : \"#FFFFFF\" , textSecondary : \"#A0A0A0\" , borderPrimary : \"#333333\" , accent : \"#7928CA\" } }, rules : { Input : { colors : { background : \"#2D2D2D\" , border : \"#404040\" , text : \"#FFFFFF\" , placeholder : \"#666666\" } }, PrimaryButton : { colors : { background : \"#7928CA\" , text : \"#FFFFFF\" }, hover : { colors : { background : \"#6B24B2\" } } } } }} ​ Minimal Light Theme Copy Ask AI appearance = {{ variables : { fontFamily : \"system-ui, sans-serif\" , borderRadius : \"4px\" , colors : { backgroundPrimary : \"#FFFFFF\" , textPrimary : \"#000000\" , borderPrimary : \"#E0E0E0\" , accent : \"#000000\" } }, rules : { Input : { borderRadius : \"4px\" , colors : { background : \"#F5F5F5\" , border : \"transparent\" }, focus : { colors : { border : \"#000000\" , boxShadow : \"none\" } } }, PrimaryButton : { borderRadius : \"4px\" , colors : { background : \"#000000\" , text : \"#FFFFFF\" } } } }} ​ Related Resources Payment Methods React Hooks Order Lifecycle Testing Tips Was this page helpful? Yes No Specify Recipient Localization Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 999
  },
  {
    "id": "https://docs.crossmint.com/payments/embedded/overview#chunk_0",
    "url": "https://docs.crossmint.com/payments/embedded/overview",
    "title": "Embedded Digital Asset Checkout",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Embedded Overview Documentation API Reference SDK Reference CLI Solution Guides Changelog Introduction About Crossmint Getting Started Using AI Assistants Platform Wallets Introduction Quickstarts ⚡ Guides Authentication Introduction Quickstart ⚡ Guides Tokenization (Minting) Introduction Integrate Checkout Introduction Integrate Plan Your Integration Hosted (pop-up) Embedded Overview Quickstarts ⚡ Integrate Customize Upgrade to V3 Headless (API) Advanced Topics When is the Embedded Checkout the best fit? Get Started Advanced Topics For an overview of our checkout solution, please refer to the introduction . This guide specifically covers embedded checkout features. Sample embedded checkout See the embedded checkout in action on the Crossmint Playground . ​ When is the Embedded Checkout the best fit? You want to insert the checkout into your site You want high level of control over the UI/UX ​ Get Started Quickstart Start selling digital assets in 5 minutes. Talk to an expert Contact our sales team for advanced support. ​ Advanced Topics Marketplaces & Launchpads SDK Reference Purchasing Multiple Assets Bring your own Collection USDC Contracts Checkout Localization Webhooks Accesslists Was this page helpful? Yes No Localization Pay with Card - NFTs Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 204
  },
  {
    "id": "https://docs.crossmint.com/payments/embedded/quickstarts/credit-card-memecoin#chunk_0",
    "url": "https://docs.crossmint.com/payments/embedded/quickstarts/credit-card-memecoin",
    "title": "How to Accept Card Payments for Memecoins | Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Quickstarts ⚡ Pay with Card - Memecoins Documentation API Reference SDK Reference CLI Solution Guides Changelog Introduction About Crossmint Getting Started Using AI Assistants Platform Wallets Introduction Quickstarts ⚡ Guides Authentication Introduction Quickstart ⚡ Guides Tokenization (Minting) Introduction Integrate Checkout Introduction Integrate Plan Your Integration Hosted (pop-up) Embedded Overview Quickstarts ⚡ Pay with Card - NFTs Pay with Card - Memecoins Crossmint Checkout React Native SDK Quickstart Integrate Customize Upgrade to V3 Headless (API) Advanced Topics Introduction Important Notes Prerequisites Fungible Token Specification Embedded Memecoin Checkout Important Parameters Integration Steps Set up the Project Memecoin Embedded Integration Understanding the Code Next Steps Order Lifecycle FAQ Enterprise feature. Contact us for access. ​ Introduction This guide will show you how to accept credit card payments using Crossmint’s Embedded Checkout for memecoin sales. You’ll learn how to: Set up credit card payments for Solana memecoin purchases in JavaScript Implement an embedded checkout UI using Crossmint’s React components Track order status and delivery ​ Important Notes Compliance Checks Crossmint runs compliance checks on all tokens to ensure they do not qualify as securities or currencies under applicable regulations. Transactions for tokens that are determined to be too similar to securities or currencies will fail. Supported Tokens Currently, memecoin checkout only supports Solana network. You can check which tokens are supported by using the fungibleCheckoutAvailable endpoint . A more in depth guide on token support is here . Delivery to External Wallets Only Memecoin checkout only delivers memecoins to EOAs (Externally Owned Accounts), not Crossmint supported delivery solutions, such as on-the-fly wallet creation (both Crossmint custodial wallets and smart wallet), delivery to Twitter handle, etc. Merchant of Record Crossmint remains the merchant of record for all transactions. Your buyers will still receive delivery receipts and transaction confirmations from Crossmint. ​ Prerequisites 1 Solana Wallet Have a Solana wallet address ready to receive purchased memecoins 2 Get API Keys Get your API keys from the Crossmint Console Client-side Server-side (Headless Checkout Only) Navigate to the \"Integrate\" section on the left navigation bar, and ensure you're on the \"API Keys\" tab. Within the Client-side keys section, click the \"Create new key\" button in the top right. On the authorized origins section, enter http://localhost:3000 and click \"Add origin\". Next, check the scopes labeled orders.create , orders.read , orders.update . Finally, create your key and save it for subsequent steps. ​ Fungible Token Specification To define which fungible token you'd like to purchase, you'll need to specify the tokenLocator in the format: For Solana : solana:${tokenMintHash} Example: solana:6p6xgHyF7AeE6TZkSmFsko444wqoP15icUSqi2jfGiPN tokenMintHash : The token mint hash (commonly known as contract address, CA, or mint hash) For EVM chains (Ethereum, Polygon, Arbitrum, Base, etc.): <blockchain>:<contractAddress>:<tokenId> Example: ethereum:0x1234567890123456789012345678901234567890:1 blockchain : The chain name (ethereum, polygon, arbitrum, base, etc.) contractAddress : The token contract address (40 hexadecimal characters) tokenId : For fungible tokens, use \"1\" as a placeholder value (required by validation schema) EVM Fungible Token Format : While fungible tokens don't conceptually have individual token IDs, Crossmint's validation schema requires the 3-part format <blockchain>:<contractAddress>:<tokenId> for all EVM tokens. For fungible tokens (memecoins), use \"1\" as the tokenId value. ​ Embedded Memecoin Checkout The fastest way to start selling memecoins is to use our embedded checkout solution adapted for fungible tokens. ​ Important Parameters Before implementing the checkout, note these key parameters: receiptEmail : Required for delivering payment receipts executionParameters.mode : Set to “exact-in” for memecoin purchases (specifies exact USD amount to spend). “exact-out” is for NFTs, while “exact-in” is for fungible tokens. maxSlippageBps : Optional slippage tolerance (default is typically 500 BPS or 5% if not specified) Memecoins are testable in staging using the xmeme token on Solana devnet ( 7EivYFyNfgGj8xbUymR7J4LuxUHLKRzpLaERHLvi7Dgu ). For production launch with live memecoin tokens, contact our sales team . ​ Integration Steps This guide will start from scratch with an empty Next.js application. You'll install the required @crossmint/client-sdk-react-ui dependency and add the embedded checkout component. To get started: ​ Set up the Project 1 Create a new Next.js application Copy Ask AI npx create-next-app@latest If you see this message, type y and press Enter to proceed: Copy Ask AI Need to install the following packages: create-next-app@latest Ok to proceed? (y) 2 Name your app `crossmint-embedded-checkout-demo` and accept the default options Copy Ask AI What is your project named? crossmint-embedded-checkout-demo Would you like to use TypeScript? Yes Would you like to use ESLint? Yes Would you like to use Tailwind CSS? Yes Would you like to use ` src/ ` directory? No Would you like to use App Router? (recommended) Yes Would you like to customize the default import alias? No 3 Change into the directory created in previous steps Copy Ask AI cd crossmint-embedded-checkout-demo 4 Install @crossmint/client-sdk-react-ui npm yarn pnpm bun Copy Ask AI npm i @crossmint/client-sdk-react-ui 5 Open the project in your preferred code editor ​ Memecoin Embedded Integration Next, we will set up a project file with Crossmint’s embedded checkout to accept memecoin purchases. 1 Add environment variables Create .env.local in your project root: Copy Ask AI NEXT_PUBLIC_CLIENT_API_KEY = \"_YOUR_CLIENT_API_KEY_\" # From API Keys page NEXT_PUBLIC_TOKEN_ADDRESS = \"7EivYFyNfgGj8xbUymR7J4LuxUHLKRzpLaERHLvi7Dgu\" # xmeme token for staging testing NEXT_PUBLIC_RECIPIENT_WALLET_ADDRESS = \"YOUR_SOLANA_WALLET_ADDRESS\" # Add desired recipient wallet NEXT_PUBLIC_RECEIPT_EMAIL = \"YOUR_EMAIL\" # Add desired recipient email 2 Create the checkout page Create /src/app/page.tsx with: Copy Ask AI \"use client\" ; import { CrossmintProvider , CrossmintEmbeddedCheckout } from \"@crossmint/client-sdk-react-ui\" ; export default function Home () { const clientApiKey = process . env . NEXT_PUBLIC_CLIENT_API_KEY as string ; const tokenAddress = process . env . NEXT_PUBLIC_TOKEN_ADDRESS as string ; const recipientWalletAddress = process . env . NEXT_PUBLIC_RECIPIENT_WALLET_ADDRESS as string ; return ( < div className = \"flex flex-col items-center justify-start h-screen p-6 bg-white\" > < CrossmintProvider apiKey = { clientApiKey } > < div className = \"max-w-[450px] w-full\" > < CrossmintEmbeddedCheckout recipient = { { walletAddress: recipientWalletAddress , // Wallet address to receive the memecoins } } lineItems = { { tokenLocator: `solana: ${ tokenAddress } ` , // Token address in",
    "chunk_index": 0,
    "word_count": 1000
  },
  {
    "id": "https://docs.crossmint.com/payments/embedded/quickstarts/credit-card-memecoin#chunk_0",
    "url": "https://docs.crossmint.com/payments/embedded/quickstarts/credit-card-memecoin",
    "title": "How to Accept Card Payments for Memecoins | Crossmint Docs",
    "content": "default function Home () { const clientApiKey = process . env . NEXT_PUBLIC_CLIENT_API_KEY as string ; const tokenAddress = process . env . NEXT_PUBLIC_TOKEN_ADDRESS as string ; const recipientWalletAddress = process . env . NEXT_PUBLIC_RECIPIENT_WALLET_ADDRESS as string ; return ( < div className = \"flex flex-col items-center justify-start h-screen p-6 bg-white\" > < CrossmintProvider apiKey = { clientApiKey } > < div className = \"max-w-[450px] w-full\" > < CrossmintEmbeddedCheckout recipient = { { walletAddress: recipientWalletAddress , // Wallet address to receive the memecoins } } lineItems = { { tokenLocator: `solana: ${ tokenAddress } ` , // Token address in format solana:tokenAddress (e.g., solana:7EivYFyNfgGj8xbUymR7J4LuxUHLKRzpLaERHLvi7Dgu for xmeme token) executionParameters: { mode: \"exact-in\" , // The execution method for the order. It tells Crossmint to operate in buying fungibles mode amount: \"5\" , // Amount in USD maxSlippageBps: \"500\" // Optional - default slippage will be applied if not specified } } } payment = { { receiptEmail: process . env . NEXT_PUBLIC_RECEIPT_EMAIL as string , // Email address to receive the receipt crypto: { enabled: false , // Only fiat is supported for memecoin purchases }, fiat: { enabled: true , }, defaultMethod: \"fiat\" , } } /> </ div > </ CrossmintProvider > </ div > ); } For more details on tokenLocator formatting and other item selection options, see our embedded item selection guide . 3 Run your app npm yarn pnpm Copy Ask AI npm run dev Visit http://localhost:3000 to see your checkout! 4 Test your app Test purchases in staging using test credit cards, like 4242424242424242 (Visa). More information on testing can be found here . For production launch with live memecoin tokens, contact our sales team . Here’s how your embedded checkout will look after implementation: Note the quote expiration timer above the checkout button. 🎉 Congratulations! You’ve successfully set up your embedded memecoin checkout. Check out the Next Steps section below to learn how to customize your integration. ​ Understanding the Code Quote Expiration Price quotes are valid for 30 seconds. After expiration, you'll need to request a new quote from the embedded checkout component Slippage Crossmint applies the slippage specified in your executionParameters.maxSlippageBps . If not provided, Crossmint will use the default slippage configuration (typically 500 BPS or 5%) from Crossmint's provider ​ Next Steps Customize UI Learn how to customize the embedded checkout experience Handle Webhooks Implement webhook handling for order updates ​ Order Lifecycle The order goes through several phases: Learn more about order phases in the headless checkout guide or embedded checkout guide A summary of the phases is below: Quote Phase (30-second validity) Initial price quote generated Requires recipient information to proceed Payment Phase Collect payment information (via Crossmint's embedded UI, or your own Checkout.com Flow component if using headless checkout) Process credit card payment Handle payment completion and errors Delivery Phase Purchase memecoin with USDC Apply specified slippage tolerance Send transfer transaction to recipient wallet Completion Order marked as completed Receipt email sent to recipient Memecoins have been delivered to the recipient wallet If the quote expires (after 30 seconds), the embedded checkout will automatically refresh the quote. You can customize this behavior using the checkout hooks. ​ FAQ Is there a UI Crossmint provides? Yes, you can use our embedded checkout or hosted checkout options. Contact our sales team to learn more about these solutions and find the best fit for your needs. Do I need to complete KYC to purchase memecoins? Crossmint KYC is currently disabled for memecoin purchases. This means that if your buyers typically have high risk profiles, their transaction may be declined. To increase conversion, please read the improving conversion guide. What happens if my transaction fails? When a user attempts a purchase, Crossmint puts a hold on their credit card. Only if the blockchain transaction succeeds, funds are captured. If the blockchain transaction fails, funds are released and the user is never charged. What are the transaction limits? The default transaction limit is 1,000 USD per user. A single wallet address is subject to a daily limit of 1,000 USD per user, the same as for NFT purchases. If you need a higher limit, speak to your Crossmint representative. Is there a limit on how much of a single token I can sell in a day? Yes, there is a volume limit of 1,000,000 USD worth of credit card purchases per day. This limit resets daily at 11:59 PM EST. What do the order creation parameters mean? The order creation request includes several important parameters: Payment Object method : Set to checkoutcom-flow for Checkout.com credit card payments currency : Set to usd for US Dollar payments receiptEmail : Required for credit card payments to deliver receipt Line Items Object tokenLocator : Specifies the memecoin token address in the format solana:tokenAddress executionParameters : mode : Set to \"exact-in\" for memecoin purchases (specifies exact USD amount to spend) amount : Amount to purchase in USD maxSlippageBps : Set to \"500\" for 5% slippage tolerance. If not provided, the default slippage will be applied from the available liquidity provider. Response Parameters The order response includes Checkout.com-specific parameters: checkoutcomPaymentSession : Contains the payment session information from Checkout.com id : The payment session ID payment_session_secret : The secret used to authenticate with Checkout.com payment_session_token : The token used to initialize the Checkout.com Flow component checkoutcomPublicKey : The public key used to initialize the Checkout.com Flow component Was this page helpful? Yes No Pay with Card - NFTs Crossmint Checkout React Native SDK Quickstart Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 925
  },
  {
    "id": "https://docs.crossmint.com/payments/embedded/quickstarts/credit-card-memecoin-react-native#chunk_0",
    "url": "https://docs.crossmint.com/payments/embedded/quickstarts/credit-card-memecoin-react-native",
    "title": "How to Accept Card Payments for Memecoins in React Native | Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Quickstarts ⚡ Crossmint Checkout React Native SDK Quickstart Documentation API Reference SDK Reference CLI Solution Guides Changelog Introduction About Crossmint Getting Started Using AI Assistants Platform Wallets Introduction Quickstarts ⚡ Guides Authentication Introduction Quickstart ⚡ Guides Tokenization (Minting) Introduction Integrate Checkout Introduction Integrate Plan Your Integration Hosted (pop-up) Embedded Overview Quickstarts ⚡ Pay with Card - NFTs Pay with Card - Memecoins Crossmint Checkout React Native SDK Quickstart Integrate Customize Upgrade to V3 Headless (API) Advanced Topics Crossmint Checkout React Native SDK Quickstart Following Expo Tutorial + Crossmint SDK Result Enterprise feature. Contact us for access. ​ Crossmint Checkout React Native SDK Quickstart For this quickstart we’ll be using Expo. You can follow this tutorial to create an expo app. Only do steps 1 and 3 , plus the Crossmint-specific steps below. Prerequisites: Before starting, ensure you have completed the Expo prerequisites including Node.js, Git, and your development environment setup. ​ Following Expo Tutorial + Crossmint SDK 1 Initialize a new Expo app Copy Ask AI npx create-expo-app@latest crossmint-checkout-quickstart cd crossmint-checkout-quickstart 2 Run reset-project script bash npm run reset-project 3 Install @crossmint/client-sdk-react-native-ui npm yarn pnpm bun Copy Ask AI npm i @crossmint/client-sdk-react-native-ui 4 Add your .env.local environment variables Copy Ask AI EXPO_PUBLIC_RECIPIENT_WALLET_ADDRESS = \"your_solana_wallet_address\" EXPO_PUBLIC_RECEIPT_EMAIL = \"your-email@example.com\" The receiptEmail field is required for delivering payment receipts to customers. 5 Replace index.tsx with Copy Ask AI import { CrossmintEmbeddedCheckout , CrossmintProvider } from \"@crossmint/client-sdk-react-native-ui\" ; export default function Index () { return ( < CrossmintProvider apiKey = { process . env . EXPO_PUBLIC_CLIENT_CROSSMINT_API_KEY ?? \"\" } > < CrossmintEmbeddedCheckout recipient = { { walletAddress: process . env . EXPO_PUBLIC_RECIPIENT_WALLET_ADDRESS ?? \"\" , } } payment = { { crypto: { enabled: false , }, fiat: { enabled: true , receiptEmail: process . env . EXPO_PUBLIC_RECEIPT_EMAIL ?? \"\" , }, } } lineItems = { { tokenLocator: \"solana:6p6xgHyF7AeE6TZkSmFsko444wqoP15icUSqi2jfGiPN\" , // TRUMP token example executionParameters: { mode: \"exact-in\" , // Specifies exact USD amount to spend (vs exact-out for NFTs) amount: \"1\" , // USD amount to spend maxSlippageBps: \"500\" , // Maximum slippage tolerance in basis points (500 = 5%, default if not specified) }, } } /> </ CrossmintProvider > ); } 6 Run your project npm yarn pnpm bun Copy Ask AI npm run ios # For Android: npm run android ​ Result Was this page helpful? Yes No Pay with Card - Memecoins Payment Methods Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 417
  },
  {
    "id": "https://docs.crossmint.com/payments/embedded/quickstarts/credit-card-nft#chunk_0",
    "url": "https://docs.crossmint.com/payments/embedded/quickstarts/credit-card-nft",
    "title": "Embed Crossmint's Checkout into a web app | Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Quickstarts ⚡ Pay with Card - NFTs Documentation API Reference SDK Reference CLI Solution Guides Changelog Introduction About Crossmint Getting Started Using AI Assistants Platform Wallets Introduction Quickstarts ⚡ Guides Authentication Introduction Quickstart ⚡ Guides Tokenization (Minting) Introduction Integrate Checkout Introduction Integrate Plan Your Integration Hosted (pop-up) Embedded Overview Quickstarts ⚡ Pay with Card - NFTs Pay with Card - Memecoins Crossmint Checkout React Native SDK Quickstart Integrate Customize Upgrade to V3 Headless (API) Advanced Topics Introduction From Crossmint Integration Steps Set up the Project Basic Integration Advanced Integration Testing Your Integration All Set! Next Steps Customize the UI and Behavior Further Advanced Topics You will build this demo If you are using our previous version of embedded checkout, please refer to the old quickstart guide ​ Introduction In this guide, you will create a web app with Next.js which allows customers to buy NFTs with credit card and crypto payments, using Crossmint’s embedded checkout. Crossmint also supports payments for crypto onramp , memecoins , and other onchain assets (ERC20 tokens, ERC721 tokens, and ERC1155 tokens). If you want to get started immediately, you can clone a repo with a functioning embedded checkout here: https://github.com/Crossmint/crossmint-embedded-demo . If you want to get started step by step, continue following the guide below. ​ From Crossmint Create a developer account in the Staging Console . Create a new collection or import yours into the console, and have your collectionId ready. Make sure you follow the maximum prices for collections set in staging outlined here . Create a client-side API key with the orders.create scope enabled. More info on creating API keys here . To integrate in production/mainnet, you'll also need to complete account and collection verification. More information in the production launch guide. For Marketplaces and Launchpads : You do not need to create a collection (skip Step 2). Simply use tokenLocator instead of collectionLocator in the examples. It is recommended to test tokenlocator in the production environment. See Marketplaces & Launchpads guide for more secondary-sale specific details. ​ Integration Steps This guide will start from scratch with an empty Next.js application. You'll install the required @crossmint/client-sdk-react-ui dependency and add the embedded checkout component. To get started: ​ Set up the Project 1 Create a new Next.js application Copy Ask AI npx create-next-app@latest If you see this message, type y and press Enter to proceed: Copy Ask AI Need to install the following packages: create-next-app@latest Ok to proceed? (y) 2 Name your app `crossmint-embedded-checkout-demo` and accept the default options Copy Ask AI What is your project named? crossmint-embedded-checkout-demo Would you like to use TypeScript? Yes Would you like to use ESLint? Yes Would you like to use Tailwind CSS? Yes Would you like to use ` src/ ` directory? No Would you like to use App Router? (recommended) Yes Would you like to customize the default import alias? No 3 Change into the directory created in previous steps Copy Ask AI cd crossmint-embedded-checkout-demo 4 Install @crossmint/client-sdk-react-ui npm yarn pnpm bun Copy Ask AI npm i @crossmint/client-sdk-react-ui 5 Open the project in your preferred code editor ​ Basic Integration Perfect for getting started quickly with a simple checkout flow. 1 Add environment variables Create .env.local in your project root: Copy Ask AI NEXT_PUBLIC_CLIENT_API_KEY = \"_YOUR_CLIENT_API_KEY_\" # From API Keys page NEXT_PUBLIC_COLLECTION_ID = \"_YOUR_COLLECTION_ID_\" # From Collection details page 2 Create the checkout page Create /src/app/page.tsx with: Copy Ask AI \"use client\" ; import { CrossmintProvider , CrossmintEmbeddedCheckout } from \"@crossmint/client-sdk-react-ui\" ; export default function Home () { const clientApiKey = process . env . NEXT_PUBLIC_CLIENT_API_KEY as string ; const collectionId = process . env . NEXT_PUBLIC_COLLECTION_ID as string ; return ( < div className = \"flex flex-col items-center justify-start h-screen p-6 bg-white\" > < CrossmintProvider apiKey = { clientApiKey } > < div className = \"max-w-[450px] w-full\" > < CrossmintEmbeddedCheckout lineItems = { { collectionLocator: `crossmint: ${ collectionId } ` , callData: { totalPrice: \"0.001\" , quantity: 1 , }, } } payment = { { crypto: { enabled: true }, fiat: { enabled: true }, } } /> </ div > </ CrossmintProvider > </ div > ); } 3 Run your app Navigate to the directory your package.json is to run the app Copy Ask AI cd embedded-checkout/crossmint-embedded-checkout-demo npm yarn pnpm Copy Ask AI npm run dev Visit http://localhost:3000 to see your checkout! ​ Advanced Integration Need purchase tracking, multiple NFT purchases at once, or more customization? Here’s a complete setup with additional features: Copy Ask AI \"use client\" ; import { useEffect } from \"react\" ; import { CrossmintProvider , CrossmintCheckoutProvider , CrossmintEmbeddedCheckout , useCrossmintCheckout , } from \"@crossmint/client-sdk-react-ui\" ; // Component with purchase tracking function Checkout () { const { order } = useCrossmintCheckout (); const collectionId = process . env . NEXT_PUBLIC_COLLECTION_ID as string ; useEffect (() => { if ( order && order . phase === \"completed\" ) { console . log ( \"Purchase completed!\" ); // Handle successful purchase } }, [ order ]); return ( < CrossmintEmbeddedCheckout lineItems = { [ { collectionLocator: `crossmint: ${ collectionId } ` , callData: { totalPrice: \"0.001\" , quantity: 1 , }, }, { collectionLocator: `crossmint: ${ collectionId } ` , callData: { totalPrice: \"0.002\" , quantity: 2 , }, }, ] } payment = { { crypto: { enabled: true , defaultChain: \"polygon\" , // Set preferred blockchain defaultCurrency: \"matic\" , // Set preferred crypto }, fiat: { enabled: true , defaultCurrency: \"usd\" , // Set preferred fiat currency allowedMethods: { card: true , applePay: true , googlePay: true , }, }, receiptEmail: \"receipt@example.com\" , // Optional: Set receipt email } } recipient = { { email: \"buyer@example.com\" , // NFTs will be delivered to this email's wallet // Or use walletAddress: \"0x...\" for direct delivery } } locale = \"en-US\" // Set interface language /> ); } // Main component with providers export default function Home () { const clientApiKey = process . env . NEXT_PUBLIC_CLIENT_API_KEY as",
    "chunk_index": 0,
    "word_count": 1000
  },
  {
    "id": "https://docs.crossmint.com/payments/embedded/quickstarts/credit-card-nft#chunk_0",
    "url": "https://docs.crossmint.com/payments/embedded/quickstarts/credit-card-nft",
    "title": "Embed Crossmint's Checkout into a web app | Crossmint Docs",
    "content": "defaultCurrency: \"matic\" , // Set preferred crypto }, fiat: { enabled: true , defaultCurrency: \"usd\" , // Set preferred fiat currency allowedMethods: { card: true , applePay: true , googlePay: true , }, }, receiptEmail: \"receipt@example.com\" , // Optional: Set receipt email } } recipient = { { email: \"buyer@example.com\" , // NFTs will be delivered to this email's wallet // Or use walletAddress: \"0x...\" for direct delivery } } locale = \"en-US\" // Set interface language /> ); } // Main component with providers export default function Home () { const clientApiKey = process . env . NEXT_PUBLIC_CLIENT_API_KEY as string ; return ( < div className = \"flex flex-col items-center justify-start min-h-screen p-6\" > < CrossmintProvider apiKey = { clientApiKey } > < CrossmintCheckoutProvider > < Checkout /> </ CrossmintCheckoutProvider > </ CrossmintProvider > </ div > ); } This advanced example showcases: - Multiple NFTs in one checkout - Purchase status tracking - Preferred payment methods and currencies - Email-based NFT delivery - Language settings Learn more in our guides: - Payment Methods - Multi-purchases - React Hooks ​ Testing Your Integration This demo uses the staging environment: - Use test credit cards for payments - Get test USDC from our faucet - Check price limits for staging ​ All Set! You’ve successfully integrated card and crypto payments with the Crossmint Embedded Checkout! Remember this demo is built on staging, so the digital assets will show up on the testnets. To launch on production, check the production launch checklist . You will need to contact Sales to enable the embedded checkout on production. ​ Next Steps ​ Customize the UI and Behavior Further UI Customization Learn how to customize the look and feel of your checkout Payment Methods Configure available payment options for your users React Hooks Use React hooks to build custom checkout experiences ​ Advanced Topics SDK Reference Launch in Production Localization Multi-purchases Was this page helpful? Yes No Overview Pay with Card - Memecoins Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 339
  },
  {
    "id": "https://docs.crossmint.com/payments/embedded/upgrade/v3#chunk_0",
    "url": "https://docs.crossmint.com/payments/embedded/upgrade/v3",
    "title": "Upgrade to V3 - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Embedded Upgrade to V3 Documentation API Reference SDK Reference CLI Solution Guides Changelog Introduction About Crossmint Getting Started Using AI Assistants Platform Wallets Introduction Quickstarts ⚡ Guides Authentication Introduction Quickstart ⚡ Guides Tokenization (Minting) Introduction Integrate Checkout Introduction Integrate Plan Your Integration Hosted (pop-up) Embedded Overview Quickstarts ⚡ Integrate Customize Upgrade to V3 Headless (API) Advanced Topics Overview Which Version Am I Using? What’s New in V3? Key Changes Component Renaming Provider Architecture Property Updates React Hooks for State Management Multiple Line Items Support Secondary Sales Support Orders API Integration Migration Steps 1. Get a Client API Key 2. Update Dependencies 3. Update Import Statements 4. Update Environment Variables 5. Update Component Structure Primary Sales Secondary Sales Advanced Features Payment Methods UI Customization Order Tracking Complete Example Related Resources ​ Overview The latest version of Crossmint’s Embedded Checkout, Embedded V3, introduces a new architecture focused on simplicity and developer experience. Migrating your existing checkout integration is straightforward and can typically be completed in under 15 minutes. This guide will walk you through each step. ​ Which Version Am I Using? Only two versions of Embedded Checkout exist, each using its own distinct component: V3 : The new <CrossmintEmbeddedCheckout /> component V2 : The legacy <CrossmintPaymentElement /> component The Embedded Checkout V3 component is available in @crossmint/client-sdk-react-ui@1.12.0 and above. Make sure to update your dependencies to the latest version. ​ What’s New in V3? Better DX React hooks, TypeScript support, and simpler APIs Multiple Items Sell multiple NFTs in a single checkout with individual delivery tracking Enhanced UI More customization options and better payment method support ​ Key Changes Embedded Checkout V3 introduces powerful new features focused on making your life easier: Simpler Developer Experience : More intuitive and idiomatic component API - less code, easier to understand Built-in Order Management : Complete order status UI out of the box - no more manual event handling (but fully customizable if needed) React Hooks for State Management : Replace event listeners with hooks for better control over the order lifecycle and checkout state Multi-Item Support : Sell multiple NFTs in a single checkout with individual delivery tracking for each item Better UI Customization : Includes more UI customization options - now you can control every aspect of the checkout’s appearance Advanced Cross-chain Support : Streamlined payment flows with expanded cross-chain capabilities ​ Component Renaming The main checkout component has been renamed from CrossmintPaymentElement to CrossmintEmbeddedCheckout to better reflect its purpose and capabilities. This component now supports multiple line items, advanced payment methods, and enhanced UI customization. ​ Provider Architecture The new Embedded Checkout V3 uses React Context providers to manage state and configuration. The CrossmintProvider handles API authentication and environment setup using a client-side API key (more details in Step 1 ), while CrossmintCheckoutProvider manages order state and checkout flow. Copy Ask AI < CrossmintProvider apiKey = \"_YOUR_CLIENT_API_KEY_\" > < CrossmintCheckoutProvider > < CrossmintEmbeddedCheckout /> </ CrossmintCheckoutProvider > </ CrossmintProvider > ​ Property Updates Key property changes in Embedded Checkout V3: Introduces new lineItems property for multi-item support Uses callData object in each line item, replacing the previous mintConfig property Supports primary sales through collectionLocator with format crossmint:${collectionId} or ${chain}:${contractAddress} Supports secondary sales through tokenLocator with format ${chain}:${contractAddress}:${tokenId} Replaces uiConfig with appearance - see our UI Customization guide Determines environment automatically from your API key Replaces event handlers with React hooks - see our Hooks guide ​ React Hooks for State Management Events have been replaced with React hooks, providing better TypeScript support and a more intuitive development experience: Copy Ask AI // Old - Event-based system < CrossmintPaymentElement onEvent = { ( event ) => { switch ( event . type ) { case \"payment:process.succeeded\" : console . log ( \"Payment successful!\" ); break ; case \"payment:process.failed\" : console . log ( \"Payment failed:\" , event . payload . error ); break ; } } } /> ; // New - Hook-based system function Checkout () { const { order } = useCrossmintCheckout (); useEffect (() => { switch ( order ?. phase ) { case \"completed\" : console . log ( \"Purchase complete!\" ); break ; case \"delivery\" : console . log ( \"Delivering NFTs...\" ); break ; case \"payment\" : console . log ( \"Processing payment...\" ); break ; } }, [ order ]); } ​ Multiple Line Items Support Embedded Checkout V3 supports checking out multiple items (with different token IDs or collections) at once. Each line item has its own delivery status, allowing for granular tracking of each of the line items: Copy Ask AI < CrossmintEmbeddedCheckout lineItems = { [ { collectionLocator: `crossmint: ${ collectionId } ` , callData: { totalPrice: \"0.001\" , quantity: 1 , }, }, { collectionLocator: `crossmint: ${ collectionId } ` , callData: { totalPrice: \"0.002\" , quantity: 1 , }, }, ] } payment = { { crypto: { enabled: true }, fiat: { enabled: true }, } } /> ​ Secondary Sales Support Embedded Checkout V3 introduces a cleaner way to handle secondary sales using the new tokenLocator property: Copy Ask AI // EVM secondary sale < CrossmintEmbeddedCheckout lineItems = { [ { tokenLocator: \"base:0xbC…307e:1\" , callData: { totalPrice: \"0.1\" } } ] } /> // Solana secondary sale < CrossmintEmbeddedCheckout lineItems = { [ { tokenLocator: \"solana:4oDd…x6NC\" , callData: { totalPrice: \"0.1\" , buyerCreatorRoyaltyPercent: 100 // Required for Solana } } ] } /> When handling multiple items (e.g., marketplace or multi-item sales), each item has its own delivery status. If one item fails to deliver, others may still complete successfully. Make sure to handle each item’s status independently: Copy Ask AI function CheckoutStatus () { const { order } = useCrossmintCheckout (); return ( < div > { order ?. lineItems . map (( item , index ) => ( < div key = { index } > Item { index + 1 } : { item . status } { item . status === \"failed\" &&",
    "chunk_index": 0,
    "word_count": 1000
  },
  {
    "id": "https://docs.crossmint.com/payments/embedded/upgrade/v3#chunk_0",
    "url": "https://docs.crossmint.com/payments/embedded/upgrade/v3",
    "title": "Upgrade to V3 - Crossmint Docs",
    "content": "Solana } } ] } /> When handling multiple items (e.g., marketplace or multi-item sales), each item has its own delivery status. If one item fails to deliver, others may still complete successfully. Make sure to handle each item’s status independently: Copy Ask AI function CheckoutStatus () { const { order } = useCrossmintCheckout (); return ( < div > { order ?. lineItems . map (( item , index ) => ( < div key = { index } > Item { index + 1 } : { item . status } { item . status === \"failed\" && < div > Error: { item . error } </ div > } </ div > )) } </ div > ); } ​ Orders API Integration The new version integrates with our Orders API , enabling programmatic access to order status, history, and management. This allows you to build custom experiences and integrate with your backend systems. ​ Migration Steps ​ 1. Get a Client API Key Create a client-side API key with the orders.create scope enabled. More info on creating API keys here . ​ 2. Update Dependencies Upgrade the Crossmint React SDK to version 1.12.0 or above. npm pnpm yarn Copy Ask AI npm install @crossmint/client-sdk-react-ui@latest ​ 3. Update Import Statements Copy Ask AI // Old import { CrossmintPaymentElement } from \"@crossmint/client-sdk-react-ui\" ; // New import { CrossmintProvider , CrossmintEmbeddedCheckout } from \"@crossmint/client-sdk-react-ui\" ; ​ 4. Update Environment Variables Change your Crossmint environment variables (e.g. in your .env.local file or Vercel configuration): Copy Ask AI # Old NEXT_PUBLIC_PROJECT_ID = \"_YOUR_PROJECT_ID_\" # No longer needed - derived from the API key NEXT_PUBLIC_COLLECTION_ID = \"_YOUR_COLLECTION_ID_\" NEXT_PUBLIC_ENVIRONMENT = \"staging\" # No longer needed - derived from the API key # New NEXT_PUBLIC_CLIENT_API_KEY = \"_YOUR_CLIENT_API_KEY_\" # From API Keys page NEXT_PUBLIC_COLLECTION_ID = \"_YOUR_COLLECTION_ID_\" # From Collection details page The projectId and environment values are now automatically derived from the client-side API key. ​ 5. Update Component Structure Instead of a single react component, <CrossmintPaymentElement /> , the new checkout now has one provider, <CrossmintProvider /> that can be added in your layout page, or the same page you have checkout on, and one react component, that has been renamed to <CrossmintEmbeddedCheckout /> . The properties in the react component have changed: projectId and environment are no longer needed You now specify which items to buy using lineItems , an array of items that support both collectionLocator (for primary sales with formats \"crossmint:${collectionId}\" or ${chain}:${contractAddress} ) and tokenLocator (for secondary sales with the format ${chain}:${contractAddress}:${tokenId} ). Each item includes callData that takes the same object previously passed to mintConfig ​ Primary Sales Copy Ask AI // Old < CrossmintPaymentElement projectId = { projectId } collectionId = { collectionId } environment = { environment } mintConfig = { { totalPrice: \"0.001\" , quantity: 1 , } } /> // New < CrossmintProvider apiKey = { clientApiKey } > < CrossmintEmbeddedCheckout lineItems = { { collectionLocator: `crossmint: ${ collectionId } ` , callData: { totalPrice: \"0.001\" , quantity: 1 , }, } } payment = { { crypto: { enabled: true }, fiat: { enabled: true }, } } /> </ CrossmintProvider > ​ Secondary Sales Copy Ask AI // Old - EVM Secondary Sale < CrossmintPaymentElement projectId = { projectId } collectionId = { collectionId } environment = { environment } mintConfig = { [ { type: \"secondary-eth\" , contractAddress: \"0xbC…307e\" , tokenId: \"7777\" } ] } /> // New - EVM Secondary Sale < CrossmintProvider apiKey = { clientApiKey } > < CrossmintEmbeddedCheckout lineItems = { { tokenLocator: \"ethereum:0xbC…307e:7777\" , callData: { totalPrice: \"0.1\" } } } /> </ CrossmintProvider > // Old - Solana Secondary Sale < CrossmintPaymentElement projectId = { projectId } collectionId = { collectionId } environment = { environment } mintConfig = { { mintHash: \"4oDd…x6NC\" , buyerCreatorRoyaltyPercent: 100 , type: \"solana-secondary\" } } /> // New - Solana Secondary Sale < CrossmintProvider apiKey = { clientApiKey } > < CrossmintEmbeddedCheckout lineItems = { { tokenLocator: \"solana:4oDd…x6NC\" , callData: { totalPrice: \"0.1\" , buyerCreatorRoyaltyPercent: 100 } } } /> </ CrossmintProvider > Don’t forget to add payment configuration to enable crypto/fiat payments: Copy Ask AI payment = {{ crypto : { enabled : true }, fiat : { enabled : true } }} ​ Advanced Features Once you have the basic setup working, V3 now supports these additional features: ​ Payment Methods Enable crypto and fiat payment options, and set preferred chains and currencies for your users. Learn more in our Payment Methods guide . Copy Ask AI payment = {{ crypto : { enabled : true , defaultChain : \"polygon\" , }, fiat : { enabled : true , allowedMethods : { card : true , applePay : true , googlePay : true , } } }} To enable Apple Pay, you’ll need to follow our Apple Pay setup guide . Apple Pay is now rendered directly on your site in V3, which requires domain verification through Apple. ​ UI Customization Customize colors, typography, and component styles to match your brand. Learn more in our UI Customization guide . Copy Ask AI appearance = {{ variables : { fontSizeUnit : '1rem' , borderRadius : '8px' , colors : { backgroundPrimary : '#ffffff' , textPrimary : '#000000' , } } }} ​ Order Tracking Embedded Checkout V3 now makes it easier to track order status using React hooks. Learn more in our React hooks guide . Wrap your checkout component with CrossmintCheckoutProvider and use the useCrossmintCheckout hook: Copy Ask AI import { CrossmintProvider , CrossmintCheckoutProvider , CrossmintEmbeddedCheckout , useCrossmintCheckout , } from \"@crossmint/client-sdk-react-ui\" ; const clientApiKey = process . env . NEXT_PUBLIC_CLIENT_API_KEY ; const collectionId = process . env . NEXT_PUBLIC_COLLECTION_ID ; function Checkout () { const { order } = useCrossmintCheckout (); useEffect (() => { if ( order && order . phase === \"completed\" ) { console . log ( \"Purchase completed!\" ); // Handle successful purchase } }, [ order ]); return ( < CrossmintEmbeddedCheckout",
    "chunk_index": 0,
    "word_count": 1000
  },
  {
    "id": "https://docs.crossmint.com/payments/embedded/upgrade/v3#chunk_1",
    "url": "https://docs.crossmint.com/payments/embedded/upgrade/v3",
    "title": "Upgrade to V3 - Crossmint Docs",
    "content": "Learn more in our React hooks guide . Wrap your checkout component with CrossmintCheckoutProvider and use the useCrossmintCheckout hook: Copy Ask AI import { CrossmintProvider , CrossmintCheckoutProvider , CrossmintEmbeddedCheckout , useCrossmintCheckout , } from \"@crossmint/client-sdk-react-ui\" ; const clientApiKey = process . env . NEXT_PUBLIC_CLIENT_API_KEY ; const collectionId = process . env . NEXT_PUBLIC_COLLECTION_ID ; function Checkout () { const { order } = useCrossmintCheckout (); useEffect (() => { if ( order && order . phase === \"completed\" ) { console . log ( \"Purchase completed!\" ); // Handle successful purchase } }, [ order ]); return ( < CrossmintEmbeddedCheckout lineItems = { [ { collectionLocator: `crossmint: ${ collectionId } ` , callData: { totalPrice: \"0.001\" , quantity: 1 , }, }, ] } payment = { { crypto: { enabled: true }, fiat: { enabled: true }, } } /> ); } // Wrap with both providers function App () { return ( < CrossmintProvider apiKey = { clientApiKey } > < CrossmintCheckoutProvider > < Checkout /> </ CrossmintCheckoutProvider > </ CrossmintProvider > ); } Learn more about available hooks in our React hooks guide . ​ Complete Example A complete example combining all features: Copy Ask AI < CrossmintProvider apiKey = { clientApiKey } > < CrossmintEmbeddedCheckout lineItems = { { collectionLocator: `crossmint: ${ collectionId } ` , callData: { totalPrice: \"0.001\" , quantity: 1 , }, } } payment = { { crypto: { enabled: true , defaultChain: \"polygon\" , }, fiat: { enabled: true , allowedMethods: { card: true , applePay: true , googlePay: true , }, }, } } recipient = { { email: \"buyer@example.com\" , } } appearance = { { variables: { fontSizeUnit: \"1rem\" , borderRadius: \"8px\" , colors: { backgroundPrimary: \"#ffffff\" , textPrimary: \"#000000\" , }, }, } } /> </ CrossmintProvider > ​ Related Resources Quickstart Guide Custom Payer Guide Payment Methods UI Customization Was this page helpful? Yes No React Hooks Overview Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 1,
    "word_count": 332
  },
  {
    "id": "https://docs.crossmint.com/payments/guides/create-collection#chunk_0",
    "url": "https://docs.crossmint.com/payments/guides/create-collection",
    "title": "Create/Deploy an NFT Collection - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Advanced Topics Create/Deploy an NFT Collection Documentation API Reference SDK Reference CLI Solution Guides Changelog Introduction About Crossmint Getting Started Using AI Assistants Platform Wallets Introduction Quickstarts ⚡ Guides Authentication Introduction Quickstart ⚡ Guides Tokenization (Minting) Introduction Integrate Checkout Introduction Integrate Advanced Topics Testing Tips USDC Support Receipt Customization Improving Conversion Component Properties Marketplaces & Launchpads Webhooks Purchases of Multiple NFTs Collection Registration and Verification API Access Controls Dynamic Price and Quantity Mint to Specific Template Checking Supported Tokens Create New Collection Register External Collection Create a Crossmint NFT Collection Adding NFTs Send a Test NFT Next steps The easiest way to get started with selling or airdropping NFTs is to use the developer console to deploy and manage your NFT contracts. ​ Create a Crossmint NFT Collection This guide will deploy an ERC-721 contract on the Polygon Amoy testnet. Currently, you can also deploy to the mainnets and testsnets for Polygon, Base, Optimism, and Solana directly from the console. Additional chains are supported when deploying via the create-collection API . 1 Navigate to Token collections and click `New collection` 2 Enter Collection Information This information is displayed in the Hosted Checkout, Storefront, and Claim pages. You can edit it later. 3 Select `Create a new contract` option 4 Select `Sell NFTs` option You can select both options if you want to sell NFTs and also allow users to claim them for free. If you want to use this collection exclusively with the Minting Tools , select the Airdrop NFTs option only. 5 Select preferred Blockchain Crossmint has staging and production environments to facilitate working in testnets or mainnets. When creating a new collection on production you’ll need some API credits to cover the gas cost of contract deployment. 6 Configure Payment Settings ​ NFT Price Enter the price you want to charge for your NFT. When using the staging environment, please set very low test prices to help use preserve our testnet currency. Everything works the same in staging and production, so you can test your collection with low prices in staging and then deploy to production with higher prices. In production, there is a lower bound limit of USD 0.75 , a n d a n u p p e r b o u n d l i m i t o f U S D 0.75, and an upper bound limit of USD 0.75 , an d an u pp er b o u n d l imi t o f U S D 1,500 per transaction. You can find more information if you need to increase this limit . ​ USDC Several chains support USDC for the currency. This option is useful for price stability and to receive payouts in a stable token. You can find more info on configuring USDC here . ​ Fee Sponsorship This option enables you to control who pays the fees of the NFT purchase including gas and credit card transaction fees. The default option is “Buyer”, which means that if you set a price of 10 USDC, the final price the buyer pays will be 10 USDC plus fees. If you want to provide a consistent price for your customers, select the “You” option to sponsor the fees. When you sponsor the fees they will be deducted from the amount the buyer pays and the remainder will be paid to the recipient wallet you set in the next step. ​ Recipient Address Enter the wallet address where you want to receive payments. This is the address where Crossmint will send the proceeds from NFT sales. Want to split payments across multiple addresses? Use a splits.org address as the payout recipient. 7 Review details and click `Deploy contract` to complete Make sure you review the Content policy. When launching in production you’ll need to submit collection verification information to ensure your collection is compliant with our Content Policy . You can find more information about everything required for your production launch in the Production Launch section. ​ Adding NFTs This is required before you can sell or airdrop the NFTs. Without this step there is not any actual information to use for creating the NFTs yet. You can create unique NFT metadata per token or an Open Edition style NFT where all tokens share the same metadata. Manual Uploading 1 Select `Manual upload` option 2 Fill out Metadata ​ NFT Name The name of your NFT (max 32 characters). ​ Supply For unique per NFT, enter 1. You will need to configure the metadata for each NFT. You can do this via the developer console individually. For projects with many unique NFTs you should use the Create Template API with a script. For an Open Edition NFT, enter the total quantity, or select the Unlimited checkbox. This will be the only metadata you need to configure. ​ Description The description of your NFT (max 64 characters). ​ Image Upload an image for your NFT. Recommended image formats are: JPEG, PNG, WEBP, or GIF. In most cases, the medium in which NFTs are displayed don’t require extremely high resolution files. Strike a balance and lean towards file sizes that do not require significant bandwidth to download (below 10 MB for example). ​ Attributes optional Additional attributes of the NFT. Add as few or as many as you like. You can refer to the OpenSea metadata standards page for detailed explanations of how to use these in your project. Click the Create NFT button to complete. Batch Uploading with CSV 1 Select `Batch upload` option 2 Prepare Metadata CSV You can download an example of how your file should be structured here: batch-upload-example.zip . You can upload a maximum of 1000 items at a time. For collections that require more than 1000 tokens, you can repeat the batch upload process multiple times. The CSV should include a header row with the following fields: name - The name for the token. image -",
    "chunk_index": 0,
    "word_count": 1000
  },
  {
    "id": "https://docs.crossmint.com/payments/guides/create-collection#chunk_0",
    "url": "https://docs.crossmint.com/payments/guides/create-collection",
    "title": "Create/Deploy an NFT Collection - Crossmint Docs",
    "content": "to the OpenSea metadata standards page for detailed explanations of how to use these in your project. Click the Create NFT button to complete. Batch Uploading with CSV 1 Select `Batch upload` option 2 Prepare Metadata CSV You can download an example of how your file should be structured here: batch-upload-example.zip . You can upload a maximum of 1000 items at a time. For collections that require more than 1000 tokens, you can repeat the batch upload process multiple times. The CSV should include a header row with the following fields: name - The name for the token. image - The filename of the image, which will be uploaded in the next step. description - A description for the token. supply - How many of the token should be available. animation_url - (optional) You can add attributes via additional columns in the spreadsheet. For example, to add an attribute named weapon , include an additional column with the attribute name for the header row. You can refer to the example file linked above to see this in action. Once you have your CSV ready, upload it to move on to the next step for media files. 3 Prepare Media Files The image file names must match the value(s) in the image column of the uploaded CSV file. These files should be in a flat folder structure for upload (no sub-folders). Click the “Upload media files” button and then select all of the images referenced in the metadata.csv file you uploaded in the previous step. 4 Complete the Batch Upload Click the “Upload” button to upload the CSV and media files. If any media files are missing you’ll be notified which ones they are in the UI. 5 Done! If you need to upload additional token metadata click the “New batch upload” button. Otherwise select “View my NFTS” to close the modal and view the metadata for your tokens. Bulk Uploading via API You can also perform bulk uploading by calling the create-template API using a script that loops through your metadata.csv file. You’ll need to have an API key with the nfts.create scope enabled. Below is an example script that will keep your request volume below the 120/min rate limit . This code example is available as a repository on GitHub also: crossmint/bulk-uploader Before running this script you’ll need to upload your media files to a service that can host the files, such as Pinata . The image column of your metadata.csv should include the full URL to the file instead of only a file name like the batch upload option above. bulkUploader.js Copy Ask AI const fs = require ( \"fs\" ); const csv = require ( \"csv-parser\" ); require ( \"dotenv\" ). config (); const collectionId = process . env . COLLECTION_ID ; const apiKey = process . env . API_KEY ; const apiUrl = `https://staging.crossmint.com/api/2022-06-09/collections/ ${ collectionId } /templates` ; // Rate limiting setup const rateLimit = 100 ; // requests per minute const interval = 60000 / rateLimit ; // interval in milliseconds async function sendRequest ( data ) { try { const response = await fetch ( apiUrl , { method: \"POST\" , headers: { \"Content-Type\" : \"application/json\" , \"X-API-KEY\" : ` ${ apiKey } ` , }, body: JSON . stringify ( data ), }); const responseData = await response . json (); console . log ( \"Success:\" , responseData ); } catch ( error ) { console . error ( \"Error:\" , error . message ); } } // Read and process the CSV file function processFile () { let promise = Promise . resolve (); fs . createReadStream ( \"metadata.csv\" ) . pipe ( csv ()) . on ( \"data\" , ( row ) => { promise = promise . then (() => { const postData = { metadata: { name: row . name , image: row . image , // this should be a publicly accessible URL description: row . description , }, supply: { limit: Number ( row . supply ) }, reuploadLinkedFiles: false , // this is optional }; return sendRequest ( postData ). then (() => new Promise (( resolve ) => setTimeout ( resolve , interval ))); }); }) . on ( \"end\" , () => { promise . then (() => { console . log ( \"Finished processing file.\" ); }); }); } processFile (); Run the script to bulk upload your template metadata. Copy Ask AI node bulkUploader.js ​ Send a Test NFT Once you have added metadata you can send a test NFT to yourself or another user. The interface to mint and send from the console supports email and wallet address for the recipient. 1 Mint and send a test NFT You can mint and send a test NFT to an email address or wallet to make sure everything is working as expected. 2 Enter email or wallet If you enter an email address the NFT will be sent to a unique Crossmint custodial wallet associated with that email address. The owner of this email can log in to Crossmint to view their NFT. The wallet option will send directly to the wallet address. Crossmint does not send an email to the user when you airdrop NFTs from the console. 3 Done! That’s all there is to it. Check below for recommended next steps. ​ Next steps Integrate the Crossmint SDK to start selling from your website. You can do this in three ways: EASY: Use the Storefront to start accepting payments without writing any code. MID: Add a Hosted Checkout into your existing site or app, which opens a Crossmint branded checkout flow in a pop-up or new tab. ADVANCED: Craft an Embedded Checkout with custom UI into your website or app. If you selected the Airdrop NFTs option when deploying your collection you should checkout the No Code Claims Page to learn how to enable a claims page for your collection. Was this page helpful? Yes No Checking Supported Tokens Register",
    "chunk_index": 0,
    "word_count": 1000
  },
  {
    "id": "https://docs.crossmint.com/payments/guides/create-collection#chunk_1",
    "url": "https://docs.crossmint.com/payments/guides/create-collection",
    "title": "Create/Deploy an NFT Collection - Crossmint Docs",
    "content": "selling from your website. You can do this in three ways: EASY: Use the Storefront to start accepting payments without writing any code. MID: Add a Hosted Checkout into your existing site or app, which opens a Crossmint branded checkout flow in a pop-up or new tab. ADVANCED: Craft an Embedded Checkout with custom UI into your website or app. If you selected the Airdrop NFTs option when deploying your collection you should checkout the No Code Claims Page to learn how to enable a claims page for your collection. Was this page helpful? Yes No Checking Supported Tokens Register External Collection Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 1,
    "word_count": 112
  },
  {
    "id": "https://docs.crossmint.com/payments/guides/register-collection#chunk_0",
    "url": "https://docs.crossmint.com/payments/guides/register-collection",
    "title": "Register External Collection - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Advanced Topics Register External Collection Documentation API Reference SDK Reference CLI Solution Guides Changelog Introduction About Crossmint Getting Started Using AI Assistants Platform Wallets Introduction Quickstarts ⚡ Guides Authentication Introduction Quickstart ⚡ Guides Tokenization (Minting) Introduction Integrate Checkout Introduction Integrate Advanced Topics Testing Tips USDC Support Receipt Customization Improving Conversion Component Properties Marketplaces & Launchpads Webhooks Purchases of Multiple NFTs Collection Registration and Verification API Access Controls Dynamic Price and Quantity Mint to Specific Template Checking Supported Tokens Create New Collection Register External Collection Quick Navigation Common Steps (All Chains) EVM-Specific Steps Pre-requisites Contract Registration EVM Contract Import Steps Solana-Specific Steps Solana Candy Machine Import Next steps FAQs Crossmint has a pre-audited library of smart contracts that serve most use cases. However, if you have custom needs, you can also bring your own. The Checkout has been battle-tested at scale with Crossmint’s collections, and may result in a more reliable experience than using an untested, imported contract, or at least require less trouble-shooting. When does it make sense to bring my own contract? When you require very custom functionality not supported by Crossmint’s contracts. If you’re developing a marketplace. If you have an accesslist. What about secondary sale contracts/marketplaces? Secondary markets are platforms where NFTs are traded after their initial mint/primary sale. These are marketplaces where users can buy and sell NFTs from each other. It requires manual support from Crossmint to import secondary contracts. See our marketplaces and launchpads guide . The self-serve option is only available for importing primary contracts for EVM and Solana. When importing contracts, Crossmint has support to fetch listings from the following secondary marketplaces: Auction House : Solana’s native marketplace protocol Tensor : High-performance Solana NFT marketplace Magic Eden API : Popular multi-chain NFT marketplace Hyperspace : Cross-chain NFT marketplace and aggregator To add support for a new marketplace, please contact sales . ​ Quick Navigation All collection imports start with the same initial steps, then diverge based on your blockchain: Common Steps (All Chains) - Steps 1-4 for all blockchains EVM-Specific Steps - Steps for Ethereum, Polygon, etc. Solana-Specific Steps - Additional steps for Solana candy machines ​ Common Steps (All Chains) These initial steps are the same whether you’re importing an EVM contract or a Solana candy machine: 1 Navigate to Token collections and click `New collection` 2 Enter Collection Information This information is displayed in the Hosted Checkout, Storefront, and Claim pages. You can edit it later. 3 Select `Import an existing contract` option 4 Select the Blockchain your contract is deployed on Remember, Crossmint has staging and production environments . When working in the staging environment, choose the mainnet name. For example, if your contract is on the Polygon Amoy testnet, select Polygon. After completing these common steps, continue with the blockchain-specific instructions below. ​ EVM-Specific Steps Complete the Common Steps above first, then continue with these EVM-specific steps: ​ Pre-requisites Your contract must be ERC-721, ERC-721A, or ERC-1155 compliant. The minting function must allow minting directly to an address that is different from the one that invoked the contract. And it must contain at least one parameter that specifies that recipient address. A single address must be able to call the mint function unlimited times but does not need to be able to hold unlimited NFTs. ​ Contract Registration You may register contracts manually from the console or via API . My ABI wasn't automatically imported When you compile your smart contract there will be a corresponding abi file with an .abi or .json extension. Inside this file, you’ll see JSON property named abi, which describes the functions in your smart contract. Here’s an example of a very simple abi file. Yours will likely have more function descriptions. Copy Ask AI // Example generated abi file for smart contract { \"abi\" : [ { \"inputs\" : [], \"stateMutability\" : \"nonpayable\" , \"type\" : \"constructor\" }, { \"inputs\" : [ { \"internalType\" : \"address\" , \"name\" : \"_to\" , \"type\" : \"address\" } ], \"name\" : \"mintTo\" , \"outputs\" : [], \"stateMutability\" : \"payable\" , \"type\" : \"function\" } ] } Copy the JSON array object that comes after the string abi and paste it into the Contract ABI text box in the developer console. The content you paste in should begin with [ and end with ] . Specifying the remaining parameters Whether your ABI was retrieved automatically or you pasted it in manually, you need to specify the: Mint function Recipient address parameter name [Optional] Quantity of NFTs to mint parameter name Crossmint will attempt to automatically select these values for you, but it’s important to ensure they are set correctly. Especially if you’re setting up a USDC mint function as the list of options will be longer. Using proxy contracts Proxy contracts are an advanced feature. You should use this only if you are certain that your contracts adhere to this pattern. This is crucial because Crossmint requires the actual NFT contract address when you register a mint/buy/purchase/claim function in a sales contract or revenue splitter. If you don’t specify the NFT contract address, our system won’t be able to extract token URI information or facilitate transfers. Set this up only if it isn’t a transparent proxy, which is common for upgradeable contracts. ​ EVM Contract Import Steps 1 Step 5: Select `Import my own contract` option 2 Step 6: Contract Address Enter the address of your contract and the console will determine the contract type automatically. 3 Step 7: Proxy or Sales Contract (optional) Notice in the screenshot that the example has the same contract address that was entered in previous step. This indicates a basic setup where the purchase function is within the registered NFT contract. The only reason to change this is if purchases should be sent to a different contract address that is not the same as the NFT contract. Most developers do not need to change this. If you are unsure,",
    "chunk_index": 0,
    "word_count": 1000
  },
  {
    "id": "https://docs.crossmint.com/payments/guides/register-collection#chunk_0",
    "url": "https://docs.crossmint.com/payments/guides/register-collection",
    "title": "Register External Collection - Crossmint Docs",
    "content": "option 2 Step 6: Contract Address Enter the address of your contract and the console will determine the contract type automatically. 3 Step 7: Proxy or Sales Contract (optional) Notice in the screenshot that the example has the same contract address that was entered in previous step. This indicates a basic setup where the purchase function is within the registered NFT contract. The only reason to change this is if purchases should be sent to a different contract address that is not the same as the NFT contract. Most developers do not need to change this. If you are unsure, leave it as is. Transparent upgradeable contracts also do not need to use this setting and should use the beacon address in the previous step. 4 Step 8: Contract ABI As long as your contract is verified on the block explorer we can query the ABI automatically. If you have not verified your contract, you must enter the ABI manually. 5 Step 9: Mint Function Currency Unless you specifically deployed a contract that supports USDC you must leave the native currency selected. If you are unsure, leave it as is. 6 Step 10: Select Mint Function If you selected the native currency in the previous step, this will be a very short list. If you have multiple mint functions in your contract that you want to accept payments for, you must register each one separately. USDC mint functions typically are NOT payable . Change the currency selector to USDC to populate the mint function list with valid options. The mint function must accept an address parameter and mint to that address. If your mint function lacks this you’ll need to deploy a new contract or modify your existing contract. 7 Step 11: Parameter for recipient address After the mint function has been selected, this will be a short list built from the function parameters of type address . If you have multiple options here, ensure that you select the correct one. Doing this incorrectly will result in the purchased NFTs being sent to the wrong address and they likely will not be recoverable. 8 Step 12: Parameter for quantity This will be a short list built from the function parameters of type uint256 . If you have multiple options here, ensure that you select the correct one. Doing this incorrectly will result in the NFT checkout tools not being able to properly mint the correct quantity of NFTs. 9 Step 13: Review details and click `Register collection` to complete ​ Solana-Specific Steps Complete the Common Steps above first, then continue with these Solana-specific steps: Instant support for: Primaries : Candy Machine v3, Metaplex Instant Sales, Magic Eden’s Launchpad Secondaries : Auction House, Tensor, Magic Eden API, Hyperspace Only the integrations listed above are available at the moment. For custom integrations, please contact sales . ​ Solana Candy Machine Import Crossmint supports Candy Machine v3. After completing the common steps above, continue with these Solana-specific steps: 1 Step 5: Select Solana for the blockchain This step replaces step 4 from the common steps above - select Solana from the blockchain dropdown. 2 Step 6: Choose candy machine version and enter candy machine ID Find the ID in the cache.json file in the folder where you deployed your Candy Machine. 3 Step 7: Review details and click `Register collection` to complete Congratulations! 🎉 You’ve successfully registered your external collection in Crossmint. ​ Next steps Integrate the Crossmint SDK to start selling from your website. You can do this in three ways: EASY: Use the Storefront to start accepting payments without writing any code. MID: Add a Hosted Checkout into your existing site or app, which opens a Crossmint branded checkout flow in a pop-up or new tab. ADVANCED: Craft an Embedded Checkout with custom UI into your website or app. ​ FAQs What about Xion blockchain contracts? For Xion blockchain contracts, please refer to our Xion Contract Requirements documentation. What about other blockchains? (Aptos, Sui, etc.) Currently only importing EVM and Solana primary contracts is self-serve. If you wish to import Aptos and Sui contracts, please contact sales . Can I register my collection via API? Yes! You can programmatically register collections using the Collections Registration API. API Endpoint: POST https://staging.crossmint.com/api/v1-alpha1/collections Required Headers: Content-Type: application/json x-api-key: <your-api-key> (requires collections.create scope) EVM Contract Example Solana Candy Machine Example Copy Ask AI curl --request POST \\ --url https://staging.crossmint.com/api/v1-alpha1/collections \\ --header 'content-type: application/json' \\ --header 'x-api-key: <X_API_KEY>' \\ --data '{ \"chain\": \"ethereum\", \"contractType\": \"erc-721\", \"args\": { \"contractAddress\": \"0x1234567890123456789012345678901234567890\", \"abi\": \"[{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"_to\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"mintTo\\\",\\\"outputs\\\":[],\\\"stateMutability\\\":\\\"payable\\\",\\\"type\\\":\\\"function\\\"}]\", \"mintFunctionName\": \"mintTo(address)\", \"toParamName\": \"_to\", \"quantityParamName\": \"_quantity\", \"contractType\": \"erc-721\" }, \"metadata\": { \"title\": \"My NFT Collection\", \"description\": \"A custom NFT collection\", \"imageUrl\": \"https://example.com/collection-image.png\", \"social\": { \"twitter\": \"https://twitter.com/mycollection\", \"discord\": \"https://discord.gg/mycollection\" } }, \"ownership\": \"external\", \"category\": \"art\", \"scopes\": [\"payments:credit-card\", \"payments:cross-chain\"] }' Key Parameters: chain : \"solana\" , \"ethereum\" , \"polygon\" , \"bsc\" contractType : \"candy-machine\" , \"erc-721\" , \"erc-1155\" , \"thirdweb-drop\" args : Contract-specific arguments (see examples above) For EVM: contractAddress , abi , mintFunctionName , toParamName , contractType (required); quantityParamName (optional) For Solana: candyMachineId (required) metadata : Object with title , description , imageUrl (all required), and optional social object with twitter / discord links ownership : Set to \"external\" for imported contracts category : \"art\" , \"gaming\" , \"music\" , \"loyalty\" , \"ticketing\" , \"charity\" , \"other\" scopes : [\"payments:credit-card\", \"payments:cross-chain\"] Response (201 Created): The API returns a collection object with identifiers you can use with Crossmint’s checkout and payment systems. Copy Ask AI { \"collectionId\" : \"abc123-def456-ghi789...\" , \"clientId\" : \"abc123-def456-ghi789...\" } This API is currently in alpha (v1-alpha1) and subject to change. The returned collectionId and clientId are typically the same value and can be used interchangeably for checkout integration. Was this page helpful? Yes No Create New Collection Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 965
  },
  {
    "id": "https://docs.crossmint.com/payments/headless/guides/client-or-server#chunk_0",
    "url": "https://docs.crossmint.com/payments/headless/guides/client-or-server",
    "title": "Client or Server - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Guides Client or Server Documentation API Reference SDK Reference CLI Solution Guides Changelog Introduction About Crossmint Getting Started Using AI Assistants Platform Wallets Introduction Quickstarts ⚡ Guides Authentication Introduction Quickstart ⚡ Guides Tokenization (Minting) Introduction Integrate Checkout Introduction Integrate Plan Your Integration Hosted (pop-up) Embedded Headless (API) Overview Quickstarts ⚡ Guides Plan Your Solution Item Selection Client or Server Production Launch Payment Methods Localization Specify Recipient Physical Products Design Your UI Order Lifecycle Supporting Your Customers Multiple Line Items Status Codes Advanced Topics When to use a server-side API key Server Side Example Code When to use a client-side API key Client Side Example Code The headless checkout supports both server-side and client-side API keys. It’s important that you select the right key for your implementation. ​ When to use a server-side API key Testing in the API Playground of the documentation Testing with cURL requests or running scripts from your command line Building applications that make API calls to your own backend, which then make the actual API call to Crossmint The key consideration here is if the API request is coming from a server environment. ​ Server Side Example Code The sample code below is from a NextJS application. The component.tsx file is simplified to only show the relevant logic. The client-side component sends an API request to the application’s backend, which then proxies the request to Crossmint. This is because the example is using a server-side API key, which requires making requests from a server environment. component.tsx (client-side) route.ts (server-side) crossmint.ts Copy Ask AI const createOrder = async ( orderInput : any ) => { try { const res = await fetch ( `/orders` , { method: \"POST\" , headers: { \"Content-Type\" : \"application/json\" , }, body: JSON . stringify ( orderInput ), }); const order = await res . json (); setOrder ( order . order ); } catch ( e ) { console . error ( e ); throw new Error ( \"Failed to create order\" ); } }; ​ When to use a client-side API key Your application will be making API requests to Crossmint directly from a broswer When you create client-side API keys you must add the authorized origins that can use the key. For example, in testing you’ll need to indicate http://localhost:3000 (or similar local dev URLs) as authorized origins, or the request will be denied. There is one additional step when using a client-side API key in your application with headless checkout. The first call will be to create the order. The response will include a clientSecret property that you must persist in state and then pass as an additional header in subsequent API requests to the update-order or get-order routes. ​ Client Side Example Code create-order update-order get-order Copy Ask AI // note the end of try block where the clientSecret is saved to local state const createOrder = async ( orderInput : any ) => { try { const res = await fetch ( `https://staging.crossmint.com/api/2022-06-09/orders` , { method: \"POST\" , headers: { \"Content-Type\" : \"application/json\" , \"x-api-key\" : process . env . NEXT_PUBLIC_CLIENT_SIDE_KEY , }, body: JSON . stringify ( orderInput ), }); const order = await res . json (); setOrder ( order . order ); setClientSecret ( order . clientSecret ); } catch ( e ) { console . error ( e ); throw new Error ( \"Failed to create order\" ); } }; Was this page helpful? Yes No Item Selection Production Launch Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 599
  },
  {
    "id": "https://docs.crossmint.com/payments/headless/guides/design-your-ui#chunk_0",
    "url": "https://docs.crossmint.com/payments/headless/guides/design-your-ui",
    "title": "Design Your UI - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Guides Design Your UI Documentation API Reference SDK Reference CLI Solution Guides Changelog Introduction About Crossmint Getting Started Using AI Assistants Platform Wallets Introduction Quickstarts ⚡ Guides Authentication Introduction Quickstart ⚡ Guides Tokenization (Minting) Introduction Integrate Checkout Introduction Integrate Plan Your Integration Hosted (pop-up) Embedded Headless (API) Overview Quickstarts ⚡ Guides Plan Your Solution Item Selection Client or Server Production Launch Payment Methods Localization Specify Recipient Physical Products Design Your UI Order Lifecycle Supporting Your Customers Multiple Line Items Status Codes Advanced Topics Building Your App Purchase Preview Wallet Connection This guide will walk you through the basic steps of implementing a user interface integrated with the Headless Checkout. The first step in the process will be to create an Order via API call. You can create an order on load and add the recipient later, or wait to create the order when you have the recipient info ready. Creating the order immediately helps obtain the price quote for display. Let’s proceed with that approach in mind. ​ Building Your App There are four key components you’ll need to represent in the UI for your users. Purchase Preview - a visual explanation of what they are buying and the price Wallet Connection - cross-chain payments will require the ability to connect a wallet Payment Status - keeping the user updated about the payment acceptance Delivery Status - progress of delivery and information upon completion/failure ​ Purchase Preview It is common to create an order upon initial render for your user, and then update the details of that order as the adjustments are made by the user. You’ll need to create a function in your application that can call the create-order API and save the response. Preview Screenshot Code Snippet After you create the order you’ll get back metadata related to the collectionId you pass in the create-order call. You can use this metadata to build the preview highlighted in the screenshot below. ​ Wallet Connection To enable the cross-chain payments feature, you’ll need to provide an easy way for users to connect their wallet. This guide will not go into detail about how to add any specific tools, since there are a variety available and the implementation of each is unique to the tool. However, you will want to set up your app to listen for changes to the primary connected wallet and selected network so that the order is updated automatically. Wallet & Network Screenshot Code Snippet Once the user has connected their wallet they might still change the primary connected account or network. You need to listen for these changes and update the order. Was this page helpful? Yes No Shopify Integration Quote Phase Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 467
  },
  {
    "id": "https://docs.crossmint.com/payments/headless/guides/item-selection#chunk_0",
    "url": "https://docs.crossmint.com/payments/headless/guides/item-selection",
    "title": "Item Selection - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Guides Item Selection Documentation API Reference SDK Reference CLI Solution Guides Changelog Introduction About Crossmint Getting Started Using AI Assistants Platform Wallets Introduction Quickstarts ⚡ Guides Authentication Introduction Quickstart ⚡ Guides Tokenization (Minting) Introduction Integrate Checkout Introduction Integrate Plan Your Integration Hosted (pop-up) Embedded Headless (API) Overview Quickstarts ⚡ Guides Plan Your Solution Item Selection Client or Server Production Launch Payment Methods Localization Specify Recipient Physical Products Design Your UI Order Lifecycle Supporting Your Customers Multiple Line Items Status Codes Advanced Topics Supported Item Types Item Locator Formats JSON Item Selection Examples Complete API Request Examples Multiple Item Orders The Headless Checkout API allows you to specify which items your users can purchase using the lineItems property. This guide explains how to configure item selection for different asset types. ​ Supported Item Types Crossmint supports purchasing various types of digital and physical assets: Digital Assets Non-Fungible Tokens (NFTs) Semi-Fungible Tokens (SFTs) Fungible Tokens (FTs) including USDC (onramp) and memecoins Physical Products Amazon products Shopify products Flights: Closed alpha. Contact us if you are interested to try it out Coming Soon: Hotels, food delivery, and more All items available for purchase must comply with Crossmint's terms of service and legal requirements. Non-Fungible Collections and Fungible tokens must be reviewed and approved by Crossmint before being available in production. ​ Item Locator Formats You'll use one of these locator formats in your lineItems : Digital Assets - New Tokens Digital Assets - Existing Tokens Physical Products collectionLocator - For minting new tokens: crossmint:<_YOUR_COLLECTION_ID_> - For collections created in Crossmint Console (e.g. crossmint:9c82ef99-617f-497d-9abb-fd355291681b ) crossmint:<_YOUR_COLLECTION_ID_>:<_TEMPLATE_ID_> - For collections created in Crossmint Console where a specific NFT template is desired (e.g. crossmint:9c82ef99-617f-497d-9abb-fd355291681b:silver-pass ) <blockchain>:<contract-address> - Using direct contract addresses for external collections registered in Crossmint Console (e.g. ethereum:0x71c7656ec7ab88b098defb751b7401b5f6d897). ​ JSON Item Selection Examples collectionLocator collectionLocator - imported contract tokenLocator - EVM tokenLocator - Solana productLocator Copy Ask AI { \"lineItems\" : { \"collectionLocator\" : \"crossmint:_YOUR_COLLECTION_ID_\" , // Crossmint managed collection // \"collectionLocator\": \"crossmint:_YOUR_COLLECTION_ID_:_TEMPLATE_ID_\", // With specific template \"callData\" : { \"totalPrice\" : \"5.00\" , \"quantity\" : 1 // matches your contract's parameter name } } } // To use exact-in mode, add executionParameters: { maxSlippageBps: \"500\" } to the lineItem object. For custom contract params, add executionParameters: { customParam: \"value\" }. For external EVM contracts registered in Crossmint Console, ensure the attribute name in callData matches the parameter name in your mint function. For example: If your mint function has the signature: mintTo(address _to, uint256 _amount) then use _amount instead of quantity . See our Register External Collection guide for details on registering your contract. The buyerCreatorRoyaltyPercent parameter controls how much of the creator royalty percentage the buyer pays when purchasing Solana NFTs through marketplaces. Marketplace Requirements: Magic Eden : Required parameter Tensor : Optional (defaults to NFT's on-chain royalty percentage) Hadeswap : Optional (defaults to 100%) Parameter Details: Range : Must be between 0 and 100 (inclusive) Impact : Always affects final price calculation by applying royalty fees Validation : Throws error if outside valid range Automatic 100% Enforcement: The system automatically overrides this parameter to 100% when: Compressed NFTs : Detected when getAssetProof() returns valid proof data Royalty-enforced NFTs : Detected when NFT has MIP1 or Cardinal Token Manager protection ​ Complete API Request Examples For those who want a full copy/pastable code example, extended versions of the JSON guides are provided below. collectionLocator tokenLocator - EVM tokenLocator - Solana productLocator collectionLocator - imported contract Copy Ask AI const options = { method: \"POST\" , headers: { \"X-API-KEY\" : \"_YOUR_API_KEY_\" , \"Content-Type\" : \"application/json\" }, body: JSON . stringify ({ recipient: { email: \"buyer@example.com\" , }, payment: { method: \"ethereum-sepolia\" , currency: \"eth\" , }, lineItems: { collectionLocator: \"crossmint:_YOUR_COLLECTION_ID_\" , // Crossmint managed collection // collectionLocator: \"crossmint:_YOUR_COLLECTION_ID_:_TEMPLATE_ID_\", // With specific template callData: { totalPrice: \"5.00\" , quantity: 1 , // matches your contract's parameter name }, }, }), }; fetch ( \"https://staging.crossmint.com/api/2022-06-09/orders\" , options ) . then (( response ) => response . json ()) . then (( response ) => console . log ( response )) . catch (( err ) => console . error ( err )); For more details on physical product purchases, see our guides for Amazon Integration and Shopify Integration . ​ Multiple Item Orders You can enable users to purchase multiple items in a single transaction by providing an array of line items: collectionLocator tokenLocator productLocator Copy Ask AI lineItems = { [ { // First item - Managed collection collectionLocator: \"crossmint:_YOUR_COLLECTION_ID_\" , callData: { totalPrice: \"5.00\" , quantity: 1 } }, { // Second item - Managed collection with template collectionLocator: \"crossmint:_YOUR_COLLECTION_ID_:_TEMPLATE_ID_\" , callData: { totalPrice: \"10.00\" , quantity: 2 } }, { // Third item - External collection collectionLocator: \"ethereum:0x71c7656ec7ab88b098defb751b7401b5f6d897\" , callData: { totalPrice: \"15.00\" , quantity: 1 } } ]} Multiple Item Limitations: Maximum limit of 15 items per order collectionLocator & tokenLocator : All items must be on the same blockchain productLocator : Multiple items only supported in Headless Checkout (not Hosted or Embedded Checkout) productLocator : All items must be from the same ecommerce platform (e.g., all Amazon or all Shopify, but not mixed) Was this page helpful? Yes No Plan Your Solution Client or Server Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 886
  },
  {
    "id": "https://docs.crossmint.com/payments/headless/guides/localization#chunk_0",
    "url": "https://docs.crossmint.com/payments/headless/guides/localization",
    "title": "Localization - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Guides Localization Documentation API Reference SDK Reference CLI Solution Guides Changelog Introduction About Crossmint Getting Started Using AI Assistants Platform Wallets Introduction Quickstarts ⚡ Guides Authentication Introduction Quickstart ⚡ Guides Tokenization (Minting) Introduction Integrate Checkout Introduction Integrate Plan Your Integration Hosted (pop-up) Embedded Headless (API) Overview Quickstarts ⚡ Guides Plan Your Solution Item Selection Client or Server Production Launch Payment Methods Localization Specify Recipient Physical Products Design Your UI Order Lifecycle Supporting Your Customers Multiple Line Items Status Codes Advanced Topics Currencies and Languages Available ​ Currencies and Languages Available Variable Possible Values Description locale en-US de-DE es-ES fr-FR it-IT ja-JP ko-KR pt-PT ru-RU th-TH tr-TR uk-UA vi-VN zh-CN zh-TW Klingon Language selected for the email receipt. payment.currency usd aud eur gbp hkd inr jpy krw sgd vnd Currency for the payment quote. The original price of the collection will be automatically converted to the selected currency using the most recent bank exchange rates. Localization is not supported for stablecoins. While payment.crypto.defaultCurrency can be set to usdc or other supported tokens, localized stablecoins like eurc are not available. To customize the language use the property locale and for currency, set currency under the payment object. Here’s an example: Copy Ask AI { \"locale\" : \"es-ES\" , // Price for receipt (e.g. Spanish customers) \"payment\" : { \"receiptEmail\" : \"jsmith@example.com\" , \"method\" : \"stripe-payment-element\" , \"currency\" : \"eur\" , // If collection is priced in USD, price returned for quote will be in EUR \"payerAddress\" : \"<string>\" }, \"lineItems\" : { \"collectionLocator\" : \"crossmint:76ced33d-fec8-4741-a69f-450f1ae09fa6\" , \"callData\" : { \"totalPrice\" : \"<string>\" } } } When implementing a headless checkout, you’ll need to handle the display of localized content in your own UI based on the locale you’ve selected. The locale only affects the email receipt language, not the checkout interface built by you. Was this page helpful? Yes No Payment Methods Specify Recipient Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 333
  },
  {
    "id": "https://docs.crossmint.com/payments/headless/guides/multiple-line-items#chunk_0",
    "url": "https://docs.crossmint.com/payments/headless/guides/multiple-line-items",
    "title": "Multiple Line Items - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Guides Multiple Line Items Documentation API Reference SDK Reference CLI Solution Guides Changelog Introduction About Crossmint Getting Started Using AI Assistants Platform Wallets Introduction Quickstarts ⚡ Guides Authentication Introduction Quickstart ⚡ Guides Tokenization (Minting) Introduction Integrate Checkout Introduction Integrate Plan Your Integration Hosted (pop-up) Embedded Headless (API) Overview Quickstarts ⚡ Guides Plan Your Solution Item Selection Client or Server Production Launch Payment Methods Localization Specify Recipient Physical Products Design Your UI Order Lifecycle Supporting Your Customers Multiple Line Items Status Codes Advanced Topics Marketplace Sales Multiple lineItems for Secondary Sales Primary Sales of Multiple Items Error Handling The Headless Checkout multiple line items feature is used to build more elaborate purchase experiences, which require multiple NFT purchases at once. Multiple line items is currently only supported for NFTs. Currently, there is a maximum limit of 15 NFTs per order. Example use cases include: A marketplace where a buyer can add multiple NFTs to a cart and make the purchase in a single transaction. Enabling the purchase of multiple distinct tokens from an ERC-1155 contract in a single transaction. ​ Marketplace Sales The following example requires that you have a custom collectionId that supports secondary sales provisioned for you by your Crossmint Customer Success Engineer. For more information on marketplace and launchpad support, check this guide . If you need to contact the team about getting set up with reservoir-powered secondary sales support contact the team . ​ Multiple lineItems for Secondary Sales To enable a multi item purchase, you simply need to pass an array of lineItems instead of a single object when creating an order. The below examples demonstrate how to create a multiple line item order for secondary sales: cURL JavaScript Copy Ask AI curl --request POST \\ --url https://staging.crossmint.com/api/2022-06-09/orders \\ --header 'Content-Type: application/json' \\ --header 'X-API-KEY: _YOUR_API_KEY_' \\ --data '{ \"recipient\": { \"email\": \"testy@crossmint.com\" }, \"locale\": \"en-US\", \"payment\": { \"receiptEmail\": \"testy@crossmint.com\", \"method\": \"ethereum-sepolia\", \"currency\": \"eth\" }, \"lineItems\": [ { \"collectionLocator\": \"crossmint:_YOUR_SECONDARY_SALES_COLLECTION_ID_\", \"callData\": { \"contractAddress\": \"0x___CONTRACT_ADDRESS_OF_TOKEN\", \"tokenId\": \"234\" } }, { \"collectionLocator\": \"crossmint:_YOUR_SECONDARY_SALES_COLLECTION_ID_\", \"callData\": { \"contractAddress\": \"0x___ANOTHER_TOKEN_CONTRACT\", \"tokenId\": \"567\" } } ] }' After this step you will collect payment from the buyer as outlined in the Order Lifecycle section. ​ Primary Sales of Multiple Items Headless checkout currently only supports a single collectionId per order. This means the most common scenario where it makes sense to create a multiple line item order for primary sales is an ERC-1155 semi-fungible contract. This type of NFT contract supports minting distinct tokens by specifying the tokenId , whereas in ERC-721 style contract every token is unique and thus you only need to pass a quantity parameter to mint multiple. Using multiple line items for a standard ERC-721 contract would result in multiple mint transactions against the contract when only one is required. If you have a custom ERC-721 contract that supports the minter being able to specify which token they want to mint you could use the example(s) below to enable them to purchase multiple and specific tokens in the same transaction. This is an uncommon pattern for ERC-721 contracts though. In the following example, the use case is purchasing two unique tokens from an ERC-1155 contract. You can see that the _id passed in the callData of each lineItem is unique (1 and 2). cURL JavaScript Copy Ask AI curl --request POST \\ --url https://staging.crossmint.com/api/2022-06-09/orders \\ --header 'Content-Type: application/json' \\ --header 'X-API-KEY: _YOUR_API_KEY_' \\ --data '{ \"recipient\": { \"email\": \"testy@crossmint.com\" }, \"locale\": \"en-US\", \"payment\": { \"receiptEmail\": \"testy@crossmint.com\", \"method\": \"ethereum-sepolia\", \"currency\": \"eth\" }, \"lineItems\": [ { \"collectionLocator\": \"crossmint:_YOUR_COLLECTION_ID_\", \"callData\": { \"_id_\": \"1\", \"quantity\": \"1\" } }, { \"collectionLocator\": \"crossmint:_YOUR_COLLECTION_ID_\", \"callData\": { \"_id_\": \"2\", \"quantity\": \"1\" } }, ] }' As in the secondary sales example above, you’ll need to handle the remaining steps of the order lifecycle in your UI - payment, delivery, etc. ​ Error Handling As outlined in the Delivery Phase of the order lifecycle guides, it is important to keep track of the delivery for each item passed when you created the order and report back to the user on the status of the order. Each line item is attempted and processed independently. If one line item fails, others will still go through and be fulfilled. If any items are undeliverable, the buyer will be automatically refunded for that specific portion of their order. Was this page helpful? Yes No Supporting Your Customers Status Codes Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 749
  },
  {
    "id": "https://docs.crossmint.com/payments/headless/guides/order-lifecycle/completed-phase#chunk_0",
    "url": "https://docs.crossmint.com/payments/headless/guides/order-lifecycle/completed-phase",
    "title": "Order Complete Phase - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Order Lifecycle Order Complete Phase Documentation API Reference SDK Reference CLI Solution Guides Changelog Introduction About Crossmint Getting Started Using AI Assistants Platform Wallets Introduction Quickstarts ⚡ Guides Authentication Introduction Quickstart ⚡ Guides Tokenization (Minting) Introduction Integrate Checkout Introduction Integrate Plan Your Integration Hosted (pop-up) Embedded Headless (API) Overview Quickstarts ⚡ Guides Plan Your Solution Item Selection Client or Server Production Launch Payment Methods Localization Specify Recipient Physical Products Design Your UI Order Lifecycle Quote Phase Payment Phase Delivery Phase Order Complete Phase Supporting Your Customers Multiple Line Items Status Codes Advanced Topics Recommendations Where can they access the purchased item? What are the next steps? Handling Order failure The final phase in the order lifecycle is order completion. This occurs once payment has been successful and the delivery phase is finished. For a multi-item order, as long as at least one item was fulfilled successfully the order is considered successful. If all items fail to deliver in an order then the order status is failed. To determine the order completion status simply check the order.phase property. This will be set to completed for a successful order or failed if all items were unable to be delivered. For a multi-item order you’ll need to loop through the lineItems array returned in the get order response to ensure the delivery.status is completed for each item. ​ Recommendations Think through and implement the call to action that makes sense for your buyers. ​ Where can they access the purchased item? If the token was minted to their Crossmint wallet you can provide a direct link and/or render a representation of it. Refer to the wallet UI components page for some details on how to accomplish this. Even if they minted directly to an existing wallet you can provide a link to display the token in Crossmint. Use the following URL format to display NFTs within Crossmint: https://www.crossmint.com/user/collection/<chain>:<contractAddress>:<tokenId> For info on the values to use for <chain> refer to the supported chains page. ​ What are the next steps? Can they stake, trade, or utilize the purchase in some way? Tell them how! ​ Handling Order failure If there were any issues with delivery explain what happened and ensure they know that refunds are automatic. Anyone who purchases through Crossmint and has an issue with delivery can contact our support team for assistance. Was this page helpful? Yes No Delivery Phase Supporting Your Customers Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 422
  },
  {
    "id": "https://docs.crossmint.com/payments/headless/guides/order-lifecycle/credit-card-payment-phase#chunk_0",
    "url": "https://docs.crossmint.com/payments/headless/guides/order-lifecycle/credit-card-payment-phase",
    "title": "Pay with Card - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Payment Phase Pay with Card Documentation API Reference SDK Reference CLI Solution Guides Changelog Introduction About Crossmint Getting Started Using AI Assistants Platform Wallets Introduction Quickstarts ⚡ Guides Authentication Introduction Quickstart ⚡ Guides Tokenization (Minting) Introduction Integrate Checkout Introduction Integrate Plan Your Integration Hosted (pop-up) Embedded Headless (API) Overview Quickstarts ⚡ Guides Plan Your Solution Item Selection Client or Server Production Launch Payment Methods Localization Specify Recipient Physical Products Design Your UI Order Lifecycle Quote Phase Payment Phase Pay with Crypto Pay with Card Delivery Phase Order Complete Phase Supporting Your Customers Multiple Line Items Status Codes Advanced Topics Render the Stripe Payment Element Handle Payment Confirmation Poll for Status Updates Handling Refunded Payments The order lifecycle can be summarized as follows: 1 Order Creation or Update Your application determines recipient info for the buyer. It can be an email wallet or wallet address. Create or update an order with this info to proceed to next step. 2 API Response The API response returned from create/update order call(s) will include a payment.preparation object that your application uses to render the Stripe payment element. 3 Render Stripe Payment Element Use the stripePublishableKey and stripeClientSecret returned in the API response to render the credit card checkout form. 4 User Completes Payment The buyer completes checkout via credit card. 5 Poll for Status Your application will poll the GET order status and update the UI as the order progresses to the next phase. During the initial quote phase of the order the payment status will be requires-quote . Once the quote phase is completed, the order enters the payment phase and will have the status awaiting-payment , which indicates that the order is ready to be paid. See below the full list of possible statuses: Payment Status Explanation requires-quote still in the quote phase awaiting-payment ready to submit payment completed order is in the delivery or order completion phase completed with payment.refunded payment was completed but has been refunded ​ Render the Stripe Payment Element When the order is ready to accept payment, the API response will include an order.payment.preparation object, which contains two important properties to render the payment element. These properties are named: stripePublishableKey and stripeClientSecret . You can use these with the Stripe Payment Element package to collect the user’s credit card payment. Example response Copy Ask AI { \"clientSecret\" : \"_YOUR_CLIENT_SECRET_\" , \"order\" : { \"orderId\" : \"5ddc0090-7f63-4f6a-b68d-a91f8253b02e\" , \"phase\" : \"payment\" , \"locale\" : \"en-US\" , \"lineItems\" : [], // removed for brevity \"quote\" : { \"status\" : \"valid\" , \"quotedAt\" : \"_timestamp_\" , \"expiresAt\" : \"_timestamp_\" , \"totalPrice\" : { \"amount\" : \"0.5\" , \"currency\" : \"usd\" } }, \"payment\" : { \"status\" : \"awaiting-payment\" , \"method\" : \"stripe-payment-element\" , \"currency\" : \"usd\" , \"preparation\" : { \"stripeClientSecret\" : \"pi_returned_secret_\" , \"stripePublishableKey\" : \"pk_test_publishable_key_value\" } } } } Copy Ask AI import { Elements , PaymentElement } from \"@stripe/react-stripe-js\" ; import { loadStripe } from \"@stripe/stripe-js\" ; function PaymentElementWrapper ({ stripePublishableKey , stripeClientSecret , } : { stripePublishableKey : string ; stripeClientSecret : string ; }) { return ( < ElementsProviderWrapper stripePublishableKey = { stripePublishableKey } stripeClientSecret = { stripeClientSecret } > < PaymentElement className = \"w-full\" /> < SubmitButton /> </ ElementsProviderWrapper > ); } function ElementsProviderWrapper ({ stripePublishableKey , stripeClientSecret , children , } : { stripePublishableKey : string ; stripeClientSecret : string ; children : React . ReactNode ; }) { const stripePromise = loadStripe ( stripePublishableKey ); return ( < Elements stripe = { stripePromise } options = { { clientSecret: stripeClientSecret } } key = { ` ${ stripeClientSecret } - ${ stripePublishableKey } ` } > { children } </ Elements > ); } // Will be completed in the next step function SubmitButton () { return null ; } The key property on the Elements component is important to re-render the payment element if either the stripeClientSecret or stripePublishableKey change, as these fields can't be 'live' updated ​ Handle Payment Confirmation The Stripe Payment Element does not handle submitting the payment, so you will also need to create your own submit button. First, at the top of the file, update the import for @stripe/react-stripe-js to be: Copy Ask AI import { Elements , PaymentElement , useElements , useStripe } from \"@stripe/react-stripe-js\" ; Then, update the SubmitButton component with the following code: Copy Ask AI function SubmitButton () { const stripe = useStripe (); const elements = useElements (); async function handleSubmit () { if ( ! stripe || ! elements ) { console . error ( \"[handleSubmit] 'stripe' or 'elements' has not loaded\" ); return ; } const { error } = await stripe . confirmPayment ({ elements , confirmParams: { return_url: \"http://localhost:3000/success\" , // Some payment methods require a redirect after payment - in those cases you must provide a return_url, which should resume the order process - which would be the delivery phase }, redirect: \"if_required\" , // Can be 'if-required', or 'always' if you prefer to always redirect to the next page }); if ( error ) { console . error ( \"[handleSubmit] Failed to confirm payment\" , error ); // Optionally: display the message to the user via the UI return ; } console . log ( \"[handleSubmit] Successfully confirmed payment\" ); } return ( < button onClick = { handleSubmit } className = \"w-full px-4 py-3 bg-blue-500 text-white font-semibold\" > Submit </ button > ); } At this point, your app should look similar to the one displayed below (fill in the 2 input fields with the data you recieved in order.payment.preparation in order to see the live Payment Element). ​ Poll for Status Updates After making the payment via whichever payment method, you'll need to poll the Get Order API to check on the delivery status and present this info to your user. Refer to the complete get order API reference here . GET https://staging.crossmint.com/api/2022-06-09/orders/<orderId> ​ Handling Refunded Payments When polling for order",
    "chunk_index": 0,
    "word_count": 1000
  },
  {
    "id": "https://docs.crossmint.com/payments/headless/guides/order-lifecycle/credit-card-payment-phase#chunk_0",
    "url": "https://docs.crossmint.com/payments/headless/guides/order-lifecycle/credit-card-payment-phase",
    "title": "Pay with Card - Crossmint Docs",
    "content": "px-4 py-3 bg-blue-500 text-white font-semibold\" > Submit </ button > ); } At this point, your app should look similar to the one displayed below (fill in the 2 input fields with the data you recieved in order.payment.preparation in order to see the live Payment Element). ​ Poll for Status Updates After making the payment via whichever payment method, you'll need to poll the Get Order API to check on the delivery status and present this info to your user. Refer to the complete get order API reference here . GET https://staging.crossmint.com/api/2022-06-09/orders/<orderId> ​ Handling Refunded Payments When polling for order status, you may encounter a situation where payment.status is completed but the order also contains a payment.refunded property. This indicates that the payment was initially successful but has since been refunded. Copy Ask AI { \"order\" : { \"payment\" : { \"status\" : \"completed\" , \"refunded\" : { \"amount\" : \"1.00\" , \"currency\" : \"usd\" , \"txId\" : \"0x1234abcd...\" , \"chain\" : \"ethereum\" } } } } The payment.refunded object includes the following fields: amount : The amount that was refunded currency : The currency of the refund txId : The on-chain transaction ID the refund was sent in chain : The blockchain where the refund transaction occurred When you encounter this state, your application should: Display an appropriate message to the user indicating that their payment was refunded Provide the transaction ID ( txId ) so users can verify the refund on-chain Prevent any further actions related to the order (such as delivery expectations) Provide options for the user to place a new order if desired This state typically occurs when there was an issue with processing the order after payment was received, such as insufficient liquidity for memecoin purchases or compliance issues. Was this page helpful? Yes No Pay with Crypto Delivery Phase Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 315
  },
  {
    "id": "https://docs.crossmint.com/payments/headless/guides/order-lifecycle/crypto-payment-phase#chunk_0",
    "url": "https://docs.crossmint.com/payments/headless/guides/order-lifecycle/crypto-payment-phase",
    "title": "Pay with Crypto - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Payment Phase Pay with Crypto Documentation API Reference SDK Reference CLI Solution Guides Changelog Introduction About Crossmint Getting Started Using AI Assistants Platform Wallets Introduction Quickstarts ⚡ Guides Authentication Introduction Quickstart ⚡ Guides Tokenization (Minting) Introduction Integrate Checkout Introduction Integrate Plan Your Integration Hosted (pop-up) Embedded Headless (API) Overview Quickstarts ⚡ Guides Plan Your Solution Item Selection Client or Server Production Launch Payment Methods Localization Specify Recipient Physical Products Design Your UI Order Lifecycle Quote Phase Payment Phase Pay with Crypto Pay with Card Delivery Phase Order Complete Phase Supporting Your Customers Multiple Line Items Status Codes Advanced Topics Setting the Payer Address Submitting the Payment Awaiting Payment Confirmation Handling Refunded Payments An overview of the process works as follows: 1 Order Creation or Update Your user selects the chain, token, and wallet they want to pay from via your application and you create or update an existing order with this information. 2 API Response The API response returned from create or update order will include a serializedTransaction that your application uses to request payment from the user’s wallet. 3 User Confirms Transaction After your application initiates the payment request the user must confirm the transaction. 4 Poll for Status Your application will poll the GET order status and update the UI as the order progresses to the next phase. During the initial quote phase of the order the payment status will be requires-quote . Once the quote phase is completed, the order enters the payment phase. For most orders the payment phase will begin with the status awaiting-payment , which indicates that the order is ready to be paid. However, it can also begin with requires-crypto-payer-address if this information is missing. See below the full list of possible statuses: Payment Status Explanation requires-quote still in the quote phase requires-crypto-payer-address payment.payerAddress is missing requires-physical-address shipping address is required for physical products crypto-payer-insufficient-funds payerAddress cannot cover purchase for chain/currency given crypto-payer-insufficient-funds-for-gas payerAddress cannot cover the blockchain fees for the transaction awaiting-payment ready to submit payment completed order is in the delivery or order completion phase completed with payment.refunded payment was completed but has been refunded ​ Setting the Payer Address The order must know the address that will be sending the crypto payment. This enables Crossmint’s payment listeners to associate incoming transactions with the correct order. To update the order with the payer address, call the update API as demonstrated below: PATCH /api/2022-06-09/orders/<orderId> Copy Ask AI { \"payment\" : { \"currency\" : \"eth\" , \"method\" : \"base-sepolia\" , \"payerAddress\" : \"0x1234abcd…\" } } The payerAddress is the wallet the user will be sending the payment from. Note that you must send the entire payment object even if the currency and/or method values are not changing. ​ Submitting the Payment When you’ve fully prepared the order such that the payment status is awaiting-payment you’ll have everything necessary to request the crypto payment from your user. The details will be returned in the order.payment.preparation property. Example response Copy Ask AI { \"orderId\" : \"c167db0f-0cb9-4c59-80d3-aface6bcb338\" , \"phase\" : \"payment\" , \"locale\" : \"en-US\" , \"lineItems\" : [], // removed for brevity \"quote\" : // removed for brevity \"payment\" : { \"status\" : \"awaiting-payment\" , \"method\" : \"base-sepolia\" , \"currency\" : \"eth\" , \"preparation\" : { \"chain\" : \"base-sepolia\" , \"payerAddress\" : \"0x6C3b3225759Cbda68F96378A9F0277B4374f9F06\" , \"serializedTransaction\" : \"0x02f9015083014a34238489173700848917387582653d94a105c311fa72b8fb78c992ecbdb8b02ea5bd394d868644e0f88d81b9011e2d2d2d2d2d2d424547494e204d454d4f2d2d2d2d2d2d65794a68624763694f694a49557a49314e694973496e523563434936496b705856434a392e65794a756232356a5a534936496a4e6b5954673159324a6b4c546c6a4e4459744e4459774f4331694d44686a4c5746694e6d557a595746684e4468694d794973496d39795a4756795357526c626e52705a6d6c6c63694936496d4d784e6a646b596a426d4c54426a596a6b744e474d314f5330344d47517a4c57466d59574e6c4e6d4a6a596a4d7a4f434973496d6c68644349364d5463784f446b784d7a63774f48302e75574365534961563642504b6f6935724d7939394c2d4b56303256644d4d343442343934724c4352656f632d2d2d2d2d2d454e44204d454d4f2d2d2d2d2d2dc0\" } } } The order.payment.preparation property contains details about the chain that Crossmint is expecting the payment to be received on, the payer address, and a serializedTransaction that you can use to open a payment request in the user’s wallet. See examples of how to parse the response and request transaction confirmation from the user below: EVM Solana Copy Ask AI import { parseTransaction } from \"viem\" ; import { useSendTransaction } from \"wagmi\" ; const { sendTransactionAsync } = useSendTransaction (); const signAndSendTransaction = async ( serializedTransaction ) => { const txn = parseTransaction ( serializedTransaction ) try { await sendTransactionAsync ( txn ); } catch ( error ) { console . error ( \"Error sending transaction:\" , error ); } }; You should never alter the values in the parsed transaction object. Simply parse the transaction object as shown in the example above. Changing any of these values may result in Crossmint not being able to validate the payment. Calling the signAndSendTransaction function in the code snippet(s) above will open the user’s wallet and enable them to confirm the crypto payment. ​ Awaiting Payment Confirmation We recommend a polling interval of about 2500ms and never below 500ms. You can use client-side or server-side API keys to implement headless checkout. Check the code samples for the type of API key you’re using in your application. Client Side Server Side Copy Ask AI const getOrderPaymentStatus = async () => { const apiUrl = \"https://staging.crossmint.com/api/2022-06-09\" ; try { const res = await fetch ( ` ${ apiUrl } /orders/ ${ order . orderId } ` , { method: \"GET\" , headers: { \"Content-Type\" : \"application/json\" , \"x-api-key\" : process . env . NEXT_PUBLIC_CROSSMINT_API_KEY , authorization: clientSecret , // saved from response of create order call }, }); const refreshedOrder = await res . json (); setOrder ( refreshedOrder ); return refreshedOrder . payment . status ; } catch ( e ) { console . error ( e ); throw new Error ( \"Failed to fetch order\" ); } }; const pollPaymentStatus = async () => { const intervalId = setInterval ( async () => { const status = await getOrderPaymentStatus (); console . log ( \"payment status: \" , status ); if ( status === \"completed\" ) { clearInterval ( intervalId ); } }, 2500 ); // Set a timeout to stop polling after 60 seconds setTimeout (() => { clearInterval ( intervalId ); console . log ( \"Taking longer than expected...\" ); }, 60000 ); }; Once the payment is confirmed, you can move on to the delivery phase of the order lifecycle. ​ Handling Refunded Payments",
    "chunk_index": 0,
    "word_count": 1000
  },
  {
    "id": "https://docs.crossmint.com/payments/headless/guides/order-lifecycle/crypto-payment-phase#chunk_0",
    "url": "https://docs.crossmint.com/payments/headless/guides/order-lifecycle/crypto-payment-phase",
    "title": "Pay with Crypto - Crossmint Docs",
    "content": "}; const pollPaymentStatus = async () => { const intervalId = setInterval ( async () => { const status = await getOrderPaymentStatus (); console . log ( \"payment status: \" , status ); if ( status === \"completed\" ) { clearInterval ( intervalId ); } }, 2500 ); // Set a timeout to stop polling after 60 seconds setTimeout (() => { clearInterval ( intervalId ); console . log ( \"Taking longer than expected...\" ); }, 60000 ); }; Once the payment is confirmed, you can move on to the delivery phase of the order lifecycle. ​ Handling Refunded Payments When polling for order status, you may encounter a situation where payment.status is completed but the order also contains a payment.refunded property. This indicates that the payment was initially successful but has since been refunded. Copy Ask AI { \"order\" : { \"payment\" : { \"status\" : \"completed\" , \"refunded\" : { \"amount\" : \"1.23\" , \"currency\" : \"eth\" , \"txId\" : \"0x1234abcd...\" , \"chain\" : \"ethereum\" } } } } The payment.refunded object includes the following fields: amount : The amount that was refunded currency : The currency of the refund txId : The on-chain transaction ID the refund was sent in chain : The blockchain where the refund transaction occurred When you encounter this state, your application should: Display an appropriate message to the user indicating that their payment was refunded Provide the transaction ID ( txId ) so users can verify the refund on-chain Prevent any further actions related to the order (such as delivery expectations) Provide options for the user to place a new order if desired This state typically occurs when there was an issue with processing the order after payment was received, such as insufficient liquidity for memecoin purchases or compliance issues. Was this page helpful? Yes No Quote Phase Pay with Card Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 319
  },
  {
    "id": "https://docs.crossmint.com/payments/headless/guides/order-lifecycle/delivery-phase#chunk_0",
    "url": "https://docs.crossmint.com/payments/headless/guides/order-lifecycle/delivery-phase",
    "title": "Delivery Phase - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Order Lifecycle Delivery Phase Documentation API Reference SDK Reference CLI Solution Guides Changelog Introduction About Crossmint Getting Started Using AI Assistants Platform Wallets Introduction Quickstarts ⚡ Guides Authentication Introduction Quickstart ⚡ Guides Tokenization (Minting) Introduction Integrate Checkout Introduction Integrate Plan Your Integration Hosted (pop-up) Embedded Headless (API) Overview Quickstarts ⚡ Guides Plan Your Solution Item Selection Client or Server Production Launch Payment Methods Localization Specify Recipient Physical Products Design Your UI Order Lifecycle Quote Phase Payment Phase Delivery Phase Order Complete Phase Supporting Your Customers Multiple Line Items Status Codes Advanced Topics Error Handling When the payment phase is completed, the user is guaranteed to receive the items ordered or an automatic refund for any unfulfilled items. Upon payment completion you’ll want to display an animation in the UI indicating that the delivery is in-progress. Then poll the GET order API to check on delivery status and update your application UI when delivery status is updated. You can use client-side or server-side API keys to implement headless checkout. Check the code samples for the type of API key you’re using in your application. We recommend a polling interval of about 1000ms and never below 500ms. Client Side Server Side Copy Ask AI const getOrderDeliveryStatus = async () => { const apiUrl = \"https://staging.crossmint.com/api/2022-06-09\" ; try { const res = await fetch ( ` ${ apiUrl } /orders/ ${ order . orderId } ` , { method: \"GET\" , headers: { \"Content-Type\" : \"application/json\" , \"x-api-key\" : process . env . NEXT_PUBLIC_CROSSMINT_API_KEY , authorization: clientSecret , // saved from response of create order call }, }); const refreshedOrder = await res . json (); setOrder ( refreshedOrder ); return refreshedOrder . lineItems [ 0 ]. delivery . status ; } catch ( e ) { console . error ( e ); throw new Error ( \"Failed to fetch order\" ); } }; const pollDeliveryStatus = async () => { const intervalId = setInterval ( async () => { try { const status = await getOrderDeliveryStatus (); console . log ( \"delivery status: \" , status ); if ( status === \"completed\" ) { clearInterval ( intervalId ); } } catch ( e ) { clearInterval ( intervalId ); console . error ( \"Error polling delivery status: \" , e ); } }, 2500 ); // Set a timeout to stop polling after 60 seconds setTimeout (() => { clearInterval ( intervalId ); console . log ( \"Taking longer than expected...\" ); }, 60000 ); }; ​ Error Handling Once the payment has been confirmed, delivery is likely to complete successfully. Before accepting the payment Crossmint simulates the expected transaction, which means that most delivery issues will be prevented before payment is even accepted. Given a successful payment the delivery process will be retried until it completes successfully or determines that delivery is impossible. The most common cause for a delivery failure is that the item is no longer available. In the case of primary sales this could mean that the collection is sold out. For secondary sales the reason could be that someone else bought the item first. Your application should be aware of the potential for delivery to fail and provide information to the buyer on what to expect. In the case of multiple items purchased and partial delivery failure you’ll need to indicate which items were successfully delivered and which items failed. Be sure to let your buyer know that in the case of a failed delivery they will be refunded automatically. If they have any questions or issues they can reach out to Crossmint support directly for assistance. A receipt will be sent to the buyer as long as their email was included in the order. There are two ways to pass this information. If the recipient is set to an email address, it will be used to send the receipt. In the case that the recipient is set to a walletAddress you can include an optional receiptEmail property within the payment object. Crypto Payment Credit Card Payment Copy Ask AI { \"payment\" : { \"method\" : \"base-sepolia\" , \"currency\" : \"eth\" , \"payerAddress\" : \"0xabcd1234...\" , \"receiptEmail\" : \"user@example.com\" }, \"recipient\" : { \"walletAddress\" : \"0xabcd1234...\" } } Was this page helpful? Yes No Pay with Card Order Complete Phase Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 734
  },
  {
    "id": "https://docs.crossmint.com/payments/headless/guides/order-lifecycle/quote-phase#chunk_0",
    "url": "https://docs.crossmint.com/payments/headless/guides/order-lifecycle/quote-phase",
    "title": "Quote Phase - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Order Lifecycle Quote Phase Documentation API Reference SDK Reference CLI Solution Guides Changelog Introduction About Crossmint Getting Started Using AI Assistants Platform Wallets Introduction Quickstarts ⚡ Guides Authentication Introduction Quickstart ⚡ Guides Tokenization (Minting) Introduction Integrate Checkout Introduction Integrate Plan Your Integration Hosted (pop-up) Embedded Headless (API) Overview Quickstarts ⚡ Guides Plan Your Solution Item Selection Client or Server Production Launch Payment Methods Localization Specify Recipient Physical Products Design Your UI Order Lifecycle Quote Phase Payment Phase Delivery Phase Order Complete Phase Supporting Your Customers Multiple Line Items Status Codes Advanced Topics Quote Statuses Creating the Order Collection Locator Alternative: Token Locator Updating the Order Update the Recipient Update Chain and/or Currency Update the Locale Quote Expiration The first phase of the headless checkout process is the quote phase. During this phase, you construct an order that consists of the items being purchased, payment method, locale, and recipient. This will ultimately yield a quote to purchase it. It’s possible for an order to go from the payment phase back to the quote phase if the quote expires. You can initialize an order such that the quote phase is completed in a single API call. Alternatively, you can create a basic order and iteratively update it with locale, recipient, and payment method information. The only information you cannot edit on a quote is the lineItems array, which indicate the details of what is being purchased. If you need to alter the lineItems in an order you must create a new order. ​ Quote Statuses requires-recipient requires-physical-address - When purchasing physical items, a shipping address is required. The order will remain in this status until a valid physical address is provided, and payment.preparation parameters will not be present. expired valid ​ Creating the Order You will create the order via API call. The headless checkout offers support for both client-side or server-side API keys to enable you to build in a way that makes sense for your application. Orders can be created using a client-side API key, but any subsequent fetches or updates will require passing the clientSecret returned in the create-order API response as an authorization header. This guide is written with the expectation of using a server-side API key. For more information on using Crossmint APIs refer to API keys documentation page. To create a minimal order, make a POST request to the /api/2022-06-09/orders endpoint (view API reference ). The required properties to create an order are: payment and lineItems . Crypto Payment Credit Card Payment Copy Ask AI { \"payment\" : { \"method\" : \"base-sepolia\" , \"currency\" : \"eth\" , \"payerAddress\" : \"0x1234abcd...\" // optional to create order, but required to proceed to payment phase }, \"lineItems\" : { \"collectionLocator\" : \"crossmint:_YOUR_COLLECTION_ID_\" , \"callData\" : { \"totalPrice\" : \"0.0001\" } } } The payment object indicates the method and currency you intend to make the payment with. For crypto payments, this can be the same chain of the NFT or another chain that the buyer has liquidity on. For example, buying an NFT on BASE chain with BASE ETH , buying an NFT on Solana with SOL , or any cross-chain combination of a supported chain and currency. The payment.method value for credit card checkouts is stripe-payment-element and the payment.currency can be any of the supported fiat currencies . The lineItems object describes the NFTs being purchased. For primary sales, each item must be available from the same collectionId . Currently, minting from multiple contracts in the same purchase is not supported. Detailed guides on multi-line-item orders and marketplace (secondary sales) purchase are coming soon! ​ Collection Locator The collectionLocator within lineItems is how you specify the collection within Crossmint. For primary sales where the NFTs are being minted for the first time, the contract will need to be registered in the Crossmint console. You can find your collectionId within the Token collections tab in the developer console. ​ Alternative: Token Locator Alternatively, if this is a secondary sale, and your token is already minted and available on a supported marketplace, you instead use a tokenLocator , instead of a collectionLocator . Using a token locator means you do not need to register the collection in the Crossmint console. The tokenLocator for EVM Chains follows the format blockchain:contractAddress:tokenId and for Solana follows the format blockchain:tokenAddress . More information on the tokenLocator format can be found in the marketplaces and launchpads guide . Remember, you can view orders within the Developer Console to help get insight into the order process during testing and even after launch. ​ Updating the Order All orders require a recipient to progress to the payment phase. You can also optionally add a specific locale, which is used to indicate the language for the email receipt sent to the buyer. The primary reason you’ll update an existing order is when the buyer changes the payment method or currency they’d like to pay with in the UI that you build. To update the order, make a PATCH request to the /api/2022-06-09/orders/<orderId> endpoint to make these changes and receive a response with updated payment details. View API reference here . You can update all of these fields at the same time or individually depending on what makes the most sense for your use case. ​ Update the Recipient First, take a look at how to add the recipient to an existing order. The requires-recipient state occurs when you initialize a minimal order and do not include a recipient value. Valid options for the recipient property are email or walletAddress . When you set an email recipient, the token will be minted to a Crossmint custodial wallet that can be accessed via www.crossmint.com (or staging.crossmint.com during testing). You can update the recipient for an existing order as follows: PATCH /api/2022-06-09/orders/<orderId> Copy Ask AI { \"recipient\" : { \"email\" : \"buyer@example.com\" } } OR Copy Ask AI { \"recipient\" : { \"walletAddress\" : \"0x1234abcd…\" } } The wallet address",
    "chunk_index": 0,
    "word_count": 1000
  },
  {
    "id": "https://docs.crossmint.com/payments/headless/guides/order-lifecycle/quote-phase#chunk_0",
    "url": "https://docs.crossmint.com/payments/headless/guides/order-lifecycle/quote-phase",
    "title": "Quote Phase - Crossmint Docs",
    "content": "recipient to an existing order. The requires-recipient state occurs when you initialize a minimal order and do not include a recipient value. Valid options for the recipient property are email or walletAddress . When you set an email recipient, the token will be minted to a Crossmint custodial wallet that can be accessed via www.crossmint.com (or staging.crossmint.com during testing). You can update the recipient for an existing order as follows: PATCH /api/2022-06-09/orders/<orderId> Copy Ask AI { \"recipient\" : { \"email\" : \"buyer@example.com\" } } OR Copy Ask AI { \"recipient\" : { \"walletAddress\" : \"0x1234abcd…\" } } The wallet address must be compatible with the chain the NFT is on. For example, a Solana NFT requries a Solana wallet address and an NFT on an EVM chain requries a compatible EVM wallet address. ​ Update Chain and/or Currency To change details about how the buyer will pay for the NFTs you use the same API route as above and pass a new payment object. Crypto Payment Credit Card Payment Copy Ask AI { \"payment\" : { \"method\" : \"ethereum-sepolia\" , \"currency\" : \"usdc\" , \"payerAddress\" : \"0x1234abcd...\" } } This will return a new response that can be used to prompt the buyer to complete the crypto payment. Anytime you update the order you must ensure you use the newly returned payment.preparation.serializedTransaction to construct the transaction. ​ Update the Locale As mentioned above, the locale is used to set the language and currency for the email receipt sent to your buyer. The default is en-US . Below is an example of the body you’d pass to update the locale setting: Copy Ask AI { \"locale\" : \"es-ES\" } The available locale values are: en-US , de-DE , es-ES , fr-FR , it-IT , ja-JP , ko-KR , pt-PT , ru-RU th-TH tr-TR uk-UA vi-VN zh-CN zh-TW , Klingon ​ Quote Expiration The time before expiration depends on the payment method chosen. Check the quote.expiresAt property to determine how long the quote is valid for. Additionally, the quote.status property will be set to expired if this timeframe is exceeded. If your quote has expired you’ll need to create a new order. Was this page helpful? Yes No Design Your UI Pay with Crypto Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 382
  },
  {
    "id": "https://docs.crossmint.com/payments/headless/guides/payment-methods#chunk_0",
    "url": "https://docs.crossmint.com/payments/headless/guides/payment-methods",
    "title": "Payment Methods - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Guides Payment Methods Documentation API Reference SDK Reference CLI Solution Guides Changelog Introduction About Crossmint Getting Started Using AI Assistants Platform Wallets Introduction Quickstarts ⚡ Guides Authentication Introduction Quickstart ⚡ Guides Tokenization (Minting) Introduction Integrate Checkout Introduction Integrate Plan Your Integration Hosted (pop-up) Embedded Headless (API) Overview Quickstarts ⚡ Guides Plan Your Solution Item Selection Client or Server Production Launch Payment Methods Localization Specify Recipient Physical Products Design Your UI Order Lifecycle Supporting Your Customers Multiple Line Items Status Codes Advanced Topics Cross-Chain + Crypto Payments Credit Card Payments Test Price Limits and Test Credit Cards Accepting Credit Cards in Other Platforms ​ Cross-Chain + Crypto Payments You can easily create or update an order to receive a price quote, enabling your user to pay with crypto they have on the same chain or even liquidity they have on other chains. There are several considerations you need to keep in mind when building your app to support cross-chain payments. Some recommendations include the following: How to test the process out in staging/testnet and then move to production/mainnet Filtering down the list of tokens for which the connected wallet has enough balance to cover the purchase Ensuring the wallet is set to the same network as the selected payment chain Refer to the Order Lifecycle docs for details about creating and updating orders based on user selections. For a full list of supported crypto currencies, refer to the supported currencies page. You’ll need to build out a UI that enables your buyer to select from the supported currencies, and then update the existing order upon any changes. Code example(s) coming soon! ​ Credit Card Payments The option of accepting credit card payments via headless checkout is also available. For detailed examples of creating and updating orders, refer to the Order Lifecycle docs. ​ Test Price Limits and Test Credit Cards When building your applications using the staging environment, you can use various test credit cards numbers to see the entire process end-to-end, without actually having to transact using a real credit card. Check out the Testing Tips page for more info on price limits and test card numbers . ​ Accepting Credit Cards in Other Platforms Part of what makes headless checkout so powerful is that it opens the possibility of accepting credit card payments with Crossmint outside of a browser environment by integrating the relevant Stripe Payment Element SDK. Using the stripePublishableKey returned in the payment.preparation response is the first step towards adding Crossmint checkout support in native mobile apps and more. Was this page helpful? Yes No Production Launch Localization Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 452
  },
  {
    "id": "https://docs.crossmint.com/payments/headless/guides/physical-good-purchases#chunk_0",
    "url": "https://docs.crossmint.com/payments/headless/guides/physical-good-purchases",
    "title": "Physical Product Purchases - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Physical Products Physical Product Purchases Documentation API Reference SDK Reference CLI Solution Guides Changelog Introduction About Crossmint Getting Started Using AI Assistants Platform Wallets Introduction Quickstarts ⚡ Guides Authentication Introduction Quickstart ⚡ Guides Tokenization (Minting) Introduction Integrate Checkout Introduction Integrate Plan Your Integration Hosted (pop-up) Embedded Headless (API) Overview Quickstarts ⚡ Guides Plan Your Solution Item Selection Client or Server Production Launch Payment Methods Localization Specify Recipient Physical Products Physical Product Purchases Providers Design Your UI Order Lifecycle Supporting Your Customers Multiple Line Items Status Codes Advanced Topics Physical Address Requirement 1. Include Address During Order Creation 2. Update Address After Order Creation Order Status Handling Supported Providers Amazon Shopify Crossmint’s Headless Checkout now supports purchasing physical products using a wallet’s crypto balance through the productLocator parameter. This guide explains how to integrate physical product purchases and handle shipping requirements. ​ Physical Address Requirement When purchasing physical products, a shipping address is required (currently only US addresses are supported). You can provide this in two ways: ​ 1. Include Address During Order Creation Copy Ask AI POST /api/ 2022-06-09 /orders { \"recipient\" : { \"email\" : \"buyer@example.com\" , \"physicalAddress\" : { \"name\" : \"John Doe\" , // required \"line1\" : \"123 Main St\" , // required \"line2\" : \"Apt 4B\" , // optional \"city\" : \"San Francisco\" , // required \"state\" : \"CA\" , // required for US addresses \"postalCode\" : \"94105\" , // required \"country\" : \"US\" // required - only US is currently supported } } } ​ 2. Update Address After Order Creation If you create an order without specifying a physicalAddress , the order’s quote status will be requires-physical-address . response Copy Ask AI { \"order\" : { \"orderId\" : \"...\" , \"quote\" : { \"status\" : \"requires-physical-address\" } } } To resolve this status, update the order with the physical address: Copy Ask AI PATCH /api/ 2022-06-09 /orders/{ orderId } { \"recipient\" : { \"physicalAddress\" : { \"name\" : \"John Doe\" , // required \"line1\" : \"123 Main St\" , // required \"line2\" : \"Apt 4B\" , // optional \"city\" : \"San Francisco\" , // required \"state\" : \"CA\" , // required for US addresses \"postalCode\" : \"94105\" , // required \"country\" : \"US\" // required - only US is currently supported } } } After providing the physical address, the order status will update and include the necessary payment.preparation parameters to proceed with payment. ​ Order Status Handling Orders for physical products may enter the following statuses: requires-physical-address - The order requires a shipping address. During this status, payment.preparation parameters will not be present. valid - The order has all required information and is ready for payment. ​ Supported Providers ​ Amazon Amazon products can be purchased using either their ASIN or product URL. See the Amazon Integration Guide for details. ​ Shopify Shopify products can be purchased using the product URL and variant ID. See the Shopify Integration Guide for details. Was this page helpful? Yes No Specify Recipient Amazon Integration Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 519
  },
  {
    "id": "https://docs.crossmint.com/payments/headless/guides/plan-your-solution#chunk_0",
    "url": "https://docs.crossmint.com/payments/headless/guides/plan-your-solution",
    "title": "Plan Your Solution - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Guides Plan Your Solution Documentation API Reference SDK Reference CLI Solution Guides Changelog Introduction About Crossmint Getting Started Using AI Assistants Platform Wallets Introduction Quickstarts ⚡ Guides Authentication Introduction Quickstart ⚡ Guides Tokenization (Minting) Introduction Integrate Checkout Introduction Integrate Plan Your Integration Hosted (pop-up) Embedded Headless (API) Overview Quickstarts ⚡ Guides Plan Your Solution Item Selection Client or Server Production Launch Payment Methods Localization Specify Recipient Physical Products Design Your UI Order Lifecycle Supporting Your Customers Multiple Line Items Status Codes Advanced Topics Client or Server Approach Decide on Payment Methods Cross-Chain Payments Credit Card Payments Staging or Production Create or Import Your Collection in the Console Create Your API Key Next Steps The Headless Checkout suite of APIs offers the most sophisticated tooling available to build fully custom experiences for your users. This guide will walk you through the entire integration process in a logical order. The first step is to take a few minutes to plan out your solution. ​ Client or Server Approach Depending on how your application is architected, you may want to use server-side or client-side API keys. Check out the client or server guide for more info. ​ Decide on Payment Methods The Headless Checkout supports cross-chain crypto payments and credit cards. Decide if you want to enable both credit card and crypto payments, and which cross-chain tokens should be available. ​ Cross-Chain Payments Enable your users to pay for digital assets directly with crypto or with liquidity they have available on other chains by leveraging the cross-chain payments support. Check the cross-chain payments section for more in-depth guidance. ​ Credit Card Payments You can also use headless checkout to initiate credit card orders for your buyers. Check the credit card payments section for more in-depth guidance. ​ Staging or Production In most cases, it makes sense to start the integration process in the staging environment where all features are available and free to try. You can find more information about Staging and Production environments here . Headless checkout requires enablement by the Customer Success Engineering team in production. Contact Sales if your don’t already have a CSE assigned. ​ Create or Import Your Collection in the Console For NFT’s, you will need to have a collection that your user’s can purchase NFTs from. You can deploy a collection directly from the Crossmint Developer Console or import a contract you’ve deployed elsewhere. Check these guides for more details on creating or importing collections. Create a Collection Import a Collection Once you have a collection created or imported, you’ll have a collectionId , which is necessary to create orders. ​ Create Your API Key With the above steps completed, you’re ready to create an API key to use for your project. Login to the developer console where your collection was created in the previous step If you’re on the collection detail view, navigate back to the home page of the console Click the “Integrate” tab and select the “API Keys” section on top Before creating an API key, you’ll need to decide on server-side vs client-side implementation. You can find some more info in the Client or Server Guide . ​ Next Steps You’re ready to move on to implementing the Headless Checkout in your application! Was this page helpful? Yes No Pay with Other Crypto Item Selection Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 574
  },
  {
    "id": "https://docs.crossmint.com/payments/headless/guides/production-launch#chunk_0",
    "url": "https://docs.crossmint.com/payments/headless/guides/production-launch",
    "title": "Production Launch - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Guides Production Launch Documentation API Reference SDK Reference CLI Solution Guides Changelog Introduction About Crossmint Getting Started Using AI Assistants Platform Wallets Introduction Quickstarts ⚡ Guides Authentication Introduction Quickstart ⚡ Guides Tokenization (Minting) Introduction Integrate Checkout Introduction Integrate Plan Your Integration Hosted (pop-up) Embedded Headless (API) Overview Quickstarts ⚡ Guides Plan Your Solution Item Selection Client or Server Production Launch Payment Methods Localization Specify Recipient Physical Products Design Your UI Order Lifecycle Supporting Your Customers Multiple Line Items Status Codes Advanced Topics From Staging to Production with Headless Checkout General Launch Checklist Launch Checklist ​ From Staging to Production with Headless Checkout Headless checkout in production requires enablement by the Customer Success Engineering team. Contact Crossmint’s team to get access. Crossmint provides two developer environments : staging and production. It's recommended to test end-to-end on staging before moving to production. ​ General Launch Checklist Complete the following general steps on each tab to launch your checkout in production: Verify your Account Verify your Collection Limits ​ Account Verification To launch in production, you must verify your project account in the production console . Additionally, if as a seller you choose to accept credit card payments, you are required to complete a simple KYC which takes 2 minutes on average to complete. You only have to verify a project once, and can create as many collections as you wish within that project. New projects require additional verification. For full details on the project and collection verification process, requirements, and troubleshooting, please read our account verification documentation . ​ Launch Checklist Change all environment URLs from staging.crossmint.com/api/2022-06-09 to www.crossmint.com/api/2022-06-09 . Change your API keys to the production versions. Ensure your production API key has the appropriate scopes enabled, such as orders.create . Update your collection ID to the production one. As needed, change your passed-in props to be production ready (e.g. email, payment , lineItems ). See Code Example Production Staging Copy Ask AI // Using the REST API fetch ( \"https://www.crossmint.com/api/2022-06-09/orders\" , { method: \"POST\" , headers: { \"Content-Type\" : \"application/json\" , \"x-api-key\" : \"YOUR_PROD_API_KEY\" }, body: JSON . stringify ({ \"recipient\" : { \"email\" : \"steve@gmail.com\" }, \"locale\" : \"en-US\" , \"payment\" : { \"receiptEmail\" : \"steve@gmail.com\" , \"method\" : \"ethereum\" , \"currency\" : \"eth\" , \"payerAddress\" : \"0x742d35Cc6634C0532925a3b844Bc454e4438f44e\" }, \"lineItems\" : { \"collectionLocator\" : \"crossmint:YOUR_PROD_COLLECTION_ID\" , \"callData\" : { \"totalPrice\" : \"0.25\" , \"quantity\" : 1 } } }) }); Was this page helpful? Yes No Client or Server Payment Methods Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 433
  },
  {
    "id": "https://docs.crossmint.com/payments/headless/guides/providers/amazon#chunk_0",
    "url": "https://docs.crossmint.com/payments/headless/guides/providers/amazon",
    "title": "Amazon Integration - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Providers Amazon Integration Documentation API Reference SDK Reference CLI Solution Guides Changelog Introduction About Crossmint Getting Started Using AI Assistants Platform Wallets Introduction Quickstarts ⚡ Guides Authentication Introduction Quickstart ⚡ Guides Tokenization (Minting) Introduction Integrate Checkout Introduction Integrate Plan Your Integration Hosted (pop-up) Embedded Headless (API) Overview Quickstarts ⚡ Guides Plan Your Solution Item Selection Client or Server Production Launch Payment Methods Localization Specify Recipient Physical Products Physical Product Purchases Providers Amazon Integration Shopify Integration Design Your UI Order Lifecycle Supporting Your Customers Multiple Line Items Status Codes Advanced Topics Product Locator Format Example Flow Additional Information This guide explains how to integrate Amazon product purchases using the Headless Checkout API. ​ Product Locator Format When creating an order for an Amazon product, use the productLocator parameter with either the Amazon ASIN or product URL: Copy Ask AI // Amazon ASIN { \"lineItems\" : [ { \"productLocator\" : \"amazon:B01DFKC2SO\" } ] } // Amazon Product URL { \"lineItems\" : [ { \"productLocator\" : \"amazon:https://www.amazon.com/dp/B01DFKC2SO\" } ] } ​ Example Flow 1 Create the order Specify the receipient’s email Specify their shipping information Specify the payment method used Specify the product locator For a full list of supported currencies, refer to the supported currencies page. Copy Ask AI POST /api/ 2022-06-09 /orders { \"recipient\" : { \"email\" : \"buyer@example.com\" , \"physicalAddress\" : { \"name\" : \"John Doe\" , // required \"line1\" : \"123 Main St\" , // required \"city\" : \"San Francisco\" , // required \"state\" : \"CA\" , // required for US addresses \"postalCode\" : \"94105\" , // required \"country\" : \"US\" // required - only US is currently supported } }, \"payment\" : { \"method\" : \"ethereum-sepolia\" , \"currency\" : \"eth\" }, \"lineItems\" : [ { \"productLocator\" : \"amazon:B01DFKC2SO\" } ] } 2 Check order status With all requied information provided, the order’s response will include payment preparation details, as shown below. Copy Ask AI { \"order\" : { \"orderId\" : \"...\" , \"quote\" : { \"status\" : \"valid\" , ... }, \"payment\" : { \"preparation\" : { ... // Payment details will be present here } } } } ​ Additional Information Monitor order statuses through the Developer Console Review the Order Lifecycle guide for detailed status handling Check this guide for details on supported currencies and payment methods Was this page helpful? Yes No Physical Product Purchases Shopify Integration Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 413
  },
  {
    "id": "https://docs.crossmint.com/payments/headless/guides/providers/shopify#chunk_0",
    "url": "https://docs.crossmint.com/payments/headless/guides/providers/shopify",
    "title": "Shopify Integration - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Providers Shopify Integration Documentation API Reference SDK Reference CLI Solution Guides Changelog Introduction About Crossmint Getting Started Using AI Assistants Platform Wallets Introduction Quickstarts ⚡ Guides Authentication Introduction Quickstart ⚡ Guides Tokenization (Minting) Introduction Integrate Checkout Introduction Integrate Plan Your Integration Hosted (pop-up) Embedded Headless (API) Overview Quickstarts ⚡ Guides Plan Your Solution Item Selection Client or Server Production Launch Payment Methods Localization Specify Recipient Physical Products Physical Product Purchases Providers Amazon Integration Shopify Integration Design Your UI Order Lifecycle Supporting Your Customers Multiple Line Items Status Codes Advanced Topics Product Locator Format Example Flow Additional Information This guide explains how to integrate Shopify product purchases using the Headless Checkout API. ​ Product Locator Format When creating an order for a Shopify product, use the productLocator parameter with the Shopify product URL and variant ID: Copy Ask AI { \"lineItems\" : [ { \"productLocator\" : \"shopify:https://www.gymshark.com/products/gymshark-arrival-5-shorts-black-ss22:39786362601674\" } ] } The format for the product locator is shopify:<product-url>:<variant-id> , where: shopify: is the prefix identifying this as a Shopify product <product-url> is the full URL to the product page <variant-id> is the unique variant ID for the specific product option (size, color, etc.) ​ Example Flow 1 Create the order Specify the recipient’s email Specify their shipping information Specify the payment method used Specify the product locator For a full list of supported currencies, refer to the supported currencies page. Copy Ask AI POST /api/ 2022-06-09 /orders { \"recipient\" : { \"email\" : \"buyer@example.com\" , \"physicalAddress\" : { \"name\" : \"John Doe\" , // required \"line1\" : \"123 Main St\" , // required \"city\" : \"San Francisco\" , // required \"state\" : \"CA\" , // required for US addresses \"postalCode\" : \"94105\" , // required \"country\" : \"US\" // required - only US is currently supported } }, \"payment\" : { \"method\" : \"ethereum-sepolia\" , \"currency\" : \"eth\" }, \"lineItems\" : [ { \"productLocator\" : \"shopify:https://www.gymshark.com/products/gymshark-arrival-5-shorts-black-ss22:39786362601674\" } ] } 2 Check order status With all required information provided, the order’s response will include payment preparation details, as shown below. Copy Ask AI { \"order\" : { \"orderId\" : \"...\" , \"quote\" : { \"status\" : \"valid\" , ... }, \"payment\" : { \"preparation\" : { ... // Payment details will be present here } } } } ​ Additional Information Monitor order statuses through the Developer Console Review the Order Lifecycle guide for detailed status handling Check this guide for details on supported currencies and payment methods Note: Delivery destinations are limited to regions supported by the Shopify store itself. The ability to ship to a specific address depends on the merchant’s shipping configuration. Was this page helpful? Yes No Amazon Integration Design Your UI Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 465
  },
  {
    "id": "https://docs.crossmint.com/payments/headless/guides/specify-recipient#chunk_0",
    "url": "https://docs.crossmint.com/payments/headless/guides/specify-recipient",
    "title": "Specify Recipient - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Guides Specify Recipient Documentation API Reference SDK Reference CLI Solution Guides Changelog Introduction About Crossmint Getting Started Using AI Assistants Platform Wallets Introduction Quickstarts ⚡ Guides Authentication Introduction Quickstart ⚡ Guides Tokenization (Minting) Introduction Integrate Checkout Introduction Integrate Plan Your Integration Hosted (pop-up) Embedded Headless (API) Overview Quickstarts ⚡ Guides Plan Your Solution Item Selection Client or Server Production Launch Payment Methods Localization Specify Recipient Physical Products Design Your UI Order Lifecycle Supporting Your Customers Multiple Line Items Status Codes Advanced Topics Digital Products Physical Products Specifying the Recipient Recipient by Email Recipient by Wallet Address Physical Product Recipients You can deliver items to three kinds of recipients when using Crossmint: ​ Digital Products For digital items (NFTs, tokens, etc.), you can specify one of the following recipient types: Email address : Crossmint automatically generates a secure MPC-backed custodial wallet for the user's email and delivers the item inside that new wallet. Email addresses are case-insensitive. Wallet address : Directly specify a blockchain wallet address. Receipt will be delivered to the email address specified in payment.receiptEmail . This could be a user-owned wallet (e.g., MetaMask, Phantom, etc.) or a wallet you manage. The format depends on the blockchain: - Ethereum/EVM chains : 0x1234567890abcdef1234567890abcdef12345678 - Solana : 5FHneW46xGXgs5mUiveU4sbTyGBzmstUspZC92UhjJM694ty - Other chains : Contact support for format requirements ​ Physical Products For physical items, you must provide: Email address : Required for receipt delivery (legal requirement) Physical address : Required shipping information including name, address, city, state, postal code, and country ​ Specifying the Recipient For Headless Checkout, you specify the recipient when creating or updating an order. ​ Recipient by Email When specifying a recipient by email, Crossmint will automatically create a secure custodial wallet on the fly for that email address: Create Order Edit Order Copy Ask AI POST /api/ 2022-06-09 /orders { \"recipient\" : { \"email\" : \"user@example.com\" // Email address of the recipient }, \"locale\" : \"en-US\" , \"payment\" : { \"method\" : \"ethereum-sepolia\" , \"currency\" : \"eth\" , \"payerAddress\" : \"0x1234abcd...\" , \"receiptEmail\" : \"user@example.com\" }, \"lineItems\" : { \"collectionLocator\" : \"crossmint:cosdahdasda\" , \"callData\" : { \"totalPrice\" : \"0.0001\" , \"quantity\" : 1 } } } The recipient will be able to access their purchased items by logging into their Crossmint wallet in staging or mainnet . ​ Recipient by Wallet Address To deliver items directly to a specific blockchain wallet address: Create Order Edit Order Copy Ask AI POST /api/ 2022-06-09 /orders { \"recipient\" : { \"walletAddress\" : \"0x1234567890abcdef1234567890abcdef12345678\" // For EVM chains // or // \"walletAddress\": \"5FHneW46xGXgs5mUiveU4sbTyGBzmstUspZC92UhjJM694ty\" // For Solana }, \"locale\" : \"en-US\" , \"payment\" : { \"method\" : \"ethereum-sepolia\" , \"currency\" : \"eth\" , \"payerAddress\" : \"0x1234abcd...\" , \"receiptEmail\" : \"user@example.com\" // Required when using wallet address }, \"lineItems\" : { \"collectionLocator\" : \"crossmint:cosdahdasda\" , \"callData\" : { \"totalPrice\" : \"0.0001\" , \"quantity\" : 1 } } } If specifying a recipient by wallet address, ensure the address is valid for the chain your collection is on, which may differ from the chain the payment is performed on. ​ Physical Product Recipients Physical Address Format Extend the recipient object with the physicalAddress object. These are the properties (note the required vs optional fields): JSON Format JSX Format Copy Ask AI { \"recipient\" : { \"email\" : \"user@example.com\" , \"physicalAddress\" : { \"name\" : \"John Doe\" , // required - Full name of the recipient \"line1\" : \"123 Main St\" , // required - Street address, P.O. box, company name, c/o \"line2\" : \"Apt 4B\" , // optional - Apartment, suite, unit, building, floor, etc. \"city\" : \"San Francisco\" , // required - City, district, suburb, town, or village \"state\" : \"CA\" , // required for US addresses - State, county, province, or region \"postalCode\" : \"94105\" , // required - ZIP or postal code \"country\" : \"US\" // required - Two-letter country code (ISO 3166-1 alpha-2) } } } Note: You must include the email address of the recipient in the recipient object so an email receipt can be sent to the customer (this is a legal requirement for physical product deliveries). Currently, only US addresses are supported for physical product deliveries. When purchasing physical products, providing a physical address is required. If you don’t provide it in the initial order, you can update the order it later: Create Order Edit Order Copy Ask AI POST /api/ 2022-06-09 /orders { \"recipient\" : { \"email\" : \"buyer@example.com\" , // Email address of the recipient \"physicalAddress\" : { \"name\" : \"John Doe\" , \"line1\" : \"123 Main St\" , \"line2\" : \"Apt 4B\" , // optional \"city\" : \"San Francisco\" , \"state\" : \"CA\" , \"postalCode\" : \"94105\" , \"country\" : \"US\" } }, \"locale\" : \"en-US\" , \"payment\" : { \"method\" : \"ethereum-sepolia\" , \"currency\" : \"eth\" , \"payerAddress\" : \"0x1234abcd...\" , \"receiptEmail\" : \"buyer@example.com\" // Required for physical products }, \"lineItems\" : { \"collectionLocator\" : \"crossmint:cosdahdasda\" , \"callData\" : { \"totalPrice\" : \"0.0001\" , \"quantity\" : 1 } } } If you create an order with a physical product without specifying a physicalAddress , the order’s quote status will become requires-physical-address . After providing the physical address, the order status will update and include the necessary payment.preparation parameters to proceed with payment. Learn more about payment preparation in the payment phase documentation . Was this page helpful? Yes No Localization Physical Product Purchases Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 911
  },
  {
    "id": "https://docs.crossmint.com/payments/headless/guides/status-codes#chunk_0",
    "url": "https://docs.crossmint.com/payments/headless/guides/status-codes",
    "title": "Status Codes - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Guides Status Codes Documentation API Reference SDK Reference CLI Solution Guides Changelog Introduction About Crossmint Getting Started Using AI Assistants Platform Wallets Introduction Quickstarts ⚡ Guides Authentication Introduction Quickstart ⚡ Guides Tokenization (Minting) Introduction Integrate Checkout Introduction Integrate Plan Your Integration Hosted (pop-up) Embedded Headless (API) Overview Quickstarts ⚡ Guides Plan Your Solution Item Selection Client or Server Production Launch Payment Methods Localization Specify Recipient Physical Products Design Your UI Order Lifecycle Supporting Your Customers Multiple Line Items Status Codes Advanced Topics Quote Statuses Payment Statuses Delivery Statuses Crossmint’s headless checkout includes status codes for multiple aspects of the checkout process. Using status codes lets you build detailed user experiences and UI’s that inform about the status of the payment process and delivery of their purchase. There is the top level order.phase and then there are sub-statuses for quote , payment , and delivery . ​ Quote Statuses quote:all-line-items-unavailable - No items in the order are available for purchase at the current time quote:expired - The quote has expired and needs to be refreshed quote:requires-physical-address - Order requires a physical shipping address. During this status, payment.preparation parameters will not be present. See Physical Good Purchases guide for details. ​ Payment Statuses payment:requires-recipient - The order needs a recipient address to be specified before proceeding payment:requires-crypto-payer-address - A crypto wallet address needs to be provided for the payment payment:requires-kyc - User needs to complete KYC verification to proceed with the payment payment:failed-kyc - KYC verification was rejected and the user cannot proceed payment:manual-kyc - KYC verification requires manual review, the user will be notified via email of the outcome payment:awaiting-payment - The order is ready to receive payment from the user payment:failed - The payment attempt failed and needs to be retried payment:in-progress - The payment is currently being processed payment:completed - The payment has been successfully completed ​ Delivery Statuses delivery:in-progress - The NFT or physical item is being processed for delivery delivery:failed - The delivery process failed and needs to be retried delivery:completed - The NFT or physical item has been successfully delivered to the recipient Was this page helpful? Yes No Multiple Line Items Testing Tips Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 379
  },
  {
    "id": "https://docs.crossmint.com/payments/headless/guides/supporting-your-customers#chunk_0",
    "url": "https://docs.crossmint.com/payments/headless/guides/supporting-your-customers",
    "title": "Supporting Your Customers - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Guides Supporting Your Customers Documentation API Reference SDK Reference CLI Solution Guides Changelog Introduction About Crossmint Getting Started Using AI Assistants Platform Wallets Introduction Quickstarts ⚡ Guides Authentication Introduction Quickstart ⚡ Guides Tokenization (Minting) Introduction Integrate Checkout Introduction Integrate Plan Your Integration Hosted (pop-up) Embedded Headless (API) Overview Quickstarts ⚡ Guides Plan Your Solution Item Selection Client or Server Production Launch Payment Methods Localization Specify Recipient Physical Products Design Your UI Order Lifecycle Supporting Your Customers Multiple Line Items Status Codes Advanced Topics Information to pass onto Crossmint Additional items to check As an enterprise working with Crossmint, you receive priority customer support. Consequently, customer issues can be escalated to the Crossmint team. ​ Information to pass onto Crossmint When escalating customer issues to the Crossmint team, please ensure to pass on the following details, as it makes troubleshooting easier: Email Address : The email address they are using to purchase the digital asset. Website URL : The URL of the website they are trying to purchase the digital asset from. Order Id : The Order Id of the initiated payment. Collection Id : The Collection Id of the collection on Crossmint. Project Id : The Project Id of the project on Crossmint. ​ Additional items to check You can review the Orders tab to check the status of the checkout. If you are the dev reporting the error, please share the sample code as well. If nothing works and you are unable to troubleshoot the issue, you can redirect them to Crossmint’s support here . Was this page helpful? Yes No Order Complete Phase Multiple Line Items Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 289
  },
  {
    "id": "https://docs.crossmint.com/payments/headless/overview#chunk_0",
    "url": "https://docs.crossmint.com/payments/headless/overview",
    "title": "Headless Checkout | Crossmint's Whitelabel Solutions",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Headless (API) Overview Documentation API Reference SDK Reference CLI Solution Guides Changelog Introduction About Crossmint Getting Started Using AI Assistants Platform Wallets Introduction Quickstarts ⚡ Guides Authentication Introduction Quickstart ⚡ Guides Tokenization (Minting) Introduction Integrate Checkout Introduction Integrate Plan Your Integration Hosted (pop-up) Embedded Headless (API) Overview Quickstarts ⚡ Guides Advanced Topics When is the Headless Checkout the best fit? Introduction Get Started Advanced Topics For general information about Crossmint’s Payments product, see the introduction . This guide will focus on the features specific to the headless checkout. ​ When is the Headless Checkout the best fit? You want to build the entire user experience You want to use Crossmint checkout outside of a browser environment (e.g. native mobile app, game, VR headset, etc.) You are okay spending more time developing your own UX ​ Introduction Crossmint’s headless checkout API is a set of REST APIs that allow you to integrate credit card and cross-chain crypto payments inside your app with full control of the user experience. It is the most customizable version of the Crossmint suite of payments products, which allows anyone to buy digital assets with familiar payment methods (credit card, crypto on any chain independent on where the asset lives) with the same backend, but allowing full UI customizability and deep integration with your app’s UX. In-app purchases Ticketing solutions Custom web3app UI's and many more... ​ Get Started Pay with Crypto Quickstart Build a custom Pay with Crypto checkout experience for your digital assets Pay with Card - NFT - Quickstart Build a custom credit-card checkout experience Pay with USDC Quickstart Build a USDC checkout in 5 minutes (great for AI agents) Pay for Card - Memecoins - Quickstart Sell memecoins quickly with a credit card checkout Talk to an expert Contact our sales team for advanced support. ​ Advanced Topics Marketplaces & Launchpads Headless Status Codes Bring your own Collection Webhooks Was this page helpful? Yes No Upgrade to V3 Pay with Card - Onramp Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 351
  },
  {
    "id": "https://docs.crossmint.com/payments/headless/quickstarts/credit-card-memecoin-cko#chunk_0",
    "url": "https://docs.crossmint.com/payments/headless/quickstarts/credit-card-memecoin-cko",
    "title": "How to Accept Card Payments for Memecoins | Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Quickstarts ⚡ Pay with Card - Memecoins Documentation API Reference SDK Reference CLI Solution Guides Changelog Introduction About Crossmint Getting Started Using AI Assistants Platform Wallets Introduction Quickstarts ⚡ Guides Authentication Introduction Quickstart ⚡ Guides Tokenization (Minting) Introduction Integrate Checkout Introduction Integrate Plan Your Integration Hosted (pop-up) Embedded Headless (API) Overview Quickstarts ⚡ Pay with Card - Onramp Pay with Card - Memecoins Pay with Card - NFTs Pay with USDC Pay with Other Crypto Guides Advanced Topics Introduction Important Notes Prerequisites Fungible Token Specification Headless Memecoin Checkout Create an Order Render the Checkout.com Flow Component Submit Payment Poll for Status Updates Handling Refunded Payments Understanding the Code Next Steps Order Lifecycle Refreshing Orders with Checkout.com FAQ Enterprise feature. Contact us for access. ​ Introduction This guide will show you how to accept credit card payments using Crossmint’s Headless Checkout API for memecoin sales with Checkout.com as the payment provider. You’ll learn how to: Set up credit card payments for Solana memecoin purchases in JavaScript Implement a checkout UI using Checkout.com’s Flow component Track order status and delivery For a faster, embedded checkout solution with minimal setup time, see our embedded memecoin quickstart . ​ Important Notes Compliance Checks Crossmint runs compliance checks on all tokens to ensure they do not qualify as securities or currencies under applicable regulations. Transactions for tokens that are determined to be too similar to securities or currencies will fail. Supported Tokens Currently, memecoin checkout only supports Solana network. You can check which tokens are supported by using the fungibleCheckoutAvailable endpoint . A more in depth guide on token support is here . Delivery to External Wallets Only Memecoin checkout only delivers memecoins to EOAs (Externally Owned Accounts), not Crossmint supported delivery solutions, such as on-the-fly wallet creation (both Crossmint custodial wallets and smart wallet), delivery to Twitter handle, etc. Merchant of Record Crossmint remains the merchant of record for all transactions. Your buyers will still receive delivery receipts and transaction confirmations from Crossmint. ​ Prerequisites 1 Solana Wallet Have a Solana wallet address ready to receive purchased memecoins 2 Get API Keys Get your API keys from the Crossmint Console Client-side Server-side (Headless Checkout Only) Navigate to the \"Integrate\" section on the left navigation bar, and ensure you're on the \"API Keys\" tab. Within the Client-side keys section, click the \"Create new key\" button in the top right. On the authorized origins section, enter http://localhost:3000 and click \"Add origin\". Next, check the scopes labeled orders.create , orders.read , orders.update . Finally, create your key and save it for subsequent steps. ​ Fungible Token Specification To define which fungible token you'd like to purchase, you'll need to specify the tokenLocator in the format: For Solana : solana:${tokenMintHash} Example: solana:6p6xgHyF7AeE6TZkSmFsko444wqoP15icUSqi2jfGiPN tokenMintHash : The token mint hash (commonly known as contract address, CA, or mint hash) For EVM chains (Ethereum, Polygon, Arbitrum, Base, etc.): <blockchain>:<contractAddress>:<tokenId> Example: ethereum:0x1234567890123456789012345678901234567890:1 blockchain : The chain name (ethereum, polygon, arbitrum, base, etc.) contractAddress : The token contract address (40 hexadecimal characters) tokenId : For fungible tokens, use \"1\" as a placeholder value (required by validation schema) EVM Fungible Token Format : While fungible tokens don't conceptually have individual token IDs, Crossmint's validation schema requires the 3-part format <blockchain>:<contractAddress>:<tokenId> for all EVM tokens. For fungible tokens (memecoins), use \"1\" as the tokenId value. ​ Headless Memecoin Checkout The headless checkout API allows complete control over your checkout experience, including: Custom UI components and styling Custom payment flow sequences Integrated analytics and tracking Custom error handling and retry logic Branded confirmation pages ​ Create an Order The first step in the headless checkout process is to create an order. An order is an object datastructure that represents an intent to purchase in Crossmint’s systems. This guide will create a basic order, and then update it with required info step-by-step. You can also create the entire order in one API call if the necessary information is available at the time of order creation. This can be used for custom “one-click-checkout” experiences, should you wish to make them. Endpoint: POST https://www.crossmint.com/api/2022-06-09/orders Refer to the complete create order API reference here . Memecoins are now testable in staging using the xmeme token ( 7EivYFyNfgGj8xbUymR7J4LuxUHLKRzpLaERHLvi7Dgu ). All other token purchases will fail in staging. For production launch with other tokens, contact our sales team. Use the JavaScript code snippet below to create a starting point for your order. Alternatively, use the API playground to explore and create your own order. JavaScript JSON Copy Ask AI const apiKey = 'your-server-api-key' ; // CHANGE THIS TO YOUR SERVER API KEY const tokenId = 'solana:7EivYFyNfgGj8xbUymR7J4LuxUHLKRzpLaERHLvi7Dgu' ; // xmeme token for staging const deliveryAddress = 'your-solana-wallet-address' ; // CHANGE THIS TO YOUR RECEIVING SOLANA WALLET ADDRESS const receiptEmail = 'your-email@example.com' ; // CHANGE THIS TO YOUR EMAIL const options = { method: 'POST' , headers: { 'X-API-KEY' : apiKey , 'Content-Type' : 'application/json' }, body: JSON . stringify ({ lineItems: { tokenLocator: tokenId , // Token address in format solana:tokenAddress (e.g., solana:7EivYFyNfgGj8xbUymR7J4LuxUHLKRzpLaERHLvi7Dgu for xmeme token) executionParameters: { mode: \"exact-in\" , // The execution method for the order. It tells Crossmint to operate in buying fungibles mode amount: \"1\" , // default currency USD maxSlippageBps: \"500\" // Optional, or else default autogenerated slippage will be applied } }, payment: { method: \"checkoutcom-flow\" , // Using Checkout.com as the payment processor receiptEmail: receiptEmail }, recipient: { walletAddress: deliveryAddress } }) }; fetch ( 'https://staging.crossmint.com/api/2022-06-09/orders' , options ) . then ( response => response . json ()) . then ( response => console . log ( JSON . stringify ( response , null , 2 ))) . catch ( err => console . error ( err )); Example Response Copy Ask AI { \"clientSecret\" : \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJvcmRlcklkZW50aWZpZXIiOiJlZDM0YTU3OS03ZmJjLTQ1MDktYjhkOC05ZTYxOTU0Y2Q1NTUiLCJpYXQiOjE3Mzk0MDI3NjEsImV4cCI6MTczOTQ4OTE2MX0.8AU0Y31lJhnQD2-vAXEZp3ZeMSyh_Wdm9An02Z5AW0M\" , \"order\" : { \"orderId\" : \"ed34a579-7fbc-4509-b8d8-9e61954cd555\" , \"phase\" : \"payment\" , \"locale\" : \"en-US\" , \"lineItems\" : [ { \"chain\" : \"solana\" , \"metadata\" : { \"name\" : \"xmeme\" , \"description\" : \"Token xmeme from the contract:",
    "chunk_index": 0,
    "word_count": 1000
  },
  {
    "id": "https://docs.crossmint.com/payments/headless/quickstarts/credit-card-memecoin-cko#chunk_0",
    "url": "https://docs.crossmint.com/payments/headless/quickstarts/credit-card-memecoin-cko",
    "title": "How to Accept Card Payments for Memecoins | Crossmint Docs",
    "content": "}, recipient: { walletAddress: deliveryAddress } }) }; fetch ( 'https://staging.crossmint.com/api/2022-06-09/orders' , options ) . then ( response => response . json ()) . then ( response => console . log ( JSON . stringify ( response , null , 2 ))) . catch ( err => console . error ( err )); Example Response Copy Ask AI { \"clientSecret\" : \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJvcmRlcklkZW50aWZpZXIiOiJlZDM0YTU3OS03ZmJjLTQ1MDktYjhkOC05ZTYxOTU0Y2Q1NTUiLCJpYXQiOjE3Mzk0MDI3NjEsImV4cCI6MTczOTQ4OTE2MX0.8AU0Y31lJhnQD2-vAXEZp3ZeMSyh_Wdm9An02Z5AW0M\" , \"order\" : { \"orderId\" : \"ed34a579-7fbc-4509-b8d8-9e61954cd555\" , \"phase\" : \"payment\" , \"locale\" : \"en-US\" , \"lineItems\" : [ { \"chain\" : \"solana\" , \"metadata\" : { \"name\" : \"xmeme\" , \"description\" : \"Token xmeme from the contract: 7EivYFyNfgGj8xbUymR7J4LuxUHLKRzpLaERHLvi7Dgu\" , \"imageUrl\" : \"https://arweave.net/VQrPjACwnQRmxdKBTqNwPiyo65x7LAT773t8Kd7YBzw\" }, \"quote\" : { \"status\" : \"valid\" , \"charges\" : { \"unit\" : { \"amount\" : \"35.73\" , \"currency\" : \"usd\" } }, \"totalPrice\" : { \"amount\" : \"1\" , \"currency\" : \"usd\" }, \"quantityRange\" : { \"lowerBound\" : \"0.0265905\" , \"upperBound\" : \"0.0293895\" } }, \"delivery\" : { \"status\" : \"awaiting-payment\" , \"recipient\" : { \"locator\" : \"solana:BuWmGweapdysxU5VuUdi1RGoc4ibDG7TNirWjRtqF995\" , \"walletAddress\" : \"your-solana-wallet-address\" } }, \"executionMode\" : \"exact-in\" , \"maxSlippageBps\" : \"500\" , \"executionParams\" : { \"mintHash\" : \"7EivYFyNfgGj8xbUymR7J4LuxUHLKRzpLaERHLvi7Dgu\" , \"mode\" : \"exact-in\" , \"amount\" : \"1\" , \"maxSlippageBps\" : \"500\" } } ], \"quote\" : { \"status\" : \"valid\" , \"quotedAt\" : \"2025-02-12T23:26:00.397Z\" , \"expiresAt\" : \"2025-02-12T23:26:30.397Z\" , \"totalPrice\" : { \"amount\" : \"1\" , \"currency\" : \"usd\" } }, \"payment\" : { \"status\" : \"awaiting-payment\" , \"method\" : \"checkoutcom-flow\" , \"currency\" : \"usd\" , \"preparation\" : { \"checkoutcomPaymentSession\" : { \"id\" : \"string\" , \"payment_session_secret\" : \"pss_57d30246-c936-42ed-8bbd-b231da1b979e\" , \"payment_session_token\" : \"mFzZTY0:eyJpZCI6InBzXzJ0OUEzNFJZaHVVc0xCYkt3TzI5NFN1UVFFdyIsImVudGl0eV9pZCI6Im1FzZTY0:eyJpZCI6InBzXzJ0OUEzNFJZaHVVc0xCYkt3TzI5NFN1UVFFdyIsImVudGl0eV9pZCI6Im...\" }, \"checkoutcomPublicKey\" : \"pk_test_51KIdg4...\" }, \"receiptEmail\" : \"test@example.com\" } } } Note the following parameters in the request body: maxSlippageBps : Optional, or else default autogenerated slippage will be applied receiptEmail : Required for credit card payments to deliver receipt executionParameters.mode : The execution method for the order. “exact-out” is for NFTs, “exact-in” is for fungible tokens ​ Render the Checkout.com Flow Component After creating an order, you’ll need to render the Checkout.com Flow component to collect payment information. The Flow component is a pre-built UI that handles the payment collection process. Reference Documentation: Checkout.com docs for desktop Checkout.com docs for mobile Copy Ask AI import { useEffect , useState } from 'react' ; import Script from 'next/script' ; import Image from 'next/image' ; import { Spinner } from '@/components/ui/spinner' ; export function CheckoutComEmbedded ({ embeddedCheckoutParameters }) { const { createOrder , order } = useOrder (); const [ isCheckoutReady , setIsCheckoutReady ] = useState ( false ); const [ isScriptLoaded , setIsScriptLoaded ] = useState ( false ); useEffect (() => { async function initiateOrder () { try { await createOrder ( embeddedCheckoutParameters ); } catch ( error ) { console . error ( \"Failed to create order:\" , error ); } } initiateOrder (); }, [ embeddedCheckoutParameters , createOrder ]); useEffect (() => { if ( order == null ) { return ; } console . log ( \"order\" , order ); }, [ order ]); useEffect (() => { if ( order == null ) { return ; } const initializeCheckout = async () => { try { if ( typeof window . CheckoutWebComponents !== 'function' ) { console . error ( 'CheckoutWebComponents not loaded properly' ); return ; } const checkout = await window . CheckoutWebComponents ({ appearance: { colorBorder: \"#FFFFFF\" , colorAction: '#060735' , borderRadius: [ \"8px\" , \"50px\" ], }, publicKey: order . payment . preparation . checkoutcomPublicKey , environment: \"sandbox\" , // Change to \"live\" for production locale: \"en-US\" , paymentSession: order . payment . preparation . checkoutcomPaymentSession , cors: { mode: 'no-cors' , credentials: 'same-origin' }, onReady : () => { console . log ( \"Flow is ready\" ); setIsCheckoutReady ( true ); }, // checkout.com takes a second to load, so need to wait for it to render onPaymentCompleted : ( component , paymentResponse ) => { console . log ( \"Payment completed with ID:\" , paymentResponse . id ); }, onChange : ( component ) => { console . log ( `Component ${ component . type } validity changed:` , component . isValid ()); }, onError : ( component , error ) => { console . error ( \"Payment error:\" , error , \"Component:\" , component . type ); }, }); const flowComponent = checkout . create ( \"flow\" ); const container = document . getElementById ( \"flow-container\" ); if ( container ) { flowComponent . mount ( container ); } } catch ( error ) { console . error ( \"Error initializing checkout:\" , error ); } }; // Initialize checkout when the script is loaded and payment session exists const scriptElement = document . querySelector ( 'script[src*=\"checkout-web-components\"]' ); if ( scriptElement ) { initializeCheckout (); } }, [ order ]); if ( ! order ) { return ( < div className = \"w-full max-w-[400px] sm:max-w-[600px] md:max-w-[800px] mx-auto px-6 md:px-10\" > < div className = \"bg-white p-6 md:p-10 rounded-lg\" > < div className = \"flex flex-col items-center justify-center py-10\" > < Spinner size = \"large\" /> < p className = \"text-muted-foreground mt-4\" > Loading checkout... </ p > </ div > </ div > </ div > ); } return ( < div className = \"w-full max-w-[400px] sm:max-w-[600px] md:max-w-[800px] mx-auto px-6 md:px-10\" > < div className = \"bg-white p-6 md:p-10 rounded-lg\" > < Script src = \"https://checkout-web-components.checkout.com/index.js\" strategy = \"afterInteractive\" onLoad = { () => { console . log ( \"Checkout.com script loaded\" ); setIsScriptLoaded ( true ); } } onError = { ( e ) => { console . error ( \"Error loading Checkout.com script:\" , e ); } } /> < div className = \"flex-grow\" > < div id = \"flow-container\" className = \"w-full\" ></ div > </ div > { isCheckoutReady && ( < div className = \"text-center mt-4 text-sm\" style = { { color: 'rgb(102, 102, 102)' } } > < p > By continuing, you accept { ' ' } < Image src = \"/crossmint-logo.svg\" alt = \"Crossmint\" width = { 16 } height = {",
    "chunk_index": 0,
    "word_count": 1000
  },
  {
    "id": "https://docs.crossmint.com/payments/headless/quickstarts/credit-card-memecoin-cko#chunk_1",
    "url": "https://docs.crossmint.com/payments/headless/quickstarts/credit-card-memecoin-cko",
    "title": "How to Accept Card Payments for Memecoins | Crossmint Docs",
    "content": "script loaded\" ); setIsScriptLoaded ( true ); } } onError = { ( e ) => { console . error ( \"Error loading Checkout.com script:\" , e ); } } /> < div className = \"flex-grow\" > < div id = \"flow-container\" className = \"w-full\" ></ div > </ div > { isCheckoutReady && ( < div className = \"text-center mt-4 text-sm\" style = { { color: 'rgb(102, 102, 102)' } } > < p > By continuing, you accept { ' ' } < Image src = \"/crossmint-logo.svg\" alt = \"Crossmint\" width = { 16 } height = { 16 } className = \"inline-block mx-1\" /> < a href = \"https://www.crossmint.com/legal/terms-of-service\" target = \"_blank\" rel = \"noopener noreferrer\" className = \"underline hover:text-gray-800\" > Crossmint's terms </ a > </ p > </ div > ) } </ div > </ div > ); } // Add this to your global declarations declare global { interface Window { CheckoutWebComponents : any ; } } ​ Submit Payment The Checkout.com Flow component handles the payment submission process automatically. When a user completes the payment form and clicks the payment button, the onPaymentCompleted callback will be triggered with the payment response. Unlike with Stripe, you don’t need to manually submit the payment form. The Checkout.com Flow component takes care of the entire payment process, including validation, submission, and handling the response. Here’s how the payment flow works with Checkout.com: The user fills out the payment form rendered by the Flow component The user clicks the payment button in the Flow component The Flow component validates the payment information If valid, the Flow component submits the payment to Checkout.com The onPaymentCompleted callback is triggered with the payment response You can use the payment response to update your UI and proceed to the next step Handling Payment Success: Copy Ask AI // Example of handling the payment completion onPaymentCompleted : ( component , paymentResponse ) => { console . log ( \"Payment completed with ID:\" , paymentResponse . id ); // Update your UI to show payment success setPaymentStatus ( 'success' ); // Proceed to the next step (e.g., order confirmation) navigateToOrderConfirmation ( orderId ); }, If there’s an error during the payment process, the onError callback will be triggered: Copy Ask AI onError : ( component , error ) => { console . error ( \"Payment error:\" , error , \"Component:\" , component . type ); // Update your UI to show payment failure setPaymentStatus ( 'error' ); // Display error message to the user setErrorMessage ( error . message || 'Payment failed. Please try again.' ); }, ​ Poll for Status Updates After making the payment, you’ll need to poll the Get Order API to check on the delivery status and present this information to your user. Endpoint: GET https://staging.crossmint.com/api/2022-06-09/orders/<orderId> Refer to the complete get order API reference here . Example Response: Copy Ask AI { \"id\" : \"order_xyz\" , \"status\" : \"completed\" , \"phases\" : { \"quote\" : { \"status\" : \"completed\" }, \"payment\" : { \"status\" : \"completed\" }, \"delivery\" : { \"status\" : \"completed\" , \"details\" : \"Memecoins delivered to specified wallet\" } } } ​ Handling Refunded Payments When polling for order status, you may encounter a situation where payment.status is completed but the order also contains a payment.refunded property. This indicates that the payment was initially successful but has since been refunded. Copy Ask AI { \"order\" : { \"payment\" : { \"status\" : \"completed\" , \"refunded\" : { \"amount\" : \"1.00\" , \"currency\" : \"usd\" , \"txId\" : \"0x1234abcd...\" , \"chain\" : \"ethereum\" } } } } The payment.refunded object includes the following fields: amount : The amount that was refunded currency : The currency of the refund txId : The on-chain transaction ID the refund was sent in chain : The blockchain where the refund transaction occurred When you encounter this state, your application should: Display an appropriate message to the user indicating that their payment was refunded Provide the transaction ID ( txId ) so users can verify the refund on-chain Prevent any further actions related to the order (such as delivery expectations) Provide options for the user to place a new order if desired This state typically occurs when there was an issue with processing the order after payment was received, such as insufficient liquidity for memecoin purchases or compliance issues. 🎉 Congratulations! You’ve successfully set up your headless memecoin checkout. Check out the Next Steps section below to learn how to customize your integration. ​ Understanding the Code Quote Expiration Price quotes are valid for 30 seconds. After expiration, you'll need to request a new quote from the embedded checkout component Slippage Crossmint applies the slippage specified in your executionParameters.maxSlippageBps . If not provided, Crossmint will use the default slippage configuration (typically 500 BPS or 5%) from Crossmint's provider ​ Next Steps Design Your UI Learn how to design your headless checkout experience Handle Webhooks Implement webhook handling for order updates ​ Order Lifecycle The order goes through several phases: Learn more about order phases in the headless checkout guide or embedded checkout guide A summary of the phases is below: Quote Phase (30-second validity) Initial price quote generated Requires recipient information to proceed Payment Phase Collect payment information (via Crossmint's embedded UI, or your own Checkout.com Flow component if using headless checkout) Process credit card payment Handle payment completion and errors Delivery Phase Purchase memecoin with USDC Apply specified slippage tolerance Send transfer transaction to recipient wallet Completion Order marked as completed Receipt email sent to recipient Memecoins have been delivered to the recipient wallet If the quote expires (after 30 seconds), you’ll need to create a new order to get updated pricing. You can choose the UX flow to handle this. ​ Refreshing Orders with Checkout.com If an order expires before payment is completed (e.g., the 30-second quote validity period ends), you can either create a new order or use the refresh quote API: Copy Ask AI async refreshOrder (",
    "chunk_index": 1,
    "word_count": 1000
  },
  {
    "id": "https://docs.crossmint.com/payments/headless/quickstarts/credit-card-memecoin-cko#chunk_2",
    "url": "https://docs.crossmint.com/payments/headless/quickstarts/credit-card-memecoin-cko",
    "title": "How to Accept Card Payments for Memecoins | Crossmint Docs",
    "content": "Delivery Phase Purchase memecoin with USDC Apply specified slippage tolerance Send transfer transaction to recipient wallet Completion Order marked as completed Receipt email sent to recipient Memecoins have been delivered to the recipient wallet If the quote expires (after 30 seconds), you’ll need to create a new order to get updated pricing. You can choose the UX flow to handle this. ​ Refreshing Orders with Checkout.com If an order expires before payment is completed (e.g., the 30-second quote validity period ends), you can either create a new order or use the refresh quote API: Copy Ask AI async refreshOrder ( orderId , clientSecret ) { try { const ancestorOrigins = typeof window !== 'undefined' && window . location ?. ancestorOrigins ? Array . from ( window . location . ancestorOrigins ) : []; const response = await this . callApi ( `2022-06-09/orders/ ${ orderId } /refresh` , \"POST\" , {}, { \"authorization\" : ` ${ clientSecret } ` , \"x-ancestor-origins\" : JSON . stringify ( ancestorOrigins ) }); const parsed = await response . json (); return parsed ; } catch ( error ) { console . error ( \"Error refreshing quote:\" , error ); throw error ; } } ​ FAQ Is there a UI Crossmint provides? Yes, you can use our embedded checkout or hosted checkout options. Contact our sales team to learn more about these solutions and find the best fit for your needs. Do I need to complete KYC to purchase memecoins? Crossmint KYC is currently disabled for memecoin purchases. This means that if your buyers typically have high risk profiles, their transaction may be declined. To increase conversion, please read the improving conversion guide. What happens if my transaction fails? When a user attempts a purchase, Crossmint puts a hold on their credit card. Only if the blockchain transaction succeeds, funds are captured. If the blockchain transaction fails, funds are released and the user is never charged. What are the transaction limits? The default transaction limit is 1,000 USD per user. A single wallet address is subject to a daily limit of 1,000 USD per user, the same as for NFT purchases. If you need a higher limit, speak to your Crossmint representative. Is there a limit on how much of a single token I can sell in a day? Yes, there is a volume limit of 1,000,000 USD worth of credit card purchases per day. This limit resets daily at 11:59 PM EST. What do the order creation parameters mean? The order creation request includes several important parameters: Payment Object method : Set to checkoutcom-flow for Checkout.com credit card payments currency : Set to usd for US Dollar payments receiptEmail : Required for credit card payments to deliver receipt Line Items Object tokenLocator : Specifies the memecoin token address in the format solana:tokenAddress executionParameters : mode : Set to \"exact-in\" for memecoin purchases (specifies exact USD amount to spend) amount : Amount to purchase in USD maxSlippageBps : Set to \"500\" for 5% slippage tolerance. If not provided, the default slippage will be applied from the available liquidity provider. Response Parameters The order response includes Checkout.com-specific parameters: checkoutcomPaymentSession : Contains the payment session information from Checkout.com id : The payment session ID payment_session_secret : The secret used to authenticate with Checkout.com payment_session_token : The token used to initialize the Checkout.com Flow component checkoutcomPublicKey : The public key used to initialize the Checkout.com Flow component Was this page helpful? Yes No Pay with Card - Onramp Pay with Card - NFTs Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 2,
    "word_count": 596
  },
  {
    "id": "https://docs.crossmint.com/payments/headless/quickstarts/credit-card-nft#chunk_0",
    "url": "https://docs.crossmint.com/payments/headless/quickstarts/credit-card-nft",
    "title": "How to use Headless Checkout | Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Quickstarts ⚡ Pay with Card - NFTs Documentation API Reference SDK Reference CLI Solution Guides Changelog Introduction About Crossmint Getting Started Using AI Assistants Platform Wallets Introduction Quickstarts ⚡ Guides Authentication Introduction Quickstart ⚡ Guides Tokenization (Minting) Introduction Integrate Checkout Introduction Integrate Plan Your Integration Hosted (pop-up) Embedded Headless (API) Overview Quickstarts ⚡ Pay with Card - Onramp Pay with Card - Memecoins Pay with Card - NFTs Pay with USDC Pay with Other Crypto Guides Advanced Topics Introduction Prerequisites From Crossmint Integration Steps 1. Create an Order Optional - View the Order in the Console 2. Update the Order with Recipient 3. Render the Stripe Payment Element 4. Submitting Payment 6. Poll for Status Updates Next Steps Enterprise feature. Contact us for access. ​ Introduction In this quickstart you’ll learn how to accept credit card payments (including Apple and Google Pay) using Crossmint’s headless APIs to purchase an NFT on the polygon-amoy testnet ​ Prerequisites ​ From Crossmint Create a developer account in the Staging Console . Create a new collection or import yours into the console, and have your collectionId ready. Make sure you follow the maximum prices for collections set in staging outlined here . Create a server-side API key with the orders.create , orders.update , and orders.read scopes enabled. More info on creating API keys here . This Quickstart assumes that you'll be using the API Playground or cURL requests to make the API calls. This approach requires the use of a server-side API key. If you would rather follow the quickstart while building a client-side app that makes requests to Crossmint directly from the browser, you must use a client-side API key. See the Server or Client Guide for more information. To integrate in production/mainnet, you'll also need to complete account and collection verification. More information in the production launch guide. ​ Integration Steps This quickstart will focus on the API calls to Crossmint necessary to implement headless checkout in your project, as well as the usage of the Stripe Payment Element to collect the user's payment. This guide assumes you are using React, however Crossmint's headless fiat checkout can be used in all environments supported by stripe such as Web, iOS, Android, and React Native. ​ 1. Create an Order The first step in the headless checkout process is to create an order. An order is an object datastructure, that represents an intent to purchase in Crossmint's systems. This guide will create a basic order, and then update it with required info step-by-step. You can also create the entire order in one API call if the necessary information is available at the time of order creation. This can be used for custom \"one-click-checkout\" experiences, should you wish to make them. POST https://staging.crossmint.com/api/2022-06-09/orders Refer to the complete create order API reference here . Copy Ask AI { \"payment\" : { \"method\" : \"stripe-payment-element\" }, \"lineItems\" : { \"collectionLocator\" : \"crossmint:<collectionId>\" , // Use the collectionId you created in the Prerequisites section \"callData\" : { \"totalPrice\" : \"0.0001\" } } } Example Response Copy Ask AI { \"clientSecret\" : \"_removed_\" , \"order\" : { \"orderId\" : \"cc40e6af-f8dc-4ac2-8e26-d91a32f271cf\" , \"phase\" : \"quote\" , \"locale\" : \"en-US\" , \"lineItems\" : [ { \"chain\" : \"polygon-amoy\" , \"quantity\" : 1 , \"callData\" : { \"quantity\" : 1 }, \"metadata\" : { \"name\" : \"Headless Demo\" , \"description\" : \"NFT Checkout Demo\" , \"imageUrl\" : \"https://utfs.io/f/cd8545b7-3410-4fcd-988d-cd11951ed53c-g287ok.png\" }, \"quote\" : { \"status\" : \"requires-recipient\" , \"charges\" : { \"unit\" : { \"amount\" : \"0.000169004\" , \"currency\" : \"eth\" } }, \"totalPrice\" : { \"amount\" : \"0.000169004\" , \"currency\" : \"eth\" } }, \"delivery\" : { \"status\" : \"awaiting-payment\" } } ], \"quote\" : { \"status\" : \"requires-recipient\" , \"quotedAt\" : \"_DATE_\" , \"expiresAt\" : \"_DATE_\" , \"totalPrice\" : { \"amount\" : \"0.000169004\" , \"currency\" : \"eth\" } }, \"payment\" : { \"status\" : \"requires-quote\" , \"preparation\" : { \"stripePublishableKey\" : \"pk_test_51KIdg4...\" } } } } For the comprehensive list of supported currencies and chains, view the Supported Currencies page. At this point you have successfully created an Order in the Crossmint system! The order is currently in the quote phase and is awaiting a recipient to be set. Setting a recipient does not mean that we are sending the NFT to them; it is merely used to verify that the intended recipient is a valid address, before beginning gathering payment info. ​ Optional - View the Order in the Console Congratulations! You've made your first contact with Crossmint's systems. You can see your request show up in the developer console. Navigate to the Orders tab for your collection in the Staging Console and enter the orderId returned from your API response to find your incomplete order object and status. ​ 2. Update the Order with Recipient Next, you will set who's the intended recipient of the order by specifying a wallet address or email. When a recipient is passed as an email, Crossmint will automatically create a custodial wallet associated with this email, that can be accessed by logging in to the (staging) Crossmint Wallet or from your website if you're using whitelabel wallets . PATCH https://staging.crossmint.com/api/2022-06-09/orders/<orderId> Remember to ensure you're using the right type of API key! See the Server or Client Guide for more info. Refer to the complete edit order API reference here . Legally, for card payments, an email must be specified in order to deliver a receipt to your user, either in recipient.email or in payment.receiptEmail . If one is not specified, the API will not return the fields necessary to collect the user’s payment. Email recipient Wallet recipient with receipt email Copy Ask AI { \"recipient\" : { \"email\" : \"test@example.com\" } } ​ 3. Render the Stripe Payment Element After a recipient and/or a receipt email has been specified, the API will return the fields necessary to render the Stripe Payment Element and collect the user’s payment. The two fields are stripePublishableKey and",
    "chunk_index": 0,
    "word_count": 1000
  },
  {
    "id": "https://docs.crossmint.com/payments/headless/quickstarts/credit-card-nft#chunk_0",
    "url": "https://docs.crossmint.com/payments/headless/quickstarts/credit-card-nft",
    "title": "How to use Headless Checkout | Crossmint Docs",
    "content": "payments, an email must be specified in order to deliver a receipt to your user, either in recipient.email or in payment.receiptEmail . If one is not specified, the API will not return the fields necessary to collect the user’s payment. Email recipient Wallet recipient with receipt email Copy Ask AI { \"recipient\" : { \"email\" : \"test@example.com\" } } ​ 3. Render the Stripe Payment Element After a recipient and/or a receipt email has been specified, the API will return the fields necessary to render the Stripe Payment Element and collect the user’s payment. The two fields are stripePublishableKey and stripeClientSecret , which can be found within order.payment.preparation . Copy Ask AI import { Elements , PaymentElement } from \"@stripe/react-stripe-js\" ; import { loadStripe } from \"@stripe/stripe-js\" ; function PaymentElementWrapper ({ stripePublishableKey , stripeClientSecret , } : { stripePublishableKey : string ; stripeClientSecret : string ; }) { return ( < ElementsProviderWrapper stripePublishableKey = { stripePublishableKey } stripeClientSecret = { stripeClientSecret } > < PaymentElement className = \"w-full\" /> < SubmitButton /> </ ElementsProviderWrapper > ); } function ElementsProviderWrapper ({ stripePublishableKey , stripeClientSecret , children , } : { stripePublishableKey : string ; stripeClientSecret : string ; children : React . ReactNode ; }) { const stripePromise = loadStripe ( stripePublishableKey ); return ( < Elements stripe = { stripePromise } options = { { clientSecret: stripeClientSecret } } key = { ` ${ stripeClientSecret } - ${ stripePublishableKey } ` } > { children } </ Elements > ); } // Will be completed in the next step function SubmitButton () { return null ; } The key property on the Elements component is important to re-render the payment element if either the stripeClientSecret or stripePublishableKey change, as these fields can't be 'live' updated ​ 4. Submitting Payment The Stripe Payment Element does not handle submitting the payment, so you will also need to create your own submit button. First, at the top of the file, update the import for @stripe/react-stripe-js to be: Copy Ask AI import { Elements , PaymentElement , useElements , useStripe } from \"@stripe/react-stripe-js\" ; Then, update the SubmitButton component with the following code: Copy Ask AI function SubmitButton () { const stripe = useStripe (); const elements = useElements (); async function handleSubmit () { if ( ! stripe || ! elements ) { console . error ( \"[handleSubmit] 'stripe' or 'elements' has not loaded\" ); return ; } const { error } = await stripe . confirmPayment ({ elements , confirmParams: { return_url: \"http://localhost:3000/success\" , // Some payment methods require a redirect after payment - in those cases you must provide a return_url, which should resume the order process - which would be the delivery phase }, redirect: \"if_required\" , // Can be 'if-required', or 'always' if you prefer to always redirect to the next page }); if ( error ) { console . error ( \"[handleSubmit] Failed to confirm payment\" , error ); // Optionally: display the message to the user via the UI return ; } console . log ( \"[handleSubmit] Successfully confirmed payment\" ); } return ( < button onClick = { handleSubmit } className = \"w-full px-4 py-3 bg-blue-500 text-white font-semibold\" > Submit </ button > ); } At this point, your app should look similar to the one displayed below (fill in the 2 input fields with the data you recieved in order.payment.preparation in order to see the live Payment Element). ​ 6. Poll for Status Updates After making the payment via whichever payment method, you'll need to poll the Get Order API to check on the delivery status and present this info to your user. Refer to the complete get order API reference here . GET https://staging.crossmint.com/api/2022-06-09/orders/<orderId> ​ Next Steps You can now receive payments for anything on the blockchain, and display it in whatever UI you choose to build. Headless checkout is gated in production. To get started, contact us . Was this page helpful? Yes No Pay with Card - Memecoins Pay with USDC Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 679
  },
  {
    "id": "https://docs.crossmint.com/payments/headless/quickstarts/crypto#chunk_0",
    "url": "https://docs.crossmint.com/payments/headless/quickstarts/crypto",
    "title": "How to use Headless Checkout | Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Quickstarts ⚡ Pay with Other Crypto Documentation API Reference SDK Reference CLI Solution Guides Changelog Introduction About Crossmint Getting Started Using AI Assistants Platform Wallets Introduction Quickstarts ⚡ Guides Authentication Introduction Quickstart ⚡ Guides Tokenization (Minting) Introduction Integrate Checkout Introduction Integrate Plan Your Integration Hosted (pop-up) Embedded Headless (API) Overview Quickstarts ⚡ Pay with Card - Onramp Pay with Card - Memecoins Pay with Card - NFTs Pay with USDC Pay with Other Crypto Guides Advanced Topics Introduction Prerequisites From Crossmint External Prerequisites Integration Steps 1. Create an Order Optional - View the Order in the Console 2. Update the Order with Recipient 3. Show Purchase Preview to User 4. Request Payment from User 5. Poll for Status Updates Next Steps ​ Introduction In this quickstart you’ll learn how to accept multiple different cryptocurrencies as payment using Crossmint’s headless APIs, to purchase an NFT on the polygon-amoy testnet. ​ Prerequisites ​ From Crossmint Create a developer account in the Staging Console . Create a new collection or import yours into the console, and have your collectionId ready. Make sure you follow the maximum prices for collections set in staging outlined here . Create a server-side API key with the orders.create , orders.update , and orders.read scopes enabled. More info on creating API keys here . This Quickstart assumes that you'll be using the API Playground or cURL requests to make the API calls. This approach requires the use of a server-side API key. If you would rather follow the quickstart while building a client-side app that makes requests to Crossmint directly from the browser, you must use a client-side API key. See the Server or Client Guide for more information. To integrate in production/mainnet, you'll also need to complete account and collection verification. More information in the production launch guide. If you are choosing to do this quickstart in your own console or IDE, consider you will need to have a way to prompt and sign crypto payments, like using Metamask. ​ External Prerequisites Your crypto wallet of choice - Metamask, Coinbase Wallet, etc. A small balance of testnet currency in whichever cryptocurrency you would like to pay with Ethereum, Base, Polygon - note that some of these faucets require a minimum of 0.1 ETH on mainnet, to prevent abuse Solana devnet ​ Integration Steps This quickstart will primarily focus on the API calls necessary to implement headless checkout in your project. You will also need to build out the frontend experience for your users. ​ 1. Create an Order The first step in the headless checkout process is to create an order. An order is an object datastructure, that represents an intent to purchase in Crossmint's systems. This guide will create a basic order, and then update it with required info step-by-step. You can also create the entire order in one API call if the necessary information is available at the time of order creation. This can be used for custom \"one-click-checkout\" experiences, should you wish to make them. POST https://staging.crossmint.com/api/2022-06-09/orders Refer to the complete create order API reference here . Pay with ETH Pay with ERC20s Pay with SOL Pay with SPLs Pay with MATIC Copy Ask AI { \"payment\" : { \"method\" : \"base-sepolia\" , \"currency\" : \"eth\" , \"payerAddress\" : \"0xabcd1234...\" }, \"lineItems\" : { \"collectionLocator\" : \"crossmint:<collectionId>\" , \"callData\" : { \"totalPrice\" : \"0.0001\" } } } Example Response Copy Ask AI { \"clientSecret\" : \"_removed_\" , \"order\" : { \"orderId\" : \"cc40e6af-f8dc-4ac2-8e26-d91a32f271cf\" , \"phase\" : \"quote\" , \"locale\" : \"en-US\" , \"lineItems\" : [ { \"chain\" : \"polygon-amoy\" , \"quantity\" : 1 , \"callData\" : { \"quantity\" : 1 }, \"metadata\" : { \"name\" : \"Headless Demo\" , \"description\" : \"NFT Checkout Demo\" , \"imageUrl\" : \"https://utfs.io/f/cd8545b7-3410-4fcd-988d-cd11951ed53c-g287ok.png\" }, \"quote\" : { \"status\" : \"requires-recipient\" , \"charges\" : { \"unit\" : { \"amount\" : \"0.000169004\" , \"currency\" : \"eth\" } }, \"totalPrice\" : { \"amount\" : \"0.000169004\" , \"currency\" : \"eth\" } }, \"delivery\" : { \"status\" : \"awaiting-payment\" } } ], \"quote\" : { \"status\" : \"requires-recipient\" , \"quotedAt\" : \"_DATE_\" , \"expiresAt\" : \"_DATE_\" , \"totalPrice\" : { \"amount\" : \"0.000169004\" , \"currency\" : \"eth\" } }, \"payment\" : { \"status\" : \"requires-quote\" } } } In the requests above the payerAddress has been included, however if your user has not yet connected their wallet you may omit this field, allow them to connect their wallet after creating the order, and submit the payerAddress at a later time. For the comprehensive list of supported currencies and chains, view the Supported Currencies page. At this point you have successfully created an Order in the Crossmint system! The order is currently in the quote phase and is awaiting a recipient to be set. Setting a recipient does not mean that we are sending the NFT to them; it is merely used to verify that the intended recipient is a valid address, before beginning gathering payment info. ​ Optional - View the Order in the Console Congratulations! You've made your first contact with Crossmint's systems. You can see your request show up in the developer console. Navigate to the Orders tab for your collection in the Staging Console and enter the orderId returned from your API response to find your incomplete order object and status. ​ 2. Update the Order with Recipient Next, you will set who's the intended recipient of the order by specifying a wallet address or email. When a recipient is passed as an email, Crossmint will automatically create a custodial wallet associated with this email, that can be accessed by logging in to the (staging) Crossmint Wallet or from your website if you're using whitelabel wallets . PATCH https://staging.crossmint.com/api/2022-06-09/orders/<orderId> Remember to ensure you're using the right type of API key! See the Server or Client Guide for more info. Refer to the complete edit order API reference here . Email recipient Wallet recipient Copy Ask AI { \"recipient\" : { \"email\"",
    "chunk_index": 0,
    "word_count": 1000
  },
  {
    "id": "https://docs.crossmint.com/payments/headless/quickstarts/crypto#chunk_0",
    "url": "https://docs.crossmint.com/payments/headless/quickstarts/crypto",
    "title": "How to use Headless Checkout | Crossmint Docs",
    "content": "set who's the intended recipient of the order by specifying a wallet address or email. When a recipient is passed as an email, Crossmint will automatically create a custodial wallet associated with this email, that can be accessed by logging in to the (staging) Crossmint Wallet or from your website if you're using whitelabel wallets . PATCH https://staging.crossmint.com/api/2022-06-09/orders/<orderId> Remember to ensure you're using the right type of API key! See the Server or Client Guide for more info. Refer to the complete edit order API reference here . Email recipient Wallet recipient Copy Ask AI { \"recipient\" : { \"email\" : \"test@example.com\" } } Notice you only need to pass the object that your are updating, in this case, recipient . You can also update multiple properties in the same call. Available properties for update include recipient , locale , and the payment object. If specifying a recipient by wallet address, ensure the address is valid for the chain your collection is on, which may differ from the chain the payment is being performed on. Example Response Copy Ask AI { \"orderId\" : \"cc40e6af-f8dc-4ac2-8e26-d91a32f271cf\" , \"phase\" : \"payment\" , \"locale\" : \"en-US\" , \"lineItems\" : [ { \"chain\" : \"polygon-amoy\" , \"quantity\" : 1 , \"callData\" : { \"quantity\" : 1 }, \"metadata\" : { \"name\" : \"Headless Demo\" , \"description\" : \"NFT Checkout Demo\" , \"imageUrl\" : \"https://utfs.io/f/cd8545b7-3410-4fcd-988d-cd11951ed53c-g287ok.png\" }, \"quote\" : { \"status\" : \"valid\" , \"charges\" : { \"unit\" : { \"amount\" : \"0.0001681558\" , \"currency\" : \"eth\" } }, \"totalPrice\" : { \"amount\" : \"0.0001681558\" , \"currency\" : \"eth\" } }, \"delivery\" : { \"status\" : \"awaiting-payment\" } } ], \"payment\" : { \"status\" : \"awaiting-payment\" , \"preparation\" : { \"method\" : \"crypto\" , \"chain\" : \"base-sepolia\" , \"payerAddress\" : \"0x6C3b3225759Cbda68F96378A9F0277B4374f9F06\" , \"serializedTransaction\" : \"0x02f9012683aa36a744848917370085080992ce6c82629c94a105c311fa72b8fb78c992ecbdb8b02ea5bd394d869a9d359ca000b8f465794a68624763694f694a49557a49314e694973496e523563434936496b705856434a392e65794a756232356a5a534936496a4d3559544e6d4d444d334c544d7a4e6d51744e4441305a5331684d6a45774c575268593249335957526b5a4456694e794973496d39795a4756795357526c626e52705a6d6c6c63694936496d4e6a4e44426c4e6d466d4c5759345a474d744e47466a4d6930345a5449324c5751354d57457a4d6d59794e7a466a5a694973496d6c68644349364d5463784e546b334f54557a4e33302e662d4949646c653375314c58634c7845765438754e336d74786370764a686f31384a5a4b76483768456659c0\" } } } Notice at the bottom, the new serializedTransaction property. This is a unique identifier let’s Crossmint know exactly which order you are updating. Anytime you update an order you must use the returned serializedTransaction property. ​ 3. Show Purchase Preview to User Now, after you’ve told Crossmint systems what you want, and you have passed a valid place to send the NFT, Crossmint will return a quote with prices for the desired items Within the returned response, you’ll find the lineItems array which contains the metadata and a quote for each line item. Within a quote, a detailed breakdown of its charges can be found. Preview Screenshot Code Example lineItems Example ​ 4. Request Payment from User You now need to request crypto payment from the user. You will use the serializedTransaction returned in the purchase preview from the previous step. The serializedTransaction needs to be structured into a transaction object, which can then be passed to a crypto payment prompter, like viem’s sendTransaction or wagmi’s sendTransactionAsync . Whichever method you use, it should open the user’s default wallet extension in the browser and allow the user to complete the cross-chain payment. If you’ve followed along this far you can simply paste the serializedTransaction property returned in your previous API call into the app below. This will allow you to sign and send the transaction. Send EVM Payment Send Solana Payment Code Example Full Repository Example ​ 5. Poll for Status Updates After making the payment via whichever payment method, you'll need to poll the Get Order API to check on the delivery status and present this info to your user. Refer to the complete get order API reference here . GET https://staging.crossmint.com/api/2022-06-09/orders/<orderId> ​ Next Steps You can now receive payments for anything on the blockchain, and display it in whatever UI you choose to build. Headless checkout is gated in production. To get started, contact us . Was this page helpful? Yes No Pay with USDC Plan Your Solution Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 640
  },
  {
    "id": "https://docs.crossmint.com/payments/headless/quickstarts/onramp#chunk_0",
    "url": "https://docs.crossmint.com/payments/headless/quickstarts/onramp",
    "title": "5 Minute Crypto Onramp | Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Quickstarts ⚡ Pay with Card - Onramp Documentation API Reference SDK Reference CLI Solution Guides Changelog Introduction About Crossmint Getting Started Using AI Assistants Platform Wallets Introduction Quickstarts ⚡ Guides Authentication Introduction Quickstart ⚡ Guides Tokenization (Minting) Introduction Integrate Checkout Introduction Integrate Plan Your Integration Hosted (pop-up) Embedded Headless (API) Overview Quickstarts ⚡ Pay with Card - Onramp Pay with Card - Memecoins Pay with Card - NFTs Pay with USDC Pay with Other Crypto Guides Advanced Topics Native Integration Experience 1. Setup 2. Create Order 3. Check KYC Requirements 4. Complete KYC Process Embedded experience Hosted experience 5. Poll KYC Status 6. Execute Transactions 7. Transaction Completion Enterprise feature. Contact us for access. Crossmint’s Headless Checkout API allows developers to create a seamless onramp experience for users to purchase various crypto tokens (including USDC and other supported tokens) using their credit card while completing the necessary KYC (Know Your Customer) process. This guide walks you through the steps to implement this functionality in your application, with support for users across any geography. ​ Native Integration Experience Crossmint’s onramp solution provides a natively integrated experience that keeps users within your application’s flow: Seamless User Experience : Users complete the entire purchase process without being redirected to external platforms Consistent Branding : Maintain your app’s look and feel throughout the entire process Higher Conversion Rates : Reduce drop-offs by eliminating jarring transitions to third-party services Complete Control : Customize every aspect of the user journey while Crossmint handles the complex payment infrastructure ​ 1. Setup Create a developer account in the Crossmint Console Create a server-side API key with the orders.create and orders.read scopes enabled Contact Crossmint Support to include your project in our allowlist ​ 2. Create Order Use the Create Order API to initiate the purchase process. Use the following token addresses for Solana USDC: • Staging: 4zMMC9srt5Ri5X14GAgXhaHii3GnPAEERYPJgZJDncDU • Production: EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v Here’s an example API call: Copy Ask AI const response = await fetch ( \"https://staging.crossmint.com/api/2022-06-09/orders\" , { method: \"POST\" , headers: { \"Content-Type\" : \"application/json\" , \"x-api-key\" : \"YOUR_API_KEY\" , }, body: JSON . stringify ({ lineItems: [ { tokenLocator: \"solana:example-token-address\" , // Token address, e.g., USDC in staging: \"solana:4zMMC9srt5Ri5X14GAgXhaHii3GnPAEERYPJgZJDncDU\", // production: \"solana:EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v\" executionParameters: { mode: \"exact-in\" , amount: \"2\" , }, }, ], payment: { method: \"checkoutcom-flow\" , receiptEmail: \"user@example.com\" , }, recipient: { walletAddress: \"example-wallet-address\" , // Replace with actual recipient wallet address }, }), }); const data = await response . json (); Example Response Copy Ask AI { \"clientSecret\" : \"example-client-secret\" , \"order\" : { \"orderId\" : \"example-order-id\" , \"phase\" : \"payment\" , \"locale\" : \"en-US\" , \"lineItems\" : [ { \"chain\" : \"solana\" , \"metadata\" : { \"name\" : \"USDC\" , \"description\" : \"USDC Token\" , \"imageUrl\" : \"https://cryptologos.cc/logos/usd-coin-usdc-logo.svg?v=040\" }, \"quote\" : { \"status\" : \"valid\" , \"charges\" : { \"unit\" : { \"amount\" : \"1.47\" , \"currency\" : \"usd\" } }, \"totalPrice\" : { \"amount\" : \"2\" , \"currency\" : \"usd\" }, \"quantityRange\" : { \"lowerBound\" : \"1.36\" , \"upperBound\" : \"1.36\" } }, \"delivery\" : { \"status\" : \"awaiting-payment\" , \"recipient\" : { \"locator\" : \"solana:example-wallet-address\" , \"walletAddress\" : \"example-wallet-address\" } }, \"executionMode\" : \"exact-in\" , \"maxSlippageBps\" : \"0\" , \"executionParams\" : { \"mintHash\" : \"example-mint-hash\" , \"mode\" : \"exact-in\" , \"amount\" : \"2\" } } ], \"quote\" : { \"status\" : \"valid\" , \"quotedAt\" : \"2025-03-07T23:04:11.996Z\" , \"expiresAt\" : \"2025-03-07T23:14:11.996Z\" , \"totalPrice\" : { \"amount\" : \"2\" , \"currency\" : \"usd\" } }, \"payment\" : { \"method\" : \"stripe-payment-element\" , \"currency\" : \"usd\" , \"status\" : \"requires-kyc\" , \"preparation\" : { \"kyc\" : { \"provider\" : \"persona\" , \"templateId\" : \"example-template-id\" , \"referenceId\" : \"example-reference-id\" } } } } } ​ 3. Check KYC Requirements After creating an order, check the response for KYC requirements: If payment.status is requires-kyc , direct your user through the KYC flow If payment.status is awaiting-payment , the user has already completed KYC and can proceed ​ 4. Complete KYC Process Crossmint uses Persona for KYC (Know Your Customer) verification. The Persona SDK allows you to embed the verification flow directly into your application. ​ Embedded experience Use the provided identifiers to specify which verification template to use ( templateId ), which user this verification applies to ( referenceId ), and which environment to connect to ( environmentId ). Customization of the KYC flow’s look-and-feel is an enterprise feature. Please contact Crossmint support to enable this feature. Copy Ask AI import Persona from \"persona\" ; const client = new Persona . Client ({ // Fill out from previous response templateId: \"example-template-id\" , referenceId: \"example-reference-id\" , environmentId: \"example-environment-id\" , onReady : () => client . open (), onComplete : ({ inquiryId , status , fields }) => { console . log ( `Sending finished inquiry ${ inquiryId } to backend` ); }, onCancel : ({ inquiryId , sessionToken }) => console . log ( \"onCancel\" ), onError : ( error ) => console . log ( error ), }); For a mobile integration, check Persona’s React Native guide . ​ Hosted experience If you want to redirect users to a URL, opening it in a WebView, you can construct the proper Persona URL given the IDs above. ​ 5. Poll KYC Status Poll Crossmint’s Get Order API, replacing {orderId} with the order ID received when initiating the payment, to check the status of the verification. Polling at reasonable intervals is recommended (i.e. every 5 seconds). Copy Ask AI const checkOrderStatus = async ( orderId ) => { const response = await fetch ( `https://staging.crossmint.com/api/2022-06-09/orders/ ${ orderId } ` , { method: \"GET\" , headers: { \"Content-Type\" : \"application/json\" , \"x-api-key\" : \"YOUR_API_KEY\" , }, }); return await response . json (); }; Example Response Copy Ask AI { \"orderId\" : \"example-order-id\" , \"payment\" : { \"status\" : \"awaiting-payment\" , \"preparation\" : { \"checkoutcomPaymentSession\" : \"example-session\" , \"checkoutcomPublicKey\" : \"example-key\" } } } The possible KYC status values are: If payment.status is awaiting-payment , user has",
    "chunk_index": 0,
    "word_count": 1000
  },
  {
    "id": "https://docs.crossmint.com/payments/headless/quickstarts/onramp#chunk_0",
    "url": "https://docs.crossmint.com/payments/headless/quickstarts/onramp",
    "title": "5 Minute Crypto Onramp | Crossmint Docs",
    "content": "Polling at reasonable intervals is recommended (i.e. every 5 seconds). Copy Ask AI const checkOrderStatus = async ( orderId ) => { const response = await fetch ( `https://staging.crossmint.com/api/2022-06-09/orders/ ${ orderId } ` , { method: \"GET\" , headers: { \"Content-Type\" : \"application/json\" , \"x-api-key\" : \"YOUR_API_KEY\" , }, }); return await response . json (); }; Example Response Copy Ask AI { \"orderId\" : \"example-order-id\" , \"payment\" : { \"status\" : \"awaiting-payment\" , \"preparation\" : { \"checkoutcomPaymentSession\" : \"example-session\" , \"checkoutcomPublicKey\" : \"example-key\" } } } The possible KYC status values are: If payment.status is awaiting-payment , user has successfully completed KYC, proceeding to pay If payment.status is rejected-kyc , verification was rejected and the user can’t onramp If payment.status is manual-kyc , verification requires manual review and the user will be notified via email about its ultimate success or rejection KYC Rejection Email KYC Acceptance Email ​ 6. Execute Transactions Initialize Checkout.com’s Flow component for Desktop or Mobile to render an embedded payment form using the payment session and public key obtained in the prior response. Copy Ask AI // Example implementation using Checkout.com Flow component const initializePayment = ( checkoutcomPaymentSession , checkoutcomPublicKey ) => { const checkout = new Checkout . Flow ({ publicKey: checkoutcomPublicKey , paymentSession: checkoutcomPaymentSession , onSuccess : ( event ) => { console . log ( \"Payment successful\" , event ); // Handle successful payment }, onFailure : ( event ) => { console . log ( \"Payment failed\" , event ); // Handle payment failure }, }); checkout . mount ( \"#payment-container\" ); }; ​ 7. Transaction Completion Upon successful payment: The purchased tokens (minus fees) are sent directly to the user’s wallet User receives an email receipt from hello@crossmint.io Was this page helpful? Yes No Overview Pay with Card - Memecoins Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 310
  },
  {
    "id": "https://docs.crossmint.com/payments/headless/quickstarts/paying-usdc#chunk_0",
    "url": "https://docs.crossmint.com/payments/headless/quickstarts/paying-usdc",
    "title": "How to pay with USDC | Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Quickstarts ⚡ Pay with USDC Documentation API Reference SDK Reference CLI Solution Guides Changelog Introduction About Crossmint Getting Started Using AI Assistants Platform Wallets Introduction Quickstarts ⚡ Guides Authentication Introduction Quickstart ⚡ Guides Tokenization (Minting) Introduction Integrate Checkout Introduction Integrate Plan Your Integration Hosted (pop-up) Embedded Headless (API) Overview Quickstarts ⚡ Pay with Card - Onramp Pay with Card - Memecoins Pay with Card - NFTs Pay with USDC Pay with Other Crypto Guides Advanced Topics Introduction Prerequisites From Crossmint External prerequisites Create an order and pay with USDC Access your NFT Understanding the code Creating an order Key parameters explained API request Response handling Polling an order Get order function explained Poll order function explained ​ Introduction This guide will show you how to quickly buy or sell any tokenized asset (NFT) with USDC, using Crossmint’s headless APIs. ​ Prerequisites ​ From Crossmint Create a developer account in the Staging Console . Create a new collection or import yours into the console, and have your collectionId ready. Make sure you follow the maximum prices for collections set in staging outlined here . Create a server-side API key with the orders.create , orders.update , and orders.read scopes enabled. More info on creating API keys here . This Quickstart assumes that you'll be using the API Playground or cURL requests to make the API calls. This approach requires the use of a server-side API key. If you would rather follow the quickstart while building a client-side app that makes requests to Crossmint directly from the browser, you must use a client-side API key. See the Server or Client Guide for more information. To integrate in production/mainnet, you'll also need to complete account and collection verification. More information in the production launch guide. ​ External prerequisites Wallet Crypto wallet supporting USDC - Metamask , Phantom , Coinbase Wallet , etc. Testnet Balance A small balance of USDC testnet currency in your wallet on the Base-sepolia network. Get testnet USDC here: Crossmint USDC Faucet (Base-sepolia) The above faucet provides both USDC and USDXM. This quickstart uses USDC by default, but you can also use USDXM (see contract address below). USDXM is a test token that represents USDC. It has the same behavior as USDC. In production, you’ll use real USDC instead. Adding USDC to MetaMask: Import the token to MetaMask: Open MetaMask and click “Import tokens” For USDC: Use the official USDC contract address from Circle 0x036CbD53842c5426634e7929541eC2318f3dCF7e For USDXM: Use the USDXM contract address 0x14196F08a4Fa0B66B7331bC40dd6bCd8A1dEeA9F Click Import Refresh your wallet ​ Create an order and pay with USDC 1 Setup your Python environment Clone the quickstart repo: Copy Ask AI git clone https://github.com/crossmint/headless-python-payusdc.git Navigate to the project directory and create a virtual environment: Copy Ask AI cd headless-python-payusdc python3 -m venv .venv source .venv/bin/activate Install the dependencies: Copy Ask AI pip install -r requirements.txt 2 Set keys in .env Set the following keys in the .env file: Copy Ask AI CROSSMINT_API_KEY = \"<your-api-key>\" COLLECTION_ID = \"<your-collection-id>\" PAYER_ADDRESS = \"<your-payer-address>\" EMAIL_ADDRESS = \"<your-email-address>\" CROSSMINT_API_KEY , COLLECTION_ID are found from the Developer Console . See Prerequisites PAYER_ADDRESS is your wallet address that contains USDC. EMAIL_ADDRESS is where you’ll receive your NFT in a new Crossmint wallet that you can access later. 3 Create order with USDC payment Run the application: Copy Ask AI python src/index.py This will: Create an order that is waiting for a USDC payment on the Base-sepolia network Return the serializedTransaction , which will be used in the next step Poll the status of the order until it is complete 4 Receive Payment Copy the serializedTransaction returned in the previous step and paste it below Connect to your USDC wallet that was specified in the .env file Send the transaction 5 Status of order The code will poll for the status of the order until it is marked as complete. You should see it changing from “payment” to “delivery” and finally to “completed”. You will also see the final order details, including the transaction hash, in your terminal. ​ Access your NFT Once the order is complete, you will receive an email with a link to the purchased item, which can be viewed in the Crossmint website. You can also access your NFT by logging in to your Crossmint wallet at crossmint.com with the email address you specified in the .env file. ​ Understanding the code ​ Creating an order The order creation process involves sending a POST request to Crossmint’s API with the necessary payment and recipient details. Let’s break down the key components: src/create_order.py Copy Ask AI def create_order (): # Define the order data structure order_data = { \"recipient\" : { \"email\" : os.environ.get( \"EMAIL_ADDRESS\" ) # Email where the NFT will be delivered }, \"locale\" : \"en-US\" , # Language/region setting \"payment\" : { \"method\" : \"base-sepolia\" , # Testnet network for USDC payments \"currency\" : \"usdc\" , # Payment currency \"payerAddress\" : os.environ.get( \"PAYER_ADDRESS\" ) # Wallet address paying USDC }, \"lineItems\" : { \"collectionLocator\" : f \"crossmint: { os.environ.get( 'COLLECTION_ID' ) } \" # Tokenized collection identifier } } ​ Key parameters explained recipient : Specifies where to deliver the tokenized asset email : The email address where the tokenized asset will be delivered in a Crossmint wallet. Instead of an email, a walletAddress field can be used to deliver the asset to a specific wallet address. payment : Defines how the payment will be made method : The blockchain network ( base-sepolia for testnet) currency : The payment currency ( usdc ) payerAddress : The wallet address that will send the USDC payment lineItems : Specifies what is being purchased collectionLocator : Identifies the collection ​ API request src/create_order.py Copy Ask AI response = requests.post( f \" { base_url } /orders\" , headers = { \"Content-Type\" : \"application/json\" , \"x-api-key\" : os.environ.get( \"CROSSMINT_API_KEY\" ) # Your API key for authentication }, json = order_data ) The API request: Sends a POST request to Crossmint’s",
    "chunk_index": 0,
    "word_count": 1000
  },
  {
    "id": "https://docs.crossmint.com/payments/headless/quickstarts/paying-usdc#chunk_0",
    "url": "https://docs.crossmint.com/payments/headless/quickstarts/paying-usdc",
    "title": "How to pay with USDC | Crossmint Docs",
    "content": "wallet address. payment : Defines how the payment will be made method : The blockchain network ( base-sepolia for testnet) currency : The payment currency ( usdc ) payerAddress : The wallet address that will send the USDC payment lineItems : Specifies what is being purchased collectionLocator : Identifies the collection ​ API request src/create_order.py Copy Ask AI response = requests.post( f \" { base_url } /orders\" , headers = { \"Content-Type\" : \"application/json\" , \"x-api-key\" : os.environ.get( \"CROSSMINT_API_KEY\" ) # Your API key for authentication }, json = order_data ) The API request: Sends a POST request to Crossmint’s order endpoint Includes your API key for authentication Sends the order data as JSON in the request body ​ Response handling src/create_order.py Copy Ask AI validate(response.ok, f \"Failed to create order: { response.reason } \" ) json_response = response.json() return { \"clientSecret\" : json_response[ \"clientSecret\" ], # Used for order authentication \"order\" : json_response[ \"order\" ] # Contains order details } The response includes: clientSecret : A unique token used for authenticating subsequent requests for this order order : The order details including the order ID and status For more details on creating orders via the headless API, see the Create Order API Reference . ​ Polling an order The order status polling process involves periodically checking the order’s status until it’s completed. Let’s examine how this works: src/get_order.py Copy Ask AI def get_order ( order_id : str , client_secret : str ) -> Dict[ str , Any]: try : response = requests.get( f \" { base_url } /orders/ { order_id } \" , # Endpoint for specific order headers = { 'Content-Type' : 'application/json' , 'x-api-key' : os.environ.get( 'CROSSMINT_API_KEY' ), # API authentication 'Authorization' : client_secret # Order-specific authentication } ) validate(response.ok, f \"Failed to get order: { response.reason } \" ) return response.json() except Exception as error: raise error ​ Get order function explained Takes order_id and client_secret as parameters Makes a GET request to fetch the current state of the order Uses both API key and client secret for authentication Returns the order details as JSON src/get_order.py Copy Ask AI def poll_order ( order_id : str , client_secret : str ) -> Dict[ str , Any]: while True : try : order = get_order(order_id, client_secret) print ( f 'Current order status: [bold yellow] { order[ \"phase\" ] } [/bold yellow]' ) if order[ 'phase' ] == 'completed' : return order time.sleep( 3 ) # Wait 3 seconds before next check except Exception as error: raise error ​ Poll order function explained Continuously checks the order status every 3 seconds. Prints the current phase of the order Possible order phases include: payment : Waiting for or processing payment delivery : NFT is being delivered completed : Order is successfully completed Returns the final order details when completed The 3-second polling interval helps prevent rate limiting while still providing timely updates. Adjust this value based on your needs. For more details on polling for order status, see the Get Order API Reference . Always implement proper error handling, retry mechanisms, and asynchronous polling in production environments to handle network issues or API interruptions. Was this page helpful? Yes No Pay with Card - NFTs Pay with Other Crypto Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 549
  },
  {
    "id": "https://docs.crossmint.com/payments/introduction#chunk_0",
    "url": "https://docs.crossmint.com/payments/introduction",
    "title": "Crossmint Payments - Introduction | Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Checkout Introduction Documentation API Reference SDK Reference CLI Solution Guides Changelog Introduction About Crossmint Getting Started Using AI Assistants Platform Wallets Introduction Quickstarts ⚡ Guides Authentication Introduction Quickstart ⚡ Guides Tokenization (Minting) Introduction Integrate Checkout Introduction Integrate Advanced Topics What Can I Buy & Sell with Crossmint Checkout? Payment Methods Core Features - Crypto & Credit Card Credit Card-Specific Features Ways to Integrate Get started FAQs Crossmint lets you embed seamless checkouts and onramps into your app — streamlining onboarding and helping you create delightful experiences for your users. ​ What Can I Buy & Sell with Crossmint Checkout? Physical Goods and Services Over 1 billion products and services from Amazon, Shopify, Flights, and more. NFTs Digital art, collectibles, access passes, in-game assets, and unique tokens. Stablecoins Regulated fungible assets, such as USDC. Memecoins Non-regulated fungible tokens, such as memecoins. Subscriptions Recurring billing for digital assets and services. ​ Payment Methods Crossmint checkout combines all the below payment methods in a single integration. Credit Cards All networks supported Apple & Google Pay One-click native payments Stablecoins Lowest fees for humans and agents Other crypto Cross-chain crypto payments ​ Core Features - Crypto & Credit Card No Wallet Required Guest checkout. Create wallets on-the-fly during the purchase. Full Geo-Coverage Support payments from 197 countries and all US states. AML Monitoring Dedicated team of blockchain anti-fraud experts. ​ Credit Card-Specific Features 95-98% Approval Rate Compared to 55% industry benchmark. Chargeback Protection Crossmint handles and pays for credit card chargeback disputes. No Buyer KYC Eliminate cumbersome ID checks from the purchase flow 1 and improve conversion. ​ Ways to Integrate Hosted Checkout hosted on a pop-up, opened from your app or site. Embedded Embed checkout in your app or site with full UI control. Headless (API) Buy or sell via an API, best suited for agents or deep UI customization. ​ Get started Plan Your Integration ​ FAQs What's the difference between the checkout and the onramp? The checkout is used when a user is buying a specific item — like an NFT, memecoin, or product — with fiat or crypto. It’s a direct purchase of a specific item. The onramp is used when a user wants to fund their wallet with crypto — without buying a specific item. Think of it as topping up a balance instead of making a purchase. Use checkout when selling something. Use onramp when your users need crypto to spend later. The checkout has no KYC, is available on any region non-sanctioned by OFAC, and offers the best UX and conversion rate. The onramp requires KYC and some geographical limitations apply. How does settlement of payments and assets work? Crossmint settles payments instantly with sellers directly via the smart contract, in the native currency specified on the contract. Assets are sent directly into the wallet of the buyer, without intermediation by Crossmint. Can users make purchases if they don't have a wallet? If users already have a wallet, purchased assets are delivered there automatically. If they don’t, they can still buy. Crossmint will automatically create a wallet for them during checkout, using their email or social login, After the purchase, they can log in to access their wallet and manage their assets anytime, from your website or Crossmint’s. How can I track sales? You can monitor purchases onchain or using webhooks. Sales dashboards, logs, and advanced analytics are also available in the console. How does Crossmint differ from other similar products? The main differences are: i. Multiple integration options — including fully headless APIs that let you build seamless flows that feel native to your app. ii. Crossmint is the merchant of record for transactions and sells tokens directly in fiat. This results in real approval rates of ~95% (vs industry average of ~55%) and eliminates the need for cumbersome extra steps during checkout. iii. Allow users to pay however they like. Support credit cards, Apple Pay, Google Pay, and any crypto token across chains — even if the asset is on a different network. iv. The integration takes as little as 5 minutes, and is verified to be the fastest for your developers to implement. v. Buyers don’t need a wallet. Crossmint can create them on-the-fly (guest checkout), in the backend, improving conversion. vi. Premium features like currency and language localization, contract registration via API, automated token legal reviews, analytics, and more. vii. After millions of transactions, Crossmint’s infrastructure has been battle-tested and hardened against edge cases and sophisticated fraud attacks, minimizing customer support and ensuring a reliable user experience. Does Crossmint support primaries and secondaries (marketplaces)? Yes. You can use the checkout for both primary and secondary sales . What happens if a buyer charges back their credit card? You don’t have to worry about chargeback risk. Crossmint will take on the risk and manage disputes directly with the bank. What's the pricing model? For more information, visit our pricing website or contact sales . What are the KYC requirements? For the checkout, the vast majority of transactions do not require KYC. Users can typically pay with credit cards or crypto without identity verification. KYC is only triggered for certain high-risk scenarios when there’s evidence of potential fraud. The crypto onramp does require KYC. However, the flow can be embedded natively into your app to offer the best possible user experience. Who pays for gas fees on the checkout? ​ With Crossmint’s contracts Managed Collections have two options for fees: 1. Buyer pays fees - The buyer (your customer) pays the price of the asset you set in console, plus applicable fees. The Seller (you, the creator) receives the price set in console (aka the payout ). 2. Seller pays fees - The buyer pays the exact price of the asset set in console. You receive the set asset price, minus applicable fees. To access this setting in the Crossmint Console, go to your managed collection, click on “Payments” and then “Settings”. Here you",
    "chunk_index": 0,
    "word_count": 1000
  },
  {
    "id": "https://docs.crossmint.com/payments/introduction#chunk_0",
    "url": "https://docs.crossmint.com/payments/introduction",
    "title": "Crossmint Payments - Introduction | Crossmint Docs",
    "content": "gas fees on the checkout? ​ With Crossmint’s contracts Managed Collections have two options for fees: 1. Buyer pays fees - The buyer (your customer) pays the price of the asset you set in console, plus applicable fees. The Seller (you, the creator) receives the price set in console (aka the payout ). 2. Seller pays fees - The buyer pays the exact price of the asset set in console. You receive the set asset price, minus applicable fees. To access this setting in the Crossmint Console, go to your managed collection, click on “Payments” and then “Settings”. Here you will find the “Who pays the fees?” switch, which allows you to set the payer of fees for your collection. You can update and save this setting at any time. The total fees per transaction are the same in either option. Managed collections are Buyer pays by default. ​ With imported contracts Imported collections are only compatible with the “Buyer pays fees” option. What payment methods are supported for each asset type? Different asset types support different payment methods. Here’s a quick reference: Asset Type Credit Cards Apple/Google Pay Stablecoins Cross-Chain Crypto NFTs ✅ ✅ ✅ ✅ Physical Goods ✅ ✅ ✅ ✅ Onramp ✅ ✅ ❌ ❌ Memecoins ✅ ✅ ❌ ❌ Subscriptions ✅ ❌ ❌ ❌ Was this page helpful? Yes No Quickstart ⚡ Plan Your Integration Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 239
  },
  {
    "id": "https://docs.crossmint.com/payments/pay-button/customize/localization#chunk_0",
    "url": "https://docs.crossmint.com/payments/pay-button/customize/localization",
    "title": "Localization - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Customize Localization Documentation API Reference SDK Reference CLI Solution Guides Changelog Introduction About Crossmint Getting Started Using AI Assistants Platform Wallets Introduction Quickstarts ⚡ Guides Authentication Introduction Quickstart ⚡ Guides Tokenization (Minting) Introduction Integrate Checkout Introduction Integrate Plan Your Integration Hosted (pop-up) Overview Quickstart ⚡ Integrate Customize React Hooks Customize the Button UI Localization Embedded Headless (API) Advanced Topics Currencies and Languages Available How to Adjust the Currency and Language Translate the checkout to the user's language and allow them to pay in their local currency. The default checkout is in English and USD. Crossmint will automatically detect the location of the buyer and adjust language and currency accordingly, unless otherwise specified by you. ​ Currencies and Languages Available Variable Possible Values Description locale en-US de-DE es-ES fr-FR it-IT ja-JP ko-KR pt-PT ru-RU th-TH tr-TR uk-UA vi-VN zh-CN zh-TW Klingon Language displayed to the user in the checkout interface payment.fiat.defaultCurrency usd aud eur gbp hkd inr jpy krw sgd vnd Default fiat currency for payments in the checkout interface (default: USD) ​ How to Adjust the Currency and Language To customize the language use the property locale and for currency, set defaultCurrency . Here’s an example: Copy Ask AI < CrossmintProvider apiKey = \"_YOUR_CLIENT_API_KEY_\" > < CrossmintHostedCheckout locale = \"es-ES\" // Change locale to Spanish lineItems = { { collectionLocator: \"crossmint:_YOUR_COLLECTION_ID_\" , callData: { // your callData args }, } } payment = { { crypto: { enabled: true , }, fiat: { enabled: true , defaultCurrency: \"eur\" , // Change default currency to be Euro }, } } /> </ CrossmintProvider > Was this page helpful? Yes No Customize the Button UI Overview Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 295
  },
  {
    "id": "https://docs.crossmint.com/payments/pay-button/guides/hooks#chunk_0",
    "url": "https://docs.crossmint.com/payments/pay-button/guides/hooks",
    "title": "React Hooks - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Customize React Hooks Documentation API Reference SDK Reference CLI Solution Guides Changelog Introduction About Crossmint Getting Started Using AI Assistants Platform Wallets Introduction Quickstarts ⚡ Guides Authentication Introduction Quickstart ⚡ Guides Tokenization (Minting) Introduction Integrate Checkout Introduction Integrate Plan Your Integration Hosted (pop-up) Overview Quickstart ⚡ Integrate Customize React Hooks Customize the Button UI Localization Embedded Headless (API) Advanced Topics Setup Requirements useCrossmintCheckout Return Values Order Phases Complete Example Best Practices Related Resources ​ Setup Requirements The Crossmint hooks must be used within components wrapped by both CrossmintProvider and CrossmintCheckoutProvider : Copy Ask AI import { CrossmintProvider , CrossmintCheckoutProvider , useCrossmintCheckout } from \"@crossmint/client-sdk-react-ui\" ; function App () { return ( < CrossmintProvider apiKey = \"YOUR_API_KEY\" > < CrossmintCheckoutProvider > < YourCheckoutComponent /> </ CrossmintCheckoutProvider > </ CrossmintProvider > ); } ​ useCrossmintCheckout The useCrossmintCheckout hook provides access to the checkout state and allows you to build custom UI experiences. ​ Return Values Property Type Description order Order | undefined The current order object containing all order details orderClientSecret string | undefined The client secret for the current order ​ Order Phases The order can be in one of the following phases: quote - Initial phase where price quotes are being generated payment - Payment is being processed delivery - NFTs are being delivered to the recipient completed - Order has been successfully completed For more information on the order lifecycle, see our Order Lifecycle guide. Here's how you can use the order data to track the purchase progress: Copy Ask AI function PurchaseStatus () { const { order } = useCrossmintCheckout (); // Create a custom notification based on the current phase const getMessage = () => { if ( ! order ) return \"Initializing...\" ; switch ( order . phase ) { case \"quote\" : return `Preparing order: ${ order . lineItems . length } items` ; case \"payment\" : return `Processing ${ order . payment . method } payment` ; case \"delivery\" : return \"Delivering NFTs to wallet...\" ; case \"completed\" : return \"Purchase successful!\" ; } }; return < div className = \"status-message\" > { getMessage () } </ div > ; } For more information on the order object, see our Order Properties section. ​ Complete Example Here’s a full example showing how to implement a custom checkout experience: Copy Ask AI import { CrossmintProvider , CrossmintCheckoutProvider , CrossmintHostedCheckout , useCrossmintCheckout , } from \"@crossmint/client-sdk-react-ui\" ; function CheckoutPage () { return ( < CrossmintProvider apiKey = \"YOUR_API_KEY\" > < CrossmintCheckoutProvider > < CrossmintHostedCheckout lineItems = { { collectionLocator: \"crossmint:your-collection-id\" , callData: { totalPrice: \"0.001\" , quantity: 1 , }, } } payment = { { crypto: { enabled: true }, fiat: { enabled: true }, } } /> < CheckoutStatus /> </ CrossmintCheckoutProvider > </ CrossmintProvider > ); } function CheckoutStatus () { const { order } = useCrossmintCheckout (); if ( ! order ) { return < div > Loading... </ div > ; } switch ( order . phase ) { case \"completed\" : return < div > Purchase complete! </ div > ; case \"delivery\" : return < div > Delivering your NFTs... </ div > ; case \"payment\" : return < div > Processing payment... </ div > ; case \"quote\" : return < div > Preparing your order... </ div > ; } } ​ Best Practices Provider Setup : Always ensure components using hooks are wrapped with both required providers Error Handling : Handle undefined states when accessing order properties Loading States : Provide appropriate loading UI while the order state is initializing Type Safety : Take advantage of TypeScript support for better development experience ​ Related Resources UI Customization Payment Methods Order Lifecycle Testing Tips Was this page helpful? Yes No Specify Recipient Customize the Button UI Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 650
  },
  {
    "id": "https://docs.crossmint.com/payments/pay-button/guides/item-selection#chunk_0",
    "url": "https://docs.crossmint.com/payments/pay-button/guides/item-selection",
    "title": "Item Selection - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Integrate Item Selection Documentation API Reference SDK Reference CLI Solution Guides Changelog Introduction About Crossmint Getting Started Using AI Assistants Platform Wallets Introduction Quickstarts ⚡ Guides Authentication Introduction Quickstart ⚡ Guides Tokenization (Minting) Introduction Integrate Checkout Introduction Integrate Plan Your Integration Hosted (pop-up) Overview Quickstart ⚡ Integrate Configure Payment Options Item Selection Order Status Production Launch Specify Recipient Customize Embedded Headless (API) Advanced Topics Supported Item Types Item Locator Formats Item Selection Examples Multiple Item Orders Order Status Tracking The Hosted Checkout (Pay Button) allows you to specify which items your users can purchase using the lineItems property. This guide explains how to configure item selection for different asset types. ​ Supported Item Types Crossmint supports purchasing various types of digital and physical assets: Digital Assets Non-Fungible Tokens (NFTs) Semi-Fungible Tokens (SFTs) Fungible Tokens (FTs) including USDC (onramp) and memecoins Physical Products Amazon products Shopify products Flights: Closed alpha. Contact us if you are interested to try it out Coming Soon: Hotels, food delivery, and more All items available for purchase must comply with Crossmint's terms of service and legal requirements. Non-Fungible Collections and Fungible tokens must be reviewed and approved by Crossmint before being available in production. ​ Item Locator Formats You'll use one of these locator formats in your lineItems : Digital Assets - New Tokens Digital Assets - Existing Tokens Physical Products collectionLocator - For minting new tokens: crossmint:<_YOUR_COLLECTION_ID_> - For collections created in Crossmint Console (e.g. crossmint:9c82ef99-617f-497d-9abb-fd355291681b ) crossmint:<_YOUR_COLLECTION_ID_>:<_TEMPLATE_ID_> - For collections created in Crossmint Console where a specific NFT template is desired (e.g. crossmint:9c82ef99-617f-497d-9abb-fd355291681b:silver-pass ) <blockchain>:<contract-address> - Using direct contract addresses for external collections registered in Crossmint Console (e.g. ethereum:0x71c7656ec7ab88b098defb751b7401b5f6d897). ​ Item Selection Examples collectionLocator collectionLocator - imported contract Solana tokenLocator - EVM tokenLocator - Solana productLocator Copy Ask AI < CrossmintProvider apiKey = \"_YOUR_CLIENT_API_KEY_\" > < CrossmintHostedCheckout lineItems = { { collectionLocator: \"crossmint:_YOUR_COLLECTION_ID_\" , // Crossmint managed collection // collectionLocator: \"crossmint:_YOUR_COLLECTION_ID_:_TEMPLATE_ID_\", // With specific template callData: { totalPrice: \"5.00\" , quantity: 1 , // matches your contract's parameter name }, } } /> </ CrossmintProvider > For external EVM contracts registered in Crossmint Console, ensure the attribute name in callData matches the parameter name in your mint function. For example: If your mint function has the signature: mintTo(address _to, uint256 _amount) then use _amount instead of quantity . See our Register External Collection guide for details on registering your contract. The buyerCreatorRoyaltyPercent parameter controls how much of the creator royalty percentage the buyer pays when purchasing Solana NFTs through marketplaces. Marketplace Requirements: Magic Eden : Required parameter Tensor : Optional (defaults to NFT's on-chain royalty percentage) Hadeswap : Optional (defaults to 100%) Parameter Details: Range : Must be between 0 and 100 (inclusive) Impact : Always affects final price calculation by applying royalty fees Validation : Throws error if outside valid range Automatic 100% Enforcement: The system automatically overrides this parameter to 100% when: Compressed NFTs : Detected when getAssetProof() returns valid proof data Royalty-enforced NFTs : Detected when NFT has MIP1 or Cardinal Token Manager protection ​ Multiple Item Orders You can enable users to purchase multiple items in a single transaction by providing an array of line items: collectionLocator tokenLocator productLocator Copy Ask AI lineItems = { [ { // First item - Managed collection collectionLocator: \"crossmint:_YOUR_COLLECTION_ID_\" , callData: { totalPrice: \"5.00\" , quantity: 1 } }, { // Second item - Managed collection with template collectionLocator: \"crossmint:_YOUR_COLLECTION_ID_:_TEMPLATE_ID_\" , callData: { totalPrice: \"10.00\" , quantity: 2 } }, { // Third item - External collection collectionLocator: \"ethereum:0x71c7656ec7ab88b098defb751b7401b5f6d897\" , callData: { totalPrice: \"15.00\" , quantity: 1 } } ]} Multiple Item Limitations: Maximum limit of 15 items per order collectionLocator & tokenLocator : All items must be on the same blockchain productLocator : Multiple items only supported in Headless Checkout (not Hosted or Embedded Checkout) productLocator : All items must be from the same ecommerce platform (e.g., all Amazon or all Shopify, but not mixed) ​ Order Status Tracking The Pay Button cannot use webhooks for order status tracking because it operates in a separate window. Therefore, you’ll need to implement polling to check order status through alternative methods. See the Order Status Guide for more information on tracking order completion in pay button. Was this page helpful? Yes No Configure Payment Options Order Status Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 733
  },
  {
    "id": "https://docs.crossmint.com/payments/pay-button/guides/order-status#chunk_0",
    "url": "https://docs.crossmint.com/payments/pay-button/guides/order-status",
    "title": "Order Status - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Integrate Order Status Documentation API Reference SDK Reference CLI Solution Guides Changelog Introduction About Crossmint Getting Started Using AI Assistants Platform Wallets Introduction Quickstarts ⚡ Guides Authentication Introduction Quickstart ⚡ Guides Tokenization (Minting) Introduction Integrate Checkout Introduction Integrate Plan Your Integration Hosted (pop-up) Overview Quickstart ⚡ Integrate Configure Payment Options Item Selection Order Status Production Launch Specify Recipient Customize Embedded Headless (API) Advanced Topics 1. Using Callback Functions 2. Using Event Listeners 3. Using Callback URLs 4. Using Order Status API Since Hosted Checkout opens in a separate window, you can’t use useCrossmintCheckout to track order status. Instead, you have four options: ​ 1. Using Callback Functions Copy Ask AI < CrossmintHostedCheckout lineItems = { { collectionLocator: \"crossmint:_YOUR_COLLECTION_ID_\" , callData: { totalPrice: \"0.001\" , quantity: 1 , }, } } appearance = { { display: \"new-tab\" , // or \"overlay\" overlay: { enabled: true , }, } } onSuccess = { ( orderId ) => { // Handle successful order console . log ( \"Order completed:\" , orderId ); } } onFailure = { ( error ) => { // Handle failed order console . error ( \"Order failed:\" , error ); } } /> ​ 2. Using Event Listeners Copy Ask AI useEffect (() => { const handleMessage = ( event : MessageEvent ) => { if ( event . data . type === \"crossmint:checkout:completed\" ) { console . log ( \"Order completed:\" , event . data . orderId ); } }; window . addEventListener ( \"message\" , handleMessage ); return () => window . removeEventListener ( \"message\" , handleMessage ); }, []); ​ 3. Using Callback URLs Copy Ask AI < CrossmintHostedCheckout lineItems = { { collectionLocator: \"crossmint:_YOUR_COLLECTION_ID_\" , callData: { totalPrice: \"0.001\" , quantity: 1 , }, } } appearance = { { display: \"new-tab\" , } } successUrl = \"https://your-site.com/success\" cancelUrl = \"https://your-site.com/cancel\" /> ​ 4. Using Order Status API For real-time order status updates, you can use the Order Status API to check the status of an order programmatically. Was this page helpful? Yes No Item Selection Production Launch Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 365
  },
  {
    "id": "https://docs.crossmint.com/payments/pay-button/guides/payment-methods#chunk_0",
    "url": "https://docs.crossmint.com/payments/pay-button/guides/payment-methods",
    "title": "Digital Asset Payment Methods | Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Integrate Configure Payment Options Documentation API Reference SDK Reference CLI Solution Guides Changelog Introduction About Crossmint Getting Started Using AI Assistants Platform Wallets Introduction Quickstarts ⚡ Guides Authentication Introduction Quickstart ⚡ Guides Tokenization (Minting) Introduction Integrate Checkout Introduction Integrate Plan Your Integration Hosted (pop-up) Overview Quickstart ⚡ Integrate Configure Payment Options Item Selection Order Status Production Launch Specify Recipient Customize Embedded Headless (API) Advanced Topics Payment Methods Supported Configure Payment Settings Fiat Payment Options Crypto Payment Options If you are using our previous version of the hosted checkout, please refer to the old payment methods guide ​ Payment Methods Supported Debit & Credit cards Apple & Google Pay Cross-chain crypto Buyers can purchase digital assets with any cryptocurrency. For example, they can pay for an asset on Optimism chain with mainnet ETH. This is done real time without bridging and lower gas fees. ​ Configure Payment Settings You can configure payment preferences using the payment prop: Copy Ask AI < CrossmintHostedCheckout payment = { { // Enable/disable payment types fiat: { enabled: true , defaultCurrency: \"usd\" , // Set preferred fiat currency }, crypto: { enabled: true , defaultChain: \"polygon\" , // Set preferred blockchain defaultCurrency: \"matic\" , // Set preferred crypto }, // Optional: Set default payment method defaultMethod: \"fiat\" , // Options: \"fiat\" or \"crypto\" // Optional: Set receipt email receiptEmail: \"buyer@example.com\" , } } /> ​ Fiat Payment Options Configure fiat payment settings: Copy Ask AI payment = {{ fiat : { enabled : true , defaultCurrency : \"usd\" } }} ​ Crypto Payment Options Configure crypto payment preferences: Copy Ask AI payment = {{ crypto : { enabled : true , defaultChain : \"polygon\" , // Set preferred blockchain defaultCurrency : \"matic\" // Set preferred crypto currency } }} You will be paid in the currency expected by your registered mint function, regardless of how the buyer pays. Was this page helpful? Yes No Quickstart ⚡ Item Selection Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 343
  },
  {
    "id": "https://docs.crossmint.com/payments/pay-button/guides/production-launch#chunk_0",
    "url": "https://docs.crossmint.com/payments/pay-button/guides/production-launch",
    "title": "Production Launch - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Integrate Production Launch Documentation API Reference SDK Reference CLI Solution Guides Changelog Introduction About Crossmint Getting Started Using AI Assistants Platform Wallets Introduction Quickstarts ⚡ Guides Authentication Introduction Quickstart ⚡ Guides Tokenization (Minting) Introduction Integrate Checkout Introduction Integrate Plan Your Integration Hosted (pop-up) Overview Quickstart ⚡ Integrate Configure Payment Options Item Selection Order Status Production Launch Specify Recipient Customize Embedded Headless (API) Advanced Topics From Staging to Production with Pay Button General Launch Checklist Launch Checklist ​ From Staging to Production with Pay Button Crossmint provides two developer environments : staging and production. It's recommended to test end-to-end on staging before moving to production. ​ General Launch Checklist Complete the following general steps on each tab to launch your checkout in production: Verify your Account Verify your Collection Limits ​ Account Verification To launch in production, you must verify your project account in the production console . Additionally, if as a seller you choose to accept credit card payments, you are required to complete a simple KYC which takes 2 minutes on average to complete. You only have to verify a project once, and can create as many collections as you wish within that project. New projects require additional verification. For full details on the project and collection verification process, requirements, and troubleshooting, please read our account verification documentation . ​ Launch Checklist Change your API keys to the production versions. Ensure your production API key has the appropriate scopes enabled, such as orders.create . Update your collection ID to the production one. As needed, change your passed-in props to be production ready (e.g. make email , payment , lineItems programmatically filled). See Code Example Production Staging Copy Ask AI < CrossmintProvider apiKey = \"YOUR_PROD_API_KEY\" > < CrossmintPayButton lineItems = { { collectionLocator: `crossmint:YOUR_PROD_COLLECTION_ID` , callData: { totalPrice: \"0.25\" , quantity: 1 , }, } } payment = { { crypto: { enabled: true }, fiat: { enabled: true , defaultCurrency: \"usd\" , }, } } /> </ CrossmintProvider > Was this page helpful? Yes No Order Status Specify Recipient Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 361
  },
  {
    "id": "https://docs.crossmint.com/payments/pay-button/guides/specify-recipient#chunk_0",
    "url": "https://docs.crossmint.com/payments/pay-button/guides/specify-recipient",
    "title": "Specify Recipient - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Integrate Specify Recipient Documentation API Reference SDK Reference CLI Solution Guides Changelog Introduction About Crossmint Getting Started Using AI Assistants Platform Wallets Introduction Quickstarts ⚡ Guides Authentication Introduction Quickstart ⚡ Guides Tokenization (Minting) Introduction Integrate Checkout Introduction Integrate Plan Your Integration Hosted (pop-up) Overview Quickstart ⚡ Integrate Configure Payment Options Item Selection Order Status Production Launch Specify Recipient Customize Embedded Headless (API) Advanced Topics Digital Products Physical Products Specifying the Recipient Recipient by Email Recipient by Wallet Address Physical Product Recipients You can deliver items to three kinds of recipients when using Crossmint: ​ Digital Products For digital items (NFTs, tokens, etc.), you can specify one of the following recipient types: Email address : Crossmint automatically generates a secure MPC-backed custodial wallet for the user's email and delivers the item inside that new wallet. Email addresses are case-insensitive. Wallet address : Directly specify a blockchain wallet address. Receipt will be delivered to the email address specified in payment.receiptEmail . This could be a user-owned wallet (e.g., MetaMask, Phantom, etc.) or a wallet you manage. The format depends on the blockchain: - Ethereum/EVM chains : 0x1234567890abcdef1234567890abcdef12345678 - Solana : 5FHneW46xGXgs5mUiveU4sbTyGBzmstUspZC92UhjJM694ty - Other chains : Contact support for format requirements ​ Physical Products For physical items, you must provide: Email address : Required for receipt delivery (legal requirement) Physical address : Required shipping information including name, address, city, state, postal code, and country ​ Specifying the Recipient For Hosted Checkout, you specify the recipient by adding a recipient object to your checkout component. The recipient can be specified by email, wallet address, or physical address for physical products. ​ Recipient by Email When specifying a recipient by email, Crossmint will automatically create a secure custodial wallet on the fly for that email address: React Copy Ask AI < CrossmintProvider apiKey = \"YOUR_API_KEY\" > < CrossmintHostedCheckout recipient = { { email: \"user@example.com\" , } } lineItems = { { collectionLocator: `crossmint:YOUR_COLLECTION_ID` , callData: { totalPrice: \"0.0001\" , quantity: 1 , }, } } payment = { { crypto: { enabled: true }, fiat: { enabled: true }, } } > Buy with Crossmint </ CrossmintHostedCheckout > </ CrossmintProvider > The recipient will be able to access their purchased items by logging into their Crossmint wallet in staging or mainnet . ​ Recipient by Wallet Address To deliver items directly to a specific blockchain wallet address: React Copy Ask AI < CrossmintProvider apiKey = \"YOUR_API_KEY\" > < CrossmintHostedCheckout recipient = { { walletAddress: \"0x1234567890abcdef1234567890abcdef12345678\" , // For EVM chains // walletAddress: \"5FHneW46xGXgs5mUiveU4sbTyGBzmstUspZC92UhjJM694ty\", // For Solana } } lineItems = { { collectionLocator: `crossmint:YOUR_COLLECTION_ID` , callData: { totalPrice: \"0.0001\" , quantity: 1 , }, } } payment = { { crypto: { enabled: true }, fiat: { enabled: true }, } } /> </ CrossmintProvider > ​ Physical Product Recipients Physical Address Format Extend the recipient object with the physicalAddress object. These are the properties (note the required vs optional fields): JSON Format JSX Format Copy Ask AI { \"recipient\" : { \"email\" : \"user@example.com\" , \"physicalAddress\" : { \"name\" : \"John Doe\" , // required - Full name of the recipient \"line1\" : \"123 Main St\" , // required - Street address, P.O. box, company name, c/o \"line2\" : \"Apt 4B\" , // optional - Apartment, suite, unit, building, floor, etc. \"city\" : \"San Francisco\" , // required - City, district, suburb, town, or village \"state\" : \"CA\" , // required for US addresses - State, county, province, or region \"postalCode\" : \"94105\" , // required - ZIP or postal code \"country\" : \"US\" // required - Two-letter country code (ISO 3166-1 alpha-2) } } } Note: You must include the email address of the recipient in the recipient object so an email receipt can be sent to the customer (this is a legal requirement for physical product deliveries). Currently, only US addresses are supported for physical product deliveries. When purchasing physical products, you can specify a physical address for delivery: React Copy Ask AI < CrossmintProvider apiKey = \"YOUR_API_KEY\" > < CrossmintHostedCheckout recipient = { { email: \"user@example.com\" , physicalAddress: { name: \"John Doe\" , line1: \"123 Main St\" , line2: \"Apt 4B\" , // optional city: \"San Francisco\" , state: \"CA\" , postalCode: \"94105\" , country: \"US\" , }, } } projectId = \"YOUR_PROJECT_ID\" collectionId = \"YOUR_COLLECTION_ID\" environment = \"staging\" mintConfig = { { totalPrice: \"0.0001\" , quantity: 1 , } } /> </ CrossmintProvider > Was this page helpful? Yes No Production Launch React Hooks Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 765
  },
  {
    "id": "https://docs.crossmint.com/payments/pay-button/guides/ui-customization#chunk_0",
    "url": "https://docs.crossmint.com/payments/pay-button/guides/ui-customization",
    "title": "Customize the Button UI - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Customize Customize the Button UI Documentation API Reference SDK Reference CLI Solution Guides Changelog Introduction About Crossmint Getting Started Using AI Assistants Platform Wallets Introduction Quickstarts ⚡ Guides Authentication Introduction Quickstart ⚡ Guides Tokenization (Minting) Introduction Integrate Checkout Introduction Integrate Plan Your Integration Hosted (pop-up) Overview Quickstart ⚡ Integrate Customize React Hooks Customize the Button UI Localization Embedded Headless (API) Advanced Topics Button Customization Theme Options Custom Colors Checkout Experience Customization Display Mode Theme Overlay Options Complete Styling Example You can customize both the payment button and the checkout modal appearance using the appearance prop. ​ Button Customization ​ Theme Options The button can be styled using predefined themes: Copy Ask AI < CrossmintHostedCheckout appearance = { { theme: { button: \"light\" , // Options: \"light\", \"dark\", \"crossmint\" }, } } /> ​ Custom Colors Customize the button’s accent color: Copy Ask AI < CrossmintHostedCheckout appearance = { { variables: { colors: { accent: \"#FF0000\" , // Your custom color }, }, } } /> ​ Checkout Experience Customization ​ Display Mode Choose how the checkout appears: Copy Ask AI < CrossmintHostedCheckout appearance = { { display: \"popup\" , // Options: \"popup\", \"new-tab\" } } /> ​ Theme Set the checkout interface theme: Copy Ask AI < CrossmintHostedCheckout appearance = { { theme: { checkout: \"dark\" , // Options: \"light\", \"dark\" }, } } /> ​ Overlay Options Control the modal overlay behavior: Copy Ask AI < CrossmintHostedCheckout appearance = { { overlay: { enabled: false , // Disable the dark overlay behind the modal }, } } /> ​ Complete Styling Example Here’s an example combining multiple customization options: Copy Ask AI < CrossmintHostedCheckout appearance = { { theme: { button: \"light\" , checkout: \"dark\" , }, variables: { colors: { accent: \"#FF0000\" , }, }, display: \"popup\" , overlay: { enabled: true , }, } } // ... other props /> The appearance configuration allows you to: - Customize button and checkout themes independently - Set custom accent colors - Control how the checkout displays (popup/tab) - Manage overlay behavior Was this page helpful? Yes No React Hooks Localization Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 372
  },
  {
    "id": "https://docs.crossmint.com/payments/pay-button/overview#chunk_0",
    "url": "https://docs.crossmint.com/payments/pay-button/overview",
    "title": "Crossmint Hosted Checkout",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Hosted (pop-up) Overview Documentation API Reference SDK Reference CLI Solution Guides Changelog Introduction About Crossmint Getting Started Using AI Assistants Platform Wallets Introduction Quickstarts ⚡ Guides Authentication Introduction Quickstart ⚡ Guides Tokenization (Minting) Introduction Integrate Checkout Introduction Integrate Plan Your Integration Hosted (pop-up) Overview Quickstart ⚡ Integrate Customize Embedded Headless (API) Advanced Topics When is Hosted Checkout the best fit? Get Started Advanced Topics The hosted variant of checkout is only available for React applications. If you’re using a different framework like Vite or React Native, you can use the Headless version instead. For general information about Crossmint’s Payments product, see the introduction . This guide will focus on the features specific to the Hosted modality. ​ When is Hosted Checkout the best fit? You want to launch quickly and don’t need deep customization or a fully native user experience . ​ Get Started Quickstart Start selling digital assets in 5 minutes. Talk to an expert Contact our sales team for advanced support. Join the Community Connect with other developers in our Telegram group. ​ Advanced Topics Marketplaces & Launchpads SDK Reference Purchasing Multiple Assets Bring your own Collection USDC Contracts Checkout Localization Webhooks Testing Tips Was this page helpful? Yes No Plan Your Integration Quickstart ⚡ Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 228
  },
  {
    "id": "https://docs.crossmint.com/payments/pay-button/quickstart#chunk_0",
    "url": "https://docs.crossmint.com/payments/pay-button/quickstart",
    "title": "Digital Asset Checkout Integration | Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Hosted (pop-up) Quickstart ⚡ Documentation API Reference SDK Reference CLI Solution Guides Changelog Introduction About Crossmint Getting Started Using AI Assistants Platform Wallets Introduction Quickstarts ⚡ Guides Authentication Introduction Quickstart ⚡ Guides Tokenization (Minting) Introduction Integrate Checkout Introduction Integrate Plan Your Integration Hosted (pop-up) Overview Quickstart ⚡ Integrate Customize Embedded Headless (API) Advanced Topics Introduction From Crossmint Integration Steps Set up the Project Basic Integration (Optional) Advanced Integration Testing Your Integration All Set! Next Steps Customize the UI and Behavior Further Advanced Topics ​ Introduction In this guide, you will create a web app with Next.js which allows customers to buy digital assets with credit card and crypto payments using Crossmint’s hosted checkout. We will add a button that opens a checkout hosted in a pop-up or new tab. ​ From Crossmint Create a developer account in the Staging Console . Create a new collection or import yours into the console, and have your collectionId ready. Make sure you follow the maximum prices for collections set in staging outlined here . Create a client-side API key with the orders.create scope enabled. More info on creating API keys here . To integrate in production/mainnet, you'll also need to complete account and collection verification. More information in the production launch guide. For Marketplaces and Launchpads : You do not need to create a collection (skip Step 2). Simply use tokenLocator instead of collectionLocator in the examples. It is recommended to test tokenlocator in the production environment. See Marketplaces & Launchpads guide for more secondary-sale specific details. ​ Integration Steps This guide will start from scratch with an empty Next.js application. You'll install the required @crossmint/client-sdk-react-ui dependency and add the embedded checkout component. To get started: ​ Set up the Project 1 Create a new Next.js application Copy Ask AI npx create-next-app@latest If you see this message, type y and press Enter to proceed: Copy Ask AI Need to install the following packages: create-next-app@latest Ok to proceed? (y) 2 Name your app `crossmint-embedded-checkout-demo` and accept the default options Copy Ask AI What is your project named? crossmint-embedded-checkout-demo Would you like to use TypeScript? Yes Would you like to use ESLint? Yes Would you like to use Tailwind CSS? Yes Would you like to use ` src/ ` directory? No Would you like to use App Router? (recommended) Yes Would you like to customize the default import alias? No 3 Change into the directory created in previous steps Copy Ask AI cd crossmint-embedded-checkout-demo 4 Install @crossmint/client-sdk-react-ui npm yarn pnpm bun Copy Ask AI npm i @crossmint/client-sdk-react-ui 5 Open the project in your preferred code editor ​ Basic Integration This quickstart guide focuses on NFT Collections/Drops (primary sales), but Crossmint also supports marketplace integrations. 1 Add environment variables Create .env.local in your project root: Copy Ask AI NEXT_PUBLIC_CLIENT_API_KEY = \"_YOUR_CLIENT_API_KEY_\" # From API Keys page NEXT_PUBLIC_COLLECTION_ID = \"_YOUR_COLLECTION_ID_\" # From Collection details page 2 Create the checkout page Create /src/app/page.tsx with: Copy Ask AI \"use client\" ; import { CrossmintProvider , CrossmintHostedCheckout } from \"@crossmint/client-sdk-react-ui\" ; export default function Home () { const clientApiKey = process . env . NEXT_PUBLIC_CLIENT_API_KEY as string ; const collectionId = process . env . NEXT_PUBLIC_COLLECTION_ID as string ; return ( < CrossmintProvider apiKey = { clientApiKey } > < CrossmintHostedCheckout lineItems = { { collectionLocator: `crossmint: ${ collectionId } ` , callData: { totalPrice: \"0.001\" , quantity: 1 , }, } } payment = { { crypto: { enabled: true }, fiat: { enabled: true }, } } /> </ CrossmintProvider > ); } 3 Run your app Navigate to the directory your package.json is to run the app Copy Ask AI cd hosted-checkout/crossmint-hosted-checkout-demo npm yarn pnpm Copy Ask AI npm run dev Visit http://localhost:3000 to see your checkout! ​ (Optional) Advanced Integration Need purchase tracking, multiple line items, or more customization? Here’s a complete setup with additional features: For NFT Collections/Drops For Marketplaces Copy Ask AI \"use client\" ; import { useEffect } from \"react\" ; import { CrossmintProvider , CrossmintCheckoutProvider , CrossmintHostedCheckout , useCrossmintCheckout , } from \"@crossmint/client-sdk-react-ui\" ; // Component with purchase tracking function Checkout () { const { order } = useCrossmintCheckout (); const collectionId = process . env . NEXT_PUBLIC_COLLECTION_ID as string ; useEffect (() => { if ( order && order . phase === \"completed\" ) { console . log ( \"Purchase completed!\" ); // Handle successful purchase } }, [ order ]); return ( < CrossmintHostedCheckout lineItems = { [ { collectionLocator: `crossmint: ${ collectionId } ` , callData: { totalPrice: \"0.001\" , quantity: 1 , }, }, { collectionLocator: `crossmint: ${ collectionId } ` , callData: { totalPrice: \"0.002\" , quantity: 2 , }, }, }, ] } appearance = { { display: \"new-tab\" , // Open in a new tab overlay: { enabled: false , // Disable overlay }, theme: { button: \"dark\" , // Dark button theme checkout: \"dark\" , // Dark checkout theme }, } } payment = { { crypto: { enabled: true , defaultChain: \"polygon\" , // Set preferred blockchain defaultCurrency: \"matic\" , // Set preferred crypto }, fiat: { enabled: true , defaultCurrency: \"usd\" , // Set preferred fiat currency }, receiptEmail: \"receipt@example.com\" , // Optional: Set receipt email } } recipient = { { email: \"buyer@example.com\" , // Digital assets will be delivered to this email's wallet // Or use walletAddress: \"0x...\" for direct delivery } } locale = \"en-US\" // Set interface language /> ); } // Main component with providers export default function Home () { const clientApiKey = process . env . NEXT_PUBLIC_CLIENT_API_KEY as string ; return ( < div className = \"flex flex-col items-center justify-start min-h-screen p-6\" > < CrossmintProvider apiKey = { clientApiKey } > < CrossmintCheckoutProvider > < Checkout /> </ CrossmintCheckoutProvider > </ CrossmintProvider > </ div > ); } This advanced example showcases: - Multiple NFTs in one checkout - Purchase status tracking - Preferred payment methods and currencies - Email-based digital asset delivery -",
    "chunk_index": 0,
    "word_count": 1000
  },
  {
    "id": "https://docs.crossmint.com/payments/pay-button/quickstart#chunk_0",
    "url": "https://docs.crossmint.com/payments/pay-button/quickstart",
    "title": "Digital Asset Checkout Integration | Crossmint Docs",
    "content": "direct delivery } } locale = \"en-US\" // Set interface language /> ); } // Main component with providers export default function Home () { const clientApiKey = process . env . NEXT_PUBLIC_CLIENT_API_KEY as string ; return ( < div className = \"flex flex-col items-center justify-start min-h-screen p-6\" > < CrossmintProvider apiKey = { clientApiKey } > < CrossmintCheckoutProvider > < Checkout /> </ CrossmintCheckoutProvider > </ CrossmintProvider > </ div > ); } This advanced example showcases: - Multiple NFTs in one checkout - Purchase status tracking - Preferred payment methods and currencies - Email-based digital asset delivery - Language settings Learn more in our guides: - Payment Methods - Multi-purchases React Hooks ​ Testing Your Integration This demo uses the staging environment: Use test credit cards for payments Get test USDC from our faucet Check price limits for staging ​ All Set! You’ve successfully integrated a hosted checkout with credit card and crypto payment methods! Remember this demo is built on staging, so the digital assets will show up on the testnets. To launch on production, check the production launch checklist . You will need to contact Sales to enable the embedded checkout on production. ​ Next Steps ​ Customize the UI and Behavior Further UI Customization Learn how to customize the look and feel of the checkout button Payment Methods Configure available payment options for your users React Hooks Use React hooks to build custom checkout experiences ​ Advanced Topics SDK Reference Launch in Production Localization Multi-purchases Marketplaces Testing Tips Was this page helpful? Yes No Overview Configure Payment Options Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 273
  },
  {
    "id": "https://docs.crossmint.com/payments/plan-your-solution#chunk_0",
    "url": "https://docs.crossmint.com/payments/plan-your-solution",
    "title": "Plan Your Integration - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Integrate Plan Your Integration Documentation API Reference SDK Reference CLI Solution Guides Changelog Introduction About Crossmint Getting Started Using AI Assistants Platform Wallets Introduction Quickstarts ⚡ Guides Authentication Introduction Quickstart ⚡ Guides Tokenization (Minting) Introduction Integrate Checkout Introduction Integrate Plan Your Integration Hosted (pop-up) Embedded Headless (API) Advanced Topics 1. What asset type are you working with? 2. Choose an integration modality 3. Choose payment method(s) 4. (For digital purchases) How do you want your users to receive their item? 5. (For NFTs only) Do you need to create or import an existing collection? Next steps From enabling agentic purchases of Amazon items with stablecoins to purchasing NFTs using Apple Pay, Crossmint Checkout supports a wide variety of permutations - multiple asset types, payment methods, integration approaches, and advanced configuration options. This guide helps you make the key decisions for your integration. ​ 1. What asset type are you working with? Understand which asset type you will be purchasing or enabling the sale of. Physical Goods and Services Over 1 billion products and services from Amazon, Shopify, Flights, and more. NFTs Digital art, collectibles, access passes, in-game assets, and unique tokens. Stablecoins Regulated fungible assets, such as USDC. Memecoins Non-regulated fungible tokens, such as memecoins. Subscriptions Recurring billing for digital assets and services. ​ 2. Choose an integration modality Crossmint checkout can be integrated into your application in four different ways, ranging from a bare metal headless API with maximum UI flexibility, to a no-code payment link solution. Modality Description Integration Complexity Supported Platforms Recommended For Headless (API) Buy or sell using a REST API, best suited for backend flows and platforms not natively supported by other modalities. ~500 Lines of Code (LOC) Everywhere AI agents, embedded hardware, AR/VR Embedded Embed a checkout natively within your webapp or webview. ~100 LOC React, WebView E-commerce sites, token marketplaces, embedded finance Hosted Add a button to your webapp that opens a fully fledged checkout in a separate tab or window. ~10 LOC Web One-off integrations for an event, quick prototypes Payment Links (beta) Create shareable URLs for direct access to your storefront. No-code Any platform with web access Social media, email campaigns ​ 3. Choose payment method(s) You can choose multiple options from the following payment methods to include. Consider the following as you decide: Is your audience crypto-native or mainstream consumers familiar with fiat payments? What level of optionality do you want to enable? Adding many methods may add complexity during a user’s checkout flow. Payment Method Description Supported Asset Types Best For Debit & Credit Cards All major credit cards supported - Visa, Mastercard, American Express, and more. Physical Goods and Services, NFTs, Stablecoins, Memecoins, Subscriptions Mainstream consumers, global accessibility Apple & Google Pay Check out in under 30 seconds with faster payment methods. Physical Goods and Services, NFTs, Memecoins Mobile-first users, quick transactions Stablecoins Pay with USDC, USDT, and other stablecoins for lower transaction fees. Physical Goods and Services, NFTs Crypto-native users, lower fees Cross-Chain Crypto Pay with any token, on any chain. Physical Goods and Services, NFTs Multi-chain users, existing crypto holders ​ 4. (For digital purchases) How do you want your users to receive their item? Choose one or both: decide how users can choose to receive their purchased assets. Consider if your users already have crypto wallets or if they are new to crypto. Adding more options for delivery methods adds complexity to your checkout experience. Wallet Delivery Send to their crypto wallet address Email Delivery Send to their email. Crossmint will create a wallet for the user that they can later log in to. How to set it up by integration modality: Hosted checkout : You can specify the recipient by adding a mintTo property to the button component. Refer to the Specify Recipient guide for more information. Embedded checkout : You can choose to hide the delivery options from the user. Refer to the UI Customization guide for more information. Headless checkout : You can set the recipient to an email address in the API call, or by setting the destination to a wallet address and including a receiptEmail property within the payment object. Refer to the Quote Phase guide for more information. ​ 5. (For NFTs only) Do you need to create or import an existing collection? Choose one: Do you want to create a new NFT collection or import an existing one? Create New Use our templates in the Console Import Existing Connect your deployed smart contract ​ Next steps Ready to start building? Start with the quickstart for your chosen integration approach: Hosted Checkout Launch a Crossmint-hosted checkout page in a pop-up Embedded Checkout Import Crossmint checkout components in your application Headless (API) Buy or sell via an API, best suited for agents or deep UI customization Was this page helpful? Yes No Introduction Overview Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 825
  },
  {
    "id": "https://docs.crossmint.com/sdk-reference/credentials/classes/ContractMetadataService#chunk_0",
    "url": "https://docs.crossmint.com/sdk-reference/credentials/classes/ContractMetadataService",
    "title": "ContractMetadataService - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Classes ContractMetadataService Documentation API Reference SDK Reference CLI Solution Guides Changelog SDK Reference Introduction Wallets SDK Getting Started Reference Classes Type Aliases Functions Credentials SDK Introduction Classes ContractMetadataService CredentialService CrossmintDecrypt CrossmintMetamaskDecrypt Lit WalletAuthService Interfaces Type Aliases Variables Functions Enumerations Constructors new ContractMetadataService() Parameters Returns Defined in Properties Methods getContractMetadata() Parameters Returns Throws Defined in getContractsWithCredentialMetadata() Parameters Returns Throws Defined in Service for retrieving and managing contract metadata. ​ Constructors ​ new ContractMetadataService() new ContractMetadataService ( chain ): ContractMetadataService Initializes a new instance of the ContractMetadataService. ​ Parameters Parameter Type Description chain VCChain The blockchain to be used. ​ Returns ContractMetadataService ​ Defined in verifiableCredentialsSDK/presentation/contractMetadata.ts:20 ​ Properties Property Type Description Defined in chain VCChain The blockchain on which the contract is deployed. verifiableCredentialsSDK/presentation/contractMetadata.ts:14 ​ Methods ​ getContractMetadata() getContractMetadata ( contractAddress ): Promise < any > Retrieves metadata for a given contract. ​ Parameters Parameter Type Description contractAddress string The address of the contract. ​ Returns Promise < any > The metadata object or null if the contractURI call returns null. ​ Throws Will throw an error if the retrieval process fails. ​ Defined in verifiableCredentialsSDK/presentation/contractMetadata.ts:31 ​ getContractsWithCredentialMetadata() getContractsWithCredentialMetadata ( collections ): Promise < CredentialsCollection []> Retrieves metadata for multiple contracts and filters those that are verifiable credentials collections. ​ Parameters Parameter Type Description collections Collection [] An array of collections containing contract addresses. ​ Returns Promise < CredentialsCollection []> A promise that resolves to an array of collections with valid verifiable credential metadata. ​ Throws Will continue to the next collection if an error occurs during metadata retrieval. ​ Defined in verifiableCredentialsSDK/presentation/contractMetadata.ts:48 Was this page helpful? Yes No Introduction CredentialService Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 290
  },
  {
    "id": "https://docs.crossmint.com/sdk-reference/credentials/classes/CredentialService#chunk_0",
    "url": "https://docs.crossmint.com/sdk-reference/credentials/classes/CredentialService",
    "title": "CredentialService - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Classes CredentialService Documentation API Reference SDK Reference CLI Solution Guides Changelog SDK Reference Introduction Wallets SDK Getting Started Reference Classes Type Aliases Functions Credentials SDK Introduction Classes ContractMetadataService CredentialService CrossmintDecrypt CrossmintMetamaskDecrypt Lit WalletAuthService Interfaces Type Aliases Variables Functions Enumerations Remarks Extends Constructors new CredentialService() Parameters Returns Overrides Defined in Properties Methods getById() Parameters Returns Throws Defined in getCredential() Parameters Returns Throws Inherited from Defined in Service for managing and retrieving verifiable credentials from different sources. By default, it includes procedures for IPFS and Crossmint, but additional procedures can be added by the user. CredentialService().getById(credentialId: string) : Fetches the credential from crossmint using the credentialId. CredentialService().getCredential(collection: CredentialsCollection, tokenId: string) : Fetches the credential from the source that matches the storage location of the credential. ​ Remarks To use the Crossmint procedure, a Crossmint API key with the credentials.read scope must be set. ​ Extends CredentialService ​ Constructors ​ new CredentialService() new CredentialService ( retrievalProcedures ): CredentialService ​ Parameters Parameter Type retrievalProcedures CredentialRetrievalProcedure [] ​ Returns CredentialService ​ Overrides CredentialServiceRaw.constructor ​ Defined in presentation/getCredential.ts:100 ​ Properties Property Type Inherited from Defined in retrievalProcedures CredentialRetrievalProcedure [] CredentialServiceRaw.retrievalProcedures verifiableCredentialsSDK/presentation/getCredential.ts:45 ​ Methods ​ getById() getById ( credentialId ): Promise < null | VerifiableCredentialType > Retrieves a verifiable credential from Crossmint using its credential ID. ​ Parameters Parameter Type Description credentialId string The ID of the credential to retrieve. ​ Returns Promise < null | VerifiableCredentialType > A promise that resolves to a VerifiableCredentialType or null if the credential is not found. ​ Throws Will throw an error if the credential retrieval fails. ​ Defined in presentation/getCredential.ts:112 ​ getCredential() getCredential ( collection , tokenId ): Promise < VerifiableCredentialType > Retrieves a Verifiable Credential from a given collection and token ID. This function finds the appropriate retrieval procedure based on the collection’s metadata and uses it to fetch the credential. ​ Parameters Parameter Type Description collection CredentialsCollection The CredentialsCollection containing the credential’s metadata. tokenId string The token ID of the credential to retrieve. ​ Returns Promise < VerifiableCredentialType > A promise that resolves to a VerifiableCredentialType . ​ Throws Will throw an error if the collection is not a verifiable credential collection or if the retrieval endpoint is unsupported. ​ Inherited from CredentialServiceRaw.getCredential ​ Defined in verifiableCredentialsSDK/presentation/getCredential.ts:65 Was this page helpful? Yes No ContractMetadataService CrossmintDecrypt Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 399
  },
  {
    "id": "https://docs.crossmint.com/sdk-reference/credentials/classes/CrossmintDecrypt#chunk_0",
    "url": "https://docs.crossmint.com/sdk-reference/credentials/classes/CrossmintDecrypt",
    "title": "CrossmintDecrypt - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Classes CrossmintDecrypt Documentation API Reference SDK Reference CLI Solution Guides Changelog SDK Reference Introduction Wallets SDK Getting Started Reference Classes Type Aliases Functions Credentials SDK Introduction Classes ContractMetadataService CredentialService CrossmintDecrypt CrossmintMetamaskDecrypt Lit WalletAuthService Interfaces Type Aliases Variables Functions Enumerations Constructors new CrossmintDecrypt() Parameters Returns Defined in Properties Methods decrypt() Parameters Returns Throws Defined in Class for decrypting verifiable credentials that have been encrypted with the VerifiableCredentialEncryptionType.CROSSMINT_RECOVERABLE encryption type. This class uses a provided signature callback to authenticate the user and decrypt the credential. To use the Crossmint decrypt endpoint, an API key with the credentials.decrypt scope must be provided. ​ Constructors ​ new CrossmintDecrypt() new CrossmintDecrypt ( userAddress , signCallback , authService ): CrossmintDecrypt ​ Parameters Parameter Type userAddress string signCallback ( wallet , challenge ) => Promise < string > authService WalletAuthService ​ Returns CrossmintDecrypt ​ Defined in decryption/wallet.ts:25 ​ Properties Property Type Description Defined in signCallback ( wallet : string , challenge : string ) => Promise < string > A callback function that signs the challenge with the user’s wallet. decryption/wallet.ts:24 userAddress string - decryption/wallet.ts:16 ​ Methods ​ decrypt() decrypt ( credential ): Promise < VerifiableCredential > Decrypts an encrypted verifiable credential. This method validates the decrypted data to ensure it is a valid verifiable credential. ​ Parameters Parameter Type Description credential EncryptedVerifiableCredential The encrypted verifiable credential to decrypt. ​ Returns Promise < VerifiableCredential > A promise that resolves to a VerifiableCredential . ​ Throws Will throw an error if the decrypted data is not a valid verifiable credential. ​ Defined in decryption/wallet.ts:52 Was this page helpful? Yes No CredentialService CrossmintMetamaskDecrypt Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 285
  },
  {
    "id": "https://docs.crossmint.com/sdk-reference/credentials/classes/CrossmintMetamaskDecrypt#chunk_0",
    "url": "https://docs.crossmint.com/sdk-reference/credentials/classes/CrossmintMetamaskDecrypt",
    "title": "CrossmintMetamaskDecrypt - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Classes CrossmintMetamaskDecrypt Documentation API Reference SDK Reference CLI Solution Guides Changelog SDK Reference Introduction Wallets SDK Getting Started Reference Classes Type Aliases Functions Credentials SDK Introduction Classes ContractMetadataService CredentialService CrossmintDecrypt CrossmintMetamaskDecrypt Lit WalletAuthService Interfaces Type Aliases Variables Functions Enumerations Constructors new CrossmintMetamaskDecrypt() Parameters Returns Defined in Methods decrypt() Parameters Returns Throws Defined in Class for decrypting verifiable credentials encrypted with the VerifiableCredentialEncryptionType.CROSSMINT_RECOVERABLE encryption type using Metamask. This class uses Metamask to prompt the user to sign a message to decrypt the credential. If you want to use a different signature method, refer to the CrossmintDecrypt class. To use the Crossmint decrypt endpoint, an API key with the credentials.decrypt scope must be provided. ​ Constructors ​ new CrossmintMetamaskDecrypt() new CrossmintMetamaskDecrypt ( metamask ): CrossmintMetamaskDecrypt ​ Parameters Parameter Type metamask MetamaskService ​ Returns CrossmintMetamaskDecrypt ​ Defined in decryption/wallet.ts:69 ​ Methods ​ decrypt() decrypt ( credential , wallet ?): Promise < VerifiableCredential > Decrypts an encrypted verifiable credential using Metamask. This method prompts the user via Metamask to sign the necessary message for decrypting the credential. ​ Parameters Parameter Type Description credential EncryptedVerifiableCredential The encrypted verifiable credential to decrypt. wallet ? string (Optional) The user’s wallet address. If not provided, the connected wallet address from Metamask will be used. ​ Returns Promise < VerifiableCredential > A promise that resolves to a VerifiableCredential . ​ Throws Will throw an error if decryption fails or if Metamask is not properly configured. ​ Defined in decryption/wallet.ts:84 Was this page helpful? Yes No CrossmintDecrypt Lit Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 269
  },
  {
    "id": "https://docs.crossmint.com/sdk-reference/credentials/classes/Lit#chunk_0",
    "url": "https://docs.crossmint.com/sdk-reference/credentials/classes/Lit",
    "title": "Lit - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Classes Lit Documentation API Reference SDK Reference CLI Solution Guides Changelog SDK Reference Introduction Wallets SDK Getting Started Reference Classes Type Aliases Functions Credentials SDK Introduction Classes ContractMetadataService CredentialService CrossmintDecrypt CrossmintMetamaskDecrypt Lit WalletAuthService Interfaces Type Aliases Variables Functions Enumerations Extends Constructors new Lit() Parameters Returns Overrides Defined in Methods connect() Returns Inherited from Defined in decrypt() Parameters Returns Overrides Defined in Lit class for decrypting verifiable credentials that have been encrypted with the VerifiableCredentialEncryptionType.DECENTRALIZED_LIT encryption type. ​ Extends Lit ​ Constructors ​ new Lit() new Lit ( network , capacityDelegationAuthSig ?, debug ?): Lit Creates an instance of the Lit class for decrypting verifiable credentials. ​ Parameters Parameter Type Default value Description network \"habanero\" | \"manzano\" | \"cayenne\" undefined The network on which the credentials are encrypted (use CredentialMetadata.encryption.details.network). capacityDelegationAuthSig ? AuthSig undefined The capacity delegation signature used to pay for decrypting the credentials. If not provided, the Crossmint signature will be used. To use the Crossmint delegation signature, the user must have provided an API key with the credentials.decrypt scope. debug ? boolean false If true, enables debug mode for additional logging. ​ Returns Lit ​ Overrides LitRaw.constructor ​ Defined in decryption/lit.ts:27 ​ Methods ​ connect() connect (): Promise < LitNodeClient > ​ Returns Promise < LitNodeClient > ​ Inherited from LitRaw.connect ​ Defined in verifiableCredentialsSDK/encryption/lit.ts:50 ​ decrypt() decrypt ( credential ): Promise < VerifiableCredential > Decrypts a verifiable credential that has been encrypted with the Lit protocol. The user will be prompted to sign a message to decrypt the credential. ​ Parameters Parameter Type Description credential EncryptedVerifiableCredential The encrypted verifiable credential to decrypt. ​ Returns Promise < VerifiableCredential > A promise that resolves to the decrypted verifiable credential. ​ Overrides LitRaw.decrypt ​ Defined in decryption/lit.ts:49 Was this page helpful? Yes No CrossmintMetamaskDecrypt WalletAuthService Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 316
  },
  {
    "id": "https://docs.crossmint.com/sdk-reference/credentials/classes/WalletAuthService#chunk_0",
    "url": "https://docs.crossmint.com/sdk-reference/credentials/classes/WalletAuthService",
    "title": "WalletAuthService - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Classes WalletAuthService Documentation API Reference SDK Reference CLI Solution Guides Changelog SDK Reference Introduction Wallets SDK Getting Started Reference Classes Type Aliases Functions Credentials SDK Introduction Classes ContractMetadataService CredentialService CrossmintDecrypt CrossmintMetamaskDecrypt Lit WalletAuthService Interfaces Type Aliases Variables Functions Enumerations Constructors new WalletAuthService() Returns Methods decrypt() Parameters Returns Throws Defined in getChallenge() Parameters Returns Throws Defined in Service for handling wallet-based authentication and decryption with Crossmint. The WalletAuthService class provides methods to retrieve a challenge for wallet authentication and to decrypt credentials using that challenge. ​ Constructors ​ new WalletAuthService() new WalletAuthService (): WalletAuthService ​ Returns WalletAuthService ​ Methods ​ decrypt() decrypt ( credential , challenge , signature , userAddress ): Promise < any > Decrypts an encrypted verifiable credential using a signed challenge. This method sends the signed challenge, the user’s address, and the encrypted credential to Crossmint for decryption. ​ Parameters Parameter Type Description credential EncryptedVerifiableCredential The encrypted verifiable credential to decrypt. challenge string The challenge that was signed by the user’s wallet. signature string The signature of the challenge signed by the user’s wallet. userAddress string The blockchain address of the user requesting decryption. ​ Returns Promise < any > A promise that resolves to the decrypted data. ​ Throws Will throw an error if the decryption request fails or if the response is invalid. ​ Defined in services/walletAuth.ts:57 ​ getChallenge() getChallenge ( userAddress ): Promise < string > Retrieves a challenge nonce for wallet authentication. This method requests a challenge from Crossmint that can be signed by the user’s wallet to authenticate the user. ​ Parameters Parameter Type Description userAddress string The blockchain address of the user requesting the challenge. ​ Returns Promise < string > A promise that resolves to a string representing the challenge to sign. ​ Throws Will throw an error if the challenge request fails or if the response is invalid. ​ Defined in services/walletAuth.ts:20 Was this page helpful? Yes No Lit Collection Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 341
  },
  {
    "id": "https://docs.crossmint.com/sdk-reference/credentials/enumerations/VerifiableCredentialEncryptionType#chunk_0",
    "url": "https://docs.crossmint.com/sdk-reference/credentials/enumerations/VerifiableCredentialEncryptionType",
    "title": "VerifiableCredentialEncryptionType - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Enumerations VerifiableCredentialEncryptionType Documentation API Reference SDK Reference CLI Solution Guides Changelog SDK Reference Introduction Wallets SDK Getting Started Reference Classes Type Aliases Functions Credentials SDK Introduction Classes Interfaces Type Aliases Variables Functions Enumerations VerifiableCredentialEncryptionType Enumeration Members CROSSMINT_RECOVERABLE Defined in DECENTRALIZED_LIT Defined in NONE Defined in VerifiableCredentialEncryptionType defines the types of encryption used for the credentials. ​ Enumeration Members ​ CROSSMINT_RECOVERABLE CROSSMINT_RECOVERABLE : \"crossmint-recoverable\" Wallet based encryption that is recoverable via Crossmint. ​ Defined in verifiableCredentialsSDK/types/collection.ts:114 ​ DECENTRALIZED_LIT DECENTRALIZED_LIT : \"decentralized-lit\" Decentralized encryption using the Lit protocol. ​ Defined in verifiableCredentialsSDK/types/collection.ts:109 ​ NONE NONE : \"none\" No encryption applied to the verifiable credentials. ​ Defined in verifiableCredentialsSDK/types/collection.ts:104 Was this page helpful? Yes No verifyCredential Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 134
  },
  {
    "id": "https://docs.crossmint.com/sdk-reference/credentials/functions/getCredentialNFTFromLocator#chunk_0",
    "url": "https://docs.crossmint.com/sdk-reference/credentials/functions/getCredentialNFTFromLocator",
    "title": "getCredentialNFTFromLocator - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Functions getCredentialNFTFromLocator Documentation API Reference SDK Reference CLI Solution Guides Changelog SDK Reference Introduction Wallets SDK Getting Started Reference Classes Type Aliases Functions Credentials SDK Introduction Classes Interfaces Type Aliases Variables Functions getCredentialNFTFromLocator getCredentialNfts isCredentialType isEncryptedVerifiableCredential isVcChain isVerifiableCredential verifyCredential Enumerations Parameters Returns collection nft Throws Defined in getCredentialNFTFromLocator ( locator ): Promise < object > Retrieves a Verifiable Credential NFT from a locator. This function performs the following steps: Parses the locator string to extract NFT details. Verifies that the NFT belongs to a supported Verifiable Credentials chain. Fetches the NFT’s metadata and verifies it belongs to a Verifiable Credentials collection. Returns the NFT and the corresponding credentials collection. ​ Parameters Parameter Type Description locator string The locator string of the credential, formatted as “chain:contractAddress:tokenId” (e.g., “polygon:0x1B887669437644aA348c518844660ef8d63bd643:1”). ​ Returns Promise < object > An object containing: collection : The collection that the NFT belongs to, including the credential metadata. nft : The NFT with its metadata. ​ collection collection : CredentialsCollection ​ nft nft : NftWithMetadata = vcNft ​ Throws Will throw an error if the NFT is not on a supported Verifiable Credentials chain or if the NFT is not associated with a Verifiable Credentials collection. ​ Defined in verifiableCredentialsSDK/presentation/nftByLocator.ts:25 Was this page helpful? Yes No ipfsRetrievalProcedure getCredentialNfts Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 230
  },
  {
    "id": "https://docs.crossmint.com/sdk-reference/credentials/functions/getCredentialNfts#chunk_0",
    "url": "https://docs.crossmint.com/sdk-reference/credentials/functions/getCredentialNfts",
    "title": "getCredentialNfts - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Functions getCredentialNfts Documentation API Reference SDK Reference CLI Solution Guides Changelog SDK Reference Introduction Wallets SDK Getting Started Reference Classes Type Aliases Functions Credentials SDK Introduction Classes Interfaces Type Aliases Variables Functions getCredentialNFTFromLocator getCredentialNfts isCredentialType isEncryptedVerifiableCredential isVcChain isVerifiableCredential verifyCredential Enumerations Parameters Returns Defined in getCredentialNfts ( chain , wallet , filters ): Promise < CredentialsCollection []> Get all the NFTs of a given user that are verifiable credentials To use this method an api key with the credentials.read scope must have been provided. ​ Parameters Parameter Type Description chain VCChain Chain to get the NFTs from wallet string Wallet address of the user filters CredentialFilter Filters to select only desired credentials (i.e. credential type, credential issuer) ​ Returns Promise < CredentialsCollection []> List CredentialsCollection that match the filters each containing a list of nfts ​ Defined in presentation/getCredentialNfts.ts:18 Was this page helpful? Yes No getCredentialNFTFromLocator isCredentialType Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 167
  },
  {
    "id": "https://docs.crossmint.com/sdk-reference/credentials/functions/isCredentialType#chunk_0",
    "url": "https://docs.crossmint.com/sdk-reference/credentials/functions/isCredentialType",
    "title": "isCredentialType - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Functions isCredentialType Documentation API Reference SDK Reference CLI Solution Guides Changelog SDK Reference Introduction Wallets SDK Getting Started Reference Classes Type Aliases Functions Credentials SDK Introduction Classes Interfaces Type Aliases Variables Functions getCredentialNFTFromLocator getCredentialNfts isCredentialType isEncryptedVerifiableCredential isVcChain isVerifiableCredential verifyCredential Enumerations Parameters Returns Defined in isCredentialType ( obj ): obj is VerifiableCredentialType Checks if an object is of type VerifiableCredential or EncryptedVerifiableCredential . ​ Parameters Parameter Type Description obj any The object to check. ​ Returns obj is VerifiableCredentialType true if the object is of type VerifiableCredential or EncryptedVerifiableCredential , otherwise false . ​ Defined in verifiableCredentialsSDK/types/utils.ts:35 Was this page helpful? Yes No getCredentialNfts isEncryptedVerifiableCredential Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 125
  },
  {
    "id": "https://docs.crossmint.com/sdk-reference/credentials/functions/isEncryptedVerifiableCredential#chunk_0",
    "url": "https://docs.crossmint.com/sdk-reference/credentials/functions/isEncryptedVerifiableCredential",
    "title": "isEncryptedVerifiableCredential - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Functions isEncryptedVerifiableCredential Documentation API Reference SDK Reference CLI Solution Guides Changelog SDK Reference Introduction Wallets SDK Getting Started Reference Classes Type Aliases Functions Credentials SDK Introduction Classes Interfaces Type Aliases Variables Functions getCredentialNFTFromLocator getCredentialNfts isCredentialType isEncryptedVerifiableCredential isVcChain isVerifiableCredential verifyCredential Enumerations Parameters Returns Throws Defined in isEncryptedVerifiableCredential ( credential ): credential is EncryptedVerifiableCredential Checks if an object is an EncryptedVerifiableCredential . ​ Parameters Parameter Type Description credential VerifiableCredentialType The credential object to check. ​ Returns credential is EncryptedVerifiableCredential true if the object is a valid EncryptedVerifiableCredential , otherwise false . ​ Throws Will throw an error if the object does not have a valid structure for a verifiable credential. ​ Defined in verifiableCredentialsSDK/types/utils.ts:93 Was this page helpful? Yes No isCredentialType isVcChain Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 141
  },
  {
    "id": "https://docs.crossmint.com/sdk-reference/credentials/functions/isVcChain#chunk_0",
    "url": "https://docs.crossmint.com/sdk-reference/credentials/functions/isVcChain",
    "title": "isVcChain - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Functions isVcChain Documentation API Reference SDK Reference CLI Solution Guides Changelog SDK Reference Introduction Wallets SDK Getting Started Reference Classes Type Aliases Functions Credentials SDK Introduction Classes Interfaces Type Aliases Variables Functions getCredentialNFTFromLocator getCredentialNfts isCredentialType isEncryptedVerifiableCredential isVcChain isVerifiableCredential verifyCredential Enumerations Parameters Returns Defined in isVcChain ( chain ): chain is VCChain Checks if a string is a valid and supported chain for VCs. ​ Parameters Parameter Type Description chain string The chain string to check. ​ Returns chain is VCChain true if the string is a valid VCChain , otherwise false . ​ Defined in verifiableCredentialsSDK/types/utils.ts:111 Was this page helpful? Yes No isEncryptedVerifiableCredential isVerifiableCredential Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 125
  },
  {
    "id": "https://docs.crossmint.com/sdk-reference/credentials/functions/isVerifiableCredential#chunk_0",
    "url": "https://docs.crossmint.com/sdk-reference/credentials/functions/isVerifiableCredential",
    "title": "isVerifiableCredential - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Functions isVerifiableCredential Documentation API Reference SDK Reference CLI Solution Guides Changelog SDK Reference Introduction Wallets SDK Getting Started Reference Classes Type Aliases Functions Credentials SDK Introduction Classes Interfaces Type Aliases Variables Functions getCredentialNFTFromLocator getCredentialNfts isCredentialType isEncryptedVerifiableCredential isVcChain isVerifiableCredential verifyCredential Enumerations Parameters Returns Defined in isVerifiableCredential ( credential ): credential is VerifiableCredential Checks if an object is a VerifiableCredential . ​ Parameters Parameter Type Description credential VerifiableCredentialType The credential object to check. ​ Returns credential is VerifiableCredential true if the object is a valid VerifiableCredential , otherwise false . ​ Defined in verifiableCredentialsSDK/types/utils.ts:55 Was this page helpful? Yes No isVcChain verifyCredential Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 121
  },
  {
    "id": "https://docs.crossmint.com/sdk-reference/credentials/functions/verifyCredential#chunk_0",
    "url": "https://docs.crossmint.com/sdk-reference/credentials/functions/verifyCredential",
    "title": "verifyCredential - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Functions verifyCredential Documentation API Reference SDK Reference CLI Solution Guides Changelog SDK Reference Introduction Wallets SDK Getting Started Reference Classes Type Aliases Functions Credentials SDK Introduction Classes Interfaces Type Aliases Variables Functions getCredentialNFTFromLocator getCredentialNfts isCredentialType isEncryptedVerifiableCredential isVcChain isVerifiableCredential verifyCredential Enumerations Parameters Returns error validVC Throws Defined in verifyCredential ( credential ): Promise < object > Verify a Verifiable Credential This function checks the validity of a given Verifiable Credential (VC) by performing several checks: Ensures the validUntil date is a valid ISO string and not expired. Verifies the cryptographic proof attached to the credential. Checks if the associated NFT has been revoked (burned). ​ Parameters Parameter Type Description credential VerifiableCredential the credential object to verify ​ Returns Promise < object > error : A string with the error message if the credential is invalid, or undefined if the credential is valid. validVC : A boolean indicating if the credential is valid. ​ error error : string | undefined ​ validVC validVC : boolean ​ Throws Will throw an error if validUntil is present and is not a valid ISO string or if the date is invalid. ​ Defined in verifiableCredentialsSDK/verification/verify.ts:22 Was this page helpful? Yes No isVerifiableCredential VerifiableCredentialEncryptionType Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 219
  },
  {
    "id": "https://docs.crossmint.com/sdk-reference/credentials/interfaces/Collection#chunk_0",
    "url": "https://docs.crossmint.com/sdk-reference/credentials/interfaces/Collection",
    "title": "Collection - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Interfaces Collection Documentation API Reference SDK Reference CLI Solution Guides Changelog SDK Reference Introduction Wallets SDK Getting Started Reference Classes Type Aliases Functions Credentials SDK Introduction Classes Interfaces Collection CredentialFilter CredentialMetadata CredentialsCollection EncryptedVerifiableCredential VCNFT VerifiableCredential VerifiableCredentialEncryption Type Aliases Variables Functions Enumerations Extended by Properties chain Defined in contractAddress Defined in metadata Defined in nfts Defined in Collection represents a generic collection of NFTs. ​ Extended by CredentialsCollection ​ Properties ​ chain chain : VCChain The blockchain chain on which the contract is deployed. ​ Defined in verifiableCredentialsSDK/types/collection.ts:21 ​ contractAddress contractAddress : string Address of the contract associated with the collection. ​ Defined in verifiableCredentialsSDK/types/collection.ts:16 ​ metadata metadata : any Metadata associated with the collection. ​ Defined in verifiableCredentialsSDK/types/collection.ts:26 ​ nfts nfts : VCNFT [] List of NFTs within the collection. ​ Defined in verifiableCredentialsSDK/types/collection.ts:11 Was this page helpful? Yes No WalletAuthService CredentialFilter Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 163
  },
  {
    "id": "https://docs.crossmint.com/sdk-reference/credentials/interfaces/CredentialFilter#chunk_0",
    "url": "https://docs.crossmint.com/sdk-reference/credentials/interfaces/CredentialFilter",
    "title": "CredentialFilter - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Interfaces CredentialFilter Documentation API Reference SDK Reference CLI Solution Guides Changelog SDK Reference Introduction Wallets SDK Getting Started Reference Classes Type Aliases Functions Credentials SDK Introduction Classes Interfaces Collection CredentialFilter CredentialMetadata CredentialsCollection EncryptedVerifiableCredential VCNFT VerifiableCredential VerifiableCredentialEncryption Type Aliases Variables Functions Enumerations Properties issuers? Example Defined in types? Example Defined in CredentialFilter defines the criteria for filtering credentials. ​ Properties ​ issuers? optional issuers : string [] List of issuers to filter by. ​ Example Copy Ask AI [ \"did:polygon-amoy:0x1B887669437644aA348c518844660ef8d63bd643\" ]; ​ Defined in verifiableCredentialsSDK/types/credentialFilter.ts:9 ​ types? optional types : string [] List of accepted credential types. ​ Example Copy Ask AI [ \"driving_license\" , \"crossmint:e62564a7-06eb-4f65-b389-eb3b7a4f6f98:userAge\" ]; ​ Defined in verifiableCredentialsSDK/types/credentialFilter.ts:15 Was this page helpful? Yes No Collection CredentialMetadata Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 139
  },
  {
    "id": "https://docs.crossmint.com/sdk-reference/credentials/interfaces/CredentialMetadata#chunk_0",
    "url": "https://docs.crossmint.com/sdk-reference/credentials/interfaces/CredentialMetadata",
    "title": "CredentialMetadata - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Interfaces CredentialMetadata Documentation API Reference SDK Reference CLI Solution Guides Changelog SDK Reference Introduction Wallets SDK Getting Started Reference Classes Type Aliases Functions Credentials SDK Introduction Classes Interfaces Collection CredentialFilter CredentialMetadata CredentialsCollection EncryptedVerifiableCredential VCNFT VerifiableCredential VerifiableCredentialEncryption Type Aliases Variables Functions Enumerations Properties credentialsEndpoint Defined in encryption Defined in issuerDid Defined in type Defined in CredentialMetadata represents credentials-specific metadata inside the contract metadata. ​ Properties ​ credentialsEndpoint credentialsEndpoint : string Endpoint to fetch the credentials. ​ Defined in verifiableCredentialsSDK/types/collection.ts:70 ​ encryption encryption : VerifiableCredentialEncryption Specifies the encryption type used for the credentials in the collection. ​ Defined in verifiableCredentialsSDK/types/collection.ts:65 ​ issuerDid issuerDid : string The DID (Decentralized Identifier) of the issuer of the credentials for this collection. ​ Defined in verifiableCredentialsSDK/types/collection.ts:75 ​ type type : string [] Specifies the types of credentials in the collection. ​ Defined in verifiableCredentialsSDK/types/collection.ts:60 Was this page helpful? Yes No CredentialFilter CredentialsCollection Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 167
  },
  {
    "id": "https://docs.crossmint.com/sdk-reference/credentials/interfaces/CredentialsCollection#chunk_0",
    "url": "https://docs.crossmint.com/sdk-reference/credentials/interfaces/CredentialsCollection",
    "title": "CredentialsCollection - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Interfaces CredentialsCollection Documentation API Reference SDK Reference CLI Solution Guides Changelog SDK Reference Introduction Wallets SDK Getting Started Reference Classes Type Aliases Functions Credentials SDK Introduction Classes Interfaces Collection CredentialFilter CredentialMetadata CredentialsCollection EncryptedVerifiableCredential VCNFT VerifiableCredential VerifiableCredentialEncryption Type Aliases Variables Functions Enumerations Extends Properties chain Inherited from Defined in contractAddress Inherited from Defined in metadata Overrides Defined in nfts Inherited from Defined in CredentialsCollection represents a collection of credential NFTs. ​ Extends Collection ​ Properties ​ chain chain : VCChain The blockchain chain on which the contract is deployed. ​ Inherited from Collection . chain ​ Defined in verifiableCredentialsSDK/types/collection.ts:21 ​ contractAddress contractAddress : string Address of the contract associated with the collection. ​ Inherited from Collection . contractAddress ​ Defined in verifiableCredentialsSDK/types/collection.ts:16 ​ metadata metadata : VCContractMetadata Metadata of the contract, including credential-specific metadata. ​ Overrides Collection . metadata ​ Defined in verifiableCredentialsSDK/types/collection.ts:40 ​ nfts nfts : VCNFT [] List of NFTs within the collection. ​ Inherited from Collection . nfts ​ Defined in verifiableCredentialsSDK/types/collection.ts:11 Was this page helpful? Yes No CredentialMetadata EncryptedVerifiableCredential Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 193
  },
  {
    "id": "https://docs.crossmint.com/sdk-reference/credentials/interfaces/EncryptedVerifiableCredential#chunk_0",
    "url": "https://docs.crossmint.com/sdk-reference/credentials/interfaces/EncryptedVerifiableCredential",
    "title": "EncryptedVerifiableCredential - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Interfaces EncryptedVerifiableCredential Documentation API Reference SDK Reference CLI Solution Guides Changelog SDK Reference Introduction Wallets SDK Getting Started Reference Classes Type Aliases Functions Credentials SDK Introduction Classes Interfaces Collection CredentialFilter CredentialMetadata CredentialsCollection EncryptedVerifiableCredential VCNFT VerifiableCredential VerifiableCredentialEncryption Type Aliases Variables Functions Enumerations Properties id Defined in payload Defined in ​ Properties ​ id id : string ​ Defined in verifiableCredentialsSDK/types/verifiableCredential.ts:18 ​ payload payload : string ​ Defined in verifiableCredentialsSDK/types/verifiableCredential.ts:19 Was this page helpful? Yes No CredentialsCollection VCNFT Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 97
  },
  {
    "id": "https://docs.crossmint.com/sdk-reference/credentials/interfaces/VCNFT#chunk_0",
    "url": "https://docs.crossmint.com/sdk-reference/credentials/interfaces/VCNFT",
    "title": "VCNFT - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Interfaces VCNFT Documentation API Reference SDK Reference CLI Solution Guides Changelog SDK Reference Introduction Wallets SDK Getting Started Reference Classes Type Aliases Functions Credentials SDK Introduction Classes Interfaces Collection CredentialFilter CredentialMetadata CredentialsCollection EncryptedVerifiableCredential VCNFT VerifiableCredential VerifiableCredentialEncryption Type Aliases Variables Functions Enumerations Properties chain Defined in contractAddress Defined in tokenId Defined in ​ Properties ​ chain chain : VCChain ​ Defined in verifiableCredentialsSDK/types/nft.ts:4 ​ contractAddress contractAddress : string ​ Defined in verifiableCredentialsSDK/types/nft.ts:5 ​ tokenId tokenId : string ​ Defined in verifiableCredentialsSDK/types/nft.ts:6 Was this page helpful? Yes No EncryptedVerifiableCredential VerifiableCredential Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 109
  },
  {
    "id": "https://docs.crossmint.com/sdk-reference/credentials/interfaces/VerifiableCredential#chunk_0",
    "url": "https://docs.crossmint.com/sdk-reference/credentials/interfaces/VerifiableCredential",
    "title": "VerifiableCredential - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Interfaces VerifiableCredential Documentation API Reference SDK Reference CLI Solution Guides Changelog SDK Reference Introduction Wallets SDK Getting Started Reference Classes Type Aliases Functions Credentials SDK Introduction Classes Interfaces Collection CredentialFilter CredentialMetadata CredentialsCollection EncryptedVerifiableCredential VCNFT VerifiableCredential VerifiableCredentialEncryption Type Aliases Variables Functions Enumerations Properties @context Defined in credentialSubject Defined in description? Defined in id Defined in issuer id Defined in name? Defined in nft Defined in proof? Index Signature proofValue Defined in type Defined in validFrom Defined in validUntil? Defined in ​ Properties ​ @context @context : string [] ​ Defined in verifiableCredentialsSDK/types/verifiableCredential.ts:13 ​ credentialSubject credentialSubject : any ​ Defined in verifiableCredentialsSDK/types/verifiableCredential.ts:5 ​ description? optional description : string ​ Defined in verifiableCredentialsSDK/types/verifiableCredential.ts:8 ​ id id : string ​ Defined in verifiableCredentialsSDK/types/verifiableCredential.ts:4 ​ issuer issuer : object ​ id id : string ​ Defined in verifiableCredentialsSDK/types/verifiableCredential.ts:10 ​ name? optional name : string ​ Defined in verifiableCredentialsSDK/types/verifiableCredential.ts:7 ​ nft nft : VCNFT ​ Defined in verifiableCredentialsSDK/types/verifiableCredential.ts:9 ​ proof? optional proof : object ​ Index Signature [ key : string ]: any ​ proofValue proofValue : string ​ Defined in verifiableCredentialsSDK/types/verifiableCredential.ts:14 ​ type type : string [] ​ Defined in verifiableCredentialsSDK/types/verifiableCredential.ts:11 ​ validFrom validFrom : string ​ Defined in verifiableCredentialsSDK/types/verifiableCredential.ts:12 ​ validUntil? optional validUntil : string ​ Defined in verifiableCredentialsSDK/types/verifiableCredential.ts:6 Was this page helpful? Yes No VCNFT VerifiableCredentialEncryption Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 234
  },
  {
    "id": "https://docs.crossmint.com/sdk-reference/credentials/interfaces/VerifiableCredentialEncryption#chunk_0",
    "url": "https://docs.crossmint.com/sdk-reference/credentials/interfaces/VerifiableCredentialEncryption",
    "title": "VerifiableCredentialEncryption - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Interfaces VerifiableCredentialEncryption Documentation API Reference SDK Reference CLI Solution Guides Changelog SDK Reference Introduction Wallets SDK Getting Started Reference Classes Type Aliases Functions Credentials SDK Introduction Classes Interfaces Collection CredentialFilter CredentialMetadata CredentialsCollection EncryptedVerifiableCredential VCNFT VerifiableCredential VerifiableCredentialEncryption Type Aliases Variables Functions Enumerations Properties details? Defined in type Defined in VerifiableCredentialEncryption defines the encryption settings for verifiable credentials collection. ​ Properties ​ details? optional details : LitEncryptionDetails Optional additional details about the encryption useful for decryption. ​ Defined in verifiableCredentialsSDK/types/collection.ts:90 ​ type type : VerifiableCredentialEncryptionType Specifies the type of encryption used for the verifiable credentials. ​ Defined in verifiableCredentialsSDK/types/collection.ts:85 Was this page helpful? Yes No VerifiableCredential ChainRPCConfig Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 126
  },
  {
    "id": "https://docs.crossmint.com/sdk-reference/credentials/introduction#chunk_0",
    "url": "https://docs.crossmint.com/sdk-reference/credentials/introduction",
    "title": "Introduction - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Credentials SDK Introduction Documentation API Reference SDK Reference CLI Solution Guides Changelog SDK Reference Introduction Wallets SDK Getting Started Reference Classes Type Aliases Functions Credentials SDK Introduction Classes Interfaces Type Aliases Variables Functions Enumerations SDK Reference Classes Interfaces Type Aliases Variables Functions Enumerations The Verifiable Credentials Client SDK is a powerful tool for managing verifiable credentials. It simplifies several key processes, making it easier to work with these credentials. NOTE: The SDK can be used also server-side. You can download the SDK from here . The SDK assists with the following processes: Verification : The SDK provides a straightforward method to verify any given credential. Presentation : By inputting a user’s wallet address, the SDK allows you to retrieve all credentials issued to that address. It also provides a filtering option for easy navigation through the credentials. Decryption : In case of encrypted credentials, the SDK enables you to decrypt a credential for a specific user interacting with the lit protocol. Generate a client-side-api-key from the Crossmint console: Go to the Developers -> API Keys tab, click on New API Key in the Client-side keys section, and select the scopes credentials.read and credentials.decrypt . Copy Ask AI import { CrossmintAPI } from \"@crossmint/verifiable-credentials\" ; CrossmintAPI . init ( \"<api_key>\" ); ​ SDK Reference ​ Classes ContractMetadataService CredentialService CrossmintDecrypt CrossmintMetamaskDecrypt Lit WalletAuthService ​ Interfaces Collection CredentialFilter CredentialMetadata CredentialsCollection EncryptedVerifiableCredential VCNFT VerifiableCredential VerifiableCredentialEncryption ​ Type Aliases ChainRPCConfig VCChain VerifiableCredentialType ​ Variables VCChain crossmintAPI crossmintRetrievalProcedure ipfsRetrievalProcedure ​ Functions getCredentialNFTFromLocator getCredentialNfts isCredentialType isEncryptedVerifiableCredential isVcChain isVerifiableCredential verifyCredential ​ Enumerations VerifiableCredentialEncryptionType Was this page helpful? Yes No createCrossmint ContractMetadataService Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 284
  },
  {
    "id": "https://docs.crossmint.com/sdk-reference/credentials/type-aliases/ChainRPCConfig#chunk_0",
    "url": "https://docs.crossmint.com/sdk-reference/credentials/type-aliases/ChainRPCConfig",
    "title": "ChainRPCConfig - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Type Aliases ChainRPCConfig Documentation API Reference SDK Reference CLI Solution Guides Changelog SDK Reference Introduction Wallets SDK Getting Started Reference Classes Type Aliases Functions Credentials SDK Introduction Classes Interfaces Type Aliases ChainRPCConfig VCChain VerifiableCredentialType Variables Functions Enumerations Example Defined in ChainRPCConfig : Record < VCChain , string > ChainRPCConfig is a mapping of blockchain chains to their respective RPC endpoints. ​ Example Copy Ask AI const config : ChainRPCConfig = { polygon: \"https://polygon.llamarpc.com/\" , }; ​ Defined in verifiableCredentialsSDK/types/chain.ts:17 Was this page helpful? Yes No VerifiableCredentialEncryption VCChain Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 108
  },
  {
    "id": "https://docs.crossmint.com/sdk-reference/credentials/type-aliases/VCChain#chunk_0",
    "url": "https://docs.crossmint.com/sdk-reference/credentials/type-aliases/VCChain",
    "title": "VCChain - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Type Aliases VCChain Documentation API Reference SDK Reference CLI Solution Guides Changelog SDK Reference Introduction Wallets SDK Getting Started Reference Classes Type Aliases Functions Credentials SDK Introduction Classes Interfaces Type Aliases ChainRPCConfig VCChain VerifiableCredentialType Variables Functions Enumerations Defined in VCChain : typeof VCChain [keyof typeof VCChain ] ​ Defined in verifiableCredentialsSDK/types/chain.ts:1 Was this page helpful? Yes No ChainRPCConfig VerifiableCredentialType Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 80
  },
  {
    "id": "https://docs.crossmint.com/sdk-reference/credentials/type-aliases/VerifiableCredentialType#chunk_0",
    "url": "https://docs.crossmint.com/sdk-reference/credentials/type-aliases/VerifiableCredentialType",
    "title": "VerifiableCredentialType - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Type Aliases VerifiableCredentialType Documentation API Reference SDK Reference CLI Solution Guides Changelog SDK Reference Introduction Wallets SDK Getting Started Reference Classes Type Aliases Functions Credentials SDK Introduction Classes Interfaces Type Aliases ChainRPCConfig VCChain VerifiableCredentialType Variables Functions Enumerations Defined in VerifiableCredentialType : VerifiableCredential | EncryptedVerifiableCredential VerifiableCredentialType A wrapper type for VerifiableCredential and EncryptedVerifiableCredential ​ Defined in verifiableCredentialsSDK/types/verifiableCredential.ts:26 Was this page helpful? Yes No VCChain VCChain Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 85
  },
  {
    "id": "https://docs.crossmint.com/sdk-reference/credentials/variables/VCChain#chunk_0",
    "url": "https://docs.crossmint.com/sdk-reference/credentials/variables/VCChain",
    "title": "VCChain - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Variables VCChain Documentation API Reference SDK Reference CLI Solution Guides Changelog SDK Reference Introduction Wallets SDK Getting Started Reference Classes Type Aliases Functions Credentials SDK Introduction Classes Interfaces Type Aliases Variables VCChain crossmintAPI crossmintRetrievalProcedure ipfsRetrievalProcedure Functions Enumerations Type declaration POLYGON POLYGON_AMOY POLY_AMOY Defined in const VCChain : object ​ Type declaration ​ POLYGON readonly POLYGON : \"polygon\" = \"polygon\" ​ POLYGON_AMOY readonly POLYGON_AMOY : \"polygon-amoy\" = \"polygon-amoy\" ​ POLY_AMOY readonly POLY_AMOY : \"poly-amoy\" = \"poly-amoy\" ​ Defined in verifiableCredentialsSDK/types/chain.ts:1 Was this page helpful? Yes No VerifiableCredentialType crossmintAPI Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 108
  },
  {
    "id": "https://docs.crossmint.com/sdk-reference/credentials/variables/crossmintAPI#chunk_0",
    "url": "https://docs.crossmint.com/sdk-reference/credentials/variables/crossmintAPI",
    "title": "crossmintAPI - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Variables crossmintAPI Documentation API Reference SDK Reference CLI Solution Guides Changelog SDK Reference Introduction Wallets SDK Getting Started Reference Classes Type Aliases Functions Credentials SDK Introduction Classes Interfaces Type Aliases Variables VCChain crossmintAPI crossmintRetrievalProcedure ipfsRetrievalProcedure Functions Enumerations Example const crossmintAPI : CrossmintAPI Crossmint API singleton, used to init the SDK To use the SDK you must call init before any other method ​ Example Copy Ask AI crossmintAPI . init ( \"your-api-key\" , config : \\{ environment: \"staging\" , ipfsGateways: [ \"https://ipfs.io\" ], // Optional, a list of defualt ones is provided ipfsTimeout: 5000 , // ms, Optional, default is 10 seconds blockchainRpcs: \\{ ... \\} // Optional, default rpcs for polygon are provided \\} ) ## Defined in [ crossmintAPI . ts : 124 ]( https : //github.com/Crossmint/crossmint-sdk/blob/main/packages/client/verifiable-credentials/src/crossmintAPI.ts#L124) Was this page helpful? Yes No VCChain crossmintRetrievalProcedure Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 158
  },
  {
    "id": "https://docs.crossmint.com/sdk-reference/credentials/variables/crossmintRetrievalProcedure#chunk_0",
    "url": "https://docs.crossmint.com/sdk-reference/credentials/variables/crossmintRetrievalProcedure",
    "title": "crossmintRetrievalProcedure - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Variables crossmintRetrievalProcedure Documentation API Reference SDK Reference CLI Solution Guides Changelog SDK Reference Introduction Wallets SDK Getting Started Reference Classes Type Aliases Functions Credentials SDK Introduction Classes Interfaces Type Aliases Variables VCChain crossmintAPI crossmintRetrievalProcedure ipfsRetrievalProcedure Functions Enumerations Remarks Defined in const crossmintRetrievalProcedure : CredentialRetrievalProcedure Crossmint retrieval procedure for credentials stored in Crossmint. This procedure uses the Crossmint API to fetch credentials and matches all credentials that are stored in Crossmint. ​ Remarks This procedure requires a Crossmint API key with the credentials.read scope. ​ Defined in presentation/getCredential.ts:83 Was this page helpful? Yes No crossmintAPI ipfsRetrievalProcedure Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 116
  },
  {
    "id": "https://docs.crossmint.com/sdk-reference/credentials/variables/ipfsRetrievalProcedure#chunk_0",
    "url": "https://docs.crossmint.com/sdk-reference/credentials/variables/ipfsRetrievalProcedure",
    "title": "ipfsRetrievalProcedure - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Variables ipfsRetrievalProcedure Documentation API Reference SDK Reference CLI Solution Guides Changelog SDK Reference Introduction Wallets SDK Getting Started Reference Classes Type Aliases Functions Credentials SDK Introduction Classes Interfaces Type Aliases Variables VCChain crossmintAPI crossmintRetrievalProcedure ipfsRetrievalProcedure Functions Enumerations Defined in const ipfsRetrievalProcedure : CredentialRetrievalProcedure Default retrieval procedure for ipfs, can be overridden by the user. Will match all credentials with a retrieval endpoint starting with ipfs:// Will use the ipfs gataways provided in SDK init to fetch the credential ​ Defined in verifiableCredentialsSDK/presentation/getCredential.ts:34 Was this page helpful? Yes No crossmintRetrievalProcedure getCredentialNFTFromLocator Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 111
  },
  {
    "id": "https://docs.crossmint.com/sdk-reference/introduction#chunk_0",
    "url": "https://docs.crossmint.com/sdk-reference/introduction",
    "title": "Introduction - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation SDK Reference Introduction Documentation API Reference SDK Reference CLI Solution Guides Changelog SDK Reference Introduction Wallets SDK Getting Started Reference Classes Type Aliases Functions Credentials SDK Introduction Classes Interfaces Type Aliases Variables Functions Enumerations Wallets SDK Credentials SDK Was this page helpful? Yes No Getting Started Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 67
  },
  {
    "id": "https://docs.crossmint.com/sdk-reference/wallets/classes/CrossmintWallets#chunk_0",
    "url": "https://docs.crossmint.com/sdk-reference/wallets/classes/CrossmintWallets",
    "title": "CrossmintWallets - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Classes CrossmintWallets Documentation API Reference SDK Reference CLI Solution Guides Changelog SDK Reference Introduction Wallets SDK Getting Started Reference Classes CrossmintWallets Wallet EVMWallet SolanaWallet WalletsApiClient Type Aliases Functions Credentials SDK Introduction Classes Interfaces Type Aliases Variables Functions Enumerations Methods createWallet() Type Parameters Parameters Returns Defined in getOrCreateWallet() Type Parameters Parameters Returns Defined in getWallet() Type Parameters Parameters Returns Defined in from() Parameters Returns Defined in ​ Methods ​ createWallet() createWallet < C >( options ): Promise < Wallet < C >> Create a new wallet, can only be called on the server side ​ Type Parameters Type Parameter C extends Chain ​ Parameters Parameter Type Description options WalletArgsFor < C > Wallet options ​ Returns Promise < Wallet < C >> A new wallet ​ Defined in packages/wallets/src/sdk.ts:50 ​ getOrCreateWallet() getOrCreateWallet < C >( options ): Promise < Wallet < C >> Get or create a wallet, can only be called on the client side ​ Type Parameters Type Parameter C extends Chain ​ Parameters Parameter Type Description options WalletArgsFor < C > Wallet options ​ Returns Promise < Wallet < C >> An existing wallet or a new wallet ​ Defined in packages/wallets/src/sdk.ts:31 ​ getWallet() getWallet < C >( walletLocator , options ): Promise < Wallet < C >> Get an existing wallet by its locator, can only be called on the server side ​ Type Parameters Type Parameter C extends Chain ​ Parameters Parameter Type Description walletLocator string Wallet locator options WalletArgsFor < C > Wallet options ​ Returns Promise < Wallet < C >> A wallet if found, throws WalletNotAvailableError if not found ​ Defined in packages/wallets/src/sdk.ts:41 ​ from() static from ( crossmint ): CrossmintWallets Initialize the Wallets SDK ​ Parameters Parameter Type Description crossmint Crossmint Crossmint data (use createCrossmint to initialize) ​ Returns CrossmintWallets A new CrossmintWallets instance ​ Defined in packages/wallets/src/sdk.ts:21 Was this page helpful? Yes No Reference Wallet Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 335
  },
  {
    "id": "https://docs.crossmint.com/sdk-reference/wallets/classes/EVMWallet#chunk_0",
    "url": "https://docs.crossmint.com/sdk-reference/wallets/classes/EVMWallet",
    "title": "EVMWallet - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Classes EVMWallet Documentation API Reference SDK Reference CLI Solution Guides Changelog SDK Reference Introduction Wallets SDK Getting Started Reference Classes CrossmintWallets Wallet EVMWallet SolanaWallet WalletsApiClient Type Aliases Functions Credentials SDK Introduction Classes Interfaces Type Aliases Variables Functions Enumerations Extends Constructors new EVMWallet() Parameters Returns Overrides Defined in Properties Methods addDelegatedSigner() Parameters Returns Inherited from Defined in balances() Parameters Returns Throws Inherited from Defined in delegatedSigners() Returns Inherited from Defined in experimental_activity() Returns Throws Inherited from Defined in experimental_nfts() Parameters Returns Inherited from Defined in experimental_transactions() Returns Inherited from Defined in getViemClient() Parameters Returns Defined in send() Type Parameters Parameters Returns Inherited from Defined in sendTransaction() Type Parameters Parameters Returns Defined in signMessage() Parameters Returns Defined in signTypedData() Type Parameters Parameters Returns Defined in from() Parameters Returns Defined in ​ Extends Wallet < EVMChain > ​ Constructors ​ new EVMWallet() new EVMWallet ( wallet ): EVMWallet ​ Parameters Parameter Type wallet Wallet < EVMSmartWalletChain > ​ Returns EVMWallet ​ Overrides Wallet . constructor ​ Defined in packages/wallets/src/wallets/evm.ts:19 ​ Properties Property Type Inherited from Defined in address string Wallet . address packages/wallets/src/wallets/wallet.ts:41 chain EVMSmartWalletChain Wallet . chain packages/wallets/src/wallets/wallet.ts:40 owner? string Wallet . owner packages/wallets/src/wallets/wallet.ts:42 signer Signer <keyof SignResultMap > Wallet . signer packages/wallets/src/wallets/wallet.ts:43 ​ Methods ​ addDelegatedSigner() addDelegatedSigner ( signer ): Promise < void > Add a delegated signer to the wallet ​ Parameters Parameter Type Description signer object The signer signer.signer string - ​ Returns Promise < void > The delegated signer ​ Inherited from Wallet . addDelegatedSigner ​ Defined in packages/wallets/src/wallets/wallet.ts:235 ​ balances() balances ( tokens ?, chains ?): Promise < Balances > Get the wallet balances - always includes USDC and native token (ETH/SOL) ​ Parameters Parameter Type Description tokens ? string [] Additional tokens to request (optional: native token and usdc are always included) chains ? Chain [] The chains (optional) ​ Returns Promise < Balances > The balances returns nativeToken, usdc, tokens ​ Throws If the balances cannot be retrieved ​ Inherited from Wallet . balances ​ Defined in packages/wallets/src/wallets/wallet.ts:80 ​ delegatedSigners() delegatedSigners (): Promise < DelegatedSigner []> ​ Returns Promise < DelegatedSigner []> ​ Inherited from Wallet . delegatedSigners ​ Defined in packages/wallets/src/wallets/wallet.ts:265 ​ experimental_activity() experimental_activity (): Promise < WalletsV1Alpha2ActivityResponseDto > Experimental Get the wallet activity ​ Returns Promise < WalletsV1Alpha2ActivityResponseDto > The activity This API is experimental and may change in the future ​ Throws If the activity cannot be retrieved ​ Inherited from Wallet . experimental_activity ​ Defined in packages/wallets/src/wallets/wallet.ts:186 ​ experimental_nfts() experimental_nfts ( params ): Promise < GetNftsResponse > Experimental Get the wallet NFTs ​ Parameters Parameter Type Description params object The parameters params.page number The page number params.perPage number The number of NFTs per page ​ Returns Promise < GetNftsResponse > The NFTs This API is experimental and may change in the future ​ Inherited from Wallet . experimental_nfts ​ Defined in packages/wallets/src/wallets/wallet.ts:164 ​ experimental_transactions() experimental_transactions (): Promise < GetTransactionsResponse > Get the wallet transactions ​ Returns Promise < GetTransactionsResponse > The transactions ​ Inherited from Wallet . experimental_transactions ​ Defined in packages/wallets/src/wallets/wallet.ts:176 ​ getViemClient() getViemClient ( params ?): object ​ Parameters Parameter Type params ? object params.transport ? HttpTransport ​ Returns object account account : undefined The Account of the Client. batch? optional batch : object Flags for batch settings. batch.multicall? optional multicall : boolean | object Toggle to enable eth_call multicall aggregation. cacheTime cacheTime : number Time (in ms) that cached data will remain in memory. call() call : ( parameters ) => Promise < CallReturnType > Parameters Parameter Type parameters CallParameters < Chain > Returns Promise < CallReturnType > The call data. CallReturnType ccipRead? optional ccipRead : false | object CCIP Read configuration. chain chain : Chain Chain for the client. createAccessList() createAccessList : ( parameters ) => Promise < object > Parameters Parameter Type parameters CreateAccessListParameters < Chain > Returns Promise < object > The call data. CreateAccessListReturnType accessList accessList : AccessList gasUsed gasUsed : bigint createBlockFilter() createBlockFilter : () => Promise < object > Returns Promise < object > Filter. CreateBlockFilterReturnType id id : `0x${string}` request request : EIP1193RequestFn <readonly [ object , object , object ]> type type : \"block\" createContractEventFilter() createContractEventFilter : < abi , eventName , args , strict , fromBlock , toBlock >( args ) => Promise < CreateContractEventFilterReturnType < abi , eventName , args , strict , fromBlock , toBlock >> Type Parameters Type Parameter Default type abi extends Abi | readonly unknown [] - eventName extends undefined | string - args extends undefined | Record < string , unknown > | readonly unknown [] - strict extends undefined | boolean undefined fromBlock extends undefined | bigint | BlockTag undefined toBlock extends undefined | bigint | BlockTag undefined Parameters Parameter Type Description args CreateContractEventFilterParameters < abi , eventName , args , strict , fromBlock , toBlock > CreateContractEventFilterParameters Returns Promise < CreateContractEventFilterReturnType < abi , eventName , args , strict , fromBlock , toBlock >> Filter . CreateContractEventFilterReturnType createEventFilter() createEventFilter : < abiEvent , abiEvents , strict , fromBlock , toBlock , _EventName , _Args >( args ?) => Promise <{ [K in string | number | symbol]: Filter<“event”, abiEvents, _EventName, _Args, strict, fromBlock, toBlock>[K] }> Type Parameters Type Parameter Default type abiEvent extends undefined | AbiEvent undefined abiEvents extends undefined | readonly unknown [] | readonly AbiEvent [] abiEvent extends AbiEvent ? [ abiEvent < abiEvent >] : undefined strict extends undefined | boolean undefined fromBlock extends undefined | bigint | BlockTag undefined toBlock extends undefined | bigint | BlockTag undefined _EventName extends undefined | string MaybeAbiEventName < abiEvent > _Args extends undefined | Record < string , unknown > | readonly unknown [] undefined Parameters Parameter Type Description args ? CreateEventFilterParameters < abiEvent , abiEvents , strict , fromBlock , toBlock , _EventName , _Args > CreateEventFilterParameters Returns Promise <{ [K in string | number | symbol]: Filter<“event”, abiEvents, _EventName, _Args, strict, fromBlock, toBlock>[K] }> Filter . CreateEventFilterReturnType createPendingTransactionFilter() createPendingTransactionFilter : () => Promise < object > Returns Promise",
    "chunk_index": 0,
    "word_count": 1000
  },
  {
    "id": "https://docs.crossmint.com/sdk-reference/wallets/classes/EVMWallet#chunk_0",
    "url": "https://docs.crossmint.com/sdk-reference/wallets/classes/EVMWallet",
    "title": "EVMWallet - Crossmint Docs",
    "content": "extends undefined | boolean undefined fromBlock extends undefined | bigint | BlockTag undefined toBlock extends undefined | bigint | BlockTag undefined _EventName extends undefined | string MaybeAbiEventName < abiEvent > _Args extends undefined | Record < string , unknown > | readonly unknown [] undefined Parameters Parameter Type Description args ? CreateEventFilterParameters < abiEvent , abiEvents , strict , fromBlock , toBlock , _EventName , _Args > CreateEventFilterParameters Returns Promise <{ [K in string | number | symbol]: Filter<“event”, abiEvents, _EventName, _Args, strict, fromBlock, toBlock>[K] }> Filter . CreateEventFilterReturnType createPendingTransactionFilter() createPendingTransactionFilter : () => Promise < object > Returns Promise < object > Filter . CreateBlockFilterReturnType id id : `0x${string}` request request : EIP1193RequestFn <readonly [ object , object , object ]> type type : \"transaction\" estimateContractGas() estimateContractGas : < chain , abi , functionName , args >( args ) => Promise < bigint > Type Parameters Type Parameter chain extends undefined | Chain abi extends Abi | readonly unknown [] functionName extends string args extends unknown Parameters Parameter Type Description args EstimateContractGasParameters < abi , functionName , args , chain > EstimateContractGasParameters Returns Promise < bigint > The gas estimate (in wei). EstimateContractGasReturnType estimateFeesPerGas() estimateFeesPerGas : < chainOverride , type >( args ?) => Promise < EstimateFeesPerGasReturnType < type >> Type Parameters Type Parameter Default type chainOverride extends undefined | Chain undefined type extends FeeValuesType \"eip1559\" Parameters Parameter Type args ? EstimateFeesPerGasParameters < Chain , chainOverride , type > Returns Promise < EstimateFeesPerGasReturnType < type >> An estimate (in wei) for the fees per gas. EstimateFeesPerGasReturnType estimateGas() estimateGas : ( args ) => Promise < bigint > Parameters Parameter Type Description args EstimateGasParameters < Chain > EstimateGasParameters Returns Promise < bigint > The gas estimate (in wei). EstimateGasReturnType estimateMaxPriorityFeePerGas() estimateMaxPriorityFeePerGas : < chainOverride >( args ?) => Promise < bigint > Type Parameters Type Parameter Default type chainOverride extends undefined | Chain undefined Parameters Parameter Type args ? object args.chain ? null | chainOverride Returns Promise < bigint > An estimate (in wei) for the max priority fee per gas. EstimateMaxPriorityFeePerGasReturnType extend() extend : < client >( fn ) => Client < HttpTransport , Chain , undefined , PublicRpcSchema , { [K in string | number | symbol]: client[K] } & PublicActions < HttpTransport , Chain >> Type Parameters Type Parameter client extends object & ExactPartial < ExtendableProtectedActions < HttpTransport , Chain , undefined >> Parameters Parameter Type fn ( client ) => client Returns Client < HttpTransport , Chain , undefined , PublicRpcSchema , { [K in string | number | symbol]: client[K] } & PublicActions < HttpTransport , Chain >> getBalance() getBalance : ( args ) => Promise < bigint > Parameters Parameter Type Description args GetBalanceParameters GetBalanceParameters Returns Promise < bigint > The balance of the address in wei. GetBalanceReturnType getBlobBaseFee() getBlobBaseFee : () => Promise < bigint > Returns Promise < bigint > The blob base fee (in wei). GetBlobBaseFeeReturnType getBlock() getBlock : < includeTransactions , blockTag >( args ?) => Promise < object > Type Parameters Type Parameter Default type includeTransactions extends boolean false blockTag extends BlockTag \"latest\" Parameters Parameter Type Description args ? GetBlockParameters < includeTransactions , blockTag > GetBlockParameters Returns Promise < object > Information about the block. GetBlockReturnType baseFeePerGas baseFeePerGas : null | bigint Base fee per gas blobGasUsed blobGasUsed : bigint Total used blob gas by all transactions in this block difficulty difficulty : bigint Difficulty for this block excessBlobGas excessBlobGas : bigint Excess blob gas extraData extraData : `0x${string}` “Extra data” field of this block gasLimit gasLimit : bigint Maximum gas allowed in this block gasUsed gasUsed : bigint Total used gas by all transactions in this block hash hash : blockTag extends \"pending\" ? null : `0x${string}` Block hash or null if pending logsBloom logsBloom : blockTag extends \"pending\" ? null : `0x${string}` Logs bloom filter or null if pending miner miner : `0x${string}` Address that received this block’s mining rewards mixHash mixHash : `0x${string}` Unique identifier for the block. nonce nonce : blockTag extends \"pending\" ? null : `0x${string}` Proof-of-work hash or null if pending number number : blockTag extends \"pending\" ? null : bigint Block number or null if pending parentBeaconBlockRoot? optional parentBeaconBlockRoot : `0x${string}` Root of the parent beacon chain block parentHash parentHash : `0x${string}` Parent block hash receiptsRoot receiptsRoot : `0x${string}` Root of the this block’s receipts trie sealFields sealFields : `0x${string}`[] sha3Uncles sha3Uncles : `0x${string}` SHA3 of the uncles data in this block size size : bigint Size of this block in bytes stateRoot stateRoot : `0x${string}` Root of this block’s final state trie timestamp timestamp : bigint Unix timestamp of when this block was collated totalDifficulty totalDifficulty : null | bigint Total difficulty of the chain until this block transactions transactions : includeTransactions extends true ? ( object | object | object | object | object )[] : `0x${string}`[] transactionsRoot transactionsRoot : `0x${string}` Root of this block’s transaction trie uncles uncles : `0x${string}`[] List of uncle hashes withdrawals? optional withdrawals : Withdrawal [] List of withdrawal objects withdrawalsRoot? optional withdrawalsRoot : `0x${string}` Root of the this block’s withdrawals trie getBlockNumber() getBlockNumber : ( args ?) => Promise < bigint > Parameters Parameter Type Description args ? GetBlockNumberParameters GetBlockNumberParameters Returns Promise < bigint > The number of the block. GetBlockNumberReturnType getBlockTransactionCount() getBlockTransactionCount : ( args ?) => Promise < number > Parameters Parameter Type Description args ? GetBlockTransactionCountParameters GetBlockTransactionCountParameters Returns Promise < number > The block transaction count. GetBlockTransactionCountReturnType getBytecode() getBytecode : ( args ) => Promise < GetCodeReturnType > Parameters Parameter Type args GetCodeParameters Returns Promise < GetCodeReturnType > Deprecated Use getCode instead. getChainId() getChainId : () => Promise < number > Returns Promise < number > The current chain ID. GetChainIdReturnType getCode() getCode : ( args ) => Promise < GetCodeReturnType > Parameters Parameter Type Description args GetCodeParameters GetBytecodeParameters Returns Promise < GetCodeReturnType > The contract’s bytecode. GetBytecodeReturnType getContractEvents() getContractEvents : < abi , eventName , strict , fromBlock , toBlock >( args ) => Promise < GetContractEventsReturnType < abi ,",
    "chunk_index": 0,
    "word_count": 1000
  },
  {
    "id": "https://docs.crossmint.com/sdk-reference/wallets/classes/EVMWallet#chunk_1",
    "url": "https://docs.crossmint.com/sdk-reference/wallets/classes/EVMWallet",
    "title": "EVMWallet - Crossmint Docs",
    "content": "> The block transaction count. GetBlockTransactionCountReturnType getBytecode() getBytecode : ( args ) => Promise < GetCodeReturnType > Parameters Parameter Type args GetCodeParameters Returns Promise < GetCodeReturnType > Deprecated Use getCode instead. getChainId() getChainId : () => Promise < number > Returns Promise < number > The current chain ID. GetChainIdReturnType getCode() getCode : ( args ) => Promise < GetCodeReturnType > Parameters Parameter Type Description args GetCodeParameters GetBytecodeParameters Returns Promise < GetCodeReturnType > The contract’s bytecode. GetBytecodeReturnType getContractEvents() getContractEvents : < abi , eventName , strict , fromBlock , toBlock >( args ) => Promise < GetContractEventsReturnType < abi , eventName , strict , fromBlock , toBlock >> Type Parameters Type Parameter Default type abi extends Abi | readonly unknown [] - eventName extends undefined | string undefined strict extends undefined | boolean undefined fromBlock extends undefined | bigint | BlockTag undefined toBlock extends undefined | bigint | BlockTag undefined Parameters Parameter Type args GetContractEventsParameters < abi , eventName , strict , fromBlock , toBlock > Returns Promise < GetContractEventsReturnType < abi , eventName , strict , fromBlock , toBlock >> A list of event logs. GetContractEventsReturnType getEip712Domain() getEip712Domain : ( args ) => Promise < GetEip712DomainReturnType > Parameters Parameter Type args GetEip712DomainParameters Returns Promise < GetEip712DomainReturnType > The EIP-712 domain, fields, and extensions. GetEip712DomainReturnType getEnsAddress() getEnsAddress : ( args ) => Promise < GetEnsAddressReturnType > Parameters Parameter Type Description args object GetEnsAddressParameters args.blockNumber ? bigint The balance of the account at a block number. args.blockTag ? BlockTag The balance of the account at a block tag. Default 'latest' args.coinType ? number ENSIP-9 compliant coinType used to resolve addresses for other chains args.gatewayUrls ? string [] Universal Resolver gateway URLs to use for resolving CCIP-read requests. args.name string Name to get the address for. args.strict ? boolean Whether or not to throw errors propagated from the ENS Universal Resolver Contract. args.universalResolverAddress ? `0x${string}` Address of ENS Universal Resolver Contract. Returns Promise < GetEnsAddressReturnType > Address for ENS name or null if not found. GetEnsAddressReturnType getEnsAvatar() getEnsAvatar : ( args ) => Promise < GetEnsAvatarReturnType > Parameters Parameter Type Description args object GetEnsAvatarParameters args.assetGatewayUrls ? AssetGatewayUrls Gateway urls to resolve IPFS and/or Arweave assets. args.blockNumber ? bigint The balance of the account at a block number. args.blockTag ? BlockTag The balance of the account at a block tag. Default 'latest' args.gatewayUrls ? string [] Universal Resolver gateway URLs to use for resolving CCIP-read requests. args.name string ENS name to get Text for. args.strict ? boolean Whether or not to throw errors propagated from the ENS Universal Resolver Contract. args.universalResolverAddress ? `0x${string}` Address of ENS Universal Resolver Contract. Returns Promise < GetEnsAvatarReturnType > Avatar URI or null if not found. GetEnsAvatarReturnType getEnsName() getEnsName : ( args ) => Promise < GetEnsNameReturnType > Parameters Parameter Type Description args object GetEnsNameParameters args.address `0x${string}` Address to get ENS name for. args.blockNumber ? bigint The balance of the account at a block number. args.blockTag ? BlockTag The balance of the account at a block tag. Default 'latest' args.gatewayUrls ? string [] Universal Resolver gateway URLs to use for resolving CCIP-read requests. args.strict ? boolean Whether or not to throw errors propagated from the ENS Universal Resolver Contract. args.universalResolverAddress ? `0x${string}` Address of ENS Universal Resolver Contract. Returns Promise < GetEnsNameReturnType > Name or null if not found. GetEnsNameReturnType getEnsResolver() getEnsResolver : ( args ) => Promise <`0x${string}`> Parameters Parameter Type Description args object GetEnsResolverParameters args.blockNumber ? bigint The balance of the account at a block number. args.blockTag ? BlockTag The balance of the account at a block tag. Default 'latest' args.name string Name to get the address for. args.universalResolverAddress ? `0x${string}` Address of ENS Universal Resolver Contract. Returns Promise <`0x${string}`> Address for ENS resolver. GetEnsResolverReturnType getEnsText() getEnsText : ( args ) => Promise < GetEnsTextReturnType > Parameters Parameter Type Description args object GetEnsTextParameters args.blockNumber ? bigint The balance of the account at a block number. args.blockTag ? BlockTag The balance of the account at a block tag. Default 'latest' args.gatewayUrls ? string [] Universal Resolver gateway URLs to use for resolving CCIP-read requests. args.key string Text record to retrieve. args.name string ENS name to get Text for. args.strict ? boolean Whether or not to throw errors propagated from the ENS Universal Resolver Contract. args.universalResolverAddress ? `0x${string}` Address of ENS Universal Resolver Contract. Returns Promise < GetEnsTextReturnType > Address for ENS resolver. GetEnsTextReturnType getFeeHistory() getFeeHistory : ( args ) => Promise < GetFeeHistoryReturnType > Parameters Parameter Type Description args GetFeeHistoryParameters GetFeeHistoryParameters Returns Promise < GetFeeHistoryReturnType > The gas estimate (in wei). GetFeeHistoryReturnType getFilterChanges() getFilterChanges : < filterType , abi , eventName , strict , fromBlock , toBlock >( args ) => Promise < GetFilterChangesReturnType < filterType , abi , eventName , strict , fromBlock , toBlock >> Type Parameters Type Parameter Default type filterType extends FilterType - abi extends undefined | Abi | readonly unknown [] - eventName extends undefined | string - strict extends undefined | boolean undefined fromBlock extends undefined | bigint | BlockTag undefined toBlock extends undefined | bigint | BlockTag undefined Parameters Parameter Type Description args GetFilterChangesParameters < filterType , abi , eventName , strict , fromBlock , toBlock > GetFilterChangesParameters Returns Promise < GetFilterChangesReturnType < filterType , abi , eventName , strict , fromBlock , toBlock >> Logs or hashes. GetFilterChangesReturnType getFilterLogs() getFilterLogs : < abi , eventName , strict , fromBlock , toBlock >( args ) => Promise < GetFilterLogsReturnType < abi , eventName , strict , fromBlock , toBlock >> Type Parameters Type Parameter Default type abi extends undefined | Abi | readonly unknown [] - eventName extends undefined | string - strict extends undefined | boolean undefined fromBlock extends undefined | bigint | BlockTag undefined toBlock extends undefined | bigint | BlockTag undefined Parameters Parameter Type Description args GetFilterLogsParameters < abi , eventName , strict , fromBlock , toBlock > GetFilterLogsParameters Returns Promise < GetFilterLogsReturnType < abi , eventName , strict , fromBlock , toBlock >> A list of event logs. GetFilterLogsReturnType getGasPrice() getGasPrice : () => Promise <",
    "chunk_index": 1,
    "word_count": 1000
  },
  {
    "id": "https://docs.crossmint.com/sdk-reference/wallets/classes/EVMWallet#chunk_2",
    "url": "https://docs.crossmint.com/sdk-reference/wallets/classes/EVMWallet",
    "title": "EVMWallet - Crossmint Docs",
    "content": "abi , eventName , strict , fromBlock , toBlock >> Type Parameters Type Parameter Default type abi extends undefined | Abi | readonly unknown [] - eventName extends undefined | string - strict extends undefined | boolean undefined fromBlock extends undefined | bigint | BlockTag undefined toBlock extends undefined | bigint | BlockTag undefined Parameters Parameter Type Description args GetFilterLogsParameters < abi , eventName , strict , fromBlock , toBlock > GetFilterLogsParameters Returns Promise < GetFilterLogsReturnType < abi , eventName , strict , fromBlock , toBlock >> A list of event logs. GetFilterLogsReturnType getGasPrice() getGasPrice : () => Promise < bigint > Returns Promise < bigint > The gas price (in wei). GetGasPriceReturnType getLogs() getLogs : < abiEvent , abiEvents , strict , fromBlock , toBlock >( args ?) => Promise < GetLogsReturnType < abiEvent , abiEvents , strict , fromBlock , toBlock >> Type Parameters Type Parameter Default type abiEvent extends undefined | AbiEvent undefined abiEvents extends undefined | readonly unknown [] | readonly AbiEvent [] abiEvent extends AbiEvent ? [ abiEvent < abiEvent >] : undefined strict extends undefined | boolean undefined fromBlock extends undefined | bigint | BlockTag undefined toBlock extends undefined | bigint | BlockTag undefined Parameters Parameter Type Description args ? GetLogsParameters < abiEvent , abiEvents , strict , fromBlock , toBlock > GetLogsParameters Returns Promise < GetLogsReturnType < abiEvent , abiEvents , strict , fromBlock , toBlock >> A list of event logs. GetLogsReturnType getProof() getProof : ( args ) => Promise < GetProofReturnType > Parameters Parameter Type args GetProofParameters Returns Promise < GetProofReturnType > Proof data. GetProofReturnType getStorageAt() getStorageAt : ( args ) => Promise < GetStorageAtReturnType > Parameters Parameter Type Description args GetStorageAtParameters GetStorageAtParameters Returns Promise < GetStorageAtReturnType > The value of the storage slot. GetStorageAtReturnType getTransaction() getTransaction : < blockTag >( args ) => Promise < object | object | object | object | object > Type Parameters Type Parameter Default type blockTag extends BlockTag \"latest\" Parameters Parameter Type Description args GetTransactionParameters < blockTag > GetTransactionParameters Returns Promise < object | object | object | object | object > The transaction information. GetTransactionReturnType getTransactionConfirmations() getTransactionConfirmations : ( args ) => Promise < bigint > Parameters Parameter Type Description args GetTransactionConfirmationsParameters < Chain > GetTransactionConfirmationsParameters Returns Promise < bigint > The number of blocks passed since the transaction was processed. If confirmations is 0, then the Transaction has not been confirmed & processed yet. GetTransactionConfirmationsReturnType getTransactionCount() getTransactionCount : ( args ) => Promise < number > Parameters Parameter Type Description args GetTransactionCountParameters GetTransactionCountParameters Returns Promise < number > The number of transactions an account has sent. GetTransactionCountReturnType getTransactionReceipt() getTransactionReceipt : ( args ) => Promise < TransactionReceipt > Parameters Parameter Type Description args GetTransactionReceiptParameters GetTransactionReceiptParameters Returns Promise < TransactionReceipt > The transaction receipt. GetTransactionReceiptReturnType key key : string A key for the client. multicall() multicall : < contracts , allowFailure >( args ) => Promise < MulticallReturnType < contracts , allowFailure >> Type Parameters Type Parameter Default type contracts extends readonly unknown [] - allowFailure extends boolean true Parameters Parameter Type Description args MulticallParameters < contracts , allowFailure > MulticallParameters Returns Promise < MulticallReturnType < contracts , allowFailure >> An array of results with accompanying status. MulticallReturnType name name : string A name for the client. pollingInterval pollingInterval : number Frequency (in ms) for polling enabled actions & events. Defaults to 4_000 milliseconds. prepareTransactionRequest() prepareTransactionRequest : < request , chainOverride , accountOverride >( args ) => Promise <{ [K in string | number | symbol]: (UnionRequiredBy<Extract<UnionOmit<(…), (…)> & ((…) extends (…) ? (…) : (…)) & ((…) extends (…) ? (…) : (…)), IsNever<(…)> extends true ? unknown : ExactPartial<(…)>> & Object, ParameterTypeToParameters<request[“parameters”] extends readonly PrepareTransactionRequestParameterType[] ? any[any][number] : “type” | “fees” | “gas” | “nonce” | “blobVersionedHashes” | “chainId”>> & (unknown extends request[“kzg”] ? Object : Pick<request, “kzg”>))[K] }> Type Parameters Type Parameter Default type request extends Omit < object , \"from\" > | Omit < object , \"from\" > | Omit < object , \"from\" > | Omit < object , \"from\" > | Omit < object , \"from\" > & object & object - chainOverride extends undefined | Chain undefined accountOverride extends undefined | `0x${string}` | Account undefined Parameters Parameter Type Description args PrepareTransactionRequestParameters < Chain , undefined | Account , chainOverride , accountOverride , request > PrepareTransactionRequestParameters Returns Promise <{ [K in string | number | symbol]: (UnionRequiredBy<Extract<UnionOmit<(…), (…)> & ((…) extends (…) ? (…) : (…)) & ((…) extends (…) ? (…) : (…)), IsNever<(…)> extends true ? unknown : ExactPartial<(…)>> & Object, ParameterTypeToParameters<request[“parameters”] extends readonly PrepareTransactionRequestParameterType[] ? any[any][number] : “type” | “fees” | “gas” | “nonce” | “blobVersionedHashes” | “chainId”>> & (unknown extends request[“kzg”] ? Object : Pick<request, “kzg”>))[K] }> The transaction request. PrepareTransactionRequestReturnType readContract() readContract : < abi , functionName , args >( args ) => Promise < ReadContractReturnType < abi , functionName , args >> Type Parameters Type Parameter abi extends Abi | readonly unknown [] functionName extends string args extends unknown Parameters Parameter Type Description args ReadContractParameters < abi , functionName , args > ReadContractParameters Returns Promise < ReadContractReturnType < abi , functionName , args >> The response from the contract. Type is inferred. ReadContractReturnType request request : EIP1193RequestFn < PublicRpcSchema > Request function wrapped with friendly error handling sendRawTransaction() sendRawTransaction : ( args ) => Promise <`0x${string}`> Parameters Parameter Type args SendRawTransactionParameters Returns Promise <`0x${string}`> The transaction hash. SendRawTransactionReturnType simulate() simulate : < calls >( args ) => Promise < SimulateBlocksReturnType < calls >> Type Parameters Type Parameter calls extends readonly unknown [] Parameters Parameter Type args SimulateBlocksParameters < calls > Returns Promise < SimulateBlocksReturnType < calls >> Deprecated Use simulateBlocks instead. simulateBlocks() simulateBlocks : < calls >( args ) => Promise < SimulateBlocksReturnType < calls >> Type Parameters Type Parameter calls extends readonly unknown [] Parameters Parameter Type args SimulateBlocksParameters < calls > Returns Promise < SimulateBlocksReturnType < calls >> Simulated blocks. SimulateReturnType simulateCalls() simulateCalls : < calls >( args ) => Promise < SimulateCallsReturnType < calls >> Type Parameters Type",
    "chunk_index": 2,
    "word_count": 1000
  },
  {
    "id": "https://docs.crossmint.com/sdk-reference/wallets/classes/EVMWallet#chunk_3",
    "url": "https://docs.crossmint.com/sdk-reference/wallets/classes/EVMWallet",
    "title": "EVMWallet - Crossmint Docs",
    "content": "< calls >( args ) => Promise < SimulateBlocksReturnType < calls >> Type Parameters Type Parameter calls extends readonly unknown [] Parameters Parameter Type args SimulateBlocksParameters < calls > Returns Promise < SimulateBlocksReturnType < calls >> Deprecated Use simulateBlocks instead. simulateBlocks() simulateBlocks : < calls >( args ) => Promise < SimulateBlocksReturnType < calls >> Type Parameters Type Parameter calls extends readonly unknown [] Parameters Parameter Type args SimulateBlocksParameters < calls > Returns Promise < SimulateBlocksReturnType < calls >> Simulated blocks. SimulateReturnType simulateCalls() simulateCalls : < calls >( args ) => Promise < SimulateCallsReturnType < calls >> Type Parameters Type Parameter calls extends readonly unknown [] Parameters Parameter Type args SimulateCallsParameters < calls > Returns Promise < SimulateCallsReturnType < calls >> Results. SimulateCallsReturnType simulateContract() simulateContract : < abi , functionName , args , chainOverride , accountOverride >( args ) => Promise < SimulateContractReturnType < abi , functionName , args , Chain , undefined | Account , chainOverride , accountOverride >> Type Parameters Type Parameter Default type abi extends Abi | readonly unknown [] - functionName extends string - args extends unknown - chainOverride extends undefined | Chain - accountOverride extends undefined | `0x${string}` | Account undefined Parameters Parameter Type Description args SimulateContractParameters < abi , functionName , args , Chain , chainOverride , accountOverride > SimulateContractParameters Returns Promise < SimulateContractReturnType < abi , functionName , args , Chain , undefined | Account , chainOverride , accountOverride >> The simulation result and write request. SimulateContractReturnType transport transport : TransportConfig < \"http\" , EIP1193RequestFn > & object The RPC transport Type declaration fetchOptions? optional fetchOptions : Omit < RequestInit , \"body\" > url? optional url : string type type : string The type of client. uid uid : string A unique ID for the client. uninstallFilter() uninstallFilter : ( args ) => Promise < boolean > Parameters Parameter Type Description args UninstallFilterParameters UninstallFilterParameters Returns Promise < boolean > A boolean indicating if the Filter was successfully uninstalled. UninstallFilterReturnType verifyMessage() verifyMessage : ( args ) => Promise < boolean > Parameters Parameter Type Description args object - args.address `0x${string}` The address that signed the original message. args.blockNumber ? bigint The balance of the account at a block number. args.blockTag ? BlockTag The balance of the account at a block tag. Default 'latest' args.factory ? `0x${string}` - args.factoryData ? `0x${string}` - args.message SignableMessage The message to be verified. args.signature `0x${string}` | Signature | ByteArray The signature that was generated by signing the message with the address’s private key. args.universalSignatureVerifierAddress ? `0x${string}` - Returns Promise < boolean > Whether or not the signature is valid. VerifyMessageReturnType verifySiweMessage() verifySiweMessage : ( args ) => Promise < boolean > Parameters Parameter Type Description args object - args.address ? `0x${string}` Ethereum address to check against. args.blockNumber ? bigint The balance of the account at a block number. args.blockTag ? BlockTag The balance of the account at a block tag. Default 'latest' args.domain ? string RFC 3986 authority to check against. args.message string EIP-4361 formatted message. args.nonce ? string Random string to check against. args.scheme ? string RFC 3986 URI scheme to check against. args.signature `0x${string}` Signature to check against. args.time ? Date Current time to check optional expirationTime and notBefore fields. Default new Date() Returns Promise < boolean > Whether or not the signature is valid. VerifySiweMessageReturnType verifyTypedData() verifyTypedData : ( args ) => Promise < boolean > Parameters Parameter Type args VerifyTypedDataParameters Returns Promise < boolean > Whether or not the signature is valid. VerifyTypedDataReturnType waitForTransactionReceipt() waitForTransactionReceipt : ( args ) => Promise < TransactionReceipt > Parameters Parameter Type Description args WaitForTransactionReceiptParameters < Chain > WaitForTransactionReceiptParameters Returns Promise < TransactionReceipt > The transaction receipt. WaitForTransactionReceiptReturnType watchBlockNumber() watchBlockNumber : ( args ) => WatchBlockNumberReturnType Parameters Parameter Type Description args WatchBlockNumberParameters WatchBlockNumberParameters Returns WatchBlockNumberReturnType A function that can be invoked to stop watching for new block numbers. WatchBlockNumberReturnType watchBlocks() watchBlocks : < includeTransactions , blockTag >( args ) => WatchBlocksReturnType Type Parameters Type Parameter Default type includeTransactions extends boolean false blockTag extends BlockTag \"latest\" Parameters Parameter Type Description args WatchBlocksParameters < HttpTransport , Chain , includeTransactions , blockTag > WatchBlocksParameters Returns WatchBlocksReturnType A function that can be invoked to stop watching for new block numbers. WatchBlocksReturnType watchContractEvent() watchContractEvent : < abi , eventName , strict >( args ) => WatchContractEventReturnType Type Parameters Type Parameter Default type abi extends Abi | readonly unknown [] - eventName extends string - strict extends undefined | boolean undefined Parameters Parameter Type Description args WatchContractEventParameters < abi , eventName , strict , HttpTransport > WatchContractEventParameters Returns WatchContractEventReturnType A function that can be invoked to stop watching for new event logs. WatchContractEventReturnType watchEvent() watchEvent : < abiEvent , abiEvents , strict >( args ) => WatchEventReturnType Type Parameters Type Parameter Default type abiEvent extends undefined | AbiEvent undefined abiEvents extends undefined | readonly unknown [] | readonly AbiEvent [] abiEvent extends AbiEvent ? [ abiEvent < abiEvent >] : undefined strict extends undefined | boolean undefined Parameters Parameter Type Description args WatchEventParameters < abiEvent , abiEvents , strict , HttpTransport > WatchEventParameters Returns WatchEventReturnType A function that can be invoked to stop watching for new Event Logs. WatchEventReturnType watchPendingTransactions() watchPendingTransactions : ( args ) => WatchPendingTransactionsReturnType Parameters Parameter Type Description args WatchPendingTransactionsParameters < HttpTransport > WatchPendingTransactionsParameters Returns WatchPendingTransactionsReturnType A function that can be invoked to stop watching for new pending transaction hashes. WatchPendingTransactionsReturnType ​ Defined in packages/wallets/src/wallets/evm.ts:124 ​ send() send < T >( to , token , amount , options ?): Promise < Transaction < T extends object ? true : false >> Send a token to a wallet or user locator ​ Type Parameters Type Parameter Default type T extends undefined | TransactionInputOptions undefined ​ Parameters Parameter Type Description to string | UserLocator The recipient (address or user locator) token string The token (address or currency symbol) amount string The amount to send (decimal units) options ? T The options for the transaction ​ Returns Promise < Transaction < T extends object ? true : false >> The transaction ​ Inherited from Wallet .",
    "chunk_index": 3,
    "word_count": 1000
  },
  {
    "id": "https://docs.crossmint.com/sdk-reference/wallets/classes/EVMWallet#chunk_4",
    "url": "https://docs.crossmint.com/sdk-reference/wallets/classes/EVMWallet",
    "title": "EVMWallet - Crossmint Docs",
    "content": "token , amount , options ?): Promise < Transaction < T extends object ? true : false >> Send a token to a wallet or user locator ​ Type Parameters Type Parameter Default type T extends undefined | TransactionInputOptions undefined ​ Parameters Parameter Type Description to string | UserLocator The recipient (address or user locator) token string The token (address or currency symbol) amount string The amount to send (decimal units) options ? T The options for the transaction ​ Returns Promise < Transaction < T extends object ? true : false >> The transaction ​ Inherited from Wallet . send ​ Defined in packages/wallets/src/wallets/wallet.ts:202 ​ sendTransaction() sendTransaction < T >( params ): Promise < Transaction < T [ \"options\" ] extends object ? true : false >> ​ Type Parameters Type Parameter T extends EVMTransactionInput ​ Parameters Parameter Type params T ​ Returns Promise < Transaction < T [ \"options\" ] extends object ? true : false >> ​ Defined in packages/wallets/src/wallets/evm.ts:40 ​ signMessage() signMessage ( message ): Promise < string > ​ Parameters Parameter Type message string ​ Returns Promise < string > ​ Defined in packages/wallets/src/wallets/evm.ts:57 ​ signTypedData() signTypedData < typedData , primaryType >( params ): Promise < string > ​ Type Parameters Type Parameter Default type typedData extends Record < string , unknown > | object - primaryType extends string | number | symbol keyof typedData ​ Parameters Parameter Type params TypedDataDefinition < typedData , primaryType , typedData extends object ? keyof typedData < typedData > : string > & object ​ Returns Promise < string > ​ Defined in packages/wallets/src/wallets/evm.ts:76 ​ from() static from ( wallet ): EVMWallet ​ Parameters Parameter Type wallet Wallet < Chain > ​ Returns EVMWallet ​ Defined in packages/wallets/src/wallets/evm.ts:32 Was this page helpful? Yes No Wallet SolanaWallet Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 4,
    "word_count": 307
  },
  {
    "id": "https://docs.crossmint.com/sdk-reference/wallets/classes/SolanaWallet#chunk_0",
    "url": "https://docs.crossmint.com/sdk-reference/wallets/classes/SolanaWallet",
    "title": "SolanaWallet - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Classes SolanaWallet Documentation API Reference SDK Reference CLI Solution Guides Changelog SDK Reference Introduction Wallets SDK Getting Started Reference Classes CrossmintWallets Wallet EVMWallet SolanaWallet WalletsApiClient Type Aliases Functions Credentials SDK Introduction Classes Interfaces Type Aliases Variables Functions Enumerations Extends Constructors new SolanaWallet() Parameters Returns Overrides Defined in Properties Methods addDelegatedSigner() Parameters Returns Inherited from Defined in balances() Parameters Returns Throws Inherited from Defined in delegatedSigners() Returns Inherited from Defined in experimental_activity() Returns Throws Inherited from Defined in experimental_nfts() Parameters Returns Inherited from Defined in experimental_transactions() Returns Inherited from Defined in send() Type Parameters Parameters Returns Inherited from Defined in sendTransaction() Type Parameters Parameters Returns Defined in from() Parameters Returns Defined in ​ Extends Wallet < SolanaChain > ​ Constructors ​ new SolanaWallet() new SolanaWallet ( wallet ): SolanaWallet ​ Parameters Parameter Type wallet Wallet < \"solana\" > ​ Returns SolanaWallet ​ Overrides Wallet . constructor ​ Defined in packages/wallets/src/wallets/solana.ts:11 ​ Properties Property Type Inherited from Defined in address string Wallet . address packages/wallets/src/wallets/wallet.ts:41 chain \"solana\" Wallet . chain packages/wallets/src/wallets/wallet.ts:40 owner? string Wallet . owner packages/wallets/src/wallets/wallet.ts:42 signer Signer <keyof SignResultMap > Wallet . signer packages/wallets/src/wallets/wallet.ts:43 ​ Methods ​ addDelegatedSigner() addDelegatedSigner ( signer ): Promise < void > Add a delegated signer to the wallet ​ Parameters Parameter Type Description signer object The signer signer.signer string - ​ Returns Promise < void > The delegated signer ​ Inherited from Wallet . addDelegatedSigner ​ Defined in packages/wallets/src/wallets/wallet.ts:235 ​ balances() balances ( tokens ?, chains ?): Promise < Balances > Get the wallet balances - always includes USDC and native token (ETH/SOL) ​ Parameters Parameter Type Description tokens ? string [] Additional tokens to request (optional: native token and usdc are always included) chains ? Chain [] The chains (optional) ​ Returns Promise < Balances > The balances returns nativeToken, usdc, tokens ​ Throws If the balances cannot be retrieved ​ Inherited from Wallet . balances ​ Defined in packages/wallets/src/wallets/wallet.ts:80 ​ delegatedSigners() delegatedSigners (): Promise < DelegatedSigner []> ​ Returns Promise < DelegatedSigner []> ​ Inherited from Wallet . delegatedSigners ​ Defined in packages/wallets/src/wallets/wallet.ts:265 ​ experimental_activity() experimental_activity (): Promise < WalletsV1Alpha2ActivityResponseDto > Experimental Get the wallet activity ​ Returns Promise < WalletsV1Alpha2ActivityResponseDto > The activity This API is experimental and may change in the future ​ Throws If the activity cannot be retrieved ​ Inherited from Wallet . experimental_activity ​ Defined in packages/wallets/src/wallets/wallet.ts:186 ​ experimental_nfts() experimental_nfts ( params ): Promise < GetNftsResponse > Experimental Get the wallet NFTs ​ Parameters Parameter Type Description params object The parameters params.page number The page number params.perPage number The number of NFTs per page ​ Returns Promise < GetNftsResponse > The NFTs This API is experimental and may change in the future ​ Inherited from Wallet . experimental_nfts ​ Defined in packages/wallets/src/wallets/wallet.ts:164 ​ experimental_transactions() experimental_transactions (): Promise < GetTransactionsResponse > Get the wallet transactions ​ Returns Promise < GetTransactionsResponse > The transactions ​ Inherited from Wallet . experimental_transactions ​ Defined in packages/wallets/src/wallets/wallet.ts:176 ​ send() send < T >( to , token , amount , options ?): Promise < Transaction < T extends object ? true : false >> Send a token to a wallet or user locator ​ Type Parameters Type Parameter Default type T extends undefined | TransactionInputOptions undefined ​ Parameters Parameter Type Description to string | UserLocator The recipient (address or user locator) token string The token (address or currency symbol) amount string The amount to send (decimal units) options ? T The options for the transaction ​ Returns Promise < Transaction < T extends object ? true : false >> The transaction ​ Inherited from Wallet . send ​ Defined in packages/wallets/src/wallets/wallet.ts:202 ​ sendTransaction() sendTransaction < T >( params ): Promise < Transaction < T extends object ? true : false >> ​ Type Parameters Type Parameter Default type T extends undefined | TransactionInputOptions undefined ​ Parameters Parameter Type params SolanaTransactionInput & object ​ Returns Promise < Transaction < T extends object ? true : false >> ​ Defined in packages/wallets/src/wallets/solana.ts:31 ​ from() static from ( wallet ): SolanaWallet ​ Parameters Parameter Type wallet Wallet < Chain > ​ Returns SolanaWallet ​ Defined in packages/wallets/src/wallets/solana.ts:23 Was this page helpful? Yes No EVMWallet WalletsApiClient Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 709
  },
  {
    "id": "https://docs.crossmint.com/sdk-reference/wallets/classes/Wallet#chunk_0",
    "url": "https://docs.crossmint.com/sdk-reference/wallets/classes/Wallet",
    "title": "Wallet - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Classes Wallet Documentation API Reference SDK Reference CLI Solution Guides Changelog SDK Reference Introduction Wallets SDK Getting Started Reference Classes CrossmintWallets Wallet EVMWallet SolanaWallet WalletsApiClient Type Aliases Functions Credentials SDK Introduction Classes Interfaces Type Aliases Variables Functions Enumerations Extended by Type Parameters Constructors new Wallet() Parameters Returns Defined in Properties Methods addDelegatedSigner() Parameters Returns Defined in balances() Parameters Returns Throws Defined in delegatedSigners() Returns Defined in experimental_activity() Returns Throws Defined in experimental_nfts() Parameters Returns Defined in experimental_transactions() Returns Defined in send() Type Parameters Parameters Returns Defined in ​ Extended by SolanaWallet EVMWallet ​ Type Parameters Type Parameter C extends Chain ​ Constructors ​ new Wallet() new Wallet < C >( args , apiClient ): Wallet < C > ​ Parameters Parameter Type args WalletContructorType < C > apiClient WalletsApiClient ​ Returns Wallet < C > ​ Defined in packages/wallets/src/wallets/wallet.ts:47 ​ Properties Property Type Defined in address string packages/wallets/src/wallets/wallet.ts:41 chain C packages/wallets/src/wallets/wallet.ts:40 owner? string packages/wallets/src/wallets/wallet.ts:42 signer Signer <keyof SignResultMap > packages/wallets/src/wallets/wallet.ts:43 ​ Methods ​ addDelegatedSigner() addDelegatedSigner ( signer ): Promise < void > Add a delegated signer to the wallet ​ Parameters Parameter Type Description signer object The signer signer.signer string - ​ Returns Promise < void > The delegated signer ​ Defined in packages/wallets/src/wallets/wallet.ts:235 ​ balances() balances ( tokens ?, chains ?): Promise < Balances > Get the wallet balances - always includes USDC and native token (ETH/SOL) ​ Parameters Parameter Type Description tokens ? string [] Additional tokens to request (optional: native token and usdc are always included) chains ? Chain [] The chains (optional) ​ Returns Promise < Balances > The balances returns nativeToken, usdc, tokens ​ Throws If the balances cannot be retrieved ​ Defined in packages/wallets/src/wallets/wallet.ts:80 ​ delegatedSigners() delegatedSigners (): Promise < DelegatedSigner []> ​ Returns Promise < DelegatedSigner []> ​ Defined in packages/wallets/src/wallets/wallet.ts:265 ​ experimental_activity() experimental_activity (): Promise < WalletsV1Alpha2ActivityResponseDto > Experimental Get the wallet activity ​ Returns Promise < WalletsV1Alpha2ActivityResponseDto > The activity This API is experimental and may change in the future ​ Throws If the activity cannot be retrieved ​ Defined in packages/wallets/src/wallets/wallet.ts:186 ​ experimental_nfts() experimental_nfts ( params ): Promise < GetNftsResponse > Experimental Get the wallet NFTs ​ Parameters Parameter Type Description params object The parameters params.page number The page number params.perPage number The number of NFTs per page ​ Returns Promise < GetNftsResponse > The NFTs This API is experimental and may change in the future ​ Defined in packages/wallets/src/wallets/wallet.ts:164 ​ experimental_transactions() experimental_transactions (): Promise < GetTransactionsResponse > Get the wallet transactions ​ Returns Promise < GetTransactionsResponse > The transactions ​ Defined in packages/wallets/src/wallets/wallet.ts:176 ​ send() send < T >( to , token , amount , options ?): Promise < Transaction < T extends object ? true : false >> Send a token to a wallet or user locator ​ Type Parameters Type Parameter Default type T extends undefined | TransactionInputOptions undefined ​ Parameters Parameter Type Description to string | UserLocator The recipient (address or user locator) token string The token (address or currency symbol) amount string The amount to send (decimal units) options ? T The options for the transaction ​ Returns Promise < Transaction < T extends object ? true : false >> The transaction ​ Defined in packages/wallets/src/wallets/wallet.ts:202 Was this page helpful? Yes No CrossmintWallets EVMWallet Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 560
  },
  {
    "id": "https://docs.crossmint.com/sdk-reference/wallets/classes/WalletsApiClient#chunk_0",
    "url": "https://docs.crossmint.com/sdk-reference/wallets/classes/WalletsApiClient",
    "title": "WalletsApiClient - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Classes WalletsApiClient Documentation API Reference SDK Reference CLI Solution Guides Changelog SDK Reference Introduction Wallets SDK Getting Started Reference Classes CrossmintWallets Wallet EVMWallet SolanaWallet WalletsApiClient Type Aliases Functions Credentials SDK Introduction Classes Interfaces Type Aliases Variables Functions Enumerations Extends Constructors new WalletsApiClient() Parameters Returns Overrides Defined in Properties Accessors baseUrl Returns Inherited from Defined in commonHeaders Returns Inherited from Defined in environment Returns Overrides Defined in isServerSide Returns Defined in Methods approveSignature() Parameters Returns Defined in approveTransaction() Parameters Returns Defined in buildUrl() Parameters Returns Inherited from Defined in createSignature() Parameters Returns Defined in createTransaction() Parameters Returns Defined in createWallet() Parameters Returns Defined in delete() Parameters Returns Inherited from Defined in experimental_activity() Parameters Returns Defined in experimental_getNfts() Parameters Returns Defined in get() Parameters Returns Inherited from Defined in getBalance() Parameters Returns Defined in getSignature() Parameters Returns Defined in getSigner() Parameters Returns Defined in getTransaction() Parameters Returns Defined in getTransactions() Parameters Returns Defined in getWallet() Parameters Returns Defined in patch() Parameters Returns Inherited from Defined in post() Parameters Returns Inherited from Defined in put() Parameters Returns Inherited from Defined in registerSigner() Parameters Returns Defined in send() Parameters Returns Defined in normalizePath() Parameters Returns Inherited from Defined in ​ Extends CrossmintApiClient ​ Constructors ​ new WalletsApiClient() new WalletsApiClient ( crossmint ): WalletsApiClient ​ Parameters Parameter Type crossmint Crossmint ​ Returns WalletsApiClient ​ Overrides CrossmintApiClient.constructor ​ Defined in packages/wallets/src/api/client.ts:37 ​ Properties Property Type Inherited from Defined in crossmint Crossmint CrossmintApiClient.crossmint packages/common/base/dist/apiClient/CrossmintApiClient.d.ts:18 ​ Accessors ​ baseUrl get baseUrl (): string ​ Returns string ​ Inherited from CrossmintApiClient.baseUrl ​ Defined in packages/common/base/dist/apiClient/CrossmintApiClient.d.ts:24 ​ commonHeaders get commonHeaders (): object ​ Returns object Authorization? optional Authorization : string x-api-key x-api-key : string x-app-identifier? optional x-app-identifier : string x-client-name x-client-name : string x-client-version x-client-version : string x-extension-id? optional x-extension-id : string ​ Inherited from CrossmintApiClient.commonHeaders ​ Defined in packages/common/base/dist/apiClient/CrossmintApiClient.d.ts:25 ​ environment get environment (): APIKeyEnvironmentPrefix ​ Returns APIKeyEnvironmentPrefix ​ Overrides CrossmintApiClient.environment ​ Defined in packages/wallets/src/api/client.ts:196 ​ isServerSide get isServerSide (): boolean ​ Returns boolean ​ Defined in packages/wallets/src/api/client.ts:192 ​ Methods ​ approveSignature() approveSignature ( walletLocator , signatureId , params ): Promise < ApproveSignatureResponse > ​ Parameters Parameter Type walletLocator string signatureId string params SubmitApprovalDto ​ Returns Promise < ApproveSignatureResponse > ​ Defined in packages/wallets/src/api/client.ts:102 ​ approveTransaction() approveTransaction ( walletLocator , transactionId , params ): Promise < ApproveTransactionResponse > ​ Parameters Parameter Type walletLocator string transactionId string params SubmitApprovalDto ​ Returns Promise < ApproveTransactionResponse > ​ Defined in packages/wallets/src/api/client.ts:72 ​ buildUrl() buildUrl ( path ): string ​ Parameters Parameter Type path string ​ Returns string ​ Inherited from CrossmintApiClient.buildUrl ​ Defined in packages/common/base/dist/apiClient/ApiClient.d.ts:5 ​ createSignature() createSignature ( walletLocator , params ): Promise < CreateSignatureResponse > ​ Parameters Parameter Type walletLocator string params CreateSignatureRequestDto ​ Returns Promise < CreateSignatureResponse > ​ Defined in packages/wallets/src/api/client.ts:91 ​ createTransaction() createTransaction ( walletLocator , params ): Promise < CreateTransactionResponse > ​ Parameters Parameter Type walletLocator string params CreateTransactionDto ​ Returns Promise < CreateTransactionResponse > ​ Defined in packages/wallets/src/api/client.ts:61 ​ createWallet() createWallet ( params ): Promise < CreateWalletResponse > ​ Parameters Parameter Type params CreateWalletDto ​ Returns Promise < CreateWalletResponse > ​ Defined in packages/wallets/src/api/client.ts:45 ​ delete() delete ( path , params ): Promise < Response > ​ Parameters Parameter Type path string params Omit < RequestInit , \"method\" > ​ Returns Promise < Response > ​ Inherited from CrossmintApiClient.delete ​ Defined in packages/common/base/dist/apiClient/ApiClient.d.ts:9 ​ experimental_activity() experimental_activity ( walletLocator , params ): Promise < GetActivityResponse > ​ Parameters Parameter Type walletLocator string params object params.chain Chain ​ Returns Promise < GetActivityResponse > ​ Defined in packages/wallets/src/api/client.ts:144 ​ experimental_getNfts() experimental_getNfts ( params ): Promise < GetNftsResponse > ​ Parameters Parameter Type params object params.address string params.chain string params.page number params.perPage number ​ Returns Promise < GetNftsResponse > ​ Defined in packages/wallets/src/api/client.ts:128 ​ get() get ( path , params ): Promise < Response > ​ Parameters Parameter Type path string params Omit < RequestInit , \"method\" > ​ Returns Promise < Response > ​ Inherited from CrossmintApiClient.get ​ Defined in packages/common/base/dist/apiClient/ApiClient.d.ts:6 ​ getBalance() getBalance ( walletLocator , params ): Promise < GetBalanceResponse > ​ Parameters Parameter Type walletLocator string params object params.chains Chain [] params.tokens string [] ​ Returns Promise < GetBalanceResponse > ​ Defined in packages/wallets/src/api/client.ts:153 ​ getSignature() getSignature ( walletLocator , signatureId ): Promise < GetSignatureResponse > ​ Parameters Parameter Type walletLocator EvmWalletLocator signatureId string ​ Returns Promise < GetSignatureResponse > ​ Defined in packages/wallets/src/api/client.ts:114 ​ getSigner() getSigner ( walletLocator , signer ): Promise < GetSignerResponse > ​ Parameters Parameter Type walletLocator string signer string ​ Returns Promise < GetSignerResponse > ​ Defined in packages/wallets/src/api/client.ts:177 ​ getTransaction() getTransaction ( walletLocator , transactionId ): Promise < GetTransactionResponse > ​ Parameters Parameter Type walletLocator string transactionId string ​ Returns Promise < GetTransactionResponse > ​ Defined in packages/wallets/src/api/client.ts:84 ​ getTransactions() getTransactions ( walletLocator ): Promise < GetTransactionsResponse > ​ Parameters Parameter Type walletLocator string ​ Returns Promise < GetTransactionsResponse > ​ Defined in packages/wallets/src/api/client.ts:121 ​ getWallet() getWallet ( locator ): Promise < GetWalletResponse > ​ Parameters Parameter Type locator string ​ Returns Promise < GetWalletResponse > ​ Defined in packages/wallets/src/api/client.ts:54 ​ patch() patch ( path , params ): Promise < Response > ​ Parameters Parameter Type path string params Omit < RequestInit , \"method\" > ​ Returns Promise < Response > ​ Inherited from CrossmintApiClient.patch ​ Defined in packages/common/base/dist/apiClient/ApiClient.d.ts:10 ​ post() post ( path , params ): Promise < Response > ​ Parameters Parameter Type path string params Omit < RequestInit , \"method\" > ​ Returns Promise < Response > ​ Inherited from CrossmintApiClient.post ​ Defined in packages/common/base/dist/apiClient/ApiClient.d.ts:7 ​ put() put ( path , params ): Promise < Response > ​ Parameters Parameter Type path string params Omit < RequestInit , \"method\" > ​ Returns Promise < Response > ​ Inherited from CrossmintApiClient.put ​ Defined in packages/common/base/dist/apiClient/ApiClient.d.ts:8 ​ registerSigner() registerSigner ( walletLocator , params ): Promise < RegisterSignerResponse > ​ Parameters Parameter Type walletLocator string params CreateSignerInputDto ​ Returns Promise < RegisterSignerResponse > ​ Defined in packages/wallets/src/api/client.ts:169 ​ send() send ( walletLocator , tokenLocator , params ): Promise",
    "chunk_index": 0,
    "word_count": 1000
  },
  {
    "id": "https://docs.crossmint.com/sdk-reference/wallets/classes/WalletsApiClient#chunk_0",
    "url": "https://docs.crossmint.com/sdk-reference/wallets/classes/WalletsApiClient",
    "title": "WalletsApiClient - Crossmint Docs",
    "content": "Omit < RequestInit , \"method\" > ​ Returns Promise < Response > ​ Inherited from CrossmintApiClient.post ​ Defined in packages/common/base/dist/apiClient/ApiClient.d.ts:7 ​ put() put ( path , params ): Promise < Response > ​ Parameters Parameter Type path string params Omit < RequestInit , \"method\" > ​ Returns Promise < Response > ​ Inherited from CrossmintApiClient.put ​ Defined in packages/common/base/dist/apiClient/ApiClient.d.ts:8 ​ registerSigner() registerSigner ( walletLocator , params ): Promise < RegisterSignerResponse > ​ Parameters Parameter Type walletLocator string params CreateSignerInputDto ​ Returns Promise < RegisterSignerResponse > ​ Defined in packages/wallets/src/api/client.ts:169 ​ send() send ( walletLocator , tokenLocator , params ): Promise < WalletsV1Alpha2TransactionResponseWithSendParamsDto > ​ Parameters Parameter Type walletLocator string tokenLocator string params SendTokenDto ​ Returns Promise < WalletsV1Alpha2TransactionResponseWithSendParamsDto > ​ Defined in packages/wallets/src/api/client.ts:184 ​ normalizePath() static normalizePath ( path ): string ​ Parameters Parameter Type path string ​ Returns string ​ Inherited from CrossmintApiClient.normalizePath ​ Defined in packages/common/base/dist/apiClient/ApiClient.d.ts:11 Was this page helpful? Yes No SolanaWallet Activity Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 166
  },
  {
    "id": "https://docs.crossmint.com/sdk-reference/wallets/functions/createCrossmint#chunk_0",
    "url": "https://docs.crossmint.com/sdk-reference/wallets/functions/createCrossmint",
    "title": "createCrossmint - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Functions createCrossmint Documentation API Reference SDK Reference CLI Solution Guides Changelog SDK Reference Introduction Wallets SDK Getting Started Reference Classes Type Aliases Functions createCrossmint Credentials SDK Introduction Classes Interfaces Type Aliases Variables Functions Enumerations Parameters Returns Defined in createCrossmint ( config , apiKeyExpectations ?): Crossmint ​ Parameters Parameter Type config CrossmintConfig apiKeyExpectations ? ValidateAPIKeyPrefixExpectations ​ Returns Crossmint ​ Defined in packages/common/base/dist/types/Crossmint.d.ts:24 Was this page helpful? Yes No WalletArgsFor Introduction Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 90
  },
  {
    "id": "https://docs.crossmint.com/sdk-reference/wallets/overview#chunk_0",
    "url": "https://docs.crossmint.com/sdk-reference/wallets/overview",
    "title": "Getting Started - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Wallets SDK Getting Started Documentation API Reference SDK Reference CLI Solution Guides Changelog SDK Reference Introduction Wallets SDK Getting Started Reference Classes Type Aliases Functions Credentials SDK Introduction Classes Interfaces Type Aliases Variables Functions Enumerations Wallet Examples Get wallet balances Transfer Get wallet activity Delegated signers Create custom transactions Signers and custody A Typescript SDK to interact with Crossmint Wallets. This SDK enables developers to easily create and manage wallets on Solana and EVM chains. Before you start Set up your project and get an API key. 1 Install the SDK Run the following command to install the SDK: npm yarn pnpm bun Copy Ask AI npm i @crossmint/wallets-sdk 2 Create a wallet index.ts Copy Ask AI import { CrossmintWallets , createCrossmint } from \"@crossmint/wallets-sdk\" ; const crossmint = createCrossmint ({ apiKey: \"<your-client-OR-server-api-key>\" , jwt: \"<your-jwt>\" , // required for client-side calls, optional for server-side calls }); const crossmintWallets = CrossmintWallets . from ( crossmint ); const wallet = await crossmintWallets . getOrCreateWallet ({ chain: \"<your-chain>\" , signer: { type: \"email\" , email: \"<your-email>\" , }, }); console . log ( wallet . address ); ​ Wallet Examples ​ Get wallet balances Copy Ask AI const balances = await wallet . balances (); console . log ( balances . nativeToken . amount ); console . log ( balances . usdc . amount ); ​ Transfer Copy Ask AI const transaction = await wallet . send ( recipient , \"usdc\" , \"100\" ); console . log ( transaction . explorerLink ); ​ Get wallet activity Copy Ask AI const activity = await wallet . experimental_activity (); console . log ( activity . events ); ​ Delegated signers Copy Ask AI // Add a delegated signer await wallet . addDelegatedSigner ({ signer: \"<signer-address>\" }); const signers = await wallet . delegatedSigners (); console . log ( signers ); ​ Create custom transactions Copy Ask AI import { SolanaWallet , EVMWallet } from \"@crossmint/wallets-sdk\" ; // Solana const solanaWallet = SolanaWallet . from ( wallet ); const solTx = await solanaWallet . sendTransaction ({ transaction: \"<serialized-or-non-serialized-transaction>\" }); console . log ( solTx . explorerLink ); // EVM const evmWallet = EVMWallet . from ( wallet ); const evmTx = await evmWallet . sendTransaction ({ transaction: \"<serialized-or-non-serialized-transaction>\" }); console . log ( evmTx . explorerLink ); ​ Signers and custody Signers and custody Learn about signers and custody. Was this page helpful? Yes No Introduction Reference Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 423
  },
  {
    "id": "https://docs.crossmint.com/sdk-reference/wallets/reference#chunk_0",
    "url": "https://docs.crossmint.com/sdk-reference/wallets/reference",
    "title": "Reference - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Wallets SDK Reference Documentation API Reference SDK Reference CLI Solution Guides Changelog SDK Reference Introduction Wallets SDK Getting Started Reference Classes Type Aliases Functions Credentials SDK Introduction Classes Interfaces Type Aliases Variables Functions Enumerations Classes Type Aliases Functions ​ Classes CrossmintWallets Wallet EVMWallet SolanaWallet WalletsApiClient ​ Type Aliases Activity Balances Chain DelegatedSigner EVMChain EVMTransactionInput EmailSignerConfig EvmExternalWalletSignerConfig ExternalWalletSignerConfigForChain SignerConfigForChain SolanaChain SolanaExternalWalletSignerConfig SolanaTransactionInput Transaction WalletArgsFor ​ Functions createCrossmint Was this page helpful? Yes No Getting Started CrossmintWallets Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 96
  },
  {
    "id": "https://docs.crossmint.com/sdk-reference/wallets/type-aliases/Activity#chunk_0",
    "url": "https://docs.crossmint.com/sdk-reference/wallets/type-aliases/Activity",
    "title": "Activity - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Type Aliases Activity Documentation API Reference SDK Reference CLI Solution Guides Changelog SDK Reference Introduction Wallets SDK Getting Started Reference Classes Type Aliases Activity Balances Chain DelegatedSigner EVMChain EVMTransactionInput EmailSignerConfig EvmExternalWalletSignerConfig ExternalWalletSignerConfigForChain SignerConfigForChain SolanaChain SolanaExternalWalletSignerConfig SolanaTransactionInput Transaction WalletArgsFor Functions Credentials SDK Introduction Classes Interfaces Type Aliases Variables Functions Enumerations Defined in Activity : WalletsV1Alpha2ActivityResponseDto ​ Defined in packages/wallets/src/api/types.ts:67 Was this page helpful? Yes No WalletsApiClient Balances Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 87
  },
  {
    "id": "https://docs.crossmint.com/sdk-reference/wallets/type-aliases/Balances#chunk_0",
    "url": "https://docs.crossmint.com/sdk-reference/wallets/type-aliases/Balances",
    "title": "Balances - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Type Aliases Balances Documentation API Reference SDK Reference CLI Solution Guides Changelog SDK Reference Introduction Wallets SDK Getting Started Reference Classes Type Aliases Activity Balances Chain DelegatedSigner EVMChain EVMTransactionInput EmailSignerConfig EvmExternalWalletSignerConfig ExternalWalletSignerConfigForChain SignerConfigForChain SolanaChain SolanaExternalWalletSignerConfig SolanaTransactionInput Transaction WalletArgsFor Functions Credentials SDK Introduction Classes Interfaces Type Aliases Variables Functions Enumerations Type declaration nativeToken tokens usdc Defined in Balances : object ​ Type declaration ​ nativeToken nativeToken : TokenBalance ​ tokens tokens : TokenBalance [] ​ usdc usdc : TokenBalance ​ Defined in packages/wallets/src/wallets/types.ts:81 Was this page helpful? Yes No Activity Chain Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 111
  },
  {
    "id": "https://docs.crossmint.com/sdk-reference/wallets/type-aliases/Chain#chunk_0",
    "url": "https://docs.crossmint.com/sdk-reference/wallets/type-aliases/Chain",
    "title": "Chain - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Type Aliases Chain Documentation API Reference SDK Reference CLI Solution Guides Changelog SDK Reference Introduction Wallets SDK Getting Started Reference Classes Type Aliases Activity Balances Chain DelegatedSigner EVMChain EVMTransactionInput EmailSignerConfig EvmExternalWalletSignerConfig ExternalWalletSignerConfigForChain SignerConfigForChain SolanaChain SolanaExternalWalletSignerConfig SolanaTransactionInput Transaction WalletArgsFor Functions Credentials SDK Introduction Classes Interfaces Type Aliases Variables Functions Enumerations Defined in Chain : SolanaChain | EVMChain ​ Defined in packages/wallets/src/chains/chains.ts:83 Was this page helpful? Yes No Balances DelegatedSigner Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 89
  },
  {
    "id": "https://docs.crossmint.com/sdk-reference/wallets/type-aliases/DelegatedSigner#chunk_0",
    "url": "https://docs.crossmint.com/sdk-reference/wallets/type-aliases/DelegatedSigner",
    "title": "DelegatedSigner - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Type Aliases DelegatedSigner Documentation API Reference SDK Reference CLI Solution Guides Changelog SDK Reference Introduction Wallets SDK Getting Started Reference Classes Type Aliases Activity Balances Chain DelegatedSigner EVMChain EVMTransactionInput EmailSignerConfig EvmExternalWalletSignerConfig ExternalWalletSignerConfigForChain SignerConfigForChain SolanaChain SolanaExternalWalletSignerConfig SolanaTransactionInput Transaction WalletArgsFor Functions Credentials SDK Introduction Classes Interfaces Type Aliases Variables Functions Enumerations Type declaration signer Defined in DelegatedSigner : object ​ Type declaration ​ signer signer : string ​ Defined in packages/wallets/src/wallets/types.ts:46 Was this page helpful? Yes No Chain EVMChain Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 98
  },
  {
    "id": "https://docs.crossmint.com/sdk-reference/wallets/type-aliases/EVMChain#chunk_0",
    "url": "https://docs.crossmint.com/sdk-reference/wallets/type-aliases/EVMChain",
    "title": "EVMChain - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Type Aliases EVMChain Documentation API Reference SDK Reference CLI Solution Guides Changelog SDK Reference Introduction Wallets SDK Getting Started Reference Classes Type Aliases Activity Balances Chain DelegatedSigner EVMChain EVMTransactionInput EmailSignerConfig EvmExternalWalletSignerConfig ExternalWalletSignerConfigForChain SignerConfigForChain SolanaChain SolanaExternalWalletSignerConfig SolanaTransactionInput Transaction WalletArgsFor Functions Credentials SDK Introduction Classes Interfaces Type Aliases Variables Functions Enumerations Defined in EVMChain : EVMSmartWalletChain ​ Defined in packages/wallets/src/chains/chains.ts:81 Was this page helpful? Yes No DelegatedSigner EVMTransactionInput Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 87
  },
  {
    "id": "https://docs.crossmint.com/sdk-reference/wallets/type-aliases/EVMTransactionInput#chunk_0",
    "url": "https://docs.crossmint.com/sdk-reference/wallets/type-aliases/EVMTransactionInput",
    "title": "EVMTransactionInput - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Type Aliases EVMTransactionInput Documentation API Reference SDK Reference CLI Solution Guides Changelog SDK Reference Introduction Wallets SDK Getting Started Reference Classes Type Aliases Activity Balances Chain DelegatedSigner EVMChain EVMTransactionInput EmailSignerConfig EvmExternalWalletSignerConfig ExternalWalletSignerConfigForChain SignerConfigForChain SolanaChain SolanaExternalWalletSignerConfig SolanaTransactionInput Transaction WalletArgsFor Functions Credentials SDK Introduction Classes Interfaces Type Aliases Variables Functions Enumerations Defined in EVMTransactionInput : EVMTransactionInputBase & object | object ​ Defined in packages/wallets/src/wallets/types.ts:19 Was this page helpful? Yes No EVMChain EmailSignerConfig Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 91
  },
  {
    "id": "https://docs.crossmint.com/sdk-reference/wallets/type-aliases/EmailSignerConfig#chunk_0",
    "url": "https://docs.crossmint.com/sdk-reference/wallets/type-aliases/EmailSignerConfig",
    "title": "EmailSignerConfig - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Type Aliases EmailSignerConfig Documentation API Reference SDK Reference CLI Solution Guides Changelog SDK Reference Introduction Wallets SDK Getting Started Reference Classes Type Aliases Activity Balances Chain DelegatedSigner EVMChain EVMTransactionInput EmailSignerConfig EvmExternalWalletSignerConfig ExternalWalletSignerConfigForChain SignerConfigForChain SolanaChain SolanaExternalWalletSignerConfig SolanaTransactionInput Transaction WalletArgsFor Functions Credentials SDK Introduction Classes Interfaces Type Aliases Variables Functions Enumerations Type declaration email? onAuthRequired()? Parameters Returns type Defined in EmailSignerConfig : object ​ Type declaration ​ email? optional email : string ​ onAuthRequired()? optional onAuthRequired : ( needsAuth , sendEmailWithOtp , verifyOtp , reject ) => Promise < void > ​ Parameters Parameter Type needsAuth boolean sendEmailWithOtp () => Promise < void > verifyOtp ( otp ) => Promise < void > reject () => void ​ Returns Promise < void > ​ type type : \"email\" ​ Defined in packages/wallets/src/signers/types.ts:27 Was this page helpful? Yes No EVMTransactionInput EvmExternalWalletSignerConfig Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 159
  },
  {
    "id": "https://docs.crossmint.com/sdk-reference/wallets/type-aliases/EvmExternalWalletSignerConfig#chunk_0",
    "url": "https://docs.crossmint.com/sdk-reference/wallets/type-aliases/EvmExternalWalletSignerConfig",
    "title": "EvmExternalWalletSignerConfig - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Type Aliases EvmExternalWalletSignerConfig Documentation API Reference SDK Reference CLI Solution Guides Changelog SDK Reference Introduction Wallets SDK Getting Started Reference Classes Type Aliases Activity Balances Chain DelegatedSigner EVMChain EVMTransactionInput EmailSignerConfig EvmExternalWalletSignerConfig ExternalWalletSignerConfigForChain SignerConfigForChain SolanaChain SolanaExternalWalletSignerConfig SolanaTransactionInput Transaction WalletArgsFor Functions Credentials SDK Introduction Classes Interfaces Type Aliases Variables Functions Enumerations Type declaration provider? viemAccount? Defined in EvmExternalWalletSignerConfig : BaseExternalWalletSignerConfig & object ​ Type declaration ​ provider? optional provider : GenericEIP1193Provider | EIP1193Provider ​ viemAccount? optional viemAccount : Account ​ Defined in packages/common/base/dist/types/signers.d.ts:16 Was this page helpful? Yes No EmailSignerConfig ExternalWalletSignerConfigForChain Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 110
  },
  {
    "id": "https://docs.crossmint.com/sdk-reference/wallets/type-aliases/ExternalWalletSignerConfigForChain#chunk_0",
    "url": "https://docs.crossmint.com/sdk-reference/wallets/type-aliases/ExternalWalletSignerConfigForChain",
    "title": "ExternalWalletSignerConfigForChain - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Type Aliases ExternalWalletSignerConfigForChain Documentation API Reference SDK Reference CLI Solution Guides Changelog SDK Reference Introduction Wallets SDK Getting Started Reference Classes Type Aliases Activity Balances Chain DelegatedSigner EVMChain EVMTransactionInput EmailSignerConfig EvmExternalWalletSignerConfig ExternalWalletSignerConfigForChain SignerConfigForChain SolanaChain SolanaExternalWalletSignerConfig SolanaTransactionInput Transaction WalletArgsFor Functions Credentials SDK Introduction Classes Interfaces Type Aliases Variables Functions Enumerations Type Parameters Defined in ExternalWalletSignerConfigForChain < C >: C extends SolanaChain ? SolanaExternalWalletSignerConfig : EvmExternalWalletSignerConfig ​ Type Parameters Type Parameter C extends Chain ​ Defined in packages/wallets/src/signers/types.ts:38 Was this page helpful? Yes No EvmExternalWalletSignerConfig SignerConfigForChain Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 105
  },
  {
    "id": "https://docs.crossmint.com/sdk-reference/wallets/type-aliases/SignerConfigForChain#chunk_0",
    "url": "https://docs.crossmint.com/sdk-reference/wallets/type-aliases/SignerConfigForChain",
    "title": "SignerConfigForChain - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Type Aliases SignerConfigForChain Documentation API Reference SDK Reference CLI Solution Guides Changelog SDK Reference Introduction Wallets SDK Getting Started Reference Classes Type Aliases Activity Balances Chain DelegatedSigner EVMChain EVMTransactionInput EmailSignerConfig EvmExternalWalletSignerConfig ExternalWalletSignerConfigForChain SignerConfigForChain SolanaChain SolanaExternalWalletSignerConfig SolanaTransactionInput Transaction WalletArgsFor Functions Credentials SDK Introduction Classes Interfaces Type Aliases Variables Functions Enumerations Type Parameters Defined in SignerConfigForChain < C >: C extends SolanaChain ? EmailSignerConfig | BaseSignerConfig < C > : EmailSignerConfig | PasskeySignerConfig | BaseSignerConfig < C > ​ Type Parameters Type Parameter C extends Chain ​ Defined in packages/wallets/src/signers/types.ts:93 Was this page helpful? Yes No ExternalWalletSignerConfigForChain SolanaChain Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 117
  },
  {
    "id": "https://docs.crossmint.com/sdk-reference/wallets/type-aliases/SolanaChain#chunk_0",
    "url": "https://docs.crossmint.com/sdk-reference/wallets/type-aliases/SolanaChain",
    "title": "SolanaChain - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Type Aliases SolanaChain Documentation API Reference SDK Reference CLI Solution Guides Changelog SDK Reference Introduction Wallets SDK Getting Started Reference Classes Type Aliases Activity Balances Chain DelegatedSigner EVMChain EVMTransactionInput EmailSignerConfig EvmExternalWalletSignerConfig ExternalWalletSignerConfigForChain SignerConfigForChain SolanaChain SolanaExternalWalletSignerConfig SolanaTransactionInput Transaction WalletArgsFor Functions Credentials SDK Introduction Classes Interfaces Type Aliases Variables Functions Enumerations Defined in SolanaChain : \"solana\" ​ Defined in packages/wallets/src/chains/chains.ts:80 Was this page helpful? Yes No SignerConfigForChain SolanaExternalWalletSignerConfig Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 87
  },
  {
    "id": "https://docs.crossmint.com/sdk-reference/wallets/type-aliases/SolanaExternalWalletSignerConfig#chunk_0",
    "url": "https://docs.crossmint.com/sdk-reference/wallets/type-aliases/SolanaExternalWalletSignerConfig",
    "title": "SolanaExternalWalletSignerConfig - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Type Aliases SolanaExternalWalletSignerConfig Documentation API Reference SDK Reference CLI Solution Guides Changelog SDK Reference Introduction Wallets SDK Getting Started Reference Classes Type Aliases Activity Balances Chain DelegatedSigner EVMChain EVMTransactionInput EmailSignerConfig EvmExternalWalletSignerConfig ExternalWalletSignerConfigForChain SignerConfigForChain SolanaChain SolanaExternalWalletSignerConfig SolanaTransactionInput Transaction WalletArgsFor Functions Credentials SDK Introduction Classes Interfaces Type Aliases Variables Functions Enumerations Type declaration onSignTransaction()? Parameters Returns Defined in SolanaExternalWalletSignerConfig : BaseExternalWalletSignerConfig & object ​ Type declaration ​ onSignTransaction()? optional onSignTransaction : ( transaction ) => Promise < VersionedTransaction > ​ Parameters Parameter Type transaction VersionedTransaction ​ Returns Promise < VersionedTransaction > ​ Defined in packages/common/base/dist/types/signers.d.ts:20 Was this page helpful? Yes No SolanaChain SolanaTransactionInput Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 122
  },
  {
    "id": "https://docs.crossmint.com/sdk-reference/wallets/type-aliases/SolanaTransactionInput#chunk_0",
    "url": "https://docs.crossmint.com/sdk-reference/wallets/type-aliases/SolanaTransactionInput",
    "title": "SolanaTransactionInput - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Type Aliases SolanaTransactionInput Documentation API Reference SDK Reference CLI Solution Guides Changelog SDK Reference Introduction Wallets SDK Getting Started Reference Classes Type Aliases Activity Balances Chain DelegatedSigner EVMChain EVMTransactionInput EmailSignerConfig EvmExternalWalletSignerConfig ExternalWalletSignerConfigForChain SignerConfigForChain SolanaChain SolanaExternalWalletSignerConfig SolanaTransactionInput Transaction WalletArgsFor Functions Credentials SDK Introduction Classes Interfaces Type Aliases Variables Functions Enumerations Type declaration additionalSigners? options? transaction Defined in SolanaTransactionInput : object ​ Type declaration ​ additionalSigners? optional additionalSigners : Keypair [] ​ options? optional options : TransactionInputOptions ​ transaction transaction : VersionedTransaction ​ Defined in packages/wallets/src/wallets/types.ts:32 Was this page helpful? Yes No SolanaExternalWalletSignerConfig Transaction Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 113
  },
  {
    "id": "https://docs.crossmint.com/sdk-reference/wallets/type-aliases/Transaction#chunk_0",
    "url": "https://docs.crossmint.com/sdk-reference/wallets/type-aliases/Transaction",
    "title": "Transaction - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Type Aliases Transaction Documentation API Reference SDK Reference CLI Solution Guides Changelog SDK Reference Introduction Wallets SDK Getting Started Reference Classes Type Aliases Activity Balances Chain DelegatedSigner EVMChain EVMTransactionInput EmailSignerConfig EvmExternalWalletSignerConfig ExternalWalletSignerConfigForChain SignerConfigForChain SolanaChain SolanaExternalWalletSignerConfig SolanaTransactionInput Transaction WalletArgsFor Functions Credentials SDK Introduction Classes Interfaces Type Aliases Variables Functions Enumerations Type Parameters Defined in Transaction < TPrepareOnly >: TPrepareOnly extends true ? object : object ​ Type Parameters Type Parameter Default type TPrepareOnly extends boolean false ​ Defined in packages/wallets/src/wallets/types.ts:94 Was this page helpful? Yes No SolanaTransactionInput WalletArgsFor Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 108
  },
  {
    "id": "https://docs.crossmint.com/sdk-reference/wallets/type-aliases/WalletArgsFor#chunk_0",
    "url": "https://docs.crossmint.com/sdk-reference/wallets/type-aliases/WalletArgsFor",
    "title": "WalletArgsFor - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Type Aliases WalletArgsFor Documentation API Reference SDK Reference CLI Solution Guides Changelog SDK Reference Introduction Wallets SDK Getting Started Reference Classes Type Aliases Activity Balances Chain DelegatedSigner EVMChain EVMTransactionInput EmailSignerConfig EvmExternalWalletSignerConfig ExternalWalletSignerConfigForChain SignerConfigForChain SolanaChain SolanaExternalWalletSignerConfig SolanaTransactionInput Transaction WalletArgsFor Functions Credentials SDK Introduction Classes Interfaces Type Aliases Variables Functions Enumerations Type Parameters Type declaration chain options? owner? signer Defined in WalletArgsFor < C >: object ​ Type Parameters Type Parameter C extends Chain ​ Type declaration ​ chain chain : C ​ options? optional options : WalletOptions ​ owner? optional owner : string ​ signer signer : SignerConfigForChain < C > ​ Defined in packages/wallets/src/wallets/types.ts:65 Was this page helpful? Yes No Transaction createCrossmint Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 133
  },
  {
    "id": "https://docs.crossmint.com/solutions/ai-agents/agentic-commerce/inventory#chunk_0",
    "url": "https://docs.crossmint.com/solutions/ai-agents/agentic-commerce/inventory",
    "title": "Inventory - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Guides Inventory Documentation API Reference SDK Reference CLI Solution Guides Changelog Solution Guides Overview Agentic Commerce Overview Guides Payment Methods Inventory Moving to Production StoryKit Overview Wallets Music Quickstart ⚡ Literature Quickstart ⚡ Images Quickstart ⚡ Agents can purchase 1B+ products from Amazon, Shopify, airlines and more all via Crossmint’s Checkout API. Crossmint is the Merchant of Record (MoR) for these transactions, handling payments, shipping costs, taxes, and customer support. Orders below are performed using USDC assuming an already-funded agent wallet. Check the payments page to explore other supported payment methods. Amazon Shopify Flights Browser Automation ​ Integration Steps 1 Setup Crossmint Project Create a project in the Crossmint Console (staging environment) Server-side API Key Obtain a server-side API key from the Overview page and save it for later use 2 Search for Products Use an LLM or third-party API provider to search available Amazon products and obtain the product’s Amazon URL or ASIN. Extract the ASIN from the Amazon URL, i.e. https://wwww.amazon.com/Sparkling-Naturally-Essenced-Calories-Sweeteners/dp/B00O79SKV6 has ASIN B00O79SKV6 . 3 Create Crossmint Order Use the Headless Checkout API to create a payment order, specifying the recipient details and payment method. Copy Ask AI const baseUrl = 'staging' ; // or 'www' for prod environment const crossmintOrder = await fetch ( `https:// ${ baseUrl } .crossmint.com/api/2022-06-09/orders` , { method: 'POST' , headers: { 'Authorization' : `Bearer ${ API_KEY } ` , 'Content-Type' : 'application/json' }, body: JSON . stringify ({ recipient: { email: \"john@example.com\" , physicalAddress: { name: \"John Doe\" , line1: \"ABC Street\" , city: \"New York\" , state: \"NY\" , postalCode: \"10007\" , country: \"US\" } }, locale: \"en-US\" , payment: { receiptEmail: \"john@example.com\" , method: \"base-sepolia\" , currency: \"usdc\" , // Agent's wallet that pays for the transaction payerAddress: \"0x...\" }, lineItems: [{ productLocator: \"amazon:B00O79SKV6\" }] }) }); const { order : paymentOrder } = await crossmintOrder . json (); This returns a valid order with payment preparation details including the serialized transaction. You can add multiple productLocators from Amazon as part of the same order. 4 Sign and Submit Payment Sign the transaction with Crossmint’s Create Transaction API using the agent’s wallet to complete the purchase. Copy Ask AI const baseUrl = 'staging' ; // or 'www' for prod environment const transaction = await fetch ( `https:// ${ baseUrl } .crossmint.com/api/2022-06-09/wallets/ ${ userWallet } /transactions` , { method: 'POST' , headers: { 'Authorization' : `Bearer ${ API_KEY } ` , 'Content-Type' : 'application/json' }, body: JSON . stringify ({ params: { calls: [{ transaction: paymentOrder . payment . preparation . serializedTransaction }], chain: \"base-sepolia\" } }) }); Alternative: Using External Wallets Copy Ask AI import { ethers } from \"ethers\" ; async function processPayment ( order , privateKey , rpcUrl ) { const isInsufficientFunds = order . payment . status === \"crypto-payer-insufficient-funds\" ; if ( isInsufficientFunds ) { throw new Error ( \"Insufficient funds\" ); } const serializedTransaction = order . payment . preparation != null && \"serializedTransaction\" in order . payment . preparation ? order . payment . preparation . serializedTransaction : undefined ; if ( ! serializedTransaction ) { throw new Error ( `No serialized transaction found for order, this item may not be available for purchase: \\n\\n ${ JSON . stringify ( order , null , 2 , ) } ` , ); } const provider = new ethers . providers . JsonRpcProvider ( rpcUrl ); const wallet = new ethers . Wallet ( privateKey , provider ); try { const parsedTx = ethers . utils . parseTransaction ( serializedTransaction ); // Rebuild the transaction object without gasLimit const txRequest = { to: parsedTx . to , value: parsedTx . value , data: parsedTx . data , nonce: parsedTx . nonce , chainId: parsedTx . chainId , type: parsedTx . type ?? 2 , maxFeePerGas: parsedTx . maxFeePerGas , maxPriorityFeePerGas: parsedTx . maxPriorityFeePerGas , accessList: parsedTx . accessList || [], }; // Estimate gas const estimatedGasLimit = await provider . estimateGas ({ ... txRequest , from: wallet . address , // ensure correct estimation context }); // Attach estimated gas const finalTx = { ... txRequest , gasLimit: estimatedGasLimit , }; const tx = await wallet . sendTransaction ( finalTx ); console . log ( \"Transaction sent! Hash:\" , tx . hash ); const receipt = await tx . wait (); console . log ( \"Transaction confirmed in block:\" , receipt . blockNumber ); return receipt ; } catch ( error ) { console . error ( \"Error sending transaction:\" , error ); throw error ; } } // Usage example const baseUrl = 'staging' ; // or 'www' for prod environment const rpcUrl = \"https://base-sepolia.g.alchemy.com/v2/YOUR_API_KEY\" ; // or 'mainnet' for prod const walletPrivateKey = \"YOUR_PRIVATE_KEY\" ; // Call the function with your order, private key, and RPC URL processPayment ( paymentOrder , walletPrivateKey , rpcUrl ); 5 Monitor Order Status Poll the order status with Crossmint’s Get Order API to track delivery and present updates to your agent or end user. Copy Ask AI const baseUrl = 'staging' ; // or 'www' for prod environment const checkStatus = async ( orderId ) => { const response = await fetch ( `https:// ${ baseUrl } .crossmint.com/api/2022-06-09/orders/ ${ orderId } ` , { headers: { 'Authorization' : `Bearer ${ API_KEY } ` } }); const { order } = await response . json (); switch ( order . phase ) { case 'completed' : console . log ( 'Amazon order confirmed!' ); break ; case 'pending' : console . log ( 'Processing order...' ); break ; case 'failed' : console . log ( 'Order failed:' , order . delivery . status ); break ; } return order ; }; const pollStatus = setInterval ( async () => { const order = await checkStatus ( paymentOrder . orderId ); if ( order . phase === 'completed' || order . phase === 'failed' ) { clearInterval ( pollStatus ); } }, 30000 ); 6 Receive Order Confirmation Crossmint",
    "chunk_index": 0,
    "word_count": 1000
  },
  {
    "id": "https://docs.crossmint.com/solutions/ai-agents/agentic-commerce/inventory#chunk_0",
    "url": "https://docs.crossmint.com/solutions/ai-agents/agentic-commerce/inventory",
    "title": "Inventory - Crossmint Docs",
    "content": "order . phase ) { case 'completed' : console . log ( 'Amazon order confirmed!' ); break ; case 'pending' : console . log ( 'Processing order...' ); break ; case 'failed' : console . log ( 'Order failed:' , order . delivery . status ); break ; } return order ; }; const pollStatus = setInterval ( async () => { const order = await checkStatus ( paymentOrder . orderId ); if ( order . phase === 'completed' || order . phase === 'failed' ) { clearInterval ( pollStatus ); } }, 30000 ); 6 Receive Order Confirmation Crossmint automatically sends a purchase receipt to the buyer’s email with the order confirmation number, product details, and cost breakdown. Was this page helpful? Yes No Payment Methods Moving to Production Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 140
  },
  {
    "id": "https://docs.crossmint.com/solutions/ai-agents/agentic-commerce/payment-methods#chunk_0",
    "url": "https://docs.crossmint.com/solutions/ai-agents/agentic-commerce/payment-methods",
    "title": "Payment Methods - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Guides Payment Methods Documentation API Reference SDK Reference CLI Solution Guides Changelog Solution Guides Overview Agentic Commerce Overview Guides Payment Methods Inventory Moving to Production StoryKit Overview Wallets Music Quickstart ⚡ Literature Quickstart ⚡ Images Quickstart ⚡ Before a purchase is initiated, your users must either save a card on file with them, or give them stablecoins in a crypto wallet. This guide explains how to do each of those flows. Credit Card Crossmint Credits USDC ​ Pay with a user’s credit or debit card Use this option if you want the agent to pay with a user’s card just in time . Tokenize and securely store the user’s card so the agent can use it in future payments compliantly, without ever touching sensitive card data. Start testing today by creating a Crossmint project and test API key: Crossmint Project Create a project in the Crossmint Console (staging environment) Server-side API Key Obtain a server-side API key from the Overview page and save it for later use ​ Integration Steps 1 Retrieve Basis Theory API Key In order to tokenize a user’s card, obtain an API key from Basis Theory by calling the following Crossmint API (no API key required): Copy Ask AI GET https://staging.crossmint.com/api/unstable/setupTokenizeCard The response looks as follows: Copy Ask AI { \"basisTheoryAPIKey\" : \"key_test_us_pub_LyApUWWyCJ4PqiTEgrSmeK\" } 2 Render Card Input Form Render a card input form using Basis Theory’s SDK and the API key obtained above to tokenize and save the user’s card. The look-and-feel of the form can be freely customized by the developer. Run npm install @basis-theory/basis-theory-react to install the Basis Theory SDK Copy Ask AI \"use client\" ; import React , { useRef } from \"react\" ; import { BasisTheoryProvider , useBasisTheory , CardElement , CardExpirationDateElement , CardVerificationCodeElement , } from \"@basis-theory/basis-theory-react\" ; // Obtained from Step 1 const PUBLIC_KEY = process . env . NEXT_PUBLIC_BT_PUBLIC_KEY ! ; export default function CheckoutPage () { // Initialize with your API key using the hook const { bt } = useBasisTheory ( PUBLIC_KEY , { elements: true }); if ( ! bt ) { return < div > Loading... </ div > ; } return ( < BasisTheoryProvider bt = { bt } > < PaymentForm /> </ BasisTheoryProvider > ); } function PaymentForm () { const { bt } = useBasisTheory ( PUBLIC_KEY , { elements: true }); if ( ! bt ) { return < div > Loading... </ div > ; } const cardRef = useRef ( null ); const handleSubmit = async ( e : React . FormEvent < HTMLFormElement >) => { e . preventDefault (); try { console . log ({ a: cardRef . current }); const token = await bt . tokens . create ({ type: \"card\" , data: cardRef . current , }); // TODO: In the next step, reference \"token.id\" to register the token with Crossmint console . log ( \"Token created:\" , token . id ); } catch ( error : any ) { console . error ( \"Error creating token:\" , error . details ); } }; return ( < form onSubmit = { handleSubmit } > < CardElement id = \"my-card\" ref = { cardRef } placeholder = { { cardNumber: \"Card number\" , cardExpirationDate: \"MM/YY\" , cardSecurityCode: \"CVC\" } } /> < button type = \"submit\" > Save Card </ button > </ form > ); } Here is an example of how the above card form can look: Use a Crossmint test card to test the token generation step. 3 Register Card Token with Crossmint Call the following Crossmint API with the obtained API key from the Crossmint Console where the TODO comment is above, in order to register the token with Crossmint: Copy Ask AI POST https: //staging.crossmint.com/api/unstable/setupTokenizeCard/registerToken { \"token\" : \"9f243106-d4a4-4327-a7cb-e3ec22031ed2\" // Obtained from Step 2 } No response body is expected from this call, simply a 200 response. 4 Create Order Call Crossmint’s Create Order API and specify card-token as the payment method (with the same Crossmint API key used above): Copy Ask AI POST https: //staging.crossmint.com/api/2022-06-09/orders { \"recipient\" : { \"email\" : \"john.d@example.com\" , \"physicalAddress\" : { \"name\" : \"John D\" , \"line1\" : \"123 ABC Street\" , \"city\" : \"New York City\" , \"state\" : \"NY\" , \"postalCode\" : \"10007\" , \"country\" : \"US\" } }, \"locale\" : \"en-US\" , \"payment\" : { \"receiptEmail\" : \"john.d@example.com\" , \"method\" : \"card-token\" }, \"lineItems\" : { \"productLocator\" : \"amazon:https://www.amazon.com/Croix-Sparkling-Water-Grapefruit-Count/dp/B00EEN4OI8\" } } 5 Complete Payment with Card Token Obtain the orderId from Step 4’s response and call the following Crossmint API: Copy Ask AI POST https: //staging.crossmint.com/api/2022-06-09/orders/{{orderId}}/payment { \"token\" : \"9f243106-d4a4-4327-a7cb-e3ec22031ed2\" // Obtained from Step 2 } The response will show that the payment is successful. Check the recipient’s email for a purchase receipt. ​ Visa Intelligence Commerce In the current model, Crossmint acts as the MoR and will appear in the user’s card statement. Crossmint manages fulfillment, chargebacks, and customer support post‑purchase. This will soon evolve thanks to our integration with Visa Intelligent Commerce (VIC): Purchases will appear just like any other card transaction on the user’s statement Users will benefit from Visa’s existing infrastructure for fulfillment, chargebacks, rewards, and more Users will go through the same card entry flow, as shown above, and a VIC token will be obtained Agents will be able to execute purchases using these VIC tokens with virtually any merchant Was this page helpful? Yes No Overview Inventory Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 924
  },
  {
    "id": "https://docs.crossmint.com/solutions/ai-agents/agentic-commerce/production-deployment#chunk_0",
    "url": "https://docs.crossmint.com/solutions/ai-agents/agentic-commerce/production-deployment",
    "title": "Moving to Production - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Guides Moving to Production Documentation API Reference SDK Reference CLI Solution Guides Changelog Solution Guides Overview Agentic Commerce Overview Guides Payment Methods Inventory Moving to Production StoryKit Overview Wallets Music Quickstart ⚡ Literature Quickstart ⚡ Images Quickstart ⚡ Moving to Production ​ Moving to Production Once you’ve tested your integration in staging, follow these steps to deploy to production: 1 Create Production Project Create a new project in the Crossmint Console using the production environment 2 Production API Key Generate a production API key with the required scopes: orders.create , orders.ws.search , orders.ws.create , orders.read , wallets:transactions.create 3 Update Configuration Update your application to use the production API key and production endpoints 4 Test Production Flow Perform end-to-end testing with real payment methods to ensure everything works correctly Was this page helpful? Yes No Inventory Overview Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 157
  },
  {
    "id": "https://docs.crossmint.com/solutions/ai-agents/introduction#chunk_0",
    "url": "https://docs.crossmint.com/solutions/ai-agents/introduction",
    "title": "Overview - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Agentic Commerce Overview Documentation API Reference SDK Reference CLI Solution Guides Changelog Solution Guides Overview Agentic Commerce Overview Guides StoryKit Overview Wallets Music Quickstart ⚡ Literature Quickstart ⚡ Images Quickstart ⚡ Get Started with Agentic Commerce FAQs Consumers increasingly rely on AI agents like ChatGPT, Claude, and Perplexity to inform their purchase decisions. However, these agents face a critical limitation: they cannot complete the actual purchase. They’re blocked by CAPTCHAs, anti-fraud systems, and lack of access to payment credentials. Crossmint Checkout is a production-ready solution that enables AI agents to make purchases on behalf of users with built-in reliability and compliance. Crossmint enables agents to pay using credit cards or stablecoins, supporting an inventory of over 1 billion items - from Amazon and Shopify to any browser-accessible guest checkout. As a partner in Visa’s Intelligent Commerce Pilot and Mastercard StartPath, Crossmint will integrate their agentic token solutions as they become publicly available. ​ Get Started with Agentic Commerce Select Payment Method Chose the payment method the agent will use to complete transactions Execute the Purchase Choose what the agent will purchase ​ FAQs What payment methods are supported? Credit Cards: Visa, Mastercard, Discover, American Express Agent Credit Card Tokens: Visa Intelligent Commerce and Mastercard Agent Pay (coming Fall 2025) Stablecoins: USDC, USDT, with additional options available on request Closed-loop tokens: Merchant-specific credits (e.g., “Starbucks dollars”) What can agents pay for? Any credit card-enabled guest checkout accessible via browser Amazon (US), all Shopify merchants, and global flight bookings Additional merchants added monthly through direct, reliable integrations What other tools does Crossmint offer to agents? All Crossmint APIs are agent-compatible. Key tools for agentic use cases include: Crypto Wallets : Enable agents to securely hold and transact with funds. These remain non-custodial and don’t require you to hold licenses. Verifiable Credentials : Issue and verify cryptographic credentials to authenticate agents on behalf of users. Who acts as merchant of record? You (the agent developer) never act as merchant of record. Depending on the purchase route and user preferences, either the end merchant or Crossmint serves as the merchant of record. From the user’s perspective, this distinction is transparent. How do returns and refunds work? In most cases, customers can work directly with the end merchant. Crossmint will soon provide APIs to initiate returns and support requests directly through your agent. Is this solution legally compliant? Crossmint’s solution complies with PCI standards and all commercial regulations in our operating regions. As an agent developer, you don’t need to manage PCI compliance, sales tax collection, or similar requirements - Crossmint handles these on your behalf. Is this production ready? Yes. Crossmint Checkout processes tens of millions of dollars in annual transaction volume. The only pending features are credit card agent tokens from Visa and Mastercard, which have not yet been publicly released. Was this page helpful? Yes No Overview Payment Methods Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 498
  },
  {
    "id": "https://docs.crossmint.com/solutions/overview#chunk_0",
    "url": "https://docs.crossmint.com/solutions/overview",
    "title": "Overview - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Solution Guides Overview Documentation API Reference SDK Reference CLI Solution Guides Changelog Solution Guides Overview Agentic Commerce Overview Guides StoryKit Overview Wallets Music Quickstart ⚡ Literature Quickstart ⚡ Images Quickstart ⚡ AI Agents Intellectual property (StoryKit) Fintech Was this page helpful? Yes No Overview Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 65
  },
  {
    "id": "https://docs.crossmint.com/solutions/story-protocol/images-quickstart#chunk_0",
    "url": "https://docs.crossmint.com/solutions/story-protocol/images-quickstart",
    "title": "Images Quickstart ⚡ - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation StoryKit Images Quickstart ⚡ Documentation API Reference SDK Reference CLI Solution Guides Changelog Solution Guides Overview Agentic Commerce Overview Guides StoryKit Overview Wallets Music Quickstart ⚡ Literature Quickstart ⚡ Images Quickstart ⚡ Preparation Steps Register Design Portfolio Register Image Design Retrieve Your IP Asset Confirm Image Registration In this quickstart, you will: Register a design portfolio as an IP collection Register a image design as an IP asset This quickstart is under development as new features are added to the Story Protocol daily. ​ Preparation Steps 1 Create a Developer Account and Project To get started, create a developer account in the Crossmint Staging Console . Open that link, sign in, and accept the dialog to continue. Crossmint offers two consoles: staging , for development and testing, and production . 2 Get an API Key Create a server-side API key with these scopes: collection.create , collection.update , collection.read , nfts.create , nfts.read . This allows your API key to perform any kind of asset registration action. ​ Register Design Portfolio 1 Create an IP Collection createCollection.ts response Copy Ask AI const response = await fetch ( \"https://staging.crossmint.com/api/v1/ip/collections\" , { method: \"POST\" , headers: { \"X-API-KEY\" : \"<YOUR_API_KEY>\" , \"Content-Type\" : \"application/json\" }, body: JSON . stringify ({ metadata: { description: \"My image design portfolio\" , name: \"My Image Design Portfolio\" , symbol: \"MIDP\" }, chain: \"story-testnet\" }) }); const collection = await response . json (); console . log ( \"Collection created:\" , collection ); Additional metadata can be added to the collection to help with discovery, such as a cover image. Check out the API reference for more information. To create the portfolio, run the script: TypeScript Copy Ask AI npx tsx createCollection.ts ​ Register Image Design 1 Create a Design Use OpenAI’s DALL-E 3 to create a design: createDesign.ts Copy Ask AI import OpenAI from 'openai' async function main () { const openai = new OpenAI ({ apiKey: \"<YOUR_OPENAI_API_KEY>\" }) const image = await openai . images . generate ({ model: 'dall-e-2' , prompt: 'A futuristic bridge connecting two digital worlds, with a sleek mint-colored pathway' }); console . log ( image . data [ 0 ]. url ) // the url to the newly created image } main (); The resulting image looks like this: 2 Register Image Design on Story registerIPAsset.ts response Copy Ask AI const response = await fetch ( \"https://staging.crossmint.com/api/v1/ip/collections/{collectionId}/ipassets\" , { method: \"POST\" , headers: { \"X-API-KEY\" : \"<YOUR_API_KEY>\" , \"Content-Type\" : \"application/json\" }, body: JSON . stringify ({ owner: 'email:creator@example.com:story-testnet' , nftMetadata: { name: 'My Image Design' , description: 'An image designed to represent a futuristic bridge connecting two digital worlds, with a sleek mint-colored pathway' , image: '<YOUR_IMAGE_URL>' }, ipAssetMetadata: { title: 'My Image Design' , createdAt: '2025-02-11T11:13:00' , ipType: 'image' , creators: [ { name: 'John Doe' , email: 'user@example.com' , crossmintUserLocator: 'email:user@example.com:story-testnet' , contributionPercent: 100 }, ], attributes: [ { key: 'Model' , value: 'dall-e-2' }, { key: 'Prompt' , value: 'A futuristic bridge connecting two digital worlds, with a sleek mint-colored pathway' }, ] } }) }); const ipAsset = await response . json (); console . log ( \"IP Asset:\" , ipAsset ); Run the script to register the song: TypeScript Copy Ask AI npx tsx registerIPAsset.ts ​ Retrieve Your IP Asset 1 Get IP Asset Details After registering your IP asset, you can retrieve its details to verify the information or display it in your application. getIPAsset.ts response Copy Ask AI const response = await fetch ( \"https://staging.crossmint.com/api/v1/ip/collections/{collectionId}/ipassets/{ipAssetId}\" , { method: \"GET\" , headers: { \"X-API-KEY\" : \"<YOUR_API_KEY>\" , \"Content-Type\" : \"application/json\" } }); const ipAsset = await response . json (); console . log ( \"IP Asset:\" , ipAsset ); Replace {collectionId} with your collection ID and {ipAssetId} with the IP asset ID returned when you registered the asset. Then run the script: TypeScript Copy Ask AI npx tsx getIPAsset.ts ​ Confirm Image Registration 1 Get Action Status You can easily check the IP asset registration status to ensure the action has completed before proceeding. getAction.ts response Copy Ask AI const response = await fetch ( \"https://staging.crossmint.com/api/v1/ip/actions/{actionId}\" , { method: \"GET\" , headers: { \"X-API-KEY\" : \"<YOUR_API_KEY>\" , \"Content-Type\" : \"application/json\" } }); const action = await response . json (); console . log ( \"Action:\" , action ); Use the action ID returned in any of the previous steps and run the script: TypeScript Copy Ask AI npx tsx getAction.ts Was this page helpful? Yes No Literature Quickstart ⚡ Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 766
  },
  {
    "id": "https://docs.crossmint.com/solutions/story-protocol/introduction#chunk_0",
    "url": "https://docs.crossmint.com/solutions/story-protocol/introduction",
    "title": "Overview - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation StoryKit Overview Documentation API Reference SDK Reference CLI Solution Guides Changelog Solution Guides Overview Agentic Commerce Overview Guides StoryKit Overview Wallets Music Quickstart ⚡ Literature Quickstart ⚡ Images Quickstart ⚡ Key Characteristics How Does it Work? User Authentication & Wallets Create & Manage Assets Transfer Assets & Collect Royalties Monetize your IP What can I build with this? Get Started Story Protocol is a decentralized platform that helps creators protect and monetize their intellectual property (IP) through blockchain technology. Crossmint simplifies the process of building applications on top of Story Protocol. With Crossmint’s StoryKit, you can: Let content creators easily register their IP without dealing with blockchain complexities such as gas fees, key management, and smart contract interactions Help storytellers and artists tokenize their creative works (like stories, characters, or artwork) through simple API calls Enable creators to sell licenses and rights to their IP directly to fans and businesses, accepting both fiat and crypto payments ​ Key Characteristics User Auth & Wallets Authenticate users and create wallets for them using web3 or traditional sign-in methods IP Assets Create and manage IP assets using RESTful APIs Payments Monetize your IP by accepting fiat or crypto for it ​ How Does it Work? Crossmint’s infrastructure lets developers easily plug into Story Protocol’s core IP framework without dealing with blockchain complexities around user authentication and wallet creation, gas fees and minting of assets at scale, as well as payments. ​ User Authentication & Wallets Out of the box support for user authentication and wallet management ​ Create & Manage Assets Support for Story Protocol Groups (SPG) collection creation Support for minting, registration, and licensing of IP assets Support for co-creator specification and collaborative ownership Secure metadata storage using IPFS Support for modifying asset license terms and co-creators Ensure that only verified owners can update or delete data ​ Transfer Assets & Collect Royalties Support for NFT transfers Built-in royalty collection for commercially licensed assets ​ Monetize your IP Accept fiat or crypto payments using Crossmint’s Checkout API ​ What can I build with this? Create and license stories and characters for use in games, NFT collections, or other applications Register original beats, melodies, or vocals and license them to other artists with automated royalty distribution License 3D clothing elements, textures, or patterns for use across virtual worlds and games ​ Get Started Wallets Quickstart Create user wallets on Story Music Quickstart Register your music on Story Literature Quickstart Register your literature works on Story Images Quickstart Register your designs on Story API Reference Review API routes for building on Story Was this page helpful? Yes No Moving to Production Server Wallets Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 460
  },
  {
    "id": "https://docs.crossmint.com/solutions/story-protocol/literature-quickstart#chunk_0",
    "url": "https://docs.crossmint.com/solutions/story-protocol/literature-quickstart",
    "title": "Literature Quickstart ⚡ - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation StoryKit Literature Quickstart ⚡ Documentation API Reference SDK Reference CLI Solution Guides Changelog Solution Guides Overview Agentic Commerce Overview Guides StoryKit Overview Wallets Music Quickstart ⚡ Literature Quickstart ⚡ Images Quickstart ⚡ Preparation Steps Register a Book Series Register a Book Retrieve Your IP Asset Confirm Book Registration In this quickstart, you will: Register a book series as an IP collection Register a book as an IP asset This quickstart is under development as new features are added to the Story Protocol daily. ​ Preparation Steps 1 Create a Developer Account and Project To get started, create a developer account in the Crossmint Staging Console . Open that link, sign in, and accept the dialog to continue. Crossmint offers two consoles: staging , for development and testing, and production . 2 Get an API Key Create a server-side API key with these scopes: collection.create , collection.update , collection.read , nfts.create , nfts.read . This allows your API key to perform any kind of asset registration action. ​ Register a Book Series 1 Create an IP Collection This quickstart will register the Harry Potter book series as an IP collection. createCollection.ts response Copy Ask AI const response = await fetch ( \"https://staging.crossmint.com/api/v1/ip/collections\" , { method: \"POST\" , headers: { \"X-API-KEY\" : \"<YOUR_API_KEY>\" , \"Content-Type\" : \"application/json\" }, body: JSON . stringify ({ metadata: { description: \"The collection of Harry Potter books\" , name: \"Harry Potter Series\" , symbol: \"HP\" }, chain: \"story-testnet\" }) }); const collection = await response . json (); console . log ( \"Collection created:\" , collection ); Customize the collection’s metadata according to your needs and run the script: TypeScript Copy Ask AI npx tsx createCollection.ts ​ Register a Book 1 Register an IP Asset Every written work may have different contributors and metadata. When defining an IP asset you can: Specify multiple contributors (like authors, illustrators, and publishers) with their respective revenue shares Attach relevant media files Include important metadata like creation dates and identifiers registerIPAsset.ts response Copy Ask AI const response = await fetch ( \"https://staging.crossmint.com/api/v1/ip/collections/{collectionId}/ipassets\" , { method: \"POST\" , headers: { \"X-API-KEY\" : \"<YOUR_API_KEY>\" , \"Content-Type\" : \"application/json\" }, body: JSON . stringify ({ owner: 'email:creator@example.com:story-testnet' , nftMetadata: { name: 'Art #123' , description: 'A unique story NFT' , image: 'https://example.com/nft/123.png' }, ipAssetMetadata: { title: 'Harry Potter and the Philosopher \\' s Stone' , createdAt: '1997-06-26T00:00:00' , ipType: 'literature' , creators: [ { name: 'JK Rowling' , email: 'JKRowling@example.com' , address: '0x123' , description: 'Author' , contributionPercent: 80 , socialMedia: [ { platform: 'Wikipedia' , url: 'https://en.wikipedia.org/wiki/J._K._Rowling' } ] }, { name: 'Thomas Taylor' , email: 'ThomasTaylor@example.com' , crossmintUserLocator: 'email:ThomasTaylor@example.com:story-testnet' , description: 'Illustrator' , contributionPercent: 15 }, { name: 'Bloomsbury Publishing' , email: 'BloomsburyPublishing@example.com' , address: '0x123' , description: 'Publisher' , contributionPercent: 5 , socialMedia: [ { platform: 'Website' , url: 'https://www.bloomsbury.com/' } ] } ], media: [ { name: 'ePub' , url: 'link_to_epub' , mimeType: 'application/epub+zip' }, { name: 'Book Summary PDF' , url: 'link_to_book_summary_pdf' , mimeType: 'application/pdf' } ], attributes: [ { key: 'ISBN' , value: '978-0-7475-3269-0' }, { key: 'Genre' , value: 'Fantasy' } ] } }) }); const ipAsset = await response . json (); console . log ( \"IP Asset:\" , ipAsset ); Now, run the script: TypeScript Copy Ask AI npx tsx registerIPAsset.ts ​ Retrieve Your IP Asset 1 Get IP Asset Details After registering your IP asset, you can retrieve its details to verify the information or display it in your application. getIPAsset.ts response Copy Ask AI const response = await fetch ( \"https://staging.crossmint.com/api/v1/ip/collections/{collectionId}/ipassets/{ipAssetId}\" , { method: \"GET\" , headers: { \"X-API-KEY\" : \"<YOUR_API_KEY>\" , \"Content-Type\" : \"application/json\" } }); const ipAsset = await response . json (); console . log ( \"IP Asset:\" , ipAsset ); Replace {collectionId} with your collection ID and {ipAssetId} with the IP asset ID returned when you registered the asset. Then run the script: TypeScript Copy Ask AI npx tsx getIPAsset.ts ​ Confirm Book Registration 1 Get Action Status You can easily check the IP asset registration status to ensure the action has completed before proceeding. getAction.ts response Copy Ask AI const response = await fetch ( \"https://staging.crossmint.com/api/v1/ip/actions/{actionId}\" , { method: \"GET\" , headers: { \"X-API-KEY\" : \"<YOUR_API_KEY>\" , \"Content-Type\" : \"application/json\" } }); const action = await response . json (); console . log ( \"Action:\" , action ); Use the action ID returned in any of the previous steps and run the script: TypeScript Copy Ask AI npx tsx getAction.ts Was this page helpful? Yes No Music Quickstart ⚡ Images Quickstart ⚡ Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 775
  },
  {
    "id": "https://docs.crossmint.com/solutions/story-protocol/music-quickstart#chunk_0",
    "url": "https://docs.crossmint.com/solutions/story-protocol/music-quickstart",
    "title": "Music Quickstart ⚡ - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation StoryKit Music Quickstart ⚡ Documentation API Reference SDK Reference CLI Solution Guides Changelog Solution Guides Overview Agentic Commerce Overview Guides StoryKit Overview Wallets Music Quickstart ⚡ Literature Quickstart ⚡ Images Quickstart ⚡ Preparation Steps Register Music Album Register Song Retrieve Your IP Asset Confirm Song Registration In this quickstart, you will: Register a music album as an IP collection Register a music track as an IP asset This quickstart is under development as new features are added to the Story Protocol daily. ​ Preparation Steps 1 Create a Developer Account and Project To get started, create a developer account in the Crossmint Staging Console . Open that link, sign in, and accept the dialog to continue. Crossmint offers two consoles: staging , for development and testing, and production . 2 Get an API Key Create a server-side API key with these scopes: collection.create , collection.update , collection.read , nfts.create , nfts.read . This allows your API key to perform any kind of asset registration action. ​ Register Music Album 1 Create an IP Collection createCollection.ts response Copy Ask AI const response = await fetch ( \"https://staging.crossmint.com/api/v1/ip/collections\" , { method: \"POST\" , headers: { \"X-API-KEY\" : \"<YOUR_API_KEY>\" , \"Content-Type\" : \"application/json\" }, body: JSON . stringify ({ metadata: { description: \"My first music album\" , name: \"My First Album\" , symbol: \"MFA\" }, chain: \"story-testnet\" }) }); const collection = await response . json (); console . log ( \"Collection created:\" , collection ); Additional metadata can be added to the collection to help with discovery, such as a cover image. Check out the API reference for more information. To create the album, run the script: TypeScript Copy Ask AI npx tsx createCollection.ts ​ Register Song 1 Create a Song Go to Suno , a music platform for AI-generated music, to create a song: Input a prompt to create a song Click on the final result to get the song’s URL (i.e. https://suno.com/song/c001fd6e-d6cd-474f-a7b6-6e6a9b3e2515 ) Copy the song ID in the URL (i.e. c001fd6e-d6cd-474f-a7b6-6e6a9b3e2515 ) Copy the following URL: https://cdn1.suno.ai/${SONG_ID}.mp3 , making sure to replace SONG_ID with your own 2 Register Song on Story registerIPAsset.ts response Copy Ask AI const response = await fetch ( \"https://staging.crossmint.com/api/v1/ip/collections/{collectionId}/ipassets\" , { method: \"POST\" , headers: { \"X-API-KEY\" : \"<YOUR_API_KEY>\" , \"Content-Type\" : \"application/json\" }, body: JSON . stringify ({ owner: 'email:creator@example.com:story-testnet' , nftMetadata: { name: 'Snowflake Funk' , description: 'A disco groovy song for a house party during the winter time' , image: 'https://cdn2.suno.ai/image_large_c001fd6e-d6cd-474f-a7b6-6e6a9b3e2515.jpeg' }, ipAssetMetadata: { title: 'Snowflake Funk' , createdAt: '2025-02-11T11:13:00' , ipType: 'music' , creators: [ { name: 'John Doe' , email: 'john.doe@example.com' , crossmintUserLocator: 'email:john.doe@example.com:story-testnet' , contributionPercent: 100 }, ], media: [ { name: 'Snowflake Funk' , url: 'https://cdn1.suno.ai/c001fd6e-d6cd-474f-a7b6-6e6a9b3e2515.mp3' , mimeType: 'audio/mpeg' }, ], attributes: [ { key: 'Suno Artist' , value: 'InfluentialCoda427' }, { key: 'Source' , value: 'Suno.com' } ] } }) }); const ipAsset = await response . json (); console . log ( \"IP Asset:\" , ipAsset ); Run the script to register the song: TypeScript Copy Ask AI npx tsx registerIPAsset.ts ​ Retrieve Your IP Asset 1 Get IP Asset Details After registering your IP asset, you can retrieve its details to verify the information or display it in your application. getIPAsset.ts response Copy Ask AI const response = await fetch ( \"https://staging.crossmint.com/api/v1/ip/collections/{collectionId}/ipassets/{ipAssetId}\" , { method: \"GET\" , headers: { \"X-API-KEY\" : \"<YOUR_API_KEY>\" , \"Content-Type\" : \"application/json\" } }); const ipAsset = await response . json (); console . log ( \"IP Asset:\" , ipAsset ); Replace {collectionId} with your collection ID and {ipAssetId} with the IP asset ID returned when you registered the asset. Then run the script: TypeScript Copy Ask AI npx tsx getIPAsset.ts ​ Confirm Song Registration 1 Get Action Status You can easily check the IP asset registration status to ensure the action has completed before proceeding. getAction.ts response Copy Ask AI const response = await fetch ( \"https://staging.crossmint.com/api/v1/ip/actions/{actionId}\" , { method: \"GET\" , headers: { \"X-API-KEY\" : \"<YOUR_API_KEY>\" , \"Content-Type\" : \"application/json\" } }); const action = await response . json (); console . log ( \"Action:\" , action ); Use the action ID returned in any of the previous steps and run the script: TypeScript Copy Ask AI npx tsx getAction.ts Was this page helpful? Yes No Client Wallets Literature Quickstart ⚡ Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 733
  },
  {
    "id": "https://docs.crossmint.com/solutions/story-protocol/wallets/client-side-wallets#chunk_0",
    "url": "https://docs.crossmint.com/solutions/story-protocol/wallets/client-side-wallets",
    "title": "Client Wallets Quickstart ⚡ - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Wallets Client Wallets Quickstart ⚡ Documentation API Reference SDK Reference CLI Solution Guides Changelog Solution Guides Overview Agentic Commerce Overview Guides StoryKit Overview Wallets Server Wallets Client Wallets Music Quickstart ⚡ Literature Quickstart ⚡ Images Quickstart ⚡ Introduction Preparation Steps Create Client Wallets Send Arbitrary Transaction ​ Introduction In this quickstart, you will create new user wallets on Story and use passkeys for sending transactions using this wallet. By the end of this guide, you’ll be able to: Create client-side wallets on Story Protocol Configure multiple authentication methods Mint your first NFT using the wallet ​ Preparation Steps 1 Create a developer account To get started, create a developer account in the Crossmint Staging Console . Open that link, sign in, and accept the dialog to continue. Crossmint offers two consoles: staging , for development and testing, and production . 2 Get an API Key Create a client-side API key with these scopes: wallets.create , wallets.read , wallets:balance.read , wallets:transactions.create , wallets:transactions.read , users.read , users.create . Check the “JWT Auth” box. This allows your API key to create new client wallets. ​ Create Client Wallets 1 Setup Application Follow the React Wallets Quickstart guide to use Crossmint’s Wallets SDK in your application. 2 Configure Story's Chain Set story-testnet as the chain property. providers.tsx Copy Ask AI \"use client\" ; import { CrossmintProvider , CrossmintAuthProvider , CrossmintWalletsProvider } from \"@crossmint/client-sdk-react-ui\" ; const clientApiKey = process . env . NEXT_PUBLIC_CROSSMINT_CLIENT_KEY as string ; export default function Providers ({ children } : { children : React . ReactNode }) { return ( < CrossmintProvider apiKey = { clientApiKey } > < CrossmintAuthProvider loginMethods = { [ \"google\" , \"twitter\" , \"farcaster\" , \"email\" ] } > < CrossmintWalletProvider createOnLogin = { { chain: \"story-testnet\" , signer: { type: \"<your-signer-type>\" , }, } } > { children } </ CrossmintWalletProvider > </ CrossmintAuthProvider > </ CrossmintProvider > ); } 3 Format Login Component Adjust the login component’s style to match your application’s design. You can experiment with it here . ​ Send Arbitrary Transaction 1 Specify the NFT Contract Define the address and interface (ABI) of the NFT smart contract on Story Protocol. components/utils.ts Copy Ask AI export const NFT_CONTRACT_ADDRESS = \"0x937bef10ba6fb941ed84b8d249abc76031429a9a\" as const ; export const NFT_CONTRACT_ABI = [ { inputs: [ { internalType: \"address\" , name: \"recipient\" , type: \"address\" , }, { internalType: \"string\" , name: \"tokenURI\" , type: \"string\" , }, ], name: \"mintNFT\" , outputs: [ { internalType: \"uint256\" , name: \"\" , type: \"uint256\" , }, ], stateMutability: \"nonpayable\" , type: \"function\" , }, ]; 2 Create a React Component for the Transaction Create a user-friendly interface that: Displays the transaction status Allows users to send an arbitrary transaction to the NFT contract Displays the transaction hash and a link to the Story Explorer components/SendTransactionComponent.tsx Copy Ask AI import { EVMWallet , useWallet } from \"@crossmint/client-sdk-react-ui\" ; import React from \"react\" ; import { NFT_CONTRACT_ADDRESS , NFT_CONTRACT_ABI } from \"./utils\" ; import { encodeFunctionData } from \"viem\" ; export default function SendTransactionComponent () { const { wallet } = useWallet (); const [ txStatus , setTxStatus ] = React . useState < 'idle' | 'pending' | 'success' | 'error' >( 'idle' ); const [ txError , setTxError ] = React . useState < string | null >( null ); const [ tx , setTx ] = React . useState < string | null >( null ); if ( wallet ) { return ( < div className = \"max-w-md mx-auto bg-white rounded-xl overflow-hidden p-6 space-y-4 \" > < button onClick = {async () => { try { setTxStatus ( 'pending' ); setTxError ( null ); const data = encodeFunctionData ({ abi: NFT_CONTRACT_ABI , functionName: \"mintNFT\" , args: [ wallet . address , \"test-uri\" ], }); const evmWallet = EVMWallet . from ( wallet ); const { hash : tx } = await evmWallet . sendTransaction ({ to: NFT_CONTRACT_ADDRESS , data: data , }); setTx ( tx ); setTxStatus ( 'success' ); } catch ( error ) { setTxStatus ( 'error' ); setTxError ( error instanceof Error ? error . message : 'Transaction failed' ); setTx ( null ); } } } disabled = { txStatus === 'pending' } className = \"w-full flex items-center justify-center space-x-2 bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg transition-colors\" > { txStatus === 'pending' ? ( <> < svg className = \"animate-spin -ml-1 mr-3 h-5 w-5 text-white\" xmlns = \"http://www.w3.org/2000/svg\" fill = \"none\" viewBox = \"0 0 24 24\" > < circle className = \"opacity-25\" cx = \"12\" cy = \"12\" r = \"10\" stroke = \"currentColor\" strokeWidth = \"4\" ></ circle > < path className = \"opacity-75\" fill = \"currentColor\" d = \"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\" ></ path > </ svg > < span > Processing... </ span > </> ) : ( 'Send Transaction' ) } </ button > < div className = \"mt-4\" > { txStatus === 'pending' && ( < div className = \"flex items-center space-x-2 text-amber-500\" > < svg className = \"animate-spin h-5 w-5\" xmlns = \"http://www.w3.org/2000/svg\" fill = \"none\" viewBox = \"0 0 24 24\" > < circle className = \"opacity-25\" cx = \"12\" cy = \"12\" r = \"10\" stroke = \"currentColor\" strokeWidth = \"4\" ></ circle > < path className = \"opacity-75\" fill = \"currentColor\" d = \"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\" ></ path > </ svg > < span > Transaction in progress... </ span > </ div > ) } { txStatus === 'success' && ( < div className = \"flex items-center space-x-2 text-emerald-600\" > < svg className = \"h-5 w-5\" fill = \"none\" stroke = \"currentColor\" viewBox = \"0 0 24 24\" > < path strokeLinecap = \"round\" strokeLinejoin = \"round\" strokeWidth = \"2\" d = \"M5 13l4 4L19 7\" ></ path",
    "chunk_index": 0,
    "word_count": 1000
  },
  {
    "id": "https://docs.crossmint.com/solutions/story-protocol/wallets/client-side-wallets#chunk_0",
    "url": "https://docs.crossmint.com/solutions/story-protocol/wallets/client-side-wallets",
    "title": "Client Wallets Quickstart ⚡ - Crossmint Docs",
    "content": "= \"opacity-75\" fill = \"currentColor\" d = \"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\" ></ path > </ svg > < span > Transaction in progress... </ span > </ div > ) } { txStatus === 'success' && ( < div className = \"flex items-center space-x-2 text-emerald-600\" > < svg className = \"h-5 w-5\" fill = \"none\" stroke = \"currentColor\" viewBox = \"0 0 24 24\" > < path strokeLinecap = \"round\" strokeLinejoin = \"round\" strokeWidth = \"2\" d = \"M5 13l4 4L19 7\" ></ path > </ svg > < span > Transaction successful! </ span > { tx && ( < a href = { `https://www.oklink.com/story-odyssey/tx/ ${ tx } ` } target = \"_blank\" rel = \"noopener noreferrer\" className = \"underline hover:text-emerald-700\" > View in explorer </ a > ) } </ div > ) } { txStatus === 'error' && ( < div className = \"flex items-center space-x-2 text-rose-500\" > < svg className = \"h-5 w-5\" fill = \"none\" stroke = \"currentColor\" viewBox = \"0 0 24 24\" > < path strokeLinecap = \"round\" strokeLinejoin = \"round\" strokeWidth = \"2\" d = \"M6 18L18 6M6 6l12 12\" ></ path > </ svg > < span > Transaction failed: { txError } </ span > </ div > ) } </ div > </ div > ); } return null ; } 3 Add the Transaction Component to the App Incorporate the transaction component into the main wallet interface, using the useWallet hook to manage wallet state and pass it to the transaction component. app/components/WalletComponent.tsx Copy Ask AI export default function WalletComponent () { const { wallet , status , error } = useWallet (); return ( <> < Card className = \"p-4\" > < Status wallet = { wallet } status = { status } error = { error } /> </ Card > < SendTransactionComponent wallet = { wallet } /> </> ); } Was this page helpful? Yes No Server Wallets Music Quickstart ⚡ Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 353
  },
  {
    "id": "https://docs.crossmint.com/solutions/story-protocol/wallets/server-side-wallets#chunk_0",
    "url": "https://docs.crossmint.com/solutions/story-protocol/wallets/server-side-wallets",
    "title": "Server Wallets Quickstart ⚡ - Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Wallets Server Wallets Quickstart ⚡ Documentation API Reference SDK Reference CLI Solution Guides Changelog Solution Guides Overview Agentic Commerce Overview Guides StoryKit Overview Wallets Server Wallets Client Wallets Music Quickstart ⚡ Literature Quickstart ⚡ Images Quickstart ⚡ Preparation Steps Create Server Wallets Send Arbitrary Transaction In this quickstart, you will create new user wallets on Story. This quickstart is under development as new features are added to the Story Protocol daily. ​ Preparation Steps 1 Create a Developer Account and Project To get started, create a developer account in the Crossmint Staging Console . Open that link, sign in, and accept the dialog to continue. Crossmint offers two consoles: staging , for development and testing, and production . 2 Get an API Key Create a server-side API key with these scopes: wallets.create , wallets:transactions.create , wallets:transactions.sign . This allows your API key to create new server wallets. ​ Create Server Wallets 1 Choose a Wallet Type Below is a summary of available wallet types and their characteristics: Custodial Type Admin Signer True evm-smart-wallet evm-fireblocks-custodial False evm-smart-wallet evm-keypair 2 Create a Wallet createWallet.ts response Copy Ask AI const response = await fetch ( \"https://staging.crossmint.com/api/2022-06-09/wallets\" , { method: \"POST\" , headers: { \"X-API-KEY\" : \"<YOUR_API_KEY>\" , \"Content-Type\" : \"application/json\" , }, body: JSON . stringify ({ type: \"<WALLET_TYPE>\" , // Here you can pass a user ID, email, phone number, twitter handle etc. depending on how the user is identified in your application linkedUser: \"email:user@example.com\" , config: { adminSigner: { type: \"<ADMIN_SIGNER>\" }, } }), }); const wallet = await response . json (); console . log ( \"Wallet created:\" , wallet ); Now, run the script: TypeScript Copy Ask AI npx tsx createWallet.ts ​ Send Arbitrary Transaction 1 Prepare the transaction Set up a Story Protocol client using the wallet created in the previous step and prepare a transaction to create a new NFT collection prepareTransaction.ts Copy Ask AI const client = StoryClient . newClient ({ transport: http ( RPC_PROVIDER_URL ), account: wallet . address , }); const creationTx = await client . nftClient . createNFTCollection ({ name: \"A collection of IP fantasy assets\" , symbol: \"XMT\" , contractURI: \"ipfs://QmXYnQJjUxojhh6NKkxPkcXNKFo4pU2hxUyJjqzTcQL9rE\" , isPublicMinting: true , mintOpen: true , mintFeeRecipient: wallet . address , txOptions: { encodedTxDataOnly: true , }, }); 2 Send the transaction Send the prepared transaction to Crossmint’s API, which handles the blockchain interaction. The transaction creates the NFT collection on Story Protocol’s network without requiring user’s signature or handling of gas fees. createTransaction.ts Copy Ask AI const response = await fetch ( `https://staging.crossmint.com/api/2022-06-09/wallets/ ${ wallet . address } /transactions` , { method: \"POST\" , headers: { \"X-API-KEY\" : \"<YOUR_API_KEY>\" , \"Content-Type\" : \"application/json\" , }, body: JSON . stringify ({ params: { call: { // Encoded transaction data data: creationTx . encodedTxData . data , // Transaction destination to: creationTx . encodedTxData . to , }, chain: \"story-testnet\" , }, }), }); const transaction = await response . json (); console . log ( \"Transaction created:\" , transaction . id ); Story Protocol transactions through Crossmint smart wallets are completely gas-free! You can focus on building your application without worrying about managing gas fees or token balances. 3 Monitor Transaction Status Check the transaction status using the transaction ID. checkStatus.js Copy Ask AI const response = await fetch ( `https://staging.crossmint.com/api/2022-06-09/wallets/ ${ wallet . address } /transactions/ ${ transaction . id } ` , { method: \"GET\" , headers: { \"X-API-KEY\" : \"<YOUR_API_KEY>\" , }, } ); const status = await response . json (); console . log ( \"Status:\" , status . status ); Was this page helpful? Yes No Overview Client Wallets Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 625
  },
  {
    "id": "https://docs.crossmint.com/wallets/advanced/bring-your-own-auth#chunk_0",
    "url": "https://docs.crossmint.com/wallets/advanced/bring-your-own-auth",
    "title": "Bring Your Own Auth | Crossmint Wallet APIs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Advanced Bring Your Own Auth Documentation API Reference SDK Reference CLI Solution Guides Changelog Introduction About Crossmint Getting Started Using AI Assistants Platform Wallets Introduction Quickstarts ⚡ Guides Wallet Actions Advanced Bring Your Own Auth Gas Sponsorship Debit Cards Spam Filters Error Handling Migrate to Wallets SDK v2 Authentication Introduction Quickstart ⚡ Guides Tokenization (Minting) Introduction Integrate Checkout Introduction Integrate Advanced Topics Prerequisites Using your own auth provider Crossmint wallets can be used with all major authentication providers (such as Cognito, Auth0, Firebase, Stytch, etc.) as well as other wallet providers (like Privy and Dynamic). For Privy and Dynamic, you can use their embedded wallets as signers for Crossmint wallets. ​ Prerequisites API Key : Ensure you have an API key with the scopes: wallets.create . ​ Using your own auth provider React React Native 1 Configure JWT Authentication in the Crossmint Console Navigate to your project in the Crossmint Console. Go to the API Keys section from the sidebar. Scroll down to the JWT authentication section. Choose your preferred authentication method: 3P Auth providers : Select from supported providers such as Dynamic, Auth0, Stytch, Privy, or Firebase. Enter any required environment IDs or configuration details. Custom tokens : Opt to issue and manage your own JWTs. After making your selection and providing any necessary details, click Save JWT auth settings to apply your configuration. 2 Add the Crossmint providers to your app Add the necessary Crossmint providers to your app together with your own auth provider. With the current setup, a wallet will be created automatically on login. next.js create-react-app Copy Ask AI \"use client\" ; import { CrossmintProvider , CrossmintWalletProvider , } from \"@crossmint/client-sdk-react-ui\" ; import { YourAuthProvider } from \"@your-auth-provider\" ; export function Providers ({ children } : { children : React . ReactNode }) { return ( < YourAuthProvider > < CrossmintProvider apiKey = \"<crossmint-client-api-key>\" > < CrossmintWalletProvider createOnLogin = { { chain: \"<your-chain>\" , signer: { type: \"<your-signer-type>\" , }, } } > { children } </ CrossmintWalletProvider > </ CrossmintProvider > </ YourAuthProvider > ); } ​ Configuring the Wallet Provider ​ createOnLogin object If set creates a wallet on login using the specified configuration. Show properties ​ chain string required The chain to use the wallet on. See all supported chains for more details. On staging only testnet chains are supported. Note: For EVM-compatible chains, wallets are created for all chains as part of the shared address space derived from the same private key. However, to interact with a specific chain using the SDK, you must instantiate a wallet object per chain. This allows the SDK to correctly route interactions to the appropriate network configuration. ​ signer Signer required The signer to use the wallet with. ​ owner string An identifier for the user this wallet is associated with. You can fetch wallets later by this user. email:<email> userId:<userId> phoneNumber:<phoneNumber> twitter:<handle> x:<handle> (alias for twitter:<handle> ) ​ callbacks object A set of callbacks to be called when the wallet is created or a transaction is initiated. Show properties ​ onWalletCreationStart function A function to be called before the wallet is created onchain. ​ onTransactionStart function A function to be called before the transaction is signed. ​ showPasskeyHelpers boolean Only applies if you are using a passkey as the signer. If true, modals explaining what passkeys are will be shown to the user when creating a wallet and signing a transaction, for a better user experience. ​ appearance UIConfig Styles to configure the appearance of the passkey modal. Show properties ​ spacingUnit string The spacing unit to use for the modal. ​ borderRadius string The border radius to use for the modal. ​ colors object The colors to use for the modal. Show properties ​ inputBackground string The background color of the input. ​ buttonBackground string The background color of the button. ​ border string The border color of the modal. ​ background string The background color of the modal. ​ textPrimary string The primary text color of the modal. ​ textSecondary string The secondary text color of the modal. ​ textLink string The link text color of the modal. ​ danger string The danger color of the modal. ​ accent string The accent color of the modal. 3 Passthrough the jwt information to the Crossmint provider Set the user in the auth provider. next.js create-react-app Copy Ask AI \"use client\" ; import { useYourAuthProviderHook } from \"@your-auth-provider\" ; import { useEffect } from \"react\" ; import { useCrossmint } from \"@crossmint/client-sdk-react-ui\" ; const { jwt , email } = useYourAuthProviderHook (); const { experimental_setCustomAuth } = useCrossmint (); export function YourComponent () { const { jwt , email } = useYourAuthProviderHook (); const { experimental_setCustomAuth } = useCrossmint (); useEffect (() => { if ( jwt && email ) { experimental_setCustomAuth ({ jwt , email , }); } }, [ jwt , email ]); // your component logic here return ( < div > < h1 > Your Component </ h1 > </ div > ); } Was this page helpful? Yes No Borrow Gas Sponsorship Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 864
  },
  {
    "id": "https://docs.crossmint.com/wallets/advanced/debit-cards#chunk_0",
    "url": "https://docs.crossmint.com/wallets/advanced/debit-cards",
    "title": "Debit Cards | Crossmint Wallet APIs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Advanced Debit Cards Documentation API Reference SDK Reference CLI Solution Guides Changelog Introduction About Crossmint Getting Started Using AI Assistants Platform Wallets Introduction Quickstarts ⚡ Guides Wallet Actions Advanced Bring Your Own Auth Gas Sponsorship Debit Cards Spam Filters Error Handling Migrate to Wallets SDK v2 Authentication Introduction Quickstart ⚡ Guides Tokenization (Minting) Introduction Integrate Checkout Introduction Integrate Advanced Topics Debit cards are available under private access. Contact us if you need access Was this page helpful? Yes No Gas Sponsorship Spam Filters Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 104
  },
  {
    "id": "https://docs.crossmint.com/wallets/advanced/error-handling#chunk_0",
    "url": "https://docs.crossmint.com/wallets/advanced/error-handling",
    "title": "Transaction Error Handling | Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Advanced Error Handling Documentation API Reference SDK Reference CLI Solution Guides Changelog Introduction About Crossmint Getting Started Using AI Assistants Platform Wallets Introduction Quickstarts ⚡ Guides Wallet Actions Advanced Bring Your Own Auth Gas Sponsorship Debit Cards Spam Filters Error Handling Migrate to Wallets SDK v2 Authentication Introduction Quickstart ⚡ Guides Tokenization (Minting) Introduction Integrate Checkout Introduction Integrate Advanced Topics Common Error Types Validation Errors Execution Errors Other Errors Debugging Tenderly Block Explorer Sometimes transactions fail. This guide outlines common failure reasons and provides tools to help you identify the underlying causes. Reverted transactions are marked as “failed” and won’t be executed. There is no auto-retry mechanism for failed transactions; you must manually resubmit them if needed. ​ Common Error Types Transaction errors typically fall into two categories: validation failures and execution failures. ​ Validation Errors Validation errors occur when the provided transaction data is invalid. These errors commonly relate to invalid data (e.g., signature ) during transaction approval. Common issues include: Malformed signatures Invalid signatures (e.g., from an unauthorized wallet) Insufficient signer permissions for transaction approval An example of a validation error: Copy Ask AI \"error\" : { \"reason\" : \"execution_reverted\" , \"message\" : \"Execution reverted, see 'revert' for details\" , \"revert\" : { \"type\" : \"wallet_authorization\" , \"reason\" : \"Invalid signature\" , \"reasonData\" : \"AA24\" , \"simulationLink\" : \"https://www.tdly.co/shared/simulation/e61be684-5359-48a6-9173-349cd44c6e6c\" } } Troubleshooting steps: Verify the transaction signer is valid Confirm you’re signing the correct message data Verify the signing private key matches the signer wallet ​ Execution Errors Execution errors occur when a transaction is reverted during runtime. These typically relate to the calls provided during transaction creation. Common causes include: Another transaction with the same call was executed already State changes between transaction creation and execution (e.g. asset price updated exceeding slippage allowance) The Crossmint API typically provides specific revert reasons: Copy Ask AI \"error\" : { \"reason\" : \"execution_reverted\" , \"message\" : \"Execution reverted, see 'revert' for details\" , \"revert\" : { \"type\" : \"contract_call\" , \"reason\" : \"ERC20: transfer amount exceeds balance\" , \"simulationLink\" : \"https://www.tdly.co/shared/simulation/18b810b5-33b6-4091-a3a1-d7318f73bbec\" } } Troubleshooting: Review the simulation to understand the revert cause Check for similar previous transactions Attempt to resubmit with the same parameters ​ Other Errors If you encounter transaction failures without error details or receive no error message, there may be an issue with the Crossmint infrastructure. First, check our status page to verify API availability and try again later. If the problem continues, please contact our support team. ​ Debugging The Crossmint API simulates all transactions before submitting them onchain. Failed simulations prevent onchain execution. In most cases, the transaction will fail during the simulation. If that’s the case, you can use Tenderly to inspect the details. Otherwise, you can use a block explorer to inspect the transaction. ​ Tenderly Tenderly is an EVM transaction tracing software. For each transaction that is failed during simulation, Crossmint API includes a link to the Tenderly simulation. ​ Block Explorer If the transaction was included onchain, you can check its status using a block explorer. Was this page helpful? Yes No Spam Filters Migrate to Wallets SDK v2 Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 539
  },
  {
    "id": "https://docs.crossmint.com/wallets/advanced/gas-sponsorship#chunk_0",
    "url": "https://docs.crossmint.com/wallets/advanced/gas-sponsorship",
    "title": "Gas Sponsorship | Crossmint Wallet APIs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Advanced Gas Sponsorship Documentation API Reference SDK Reference CLI Solution Guides Changelog Introduction About Crossmint Getting Started Using AI Assistants Platform Wallets Introduction Quickstarts ⚡ Guides Wallet Actions Advanced Bring Your Own Auth Gas Sponsorship Debit Cards Spam Filters Error Handling Migrate to Wallets SDK v2 Authentication Introduction Quickstart ⚡ Guides Tokenization (Minting) Introduction Integrate Checkout Introduction Integrate Advanced Topics Configuring Gas Sponsorship Limits Gas Sponsorship lets you cover the transaction fees (gas) for your users’ blockchain interactions, reducing friction and improving conversion rates. By default, gas sponsorship is enabled for all wallets, without writing any code. Crossmint will handle: Sponsoring the transaction Maintaining a treasury to cover the gas Securely verifying and rate-limiting each transaction Protecting against the most common attacks when sponsoring gas on chains like Solana Calculating the optimal fees to ensure the transaction lands without overpaying You can disable or re-enable gas sponsorship in the Console under Wallets → Settings. When using Solana as a chain, if you disable sponsorship, you can configure whether users pay gas in SOL or USDC. ​ Configuring Gas Sponsorship Limits Configuring limits per user of gas sponsorship is under private access. Contact us if you need access Was this page helpful? Yes No Bring Your Own Auth Debit Cards Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 230
  },
  {
    "id": "https://docs.crossmint.com/wallets/advanced/migrate-to-v2#chunk_0",
    "url": "https://docs.crossmint.com/wallets/advanced/migrate-to-v2",
    "title": "Migrate to Wallets SDK v2 | Crossmint Wallet APIs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Advanced Migrate to Wallets SDK v2 Documentation API Reference SDK Reference CLI Solution Guides Changelog Introduction About Crossmint Getting Started Using AI Assistants Platform Wallets Introduction Quickstarts ⚡ Guides Wallet Actions Advanced Bring Your Own Auth Gas Sponsorship Debit Cards Spam Filters Error Handling Migrate to Wallets SDK v2 Authentication Introduction Quickstart ⚡ Guides Tokenization (Minting) Introduction Integrate Checkout Introduction Integrate Advanced Topics Motivation for v2 React and React Native SDKs CrossmintWalletProvider and CrossmintAuthProvider Change #1: CrossmintWalletProvider moves outside of CrossmintAuthProvider Change #2: Wallet options Wallets SDK Signer types and locators getOrCreateWallet updated input arguments Change #1: Wallet type Change #2: Signers configs Change #3: LinkedUser is now owner SolanaSmartWallet and EVMSmartWallet get consolidated into Wallet Change #1: getOrCreateWallet just returns a Wallet object Change #2: Balances Change #3: Sending transactions and signing messages Change #4: Delegated signer type ​ Motivation for v2 Simplify the Wallets SDK and reduce web3-specific jargon Unify wallet types and signer configs across chains Provide better defaults for common use cases Make wallet integration faster and less error-prone Enable advanced features via optional parameters when needed ​ React and React Native SDKs ​ CrossmintWalletProvider and CrossmintAuthProvider ​ Change #1: CrossmintWalletProvider moves outside of CrossmintAuthProvider Copy Ask AI // Before < CrossmintAuthProvider authModalTitle = \"Solana Wallets Quickstart\" embeddedWallets = { { createOnLogin: \"all-users\" , type: \"solana-smart-wallet\" , showPasskeyHelpers: true , } } loginMethods = { [ \"web3:solana-only\" ] } > { children } </ CrossmintAuthProvider > // Now < CrossmintAuthProvider authModalTitle = \"Fintech Starter App\" loginMethods = { [ \"email\" , \"google\" ] } > < CrossmintWalletProvider showPasskeyHelpers = { chain !== \"solana\" } createOnLogin = { { chain: process . env . NEXT_PUBLIC_CHAIN_ID as any , signer: { type: chain === \"solana\" ? \"email\" : \"passkey\" }, } } > { children } </ CrossmintWalletProvider > </ CrossmintAuthProvider > ​ Change #2: Wallet options Wallet options also change: Type is no longer required createOnLogin is now an object including the chain, the signer and the owner fields. ​ Wallets SDK ​ Signer types and locators Signer types and locators have been consolidated and simplified: Before Now evm-keypair solana-keypair external-wallet evm-passkey passkey solana-fireblocks-custodial evm-fireblocks-custodial api-key ​ getOrCreateWallet updated input arguments Copy Ask AI // Before const wallet = await crossmintWallets . getOrCreateWallet ( \"evm-smart-wallet\" , { chain: \"base-sepolia\" , adminSigner: { type: \"evm-passkey\" , }, }); // Now const wallet = await crossmintWallets . getOrCreateWallet ({ chain: \"base-sepolia\" , signer: { type: \"passkey\" , }, }); ​ Change #1: Wallet type Wallet type is not an argument anymore. All wallets are smart wallets and type is inferred from the chain passed ​ Change #2: Signers configs Signers configs are now a single argument. Copy Ask AI ////////////////////// // Passkey signer ////////////////////// // Before { type : \"evm-passkey\" ; name ?: string ; signingCallback ?: PasskeySigningCallback ; creationCallback ?: PasskeyCreationCallback ; }; // Now { type : \"passkey\" ; name ?: string ; onCreatePasskey ?: ( name : string ) => Promise < { id : string ; publicKey : { x : string ; y : string } } > ; onSignWithPasskey ?: ( message : string ) => Promise < PasskeySignResult > ; }; ////////////////////// // Keypair signer ////////////////////// // Before { type : \"evm-keypair\" ; address : string ; signer : | { type : \"provider\" ; provider : EIP1193Provider ; // From viem } | { type : \"viem_v2\" ; account : Account ; // From viem }; } { type : \"solana-keypair\" ; address : SolanaAddress ; signer : { signMessage : ( message : Uint8Array ) => Promise < Uint8Array > ; signTransaction : ( transaction : VersionedTransaction ) => Promise < VersionedTransaction > ; }; } // Now export type BaseExternalWalletSignerConfig = { type : \"external-wallet\" ; address : string ; }; export type EvmExternalWalletSignerConfig = BaseExternalWalletSignerConfig & { provider ?: GenericEIP1193Provider | ViemEIP1193Provider ; viemAccount ?: Account ; }; export type SolanaExternalWalletSignerConfig = BaseExternalWalletSignerConfig & { onSignTransaction : ( transaction : VersionedTransaction ) => Promise < VersionedTransaction >; }; ////////////////////// // Fireblocks ////////////////////// // Before { type : \"solana-fireblocks-custodial\" ; }; // Now { type : \"api-key\" } // works for both EVM and Solana ​ Change #3: LinkedUser is now owner LinkedUser field is now called owner. Copy Ask AI // Before const wallet = await crossmintWallets . getOrCreateWallet ( \"evm-smart-wallet\" , { chain: \"base-sepolia\" , linkedUser: \"email:dev@company.com\" , adminSigner: { type: \"evm-passkey\" , }, }); // Now const wallet = await crossmintWallets . getOrCreateWallet ({ chain: \"base-sepolia\" , owner: \"email:dev@company.com\" , signer: { type: \"passkey\" , }, }); ​ SolanaSmartWallet and EVMSmartWallet get consolidated into Wallet ​ Change #1: getOrCreateWallet just returns a Wallet object Copy Ask AI // Before const wallet : SolanaSmartWallet = await crossmintWallets . getOrCreateWallet ( \"solana-smart-wallet\" , { adminSigner: { type: \"solana-fireblocks-custodial\" , }, }); const wallet : EVMSmartWallet = await crossmintWallets . getOrCreateWallet ( \"evm-smart-wallet\" , { chain: \"base\" , adminSigner: { type: \"evm-passkey\" , }, }); // Now const wallet : Wallet = await crossmintWallets . getOrCreateWallet ({ chain: \"base\" , // or \"solana\" signer: { type: \"passkey\" , }, }); The Wallet object has common methods for all chains including checking the balance, adding delegated signers and sending any kind of token. ​ Change #2: Balances Balances now return an object with nativeToken, usdc and tokens. USDC and nativeToken balances are always fetched. Copy Ask AI // Before await wallet . getBalances ([ \"sol\" , \"usdc\" ]); // Now await wallet . balances (); ​ Change #3: Sending transactions and signing messages To create transactions that are not transferring any kind of token you now need to do the following: Copy Ask AI // Before wallet . sendTransaction ({}); // Now // EVM const wallet : Wallet = // ... const evmWallet : EVMWallet = EVMWallet . from ( wallet ); evmWallet . sendTransaction ( ... ); evmWallet . signMessage ( ... ); evmWallet . signTypedData ( ...",
    "chunk_index": 0,
    "word_count": 1000
  },
  {
    "id": "https://docs.crossmint.com/wallets/advanced/migrate-to-v2#chunk_0",
    "url": "https://docs.crossmint.com/wallets/advanced/migrate-to-v2",
    "title": "Migrate to Wallets SDK v2 | Crossmint Wallet APIs",
    "content": "nativeToken balances are always fetched. Copy Ask AI // Before await wallet . getBalances ([ \"sol\" , \"usdc\" ]); // Now await wallet . balances (); ​ Change #3: Sending transactions and signing messages To create transactions that are not transferring any kind of token you now need to do the following: Copy Ask AI // Before wallet . sendTransaction ({}); // Now // EVM const wallet : Wallet = // ... const evmWallet : EVMWallet = EVMWallet . from ( wallet ); evmWallet . sendTransaction ( ... ); evmWallet . signMessage ( ... ); evmWallet . signTypedData ( ... ); // Solana const wallet : Wallet = // ... const solanaWallet : SolanaWallet = SolanaWallet . from ( wallet ); solanaWallet . sendTransaction ( ... ); ​ Change #4: Delegated signer type Delegated signer type is now a method on the Wallet object. Copy Ask AI // Before wallet . getDelegatedSigners (); await wallet . addDelegatedSigner ( `solana-keypair: ${ newSigner } ` ); wallet . send ( \"email@gmail.com\" , \"usdc\" , \"1.2\" ); // Now wallet . delegatedSigners (); await wallet . addDelegatedSigner ({ signer: `external-wallet: ${ newSigner } ` }); Was this page helpful? Yes No Error Handling Introduction Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 211
  },
  {
    "id": "https://docs.crossmint.com/wallets/advanced/spam-filters#chunk_0",
    "url": "https://docs.crossmint.com/wallets/advanced/spam-filters",
    "title": "Block Spam NFTs from your Wallets | Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Advanced Spam Filters Documentation API Reference SDK Reference CLI Solution Guides Changelog Introduction About Crossmint Getting Started Using AI Assistants Platform Wallets Introduction Quickstarts ⚡ Guides Wallet Actions Advanced Bring Your Own Auth Gas Sponsorship Debit Cards Spam Filters Error Handling Migrate to Wallets SDK v2 Authentication Introduction Quickstart ⚡ Guides Tokenization (Minting) Introduction Integrate Checkout Introduction Integrate Advanced Topics Mode 1: Boolean Mode 2: Spam Score Spam filters require an enterprise subscription. Contact us to learn more. Blocking spam NFTs from wallets is critical to delivering a good user experience and keeping your users safe, specially in low cost chains where spam is widespread. Once spam filters are enabled for your project, the API to get NFTs from a wallet will flag spam NFTs, which you can use to hide potentially malicious assets. You can access this information in two ways: ​ Mode 1: Boolean The API returns an isSpam attribute with values true or false based on Crossmint’s default rules. See sample response Copy Ask AI { \"chain\":\"polygon\", \"contractAddress\":\"0xC5F45D4B5Be198A430b39D194cbB32132BE2cfec\", \"tokenId\":\"1\", \"metadata\":{ ... }, \"locator\":\"poly:0xC5F45D4B5Be198A430b39D194cbB32132BE2cfec:1\", \"tokenStandard\":\"erc-721\", \"isSpam\":true } ​ Mode 2: Spam Score The API returns a spamScore between 0-100 (100 = most likely to be spam), so you can adjust your tolerance threshold. See sample response Copy Ask AI { \"chain\":\"polygon\", \"contractAddress\":\"0xC5F45D4B5Be198A430b39D194cbB32132BE2cfec\", \"tokenId\":\"1\", \"metadata\":{ ... }, \"locator\":\"poly:0xC5F45D4B5Be198A430b39D194cbB32132BE2cfec:1\", \"tokenStandard\":\"erc-721\", \"spamScore\":50 //This is a range of 0-100 } Was this page helpful? Yes No Debit Cards Error Handling Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 259
  },
  {
    "id": "https://docs.crossmint.com/wallets/architecture#chunk_0",
    "url": "https://docs.crossmint.com/wallets/architecture",
    "title": "Crossmint Wallets Architecture | Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Introduction Architecture Documentation API Reference SDK Reference CLI Solution Guides Changelog Introduction About Crossmint Getting Started Using AI Assistants Platform Wallets Introduction Overview Architecture Signers and custody Quickstarts ⚡ Guides Authentication Introduction Quickstart ⚡ Guides Tokenization (Minting) Introduction Integrate Checkout Introduction Integrate Advanced Topics Smart Contract Wallets The Crossmint wallets architecture is designed to solve the most critical limitations in traditional wallet infrastructure: Vendor lock-in : avoid ever needing to export private keys or abandon your existing wallet addresses. Single point of failure : eliminate reliance on fragile, single keypairs for access and control. Permissions you can trust : enforced onchain , not via opaque TEEs or off-chain middleware. ​ Smart Contract Wallets Crossmint uses smart contract wallets to unlock support for having multiple signers and onchain programmable logic . A signer is a digital identity (such as an email, passkey, or external wallet) authorized to approve actions on the wallet’s behalf. This enables: Seamless provider migration : update just the admin signer, without changing the wallet address. Built-in security : use multiple signers for MFA and recovery flows enforced onchain. Granular control : assign delegated signers with scoped, onchain permissions to act on behalf of the wallet. Shared access between users or roles, without compromising wallet integrity. All permissions are enforced onchain and fully auditable and remove the need to trust opaque infrastructure or Crossmint’s backend. The wallet logic stays visible, enforceable, and portable. Was this page helpful? Yes No Overview Signers and custody Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 266
  },
  {
    "id": "https://docs.crossmint.com/wallets/overview#chunk_0",
    "url": "https://docs.crossmint.com/wallets/overview",
    "title": "Overview of Wallets | Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Introduction Overview Documentation API Reference SDK Reference CLI Solution Guides Changelog Introduction About Crossmint Getting Started Using AI Assistants Platform Wallets Introduction Overview Architecture Signers and custody Quickstarts ⚡ Guides Authentication Introduction Quickstart ⚡ Guides Tokenization (Minting) Introduction Integrate Checkout Introduction Integrate Advanced Topics Get Started Detailed Characteristics Learn More Crossmint Wallets are trusted by leading financial institutions and Fortune 500 companies like MoneyGram, Santander Bank, and Red Bull. Key Features Prebuilt primitives you actually need : simple APIs to transfer across chains, generate yield, borrow, sponsor gas, issue debit cards, track activity, and compliance. Or bring your own, we stay flexible. Chain agnostic : same code for Solana, 20+ EVM chains (Polygon / Base), Stellar, Aptos, and Sui. Support new chains without rewrites and adding new providers. Custodial or non-custodial : migrate seamlessly without disrupting users. No lock-in : open source, portable wallets. Change providers anytime while keeping your wallet addresses. Try it out See a demo of a fintech app built with Crossmint wallets ​ Get Started React Node.js REST API React Native Swift Kotlin Fintech Starter App Build your own fintech app with Crossmint wallets in 5 minutes Agent Starter App Build your own agent with Crossmint wallets in 5 minutes ​ Detailed Characteristics Chain agnostic Support for Solana, 20+ EVM chains (Polygon / Base), Aptos, Sui Works anywhere Deploy wallets to websites, apps, or servers in 3 lines of code No lock-in Built on open standards. Migrate on your terms. Seamless UX Sponsor gas, avoid pop-ups, and other unfriendly blockchain quirks Never lose an asset Bank-grade security protecting millions of assets Focus on compliance SOC-2 and PCI compliance, VASP license + MiCA-ready Flexible custody Custodial, non-custodial, or hybrid — your call Bring your own auth Auth with social, email and SMS supported out of the box. Or bring your own auth. Enterprise-grade Built for scale. Enterprise support and SLAs available. ​ Learn More Architecture Signers & Custody Check Balances Transfer Tokens Delegated Signers Was this page helpful? Yes No Verify Webhooks Architecture Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 357
  },
  {
    "id": "https://docs.crossmint.com/wallets/quickstarts/kotlin#chunk_0",
    "url": "https://docs.crossmint.com/wallets/quickstarts/kotlin",
    "title": "Kotlin SDK | Create and Manage Wallets in Your App",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Quickstarts ⚡ Kotlin Documentation API Reference SDK Reference CLI Solution Guides Changelog Introduction About Crossmint Getting Started Using AI Assistants Platform Wallets Introduction Quickstarts ⚡ React Node.js REST API React Native Swift Kotlin Guides Authentication Introduction Quickstart ⚡ Guides Tokenization (Minting) Introduction Integrate Checkout Introduction Integrate Advanced Topics Kotlin SDK is available under private access. Contact us if you need access Was this page helpful? Yes No Swift Create Wallet Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 91
  },
  {
    "id": "https://docs.crossmint.com/wallets/quickstarts/nodejs#chunk_0",
    "url": "https://docs.crossmint.com/wallets/quickstarts/nodejs",
    "title": "Node.js SDK | Create and Manage Wallets in Your Backend",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Quickstarts ⚡ Node.js Documentation API Reference SDK Reference CLI Solution Guides Changelog Introduction About Crossmint Getting Started Using AI Assistants Platform Wallets Introduction Quickstarts ⚡ React Node.js REST API React Native Swift Kotlin Guides Authentication Introduction Quickstart ⚡ Guides Tokenization (Minting) Introduction Integrate Checkout Introduction Integrate Advanced Topics Launching in Production Learn More Other Links Before you start Set up your project and get an API key. 1 Install the SDK Run the following command to install the SDK: npm yarn pnpm bun Copy Ask AI npm i @crossmint/wallets-sdk 2 Create a wallet See all supported chains here . index.ts Copy Ask AI import { CrossmintWallets , createCrossmint } from \"@crossmint/wallets-sdk\" ; const crossmint = createCrossmint ({ apiKey: \"<your-server-api-key>\" , }); const crossmintWallets = CrossmintWallets . from ( crossmint ); const wallet = await crossmintWallets . createWallet ({ chain: \"<your-chain>\" , signer: { type: \"<signer-type>\" , }, }); console . log ( wallet . address ); ​ Launching in Production For production, the steps are almost identical, but some changes are required: Create a developer account on the production console Create a production client API key on the API Keys page with the API scopes users.create , users.read , wallets.read , wallets.create , wallets:transactions.create , wallets:transactions.sign , wallets:balance.read , wallets.fund Replace your test API key with the production key ​ Learn More Check Balances Check the balance of a wallet. Transfer Tokens Send tokens between wallets. Delegated Signers Add delegated signers to a wallet. ​ Other Links API Reference Deep dive into API reference docs. Talk to an expert Contact our sales team for support. Was this page helpful? Yes No React REST API Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 295
  },
  {
    "id": "https://docs.crossmint.com/wallets/quickstarts/react#chunk_0",
    "url": "https://docs.crossmint.com/wallets/quickstarts/react",
    "title": "React SDK | Create and Manage Wallets in Your Frontend",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Quickstarts ⚡ React Documentation API Reference SDK Reference CLI Solution Guides Changelog Introduction About Crossmint Getting Started Using AI Assistants Platform Wallets Introduction Quickstarts ⚡ React Node.js REST API React Native Swift Kotlin Guides Authentication Introduction Quickstart ⚡ Guides Tokenization (Minting) Introduction Integrate Checkout Introduction Integrate Advanced Topics Launching in Production Learn More Other Links Before you start Set up your project and get an API key. Wallets Quickstart See a full working example. 1 Install the SDK Run the following command to install the SDK: npm yarn pnpm bun Copy Ask AI npm i @crossmint/client-sdk-react-ui 2 Add the Crossmint providers to your app Add the necessary Crossmint providers to your app. This example uses Crossmint Auth but you can use any authentication provider of your choice . With the current setup, a wallet will be created automatically on login. next.js create-react-app Copy Ask AI \"use client\" ; import { CrossmintProvider , CrossmintAuthProvider , CrossmintWalletProvider , } from \"@crossmint/client-sdk-react-ui\" ; export function Providers ({ children } : { children : React . ReactNode }) { return ( < CrossmintProvider apiKey = \"<crossmint-client-api-key>\" > < CrossmintAuthProvider > < CrossmintWalletProvider createOnLogin = { { chain: \"<your-chain>\" , signer: { type: \"<signer-type>\" , }, } } > { children } </ CrossmintWalletProvider > </ CrossmintAuthProvider > </ CrossmintProvider > ); } ​ Configuring the Wallet Provider ​ createOnLogin object If set creates a wallet on login using the specified configuration. Show properties ​ chain string required The chain to use the wallet on. See all supported chains for more details. On staging only testnet chains are supported. Note: For EVM-compatible chains, wallets are created for all chains as part of the shared address space derived from the same private key. However, to interact with a specific chain using the SDK, you must instantiate a wallet object per chain. This allows the SDK to correctly route interactions to the appropriate network configuration. ​ signer Signer required The signer to use the wallet with. ​ owner string An identifier for the user this wallet is associated with. You can fetch wallets later by this user. email:<email> userId:<userId> phoneNumber:<phoneNumber> twitter:<handle> x:<handle> (alias for twitter:<handle> ) ​ callbacks object A set of callbacks to be called when the wallet is created or a transaction is initiated. Show properties ​ onWalletCreationStart function A function to be called before the wallet is created onchain. ​ onTransactionStart function A function to be called before the transaction is signed. ​ showPasskeyHelpers boolean Only applies if you are using a passkey as the signer. If true, modals explaining what passkeys are will be shown to the user when creating a wallet and signing a transaction, for a better user experience. ​ appearance UIConfig Styles to configure the appearance of the passkey modal. Show properties ​ spacingUnit string The spacing unit to use for the modal. ​ borderRadius string The border radius to use for the modal. ​ colors object The colors to use for the modal. Show properties ​ inputBackground string The background color of the input. ​ buttonBackground string The background color of the button. ​ border string The border color of the modal. ​ background string The background color of the modal. ​ textPrimary string The primary text color of the modal. ​ textSecondary string The secondary text color of the modal. ​ textLink string The link text color of the modal. ​ danger string The danger color of the modal. ​ accent string The accent color of the modal. 3 Allow users to login and logout Add a component to authenticate the user. auth-button.tsx Copy Ask AI \"use client\" ; import { useAuth } from \"@crossmint/client-sdk-react-ui\" ; export function AuthButton () { const { login , logout , jwt } = useAuth (); return ! jwt ? ( < button type = \"button\" onClick = { login } > Login </ button > ) : ( < button type = \"button\" onClick = { logout } > Logout </ button > ); } 4 Use the wallet Access and use the wallet object. wallet.tsx Copy Ask AI \"use client\" ; import { useWallet } from \"@crossmint/client-sdk-react-ui\" ; export function Wallet () { const { wallet , status } = useWallet (); if ( status === \"in-progress\" ) { return < div > Loading... </ div > ; } if ( status === \"loaded\" && wallet ) { return < div > Connected: { wallet . address } </ div > ; } return < div > Wallet not connected </ div > ; } ​ Launching in Production For production, the steps are almost identical, but some changes are required: Create a developer account on the production console Create a production client API key on the API Keys page with the API scopes users.create , users.read , wallets.read , wallets.create , wallets:transactions.create , wallets:transactions.sign , wallets:balance.read , wallets.fund Replace your test API key with the production key ​ Learn More Check Balances Check the balance of a wallet. Transfer Tokens Send tokens between wallets. Delegated Signers Add delegated signers to a wallet. ​ Other Links API Reference Deep dive into API reference docs. Talk to an expert Contact our sales team for support. Was this page helpful? Yes No Signers and custody Node.js Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 895
  },
  {
    "id": "https://docs.crossmint.com/wallets/quickstarts/react-native#chunk_0",
    "url": "https://docs.crossmint.com/wallets/quickstarts/react-native",
    "title": "React Native SDK | Create and Manage Wallets in Your Frontend",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Quickstarts ⚡ React Native Documentation API Reference SDK Reference CLI Solution Guides Changelog Introduction About Crossmint Getting Started Using AI Assistants Platform Wallets Introduction Quickstarts ⚡ React Node.js REST API React Native Swift Kotlin Guides Authentication Introduction Quickstart ⚡ Guides Tokenization (Minting) Introduction Integrate Checkout Introduction Integrate Advanced Topics Launching in Production Learn More Other Links Before you start Set up your project and get an API key. Expo Wallets Quickstart See a full working example. 1 Install the SDK Run the following command to install the SDK: npm yarn pnpm bun Copy Ask AI npm i @crossmint/client-sdk-react-native-ui 2 Add the Crossmint providers to your app Add the necessary Crossmint providers to your app. This example uses Crossmint Auth but you can use any authentication provider of your choice . With the current setup, a wallet will be created automatically on login. See all supported chains here . providers.tsx Copy Ask AI import { CrossmintAuthProvider , CrossmintProvider , CrossmintWalletProvider , } from \"@crossmint/client-sdk-react-native-ui\" ; type ProvidersProps = { children : React . ReactNode ; }; export default function CrossmintProviders ({ children } : ProvidersProps ) { return ( < CrossmintProvider apiKey = { \"<your-client-api-key>\" } > < CrossmintAuthProvider > < CrossmintWalletProvider createOnLogin = { { chain: \"<your-chain>\" , signer: { type: \"<signer-type>\" , } } } > { children } </ CrossmintWalletProvider > </ CrossmintAuthProvider > </ CrossmintProvider > ); } ​ Configuring the Wallet Provider ​ createOnLogin object If set creates a wallet on login using the specified configuration. Show properties ​ chain string required The chain to use the wallet on. See all supported chains for more details. On staging only testnet chains are supported. Note: For EVM-compatible chains, wallets are created for all chains as part of the shared address space derived from the same private key. However, to interact with a specific chain using the SDK, you must instantiate a wallet object per chain. This allows the SDK to correctly route interactions to the appropriate network configuration. ​ signer Signer required The signer to use the wallet with. ​ owner string An identifier for the user this wallet is associated with. You can fetch wallets later by this user. email:<email> userId:<userId> phoneNumber:<phoneNumber> twitter:<handle> x:<handle> (alias for twitter:<handle> ) 3 Allow users to login and logout and access their wallet Crossmint Auth in React Native is headless. You will need to implement your own login and logout buttons. index.tsx Copy Ask AI import React , { useEffect , useState } from \"react\" ; import { View , Text , TextInput , TouchableOpacity , ActivityIndicator , Alert , } from \"react-native\" ; import { useCrossmintAuth , useWallet , } from \"@crossmint/client-sdk-react-native-ui\" ; import * as Linking from \"expo-linking\" ; export default function Index () { const { loginWithOAuth , createAuthSession , user , crossmintAuth , logout , status , } = useCrossmintAuth (); const { wallet } = useWallet (); // Login state const [ email , setEmail ] = useState ( \"\" ); const [ emailId , setEmailId ] = useState ( \"\" ); const [ otpSent , setOtpSent ] = useState ( false ); const [ otp , setOtp ] = useState ( \"\" ); const [ isPending , setIsPending ] = useState ( false ); // Handle OAuth callback useEffect (() => { const url = Linking . useURL (); if ( url != null ) { createAuthSession ( url ); } }, [ createAuthSession ]); // Login functions const sendOtp = async () => { if ( ! email . trim ()) { Alert . alert ( \"Error\" , \"Please enter a valid email address\" ); return ; } setIsPending ( true ); try { const res = await crossmintAuth ?. sendEmailOtp ( email ); setEmailId ( res . emailId ); setOtpSent ( true ); } catch ( error ) { Alert . alert ( \"Error\" , \"Failed to send OTP. Please try again.\" ); } finally { setIsPending ( false ); } }; const verifyOtp = async () => { if ( ! otp . trim ()) { Alert . alert ( \"Error\" , \"Please enter the OTP code\" ); return ; } setIsPending ( true ); try { const oneTimeSecret = await crossmintAuth ?. confirmEmailOtp ( email , emailId , otp ); await createAuthSession ( oneTimeSecret ); } catch ( error ) { Alert . alert ( \"Error\" , \"Invalid OTP code. Please try again.\" ); } finally { setIsPending ( false ); } }; const handleLogout = async () => { try { logout (); // Reset login state setEmail ( \"\" ); setEmailId ( \"\" ); setOtpSent ( false ); setOtp ( \"\" ); } catch ( error ) { Alert . alert ( \"Error\" , \"Failed to logout. Please try again.\" ); } }; // Loading state if ( status === \"initializing\" ) { return ( < View style = { { flex: 1 , justifyContent: \"center\" , alignItems: \"center\" } } > < ActivityIndicator size = \"large\" /> < Text > Initializing... </ Text > </ View > ); } // Login screen if ( status === \"logged-out\" ) { return ( < View style = { { flex: 1 , padding: 20 , justifyContent: \"center\" } } > < Text style = { { fontSize: 24 , marginBottom: 20 , textAlign: \"center\" } } > Login </ Text > < TextInput style = { { borderWidth: 1 , padding: 10 , marginBottom: 10 } } placeholder = \"Enter your email\" value = { email } onChangeText = { setEmail } editable = { ! otpSent } /> { ! otpSent ? ( < TouchableOpacity style = { { backgroundColor: \"#05b959\" , padding: 15 , alignItems: \"center\" , } } onPress = { sendOtp } disabled = { isPending } > { isPending ? ( < ActivityIndicator color = \"#fff\" size = \"small\" /> ) : ( < Text style = { { color: \"#fff\" } }",
    "chunk_index": 0,
    "word_count": 1000
  },
  {
    "id": "https://docs.crossmint.com/wallets/quickstarts/react-native#chunk_0",
    "url": "https://docs.crossmint.com/wallets/quickstarts/react-native",
    "title": "React Native SDK | Create and Manage Wallets in Your Frontend",
    "content": "</ Text > < TextInput style = { { borderWidth: 1 , padding: 10 , marginBottom: 10 } } placeholder = \"Enter your email\" value = { email } onChangeText = { setEmail } editable = { ! otpSent } /> { ! otpSent ? ( < TouchableOpacity style = { { backgroundColor: \"#05b959\" , padding: 15 , alignItems: \"center\" , } } onPress = { sendOtp } disabled = { isPending } > { isPending ? ( < ActivityIndicator color = \"#fff\" size = \"small\" /> ) : ( < Text style = { { color: \"#fff\" } } > Send OTP </ Text > ) } </ TouchableOpacity > ) : ( <> < TextInput style = { { borderWidth: 1 , padding: 10 , marginBottom: 10 } } placeholder = \"Enter OTP code\" value = { otp } onChangeText = { setOtp } /> < TouchableOpacity style = { { backgroundColor: \"#05b959\" , padding: 15 , alignItems: \"center\" , marginBottom: 10 , } } onPress = { verifyOtp } disabled = { isPending } > { isPending ? ( < ActivityIndicator color = \"#fff\" size = \"small\" /> ) : ( < Text style = { { color: \"#fff\" } } > Verify OTP </ Text > ) } </ TouchableOpacity > < TouchableOpacity style = { { backgroundColor: \"#ccc\" , padding: 15 , alignItems: \"center\" , } } onPress = { () => setOtpSent ( false ) } disabled = { isPending } > < Text > Back </ Text > </ TouchableOpacity > </> ) } < View style = { { marginVertical: 20 } } > < Text style = { { textAlign: \"center\" , marginBottom: 10 } } > OR </ Text > < TouchableOpacity style = { { backgroundColor: \"#4285f4\" , padding: 15 , alignItems: \"center\" , } } onPress = { () => loginWithOAuth ( \"google\" ) } > < Text style = { { color: \"#fff\" } } > Sign in with Google </ Text > </ TouchableOpacity > </ View > </ View > ); } // Main app screen (logged in) return ( < View style = { { flex: 1 , padding: 20 } } > < View style = { { flexDirection: \"row\" , justifyContent: \"space-between\" , marginBottom: 20 , } } > < Text style = { { fontSize: 20 } } > Welcome! </ Text > < TouchableOpacity onPress = { handleLogout } > < Text style = { { color: \"red\" } } > Logout </ Text > </ TouchableOpacity > </ View > < View style = { { marginBottom: 20 } } > < Text style = { { fontSize: 16 , marginBottom: 5 } } > User Info: </ Text > < Text > Email: { user ?. email } </ Text > < Text > User ID: { user ?. id } </ Text > </ View > { wallet && ( < View style = { { marginBottom: 20 } } > < Text style = { { fontSize: 16 , marginBottom: 5 } } > Wallet Info: </ Text > < Text > Address: { wallet . address } </ Text > </ View > ) } < View > < Text style = { { fontSize: 16 , marginBottom: 10 } } > App Content: </ Text > < Text > You are now logged in and can access your wallet! </ Text > </ View > </ View > ); } ​ Launching in Production For production, the steps are almost identical, but some changes are required: Create a developer account on the production console Create a production client API key on the API Keys page with the API scopes users.create , users.read , wallets.read , wallets.create , wallets:transactions.create , wallets:transactions.sign , wallets:balance.read , wallets.fund Replace your test API key with the production key ​ Learn More Check Balances Check the balance of a wallet. Transfer Tokens Send tokens between wallets. Delegated Signers Add delegated signers to a wallet. ​ Other Links API Reference Deep dive into API reference docs. Talk to an expert Contact our sales team for support. Was this page helpful? Yes No REST API Swift Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 714
  },
  {
    "id": "https://docs.crossmint.com/wallets/quickstarts/restapi#chunk_0",
    "url": "https://docs.crossmint.com/wallets/quickstarts/restapi",
    "title": "REST API | Create and Manage Wallets in Your Backend",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Quickstarts ⚡ REST API Documentation API Reference SDK Reference CLI Solution Guides Changelog Introduction About Crossmint Getting Started Using AI Assistants Platform Wallets Introduction Quickstarts ⚡ React Node.js REST API React Native Swift Kotlin Guides Authentication Introduction Quickstart ⚡ Guides Tokenization (Minting) Introduction Integrate Checkout Introduction Integrate Advanced Topics Launching in Production Learn More Other Links Before you start Set up your project and get an API key. 1 Create a wallet See all supported chains here . curl node.js python Copy Ask AI curl --request POST \\ --url https://staging.crossmint.com/api/2022-06-09/wallets \\ --header 'Content-Type: application/json' \\ --header 'X-API-KEY: <x-api-key>' \\ --data '{ \"type\": \"evm-smart-wallet\", \"config\": { \"adminSigner\": { \"type\": \"evm-keypair\", \"address\": \"0x1234567890123456789012345678901234567890\" } }, \"linkedUser\": \"email:user@example.com\" }' ​ Launching in Production For production, the steps are almost identical, but some changes are required: Create a developer account on the production console Create a production client API key on the API Keys page with the API scopes users.create , users.read , wallets.read , wallets.create , wallets:transactions.create , wallets:transactions.sign , wallets:balance.read , wallets.fund Replace your test API key with the production key ​ Learn More Check Balances Check the balance of a wallet. Transfer Tokens Send tokens between wallets. Delegated Signers Add delegated signers to a wallet. ​ Other Links API Reference Deep dive into API reference docs. Talk to an expert Contact our sales team for support. Was this page helpful? Yes No Node.js React Native Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 255
  },
  {
    "id": "https://docs.crossmint.com/wallets/quickstarts/swift#chunk_0",
    "url": "https://docs.crossmint.com/wallets/quickstarts/swift",
    "title": "Swift SDK | Create and Manage Wallets in Your App",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Quickstarts ⚡ Swift Documentation API Reference SDK Reference CLI Solution Guides Changelog Introduction About Crossmint Getting Started Using AI Assistants Platform Wallets Introduction Quickstarts ⚡ React Node.js REST API React Native Swift Kotlin Guides Authentication Introduction Quickstart ⚡ Guides Tokenization (Minting) Introduction Integrate Checkout Introduction Integrate Advanced Topics Swift SDK is available under private access. Contact us if you need access Was this page helpful? Yes No React Native Kotlin Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 91
  },
  {
    "id": "https://docs.crossmint.com/wallets/signers-and-custody#chunk_0",
    "url": "https://docs.crossmint.com/wallets/signers-and-custody",
    "title": "Crossmint Wallets Signers and custody | Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Introduction Signers and custody Documentation API Reference SDK Reference CLI Solution Guides Changelog Introduction About Crossmint Getting Started Using AI Assistants Platform Wallets Introduction Overview Architecture Signers and custody Quickstarts ⚡ Guides Authentication Introduction Quickstart ⚡ Guides Tokenization (Minting) Introduction Integrate Checkout Introduction Integrate Advanced Topics Choosing a signer type Signer types Email, phone number, and social login Configuration Passkey Configuration External wallet Configuration API key Configuration A signer is a digital identity authorized to approve actions on the wallet’s behalf. When a transaction is initiated, the signer digitally signs it, thereby authorizing and enabling its execution. Crossmint supports the following signer types : Email , phone number , or social login Passkey External wallet API key ​ Choosing a signer type Signer types will define the custody and user experience of a wallet. Signer type Custody User experience Email, phone number, social login Non-custodial Users authenticate once per device the first time they are going to transact. Future transactions can happen without needing user interaction. Passkey Non-custodial Transactions need to be signed every time with the device biometrics or password manager. External Wallet Non-custodial or custodial depending on who has access to the wallet. Transactions need to be signed every time with the external wallet. API Key Custodial All transactions can happen without needing user interaction. If you use a non-custodial signer and a custodial signer at the same time, the wallet will be considered custodial. Choose custodial signers if: You are licensed for custody You are building use cases that don’t require custody, such as collectibles or utility token management You want to handle asset management and transactions on behalf of users You need a simple, server-side solution without user interaction for blockchain operations Choose non-custodial signers if: You are building use cases that require license (e.g. holding stablecoins) and you don’t have it Self custody is important to your users ​ Signer types ​ Email, phone number, and social login Phone number and social login signers are available under private access. Contact us if you need access. Email, phone number, and social login signers enable users to access their wallets and perform transactions seamlessly using their email address, phone number, or social account. Users just need to verify their email address, phone number, or social account once per device to access their wallet. How does it work? This signer type uses a master secret generated inside a Trusted Execution Environment (TEE) that runs open-source, verifiable code. This master secret is never stored or exposed outside the TEE and is protected by user-controlled credentials, such as email authentication. Once created, the master secret is split into two parts using Shamir Secret Sharing: a device share (stored securely on the users device) and an auth share (stored on Crossmint’s backend). Both shares are required to reconstruct the master secret, and this only happens locally within a secure enclave on the user’s device. When a user wants to sign a transaction, the host application sends a request to a secure iframe. The device share and the auth share are combined within this local secure environment to reconstruct the master secret, derive the necessary keypair, and produce the signature. At no point do the host application or Crossmint have access to the full master secret or the private key; the signing process and key management are isolated from both parties, ensuring that sensitive cryptographic material is never exposed. Is this signer type non-custodial? Yes, this system is considered non-custodial because neither the host application nor Crossmint can unilaterally access or control the user’s keys. The host application never sees the key shares or the master secret, and Crossmint only holds one share, which is useless on its own. The code running in the TEE is publicly verifiable and tamper-proof, and all sensitive operations occur within secure, user-controlled environments. This guarantees that only the user, through their device and authentication, can authorize transactions, maintaining true user custody over their cryptographic keys. ​ Configuration React Node.js React Native Copy Ask AI import { useWallet } from '@crossmint/client-sdk-react-ui' ; const { getOrCreateWallet } = useWallet (); const wallet = await getOrCreateWallet ({ chain: \"<your-chain>\" , signer: { type: \"email\" , }, }); ​ Passkey Passkeys enable users to access their wallets and perform transactions using their device biometrics or password manager. They are built on top of the WebAuthn standard and are supported by most modern browsers. ​ Configuration React Node.js React Native Copy Ask AI import { useWallet } from '@crossmint/client-sdk-react-ui' ; const { getOrCreateWallet } = useWallet (); const wallet = await getOrCreateWallet ({ chain: \"solana\" , signer: { type: \"passkey\" , }, }); ​ External wallet External wallets (or keypairs) can be used as signers to access and transact with a wallet. This includes also wallets ​ Configuration React Node.js React Native Copy Ask AI import { useWallet } from '@crossmint/client-sdk-react-ui' ; const { getOrCreateWallet } = useWallet (); const wallet = await getOrCreateWallet ({ chain: \"<your-chain>\" , signer: { type: \"external-wallet\" , address: \"<your-wallet-address>\" , }, }); ​ API key A project’s API key can also be used as a signer for your wallet. This allows transacting with a wallet without needing the user to sign at any point. ​ Configuration React Node.js React Native Copy Ask AI import { useWallet } from '@crossmint/client-sdk-react-ui' ; const { getOrCreateWallet } = useWallet (); const wallet = await getOrCreateWallet ({ chain: \"<your-chain>\" , signer: { type: \"api-key\" , }, }); Was this page helpful? Yes No Architecture React Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 937
  },
  {
    "id": "https://docs.crossmint.com/wallets/wallet-actions/borrow#chunk_0",
    "url": "https://docs.crossmint.com/wallets/wallet-actions/borrow",
    "title": "Borrow | Crossmint Wallet APIs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Wallet Actions Borrow Documentation API Reference SDK Reference CLI Solution Guides Changelog Introduction About Crossmint Getting Started Using AI Assistants Platform Wallets Introduction Quickstarts ⚡ Guides Wallet Actions Create Wallet Check Balances Transfer Tokens Send Transaction Sign Message Delegated Signers Generate Yield Borrow Advanced Authentication Introduction Quickstart ⚡ Guides Tokenization (Minting) Introduction Integrate Checkout Introduction Integrate Advanced Topics Borrowing is available under private access. Contact us if you need access Was this page helpful? Yes No Generate Yield Bring Your Own Auth Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 103
  },
  {
    "id": "https://docs.crossmint.com/wallets/wallet-actions/check-balances#chunk_0",
    "url": "https://docs.crossmint.com/wallets/wallet-actions/check-balances",
    "title": "Check Balances | Crossmint Wallet APIs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Wallet Actions Check Balances Documentation API Reference SDK Reference CLI Solution Guides Changelog Introduction About Crossmint Getting Started Using AI Assistants Platform Wallets Introduction Quickstarts ⚡ Guides Wallet Actions Create Wallet Check Balances Transfer Tokens Send Transaction Sign Message Delegated Signers Generate Yield Borrow Advanced Authentication Introduction Quickstart ⚡ Guides Tokenization (Minting) Introduction Integrate Checkout Introduction Integrate Advanced Topics Token Balances NFT Balances ​ Prerequisites Ensure you have a wallet created. API Key : Ensure you have an API key with the scopes: wallets.read and wallets:balance.read . ​ Retrieving Wallet Balances React Node.js React Native Swift Copy Ask AI import { useWallet } from '@crossmint/client-sdk-react-ui' ; const { wallet } = useWallet (); const { nativeToken , usdc , tokens } = await wallet . balances ( tokens ); ​ Parameters ​ tokens string[] The tokens to get the balances for. This can be a token symbol or a token address. ​ Returns ​ balances Balances The balances of the wallet. Show properties ​ nativeToken TokenBalance The native token balance. Show properties ​ amount string The amount of the token in decimal format (e.g. \"42.69\"). ​ rawAmount string The amount of the token in its smallest indivisible unit (e.g. 1000000 for 1 USDC when decimals = 6). ​ name string The name of the token (e.g. USD Coin, Ether, etc.). ​ symbol string The symbol of the token (e.g. USDC, ETH, etc.). ​ contractAddress string The contract address of the token. ​ decimals number The number of digits after the decimal point (e.g. 6 for USDC). rawAmount divided by 10 to the power of decimals gives the amount . ​ usdc TokenBalance The USDC balance. Show properties ​ amount string The amount of the token in decimal format (e.g. \"42.69\"). ​ rawAmount string The amount of the token in its smallest indivisible unit (e.g. 1000000 for 1 USDC when decimals = 6). ​ name string The name of the token (e.g. USD Coin, Ether, etc.). ​ symbol string The symbol of the token (e.g. USDC, ETH, etc.). ​ contractAddress string The contract address of the token. ​ decimals number The number of digits after the decimal point (e.g. 6 for USDC). rawAmount divided by 10 to the power of decimals gives the amount . ​ tokens TokenBalance[] The tokens balances. Show properties ​ amount string The amount of the token in decimal format (e.g. \"42.69\"). ​ rawAmount string The amount of the token in its smallest indivisible unit (e.g. 1000000 for 1 USDC when decimals = 6). ​ name string The name of the token (e.g. USD Coin, Ether, etc.). ​ symbol string The symbol of the token (e.g. USDC, ETH, etc.). ​ contractAddress string The contract address of the token. ​ decimals number The number of digits after the decimal point (e.g. 6 for USDC). rawAmount divided by 10 to the power of decimals gives the amount . Was this page helpful? Yes No Create Wallet Transfer Tokens Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 510
  },
  {
    "id": "https://docs.crossmint.com/wallets/wallet-actions/create-wallet#chunk_0",
    "url": "https://docs.crossmint.com/wallets/wallet-actions/create-wallet",
    "title": "Create Wallet | Crossmint Wallet APIs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Wallet Actions Create Wallet Documentation API Reference SDK Reference CLI Solution Guides Changelog Introduction About Crossmint Getting Started Using AI Assistants Platform Wallets Introduction Quickstarts ⚡ Guides Wallet Actions Create Wallet Check Balances Transfer Tokens Send Transaction Sign Message Delegated Signers Generate Yield Borrow Advanced Authentication Introduction Quickstart ⚡ Guides Tokenization (Minting) Introduction Integrate Checkout Introduction Integrate Advanced Topics Prerequisites Create a Wallet ​ Prerequisites API Key : Ensure you have an API key with the scopes: wallets.create . ​ Create a Wallet React Node.js React Native Swift Copy Ask AI import { useWallet } from '@crossmint/client-sdk-react-ui' ; const { getOrCreateWallet } = useWallet (); const wallet = await getOrCreateWallet ({ chain: \"<your-chain>\" , signer: { type: \"<signer-type>\" , }, }); ​ Parameters ​ chain string required The chain to use the wallet on. See all supported chains for more details. On staging only testnet chains are supported. Note: For EVM-compatible chains, wallets are created for all chains as part of the shared address space derived from the same private key. However, to interact with a specific chain using the SDK, you must instantiate a wallet object per chain. This allows the SDK to correctly route interactions to the appropriate network configuration. ​ signer Signer required The signer to use the wallet with. ​ owner string An identifier for the user this wallet is associated with. You can fetch wallets later by this user. email:<email> userId:<userId> phoneNumber:<phoneNumber> twitter:<handle> x:<handle> (alias for twitter:<handle> ) ​ options WalletOptions The options to use the wallet with. Show experimental_callbacks A set of callbacks to be called when the wallet is created or a transaction is initiated. Show properties ​ onWalletCreationStart function A function to be called when the wallet is about to be created. ​ onTransactionStart function A function to be called when a transaction is initiated. ​ Returns ​ wallet Wallet The created wallet. Was this page helpful? Yes No Kotlin Check Balances Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 341
  },
  {
    "id": "https://docs.crossmint.com/wallets/wallet-actions/delegated-signers#chunk_0",
    "url": "https://docs.crossmint.com/wallets/wallet-actions/delegated-signers",
    "title": "Create a Delegated Signer for your Wallet | Crossmint Docs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Wallet Actions Delegated Signers Documentation API Reference SDK Reference CLI Solution Guides Changelog Introduction About Crossmint Getting Started Using AI Assistants Platform Wallets Introduction Quickstarts ⚡ Guides Wallet Actions Create Wallet Check Balances Transfer Tokens Send Transaction Sign Message Delegated Signers Generate Yield Borrow Advanced Authentication Introduction Quickstart ⚡ Guides Tokenization (Minting) Introduction Integrate Checkout Introduction Integrate Advanced Topics Prerequisites Adding a delegated signer Getting all delegated signers Adding delegated signers with expiration date Permissions Available Permissions Token Transfers Gas Limit Call Limit Give third parties the possibility to transact with your wallet. Always maintain control over what that key can do with tight permissions and being able to revoke them at any time. ​ Prerequisites Ensure you have a wallet created. API Key : Ensure you have an API key with the scopes: wallets:signatures.create and wallets:transactions.create . ​ Adding a delegated signer React Node.js React Native Swift Copy Ask AI import { useWallet } from '@crossmint/client-sdk-react-ui' ; const { wallet } = useWallet (); await wallet . addDelegatedSigner ({ signer: externalSigner , }); ​ Parameters ​ signer string | object required The locator of the signer to add. ​ Getting all delegated signers React Node.js React Native Swift Copy Ask AI import { useWallet } from '@crossmint/client-sdk-react-ui' ; const { wallet } = useWallet (); const signers = await wallet . delegatedSigners (); ​ Returns ​ signers DelegatedSigner[] The delegated signers. Show properties ​ signer string The locator of the signer. ​ Adding delegated signers with expiration date React Node.js React Native Swift Copy Ask AI import { useWallet } from '@crossmint/client-sdk-react-ui' ; const { wallet } = useWallet (); await wallet . addDelegatedSigner ({ signer: externalSigner , expiresAt: new Date ( Date . now () + 1000 * 60 * 60 * 24 * 30 ). getTime (), }); ​ Parameters ​ signer string | object required The locator of the signer to add. ​ expiresAt number The expiration date of the delegated signer. ​ Permissions Permissions are available under private access. Contact us if you need access React Node.js React Native Swift Copy Ask AI import { useWallet } from '@crossmint/client-sdk-react-ui' ; const { wallet } = useWallet (); await wallet . addDelegatedSigner ({ signer: externalSigner , permissions: permissions , }); ​ Parameters ​ signer string | object required The locator of the signer to add. ​ permissions Permission[] The permissions to add. ​ Available Permissions ​ Token Transfers Copy Ask AI const permissions = [ { type: \"token-transfer\" , data: { allowance: allowance , token: tokenLocator , }, }, ]; ​ Gas Limit Copy Ask AI const permissions = [ { type: \"gas-limit\" , data: { limit: limit , // Maximum gas in decimal string }, }, ]; ​ Call Limit Copy Ask AI const permissions = [ { type: \"call-limit\" , data: { count: count , // Maximum number of calls }, }, ]; Was this page helpful? Yes No Solana Generate Yield Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 509
  },
  {
    "id": "https://docs.crossmint.com/wallets/wallet-actions/generate-yield#chunk_0",
    "url": "https://docs.crossmint.com/wallets/wallet-actions/generate-yield",
    "title": "Generate Yield | Crossmint Wallet APIs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Wallet Actions Generate Yield Documentation API Reference SDK Reference CLI Solution Guides Changelog Introduction About Crossmint Getting Started Using AI Assistants Platform Wallets Introduction Quickstarts ⚡ Guides Wallet Actions Create Wallet Check Balances Transfer Tokens Send Transaction Sign Message Delegated Signers Generate Yield Borrow Advanced Authentication Introduction Quickstart ⚡ Guides Tokenization (Minting) Introduction Integrate Checkout Introduction Integrate Advanced Topics Prerequisites Listing yields Staking Unstaking Staking is available under private access. Contact us if you need access ​ Prerequisites Ensure you have a wallet created. API Key : Ensure you have an API key with the scopes: wallets:transactions.create . ​ Listing yields List available yield opportunities for a wallet. React Node.js React Native Swift Copy Ask AI import { useWallet } from '@crossmint/client-sdk-react-ui' ; const { wallet } = useWallet (); const yields = await wallet . experimental_yields ( tokens ); ​ Parameters ​ tokens string[] The tokens to generate yield for. ​ Returns ​ yields Yield[] The yields. ​ Staking Stake to earn yield. React Node.js React Native Swift Copy Ask AI import { useWallet } from '@crossmint/client-sdk-react-ui' ; const { wallet } = useWallet (); const { hash , explorerLink } = await wallet . experimental_stake ( tokenLocator , amount ); ​ Parameters ​ tokenLocator string The token locator to stake. ​ amount string The amount to stake. ​ Returns ​ hash string The hash of the transaction. ​ explorerLink string The explorer link of the transaction. ​ Unstaking Unstake from the yield. React Node.js React Native Swift Copy Ask AI import { useWallet } from '@crossmint/client-sdk-react-ui' ; const { wallet } = useWallet (); const { hash , explorerLink } = await wallet . experimental_unstake ( tokenLocator , amount ); ​ Parameters ​ tokenLocator string The token locator to unstake. ​ amount string The amount to unstake. ​ Returns ​ hash string The hash of the transaction. ​ explorerLink string The explorer link of the transaction. Was this page helpful? Yes No Delegated Signers Borrow Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 348
  },
  {
    "id": "https://docs.crossmint.com/wallets/wallet-actions/send-transaction-evm#chunk_0",
    "url": "https://docs.crossmint.com/wallets/wallet-actions/send-transaction-evm",
    "title": "EVM Transactions | Crossmint Wallet APIs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Send Transaction EVM Documentation API Reference SDK Reference CLI Solution Guides Changelog Introduction About Crossmint Getting Started Using AI Assistants Platform Wallets Introduction Quickstarts ⚡ Guides Wallet Actions Create Wallet Check Balances Transfer Tokens Send Transaction EVM Solana Sign Message Delegated Signers Generate Yield Borrow Advanced Authentication Introduction Quickstart ⚡ Guides Tokenization (Minting) Introduction Integrate Checkout Introduction Integrate Advanced Topics Prerequisites Sending a Transaction ​ Prerequisites Ensure you have a wallet created. API Key : Ensure you have an API key with the scopes: wallets:transactions.create . ​ Sending a Transaction React Node.js React Native Swift Copy Ask AI import { useWallet , EVMWallet } from '@crossmint/client-sdk-react-ui' ; const { wallet } = useWallet (); const evmWallet = EVMWallet . from ( wallet ); const { hash , explorerLink } = await evmWallet . sendTransaction ({ to: '0x...' , value: '0x1234abcd...' , data: '0x1234abcd...' , }); ​ Parameters ​ transaction EVMTransactionInput required The transaction to send. ​ Returns ​ hash string The hash of the transaction. ​ explorerLink string The explorer link of the transaction. Was this page helpful? Yes No Transfer Tokens Solana Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 204
  },
  {
    "id": "https://docs.crossmint.com/wallets/wallet-actions/send-transaction-solana#chunk_0",
    "url": "https://docs.crossmint.com/wallets/wallet-actions/send-transaction-solana",
    "title": "Solana Transactions | Crossmint Wallet APIs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Send Transaction Solana Documentation API Reference SDK Reference CLI Solution Guides Changelog Introduction About Crossmint Getting Started Using AI Assistants Platform Wallets Introduction Quickstarts ⚡ Guides Wallet Actions Create Wallet Check Balances Transfer Tokens Send Transaction EVM Solana Sign Message Delegated Signers Generate Yield Borrow Advanced Authentication Introduction Quickstart ⚡ Guides Tokenization (Minting) Introduction Integrate Checkout Introduction Integrate Advanced Topics Prerequisites Sending a Transaction ​ Prerequisites Ensure you have a wallet created. API Key : Ensure you have an API key with the scopes: wallets:transactions.create . ​ Sending a Transaction React Node.js React Native Swift Copy Ask AI import { useWallet , SolanaWallet } from '@crossmint/client-sdk-react-ui' ; const { wallet } = useWallet (); const solanaWallet = SolanaWallet . from ( wallet ); const { hash , explorerLink } = await solanaWallet . sendTransaction ({ transaction: versionedTransaction , additionalSigners: additionalSigners , }); ​ Parameters ​ transaction VersionedTransaction required The transaction to send. ​ additionalSigners Signer[] The additional signers to sign the transaction with. ​ Returns ​ hash string The hash of the transaction. ​ explorerLink string The explorer link of the transaction. Was this page helpful? Yes No EVM EVM Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 211
  },
  {
    "id": "https://docs.crossmint.com/wallets/wallet-actions/sign-message-evm#chunk_0",
    "url": "https://docs.crossmint.com/wallets/wallet-actions/sign-message-evm",
    "title": "EVM Signing | Crossmint Wallet APIs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Sign Message EVM Documentation API Reference SDK Reference CLI Solution Guides Changelog Introduction About Crossmint Getting Started Using AI Assistants Platform Wallets Introduction Quickstarts ⚡ Guides Wallet Actions Create Wallet Check Balances Transfer Tokens Send Transaction Sign Message EVM Solana Delegated Signers Generate Yield Borrow Advanced Authentication Introduction Quickstart ⚡ Guides Tokenization (Minting) Introduction Integrate Checkout Introduction Integrate Advanced Topics Prerequisites Signing a Message Signing Typed Data ​ Prerequisites Ensure you have a wallet created. API Key : Ensure you have an API key with the scopes: wallets:signatures.create . ​ Signing a Message React Node.js React Native Swift Copy Ask AI import { useWallet , EVMWallet } from '@crossmint/client-sdk-react-ui' ; const { wallet } = useWallet (); const evmWallet = EVMWallet . from ( wallet ); const signedMessage = await evmWallet . signMessage ( message ); ​ Parameters ​ message string required The message to sign. ​ Returns ​ signature string The signature of the message. ​ Signing Typed Data React Node.js React Native Swift Copy Ask AI import { useWallet , EVMWallet } from '@crossmint/client-sdk-react-ui' ; const { wallet } = useWallet (); const evmWallet = EVMWallet . from ( wallet ); const signedMessage = await evmWallet . signTypedData ( typedData ); ​ Parameters ​ typedData TypedData required The typed data to sign. ​ Returns ​ signature string The signature of the message. Was this page helpful? Yes No Solana Solana Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 253
  },
  {
    "id": "https://docs.crossmint.com/wallets/wallet-actions/sign-message-solana#chunk_0",
    "url": "https://docs.crossmint.com/wallets/wallet-actions/sign-message-solana",
    "title": "Solana Signing | Crossmint Wallet APIs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Sign Message Solana Documentation API Reference SDK Reference CLI Solution Guides Changelog Introduction About Crossmint Getting Started Using AI Assistants Platform Wallets Introduction Quickstarts ⚡ Guides Wallet Actions Create Wallet Check Balances Transfer Tokens Send Transaction Sign Message EVM Solana Delegated Signers Generate Yield Borrow Advanced Authentication Introduction Quickstart ⚡ Guides Tokenization (Minting) Introduction Integrate Checkout Introduction Integrate Advanced Topics Solana signing is not yet supported in Solana smart wallets. Was this page helpful? Yes No EVM Delegated Signers Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 100
  },
  {
    "id": "https://docs.crossmint.com/wallets/wallet-actions/transfer-tokens#chunk_0",
    "url": "https://docs.crossmint.com/wallets/wallet-actions/transfer-tokens",
    "title": "Transfer Tokens | Crossmint Wallet APIs",
    "content": "Crossmint Docs home page Search... ⌘ K Ask AI Search... Navigation Wallet Actions Transfer Tokens Documentation API Reference SDK Reference CLI Solution Guides Changelog Introduction About Crossmint Getting Started Using AI Assistants Platform Wallets Introduction Quickstarts ⚡ Guides Wallet Actions Create Wallet Check Balances Transfer Tokens Send Transaction Sign Message Delegated Signers Generate Yield Borrow Advanced Authentication Introduction Quickstart ⚡ Guides Tokenization (Minting) Introduction Integrate Checkout Introduction Integrate Advanced Topics Prerequisites Sending tokens ​ Prerequisites Ensure you have a wallet created. API Key : Ensure you have an API key with the scopes: wallets:transactions.create . ​ Sending tokens React Node.js React Native Swift Copy Ask AI import { useWallet } from '@crossmint/client-sdk-react-ui' ; const { wallet } = useWallet (); const { hash , explorerLink } = await wallet . send ( walletLocator , tokenLocator , amount ); ​ Parameters ​ walletLocator string required The recipient of the tokens, represented by a wallet locator. A wallet locator can be of the format: <walletAddress> email:<email>:<walletType> userId:<userId>:<walletType> userId:<userId>:<walletType> (white label user example) phoneNumber:<phoneNumber>:<walletType> twitter:<handle>:<walletType> x:<handle>:<walletType> ​ tokenLocator string required The token to be transferred, represented as a token locator. A token locator that supports native tokens, fungible tokens, and NFTs across different chains. It can be of the format: address[:tokenId] symbol ​ amount string required The amount of tokens to send in decimal format (e.g. 42.69 ). ​ Returns ​ hash string The hash of the transaction. ​ explorerLink string The explorer link of the transaction. Was this page helpful? Yes No Check Balances EVM Assistant Responses are generated using AI and may contain mistakes.",
    "chunk_index": 0,
    "word_count": 263
  }
]